
Midi_Audio-Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d508  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001728  0800d6d8  0800d6d8  0001d6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee00  0800ee00  000201b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee00  0800ee00  0001ee00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee08  0800ee08  000201b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee08  0800ee08  0001ee08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee0c  0800ee0c  0001ee0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b8  20000000  0800ee10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000240c  200001b8  0800efc8  000201b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200025c4  0800efc8  000225c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026b82  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005072  00000000  00000000  00046d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001cb0  00000000  00000000  0004bde0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a60  00000000  00000000  0004da90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002723e  00000000  00000000  0004f4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c0b8  00000000  00000000  0007672e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0f81  00000000  00000000  000927e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00163767  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080ac  00000000  00000000  001637e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001b8 	.word	0x200001b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d6c0 	.word	0x0800d6c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001bc 	.word	0x200001bc
 800020c:	0800d6c0 	.word	0x0800d6c0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <HAL_Init+0x40>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <HAL_Init+0x40>)
 80005ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <HAL_Init+0x40>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a0a      	ldr	r2, [pc, #40]	; (80005f0 <HAL_Init+0x40>)
 80005c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <HAL_Init+0x40>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <HAL_Init+0x40>)
 80005d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d8:	2003      	movs	r0, #3
 80005da:	f000 fce7 	bl	8000fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 f808 	bl	80005f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e4:	f00a fc96 	bl	800af14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023c00 	.word	0x40023c00

080005f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_InitTick+0x54>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <HAL_InitTick+0x58>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4619      	mov	r1, r3
 8000606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060a:	fbb3 f3f1 	udiv	r3, r3, r1
 800060e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fcff 	bl	8001016 <HAL_SYSTICK_Config>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
 8000620:	e00e      	b.n	8000640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b0f      	cmp	r3, #15
 8000626:	d80a      	bhi.n	800063e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000628:	2200      	movs	r2, #0
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000630:	f000 fcc7 	bl	8000fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000634:	4a06      	ldr	r2, [pc, #24]	; (8000650 <HAL_InitTick+0x5c>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800063a:	2300      	movs	r3, #0
 800063c:	e000      	b.n	8000640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000d4 	.word	0x200000d4
 800064c:	20000004 	.word	0x20000004
 8000650:	20000000 	.word	0x20000000

08000654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_IncTick+0x20>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_IncTick+0x24>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4413      	add	r3, r2
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <HAL_IncTick+0x24>)
 8000666:	6013      	str	r3, [r2, #0]
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000004 	.word	0x20000004
 8000678:	20000784 	.word	0x20000784

0800067c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  return uwTick;
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <HAL_GetTick+0x14>)
 8000682:	681b      	ldr	r3, [r3, #0]
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000784 	.word	0x20000784

08000694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800069c:	f7ff ffee 	bl	800067c <HAL_GetTick>
 80006a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006ac:	d005      	beq.n	80006ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <HAL_Delay+0x40>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4413      	add	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006ba:	bf00      	nop
 80006bc:	f7ff ffde 	bl	800067c <HAL_GetTick>
 80006c0:	4602      	mov	r2, r0
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d8f7      	bhi.n	80006bc <HAL_Delay+0x28>
  {
  }
}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000004 	.word	0x20000004

080006d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006e0:	2300      	movs	r3, #0
 80006e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d101      	bne.n	80006ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80006ea:	2301      	movs	r3, #1
 80006ec:	e033      	b.n	8000756 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d109      	bne.n	800070a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f00a fc34 	bl	800af64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2200      	movs	r2, #0
 8000706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070e:	f003 0310 	and.w	r3, r3, #16
 8000712:	2b00      	cmp	r3, #0
 8000714:	d118      	bne.n	8000748 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800071e:	f023 0302 	bic.w	r3, r3, #2
 8000722:	f043 0202 	orr.w	r2, r3, #2
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f000 fa72 	bl	8000c14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2200      	movs	r2, #0
 8000734:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	f023 0303 	bic.w	r3, r3, #3
 800073e:	f043 0201 	orr.w	r2, r3, #1
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	641a      	str	r2, [r3, #64]	; 0x40
 8000746:	e001      	b.n	800074c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000748:	2301      	movs	r3, #1
 800074a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2200      	movs	r2, #0
 8000750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000754:	7bfb      	ldrb	r3, [r7, #15]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000772:	2b01      	cmp	r3, #1
 8000774:	d101      	bne.n	800077a <HAL_ADC_Start+0x1a>
 8000776:	2302      	movs	r3, #2
 8000778:	e08a      	b.n	8000890 <HAL_ADC_Start+0x130>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2201      	movs	r2, #1
 800077e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	2b01      	cmp	r3, #1
 800078e:	d018      	beq.n	80007c2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	689a      	ldr	r2, [r3, #8]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f042 0201 	orr.w	r2, r2, #1
 800079e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80007a0:	4b3e      	ldr	r3, [pc, #248]	; (800089c <HAL_ADC_Start+0x13c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a3e      	ldr	r2, [pc, #248]	; (80008a0 <HAL_ADC_Start+0x140>)
 80007a6:	fba2 2303 	umull	r2, r3, r2, r3
 80007aa:	0c9a      	lsrs	r2, r3, #18
 80007ac:	4613      	mov	r3, r2
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	4413      	add	r3, r2
 80007b2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80007b4:	e002      	b.n	80007bc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d1f9      	bne.n	80007b6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	689b      	ldr	r3, [r3, #8]
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d15e      	bne.n	800088e <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007d8:	f023 0301 	bic.w	r3, r3, #1
 80007dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d007      	beq.n	8000802 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800080a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800080e:	d106      	bne.n	800081e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000814:	f023 0206 	bic.w	r2, r3, #6
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	645a      	str	r2, [r3, #68]	; 0x44
 800081c:	e002      	b.n	8000824 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800082c:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <HAL_ADC_Start+0x144>)
 800082e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000838:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	f003 031f 	and.w	r3, r3, #31
 8000842:	2b00      	cmp	r3, #0
 8000844:	d10f      	bne.n	8000866 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000850:	2b00      	cmp	r3, #0
 8000852:	d11c      	bne.n	800088e <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	689a      	ldr	r2, [r3, #8]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	e013      	b.n	800088e <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <HAL_ADC_Start+0x148>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d10e      	bne.n	800088e <HAL_ADC_Start+0x12e>
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800087a:	2b00      	cmp	r3, #0
 800087c:	d107      	bne.n	800088e <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	689a      	ldr	r2, [r3, #8]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800088c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800088e:	2300      	movs	r3, #0
}
 8000890:	4618      	mov	r0, r3
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	200000d4 	.word	0x200000d4
 80008a0:	431bde83 	.word	0x431bde83
 80008a4:	40012300 	.word	0x40012300
 80008a8:	40012000 	.word	0x40012000

080008ac <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008c8:	d113      	bne.n	80008f2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008d8:	d10b      	bne.n	80008f2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	f043 0220 	orr.w	r2, r3, #32
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2200      	movs	r2, #0
 80008ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e05c      	b.n	80009ac <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80008f2:	f7ff fec3 	bl	800067c <HAL_GetTick>
 80008f6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80008f8:	e01a      	b.n	8000930 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000900:	d016      	beq.n	8000930 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d007      	beq.n	8000918 <HAL_ADC_PollForConversion+0x6c>
 8000908:	f7ff feb8 	bl	800067c <HAL_GetTick>
 800090c:	4602      	mov	r2, r0
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	683a      	ldr	r2, [r7, #0]
 8000914:	429a      	cmp	r2, r3
 8000916:	d20b      	bcs.n	8000930 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	f043 0204 	orr.w	r2, r3, #4
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2200      	movs	r2, #0
 8000928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800092c:	2303      	movs	r3, #3
 800092e:	e03d      	b.n	80009ac <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	2b02      	cmp	r3, #2
 800093c:	d1dd      	bne.n	80008fa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f06f 0212 	mvn.w	r2, #18
 8000946:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800095e:	2b00      	cmp	r3, #0
 8000960:	d123      	bne.n	80009aa <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000966:	2b00      	cmp	r3, #0
 8000968:	d11f      	bne.n	80009aa <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000970:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000974:	2b00      	cmp	r3, #0
 8000976:	d006      	beq.n	8000986 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000982:	2b00      	cmp	r3, #0
 8000984:	d111      	bne.n	80009aa <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d105      	bne.n	80009aa <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	f043 0201 	orr.w	r2, r3, #1
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
	...

080009d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d101      	bne.n	80009ec <HAL_ADC_ConfigChannel+0x1c>
 80009e8:	2302      	movs	r3, #2
 80009ea:	e105      	b.n	8000bf8 <HAL_ADC_ConfigChannel+0x228>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2201      	movs	r2, #1
 80009f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b09      	cmp	r3, #9
 80009fa:	d925      	bls.n	8000a48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	68d9      	ldr	r1, [r3, #12]
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	4413      	add	r3, r2
 8000a10:	3b1e      	subs	r3, #30
 8000a12:	2207      	movs	r2, #7
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	43da      	mvns	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	400a      	ands	r2, r1
 8000a20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	68d9      	ldr	r1, [r3, #12]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	689a      	ldr	r2, [r3, #8]
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	4603      	mov	r3, r0
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	4403      	add	r3, r0
 8000a3a:	3b1e      	subs	r3, #30
 8000a3c:	409a      	lsls	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	430a      	orrs	r2, r1
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	e022      	b.n	8000a8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	6919      	ldr	r1, [r3, #16]
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	461a      	mov	r2, r3
 8000a56:	4613      	mov	r3, r2
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	4413      	add	r3, r2
 8000a5c:	2207      	movs	r2, #7
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43da      	mvns	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	400a      	ands	r2, r1
 8000a6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	6919      	ldr	r1, [r3, #16]
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	689a      	ldr	r2, [r3, #8]
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	4603      	mov	r3, r0
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	4403      	add	r3, r0
 8000a84:	409a      	lsls	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d824      	bhi.n	8000ae0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685a      	ldr	r2, [r3, #4]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	4413      	add	r3, r2
 8000aa6:	3b05      	subs	r3, #5
 8000aa8:	221f      	movs	r2, #31
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43da      	mvns	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	400a      	ands	r2, r1
 8000ab6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685a      	ldr	r2, [r3, #4]
 8000aca:	4613      	mov	r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	4413      	add	r3, r2
 8000ad0:	3b05      	subs	r3, #5
 8000ad2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	430a      	orrs	r2, r1
 8000adc:	635a      	str	r2, [r3, #52]	; 0x34
 8000ade:	e04c      	b.n	8000b7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2b0c      	cmp	r3, #12
 8000ae6:	d824      	bhi.n	8000b32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685a      	ldr	r2, [r3, #4]
 8000af2:	4613      	mov	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	4413      	add	r3, r2
 8000af8:	3b23      	subs	r3, #35	; 0x23
 8000afa:	221f      	movs	r2, #31
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	43da      	mvns	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	400a      	ands	r2, r1
 8000b08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685a      	ldr	r2, [r3, #4]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	4413      	add	r3, r2
 8000b22:	3b23      	subs	r3, #35	; 0x23
 8000b24:	fa00 f203 	lsl.w	r2, r0, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	631a      	str	r2, [r3, #48]	; 0x30
 8000b30:	e023      	b.n	8000b7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4413      	add	r3, r2
 8000b42:	3b41      	subs	r3, #65	; 0x41
 8000b44:	221f      	movs	r2, #31
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	400a      	ands	r2, r1
 8000b52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	4618      	mov	r0, r3
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	4613      	mov	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	4413      	add	r3, r2
 8000b6c:	3b41      	subs	r3, #65	; 0x41
 8000b6e:	fa00 f203 	lsl.w	r2, r0, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	430a      	orrs	r2, r1
 8000b78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b7a:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <HAL_ADC_ConfigChannel+0x234>)
 8000b7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a21      	ldr	r2, [pc, #132]	; (8000c08 <HAL_ADC_ConfigChannel+0x238>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d109      	bne.n	8000b9c <HAL_ADC_ConfigChannel+0x1cc>
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b12      	cmp	r3, #18
 8000b8e:	d105      	bne.n	8000b9c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a19      	ldr	r2, [pc, #100]	; (8000c08 <HAL_ADC_ConfigChannel+0x238>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d123      	bne.n	8000bee <HAL_ADC_ConfigChannel+0x21e>
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b10      	cmp	r3, #16
 8000bac:	d003      	beq.n	8000bb6 <HAL_ADC_ConfigChannel+0x1e6>
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b11      	cmp	r3, #17
 8000bb4:	d11b      	bne.n	8000bee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b10      	cmp	r3, #16
 8000bc8:	d111      	bne.n	8000bee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <HAL_ADC_ConfigChannel+0x23c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a10      	ldr	r2, [pc, #64]	; (8000c10 <HAL_ADC_ConfigChannel+0x240>)
 8000bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd4:	0c9a      	lsrs	r2, r3, #18
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	4413      	add	r3, r2
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000be0:	e002      	b.n	8000be8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1f9      	bne.n	8000be2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	40012300 	.word	0x40012300
 8000c08:	40012000 	.word	0x40012000
 8000c0c:	200000d4 	.word	0x200000d4
 8000c10:	431bde83 	.word	0x431bde83

08000c14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c1c:	4b79      	ldr	r3, [pc, #484]	; (8000e04 <ADC_Init+0x1f0>)
 8000c1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	431a      	orrs	r2, r3
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	685a      	ldr	r2, [r3, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	6859      	ldr	r1, [r3, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	691b      	ldr	r3, [r3, #16]
 8000c54:	021a      	lsls	r2, r3, #8
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000c6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	6859      	ldr	r1, [r3, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	6899      	ldr	r1, [r3, #8]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	68da      	ldr	r2, [r3, #12]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca6:	4a58      	ldr	r2, [pc, #352]	; (8000e08 <ADC_Init+0x1f4>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d022      	beq.n	8000cf2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	689a      	ldr	r2, [r3, #8]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000cba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	6899      	ldr	r1, [r3, #8]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	689a      	ldr	r2, [r3, #8]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000cdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	6899      	ldr	r1, [r3, #8]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	430a      	orrs	r2, r1
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	e00f      	b.n	8000d12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f022 0202 	bic.w	r2, r2, #2
 8000d20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	6899      	ldr	r1, [r3, #8]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	7e1b      	ldrb	r3, [r3, #24]
 8000d2c:	005a      	lsls	r2, r3, #1
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	430a      	orrs	r2, r1
 8000d34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d01b      	beq.n	8000d78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000d5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6859      	ldr	r1, [r3, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	035a      	lsls	r2, r3, #13
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	430a      	orrs	r2, r1
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	e007      	b.n	8000d88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000d96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	051a      	lsls	r2, r3, #20
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	430a      	orrs	r2, r1
 8000dac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	689a      	ldr	r2, [r3, #8]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000dbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	6899      	ldr	r1, [r3, #8]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000dca:	025a      	lsls	r2, r3, #9
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000de2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6899      	ldr	r1, [r3, #8]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	029a      	lsls	r2, r3, #10
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	609a      	str	r2, [r3, #8]
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	40012300 	.word	0x40012300
 8000e08:	0f000001 	.word	0x0f000001

08000e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3e:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	60d3      	str	r3, [r2, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <__NVIC_GetPriorityGrouping+0x18>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	f003 0307 	and.w	r3, r3, #7
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	db0b      	blt.n	8000e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f003 021f 	and.w	r2, r3, #31
 8000e88:	4907      	ldr	r1, [pc, #28]	; (8000ea8 <__NVIC_EnableIRQ+0x38>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	2001      	movs	r0, #1
 8000e92:	fa00 f202 	lsl.w	r2, r0, r2
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000e100 	.word	0xe000e100

08000eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	; (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	; (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
         );
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	; 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f78:	d301      	bcc.n	8000f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00f      	b.n	8000f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <SysTick_Config+0x40>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f86:	210f      	movs	r1, #15
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f8c:	f7ff ff8e 	bl	8000eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <SysTick_Config+0x40>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f96:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <SysTick_Config+0x40>)
 8000f98:	2207      	movs	r2, #7
 8000f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	e000e010 	.word	0xe000e010

08000fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ff29 	bl	8000e0c <__NVIC_SetPriorityGrouping>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd4:	f7ff ff3e 	bl	8000e54 <__NVIC_GetPriorityGrouping>
 8000fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68b9      	ldr	r1, [r7, #8]
 8000fde:	6978      	ldr	r0, [r7, #20]
 8000fe0:	f7ff ff8e 	bl	8000f00 <NVIC_EncodePriority>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff5d 	bl	8000eac <__NVIC_SetPriority>
}
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff31 	bl	8000e70 <__NVIC_EnableIRQ>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ffa2 	bl	8000f68 <SysTick_Config>
 8001024:	4603      	mov	r3, r0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800103c:	f7ff fb1e 	bl	800067c <HAL_GetTick>
 8001040:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d101      	bne.n	800104c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e099      	b.n	8001180 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2202      	movs	r2, #2
 8001058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0201 	bic.w	r2, r2, #1
 800106a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800106c:	e00f      	b.n	800108e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800106e:	f7ff fb05 	bl	800067c <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b05      	cmp	r3, #5
 800107a:	d908      	bls.n	800108e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2220      	movs	r2, #32
 8001080:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2203      	movs	r2, #3
 8001086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e078      	b.n	8001180 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1e8      	bne.n	800106e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	4b38      	ldr	r3, [pc, #224]	; (8001188 <HAL_DMA_Init+0x158>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	4313      	orrs	r3, r2
 80010de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e4:	2b04      	cmp	r3, #4
 80010e6:	d107      	bne.n	80010f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f0:	4313      	orrs	r3, r2
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f023 0307 	bic.w	r3, r3, #7
 800110e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	4313      	orrs	r3, r2
 8001118:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	2b04      	cmp	r3, #4
 8001120:	d117      	bne.n	8001152 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	4313      	orrs	r3, r2
 800112a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00e      	beq.n	8001152 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 fa6f 	bl	8001618 <DMA_CheckFifoParam>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d008      	beq.n	8001152 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2240      	movs	r2, #64	; 0x40
 8001144:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800114e:	2301      	movs	r3, #1
 8001150:	e016      	b.n	8001180 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 fa26 	bl	80015ac <DMA_CalcBaseAndBitshift>
 8001160:	4603      	mov	r3, r0
 8001162:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001168:	223f      	movs	r2, #63	; 0x3f
 800116a:	409a      	lsls	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	f010803f 	.word	0xf010803f

0800118c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d101      	bne.n	80011b2 <HAL_DMA_Start_IT+0x26>
 80011ae:	2302      	movs	r3, #2
 80011b0:	e040      	b.n	8001234 <HAL_DMA_Start_IT+0xa8>
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2201      	movs	r2, #1
 80011b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d12f      	bne.n	8001226 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2202      	movs	r2, #2
 80011ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2200      	movs	r2, #0
 80011d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68b9      	ldr	r1, [r7, #8]
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f000 f9b8 	bl	8001550 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e4:	223f      	movs	r2, #63	; 0x3f
 80011e6:	409a      	lsls	r2, r3
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 0216 	orr.w	r2, r2, #22
 80011fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	2b00      	cmp	r3, #0
 8001202:	d007      	beq.n	8001214 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f042 0208 	orr.w	r2, r2, #8
 8001212:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f042 0201 	orr.w	r2, r2, #1
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	e005      	b.n	8001232 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800122e:	2302      	movs	r3, #2
 8001230:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001232:	7dfb      	ldrb	r3, [r7, #23]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001248:	4b92      	ldr	r3, [pc, #584]	; (8001494 <HAL_DMA_IRQHandler+0x258>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a92      	ldr	r2, [pc, #584]	; (8001498 <HAL_DMA_IRQHandler+0x25c>)
 800124e:	fba2 2303 	umull	r2, r3, r2, r3
 8001252:	0a9b      	lsrs	r3, r3, #10
 8001254:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001266:	2208      	movs	r2, #8
 8001268:	409a      	lsls	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4013      	ands	r3, r2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d01a      	beq.n	80012a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	2b00      	cmp	r3, #0
 800127e:	d013      	beq.n	80012a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 0204 	bic.w	r2, r2, #4
 800128e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001294:	2208      	movs	r2, #8
 8001296:	409a      	lsls	r2, r3
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a0:	f043 0201 	orr.w	r2, r3, #1
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ac:	2201      	movs	r2, #1
 80012ae:	409a      	lsls	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4013      	ands	r3, r2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d012      	beq.n	80012de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00b      	beq.n	80012de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ca:	2201      	movs	r2, #1
 80012cc:	409a      	lsls	r2, r3
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d6:	f043 0202 	orr.w	r2, r3, #2
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e2:	2204      	movs	r2, #4
 80012e4:	409a      	lsls	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4013      	ands	r3, r2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d012      	beq.n	8001314 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00b      	beq.n	8001314 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001300:	2204      	movs	r2, #4
 8001302:	409a      	lsls	r2, r3
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800130c:	f043 0204 	orr.w	r2, r3, #4
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001318:	2210      	movs	r2, #16
 800131a:	409a      	lsls	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4013      	ands	r3, r2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d043      	beq.n	80013ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	d03c      	beq.n	80013ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001336:	2210      	movs	r2, #16
 8001338:	409a      	lsls	r2, r3
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d018      	beq.n	800137e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d108      	bne.n	800136c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	2b00      	cmp	r3, #0
 8001360:	d024      	beq.n	80013ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	4798      	blx	r3
 800136a:	e01f      	b.n	80013ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001370:	2b00      	cmp	r3, #0
 8001372:	d01b      	beq.n	80013ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	4798      	blx	r3
 800137c:	e016      	b.n	80013ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001388:	2b00      	cmp	r3, #0
 800138a:	d107      	bne.n	800139c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 0208 	bic.w	r2, r2, #8
 800139a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b0:	2220      	movs	r2, #32
 80013b2:	409a      	lsls	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4013      	ands	r3, r2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 808e 	beq.w	80014da <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0310 	and.w	r3, r3, #16
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 8086 	beq.w	80014da <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d2:	2220      	movs	r2, #32
 80013d4:	409a      	lsls	r2, r3
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b05      	cmp	r3, #5
 80013e4:	d136      	bne.n	8001454 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0216 	bic.w	r2, r2, #22
 80013f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	695a      	ldr	r2, [r3, #20]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001404:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	2b00      	cmp	r3, #0
 800140c:	d103      	bne.n	8001416 <HAL_DMA_IRQHandler+0x1da>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001412:	2b00      	cmp	r3, #0
 8001414:	d007      	beq.n	8001426 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0208 	bic.w	r2, r2, #8
 8001424:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142a:	223f      	movs	r2, #63	; 0x3f
 800142c:	409a      	lsls	r2, r3
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001446:	2b00      	cmp	r3, #0
 8001448:	d07d      	beq.n	8001546 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	4798      	blx	r3
        }
        return;
 8001452:	e078      	b.n	8001546 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d01c      	beq.n	800149c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d108      	bne.n	8001482 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001474:	2b00      	cmp	r3, #0
 8001476:	d030      	beq.n	80014da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	4798      	blx	r3
 8001480:	e02b      	b.n	80014da <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001486:	2b00      	cmp	r3, #0
 8001488:	d027      	beq.n	80014da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	4798      	blx	r3
 8001492:	e022      	b.n	80014da <HAL_DMA_IRQHandler+0x29e>
 8001494:	200000d4 	.word	0x200000d4
 8001498:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10f      	bne.n	80014ca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 0210 	bic.w	r2, r2, #16
 80014b8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d032      	beq.n	8001548 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d022      	beq.n	8001534 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2205      	movs	r2, #5
 80014f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0201 	bic.w	r2, r2, #1
 8001504:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	3301      	adds	r3, #1
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	429a      	cmp	r2, r3
 8001510:	d307      	bcc.n	8001522 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1f2      	bne.n	8001506 <HAL_DMA_IRQHandler+0x2ca>
 8001520:	e000      	b.n	8001524 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001522:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	4798      	blx	r3
 8001544:	e000      	b.n	8001548 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001546:	bf00      	nop
    }
  }
}
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop

08001550 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
 800155c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800156c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b40      	cmp	r3, #64	; 0x40
 800157c:	d108      	bne.n	8001590 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800158e:	e007      	b.n	80015a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	60da      	str	r2, [r3, #12]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	3b10      	subs	r3, #16
 80015bc:	4a14      	ldr	r2, [pc, #80]	; (8001610 <DMA_CalcBaseAndBitshift+0x64>)
 80015be:	fba2 2303 	umull	r2, r3, r2, r3
 80015c2:	091b      	lsrs	r3, r3, #4
 80015c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015c6:	4a13      	ldr	r2, [pc, #76]	; (8001614 <DMA_CalcBaseAndBitshift+0x68>)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4413      	add	r3, r2
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d909      	bls.n	80015ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015e2:	f023 0303 	bic.w	r3, r3, #3
 80015e6:	1d1a      	adds	r2, r3, #4
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	659a      	str	r2, [r3, #88]	; 0x58
 80015ec:	e007      	b.n	80015fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015f6:	f023 0303 	bic.w	r3, r3, #3
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	aaaaaaab 	.word	0xaaaaaaab
 8001614:	0800d800 	.word	0x0800d800

08001618 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d11f      	bne.n	8001672 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2b03      	cmp	r3, #3
 8001636:	d855      	bhi.n	80016e4 <DMA_CheckFifoParam+0xcc>
 8001638:	a201      	add	r2, pc, #4	; (adr r2, 8001640 <DMA_CheckFifoParam+0x28>)
 800163a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163e:	bf00      	nop
 8001640:	08001651 	.word	0x08001651
 8001644:	08001663 	.word	0x08001663
 8001648:	08001651 	.word	0x08001651
 800164c:	080016e5 	.word	0x080016e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d045      	beq.n	80016e8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001660:	e042      	b.n	80016e8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001666:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800166a:	d13f      	bne.n	80016ec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001670:	e03c      	b.n	80016ec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800167a:	d121      	bne.n	80016c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	2b03      	cmp	r3, #3
 8001680:	d836      	bhi.n	80016f0 <DMA_CheckFifoParam+0xd8>
 8001682:	a201      	add	r2, pc, #4	; (adr r2, 8001688 <DMA_CheckFifoParam+0x70>)
 8001684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001688:	08001699 	.word	0x08001699
 800168c:	0800169f 	.word	0x0800169f
 8001690:	08001699 	.word	0x08001699
 8001694:	080016b1 	.word	0x080016b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
      break;
 800169c:	e02f      	b.n	80016fe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d024      	beq.n	80016f4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016ae:	e021      	b.n	80016f4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016b8:	d11e      	bne.n	80016f8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016be:	e01b      	b.n	80016f8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d902      	bls.n	80016cc <DMA_CheckFifoParam+0xb4>
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d003      	beq.n	80016d2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016ca:	e018      	b.n	80016fe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
      break;
 80016d0:	e015      	b.n	80016fe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00e      	beq.n	80016fc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
      break;
 80016e2:	e00b      	b.n	80016fc <DMA_CheckFifoParam+0xe4>
      break;
 80016e4:	bf00      	nop
 80016e6:	e00a      	b.n	80016fe <DMA_CheckFifoParam+0xe6>
      break;
 80016e8:	bf00      	nop
 80016ea:	e008      	b.n	80016fe <DMA_CheckFifoParam+0xe6>
      break;
 80016ec:	bf00      	nop
 80016ee:	e006      	b.n	80016fe <DMA_CheckFifoParam+0xe6>
      break;
 80016f0:	bf00      	nop
 80016f2:	e004      	b.n	80016fe <DMA_CheckFifoParam+0xe6>
      break;
 80016f4:	bf00      	nop
 80016f6:	e002      	b.n	80016fe <DMA_CheckFifoParam+0xe6>
      break;   
 80016f8:	bf00      	nop
 80016fa:	e000      	b.n	80016fe <DMA_CheckFifoParam+0xe6>
      break;
 80016fc:	bf00      	nop
    }
  } 
  
  return status; 
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
 8001726:	e153      	b.n	80019d0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001728:	2201      	movs	r2, #1
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	429a      	cmp	r2, r3
 8001742:	f040 8142 	bne.w	80019ca <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d00b      	beq.n	8001766 <HAL_GPIO_Init+0x5a>
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d007      	beq.n	8001766 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800175a:	2b11      	cmp	r3, #17
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b12      	cmp	r3, #18
 8001764:	d130      	bne.n	80017c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	2203      	movs	r2, #3
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800179c:	2201      	movs	r2, #1
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	f003 0201 	and.w	r2, r3, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	2203      	movs	r2, #3
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0xfc>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b12      	cmp	r3, #18
 8001806:	d123      	bne.n	8001850 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	08da      	lsrs	r2, r3, #3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3208      	adds	r2, #8
 8001810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	220f      	movs	r2, #15
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	08da      	lsrs	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3208      	adds	r2, #8
 800184a:	69b9      	ldr	r1, [r7, #24]
 800184c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0203 	and.w	r2, r3, #3
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 809c 	beq.w	80019ca <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b53      	ldr	r3, [pc, #332]	; (80019e4 <HAL_GPIO_Init+0x2d8>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	4a52      	ldr	r2, [pc, #328]	; (80019e4 <HAL_GPIO_Init+0x2d8>)
 800189c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a0:	6453      	str	r3, [r2, #68]	; 0x44
 80018a2:	4b50      	ldr	r3, [pc, #320]	; (80019e4 <HAL_GPIO_Init+0x2d8>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ae:	4a4e      	ldr	r2, [pc, #312]	; (80019e8 <HAL_GPIO_Init+0x2dc>)
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	089b      	lsrs	r3, r3, #2
 80018b4:	3302      	adds	r3, #2
 80018b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	220f      	movs	r2, #15
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a45      	ldr	r2, [pc, #276]	; (80019ec <HAL_GPIO_Init+0x2e0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d013      	beq.n	8001902 <HAL_GPIO_Init+0x1f6>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a44      	ldr	r2, [pc, #272]	; (80019f0 <HAL_GPIO_Init+0x2e4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00d      	beq.n	80018fe <HAL_GPIO_Init+0x1f2>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a43      	ldr	r2, [pc, #268]	; (80019f4 <HAL_GPIO_Init+0x2e8>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d007      	beq.n	80018fa <HAL_GPIO_Init+0x1ee>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a42      	ldr	r2, [pc, #264]	; (80019f8 <HAL_GPIO_Init+0x2ec>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d101      	bne.n	80018f6 <HAL_GPIO_Init+0x1ea>
 80018f2:	2303      	movs	r3, #3
 80018f4:	e006      	b.n	8001904 <HAL_GPIO_Init+0x1f8>
 80018f6:	2307      	movs	r3, #7
 80018f8:	e004      	b.n	8001904 <HAL_GPIO_Init+0x1f8>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e002      	b.n	8001904 <HAL_GPIO_Init+0x1f8>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <HAL_GPIO_Init+0x1f8>
 8001902:	2300      	movs	r3, #0
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	f002 0203 	and.w	r2, r2, #3
 800190a:	0092      	lsls	r2, r2, #2
 800190c:	4093      	lsls	r3, r2
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001914:	4934      	ldr	r1, [pc, #208]	; (80019e8 <HAL_GPIO_Init+0x2dc>)
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	3302      	adds	r3, #2
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001922:	4b36      	ldr	r3, [pc, #216]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001946:	4a2d      	ldr	r2, [pc, #180]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800194c:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001970:	4a22      	ldr	r2, [pc, #136]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001976:	4b21      	ldr	r3, [pc, #132]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	43db      	mvns	r3, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800199a:	4a18      	ldr	r2, [pc, #96]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019a0:	4b16      	ldr	r3, [pc, #88]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019c4:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3301      	adds	r3, #1
 80019ce:	61fb      	str	r3, [r7, #28]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	2b0f      	cmp	r3, #15
 80019d4:	f67f aea8 	bls.w	8001728 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019d8:	bf00      	nop
 80019da:	3724      	adds	r7, #36	; 0x24
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40013800 	.word	0x40013800
 80019ec:	40020000 	.word	0x40020000
 80019f0:	40020400 	.word	0x40020400
 80019f4:	40020800 	.word	0x40020800
 80019f8:	40020c00 	.word	0x40020c00
 80019fc:	40013c00 	.word	0x40013c00

08001a00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691a      	ldr	r2, [r3, #16]
 8001a10:	887b      	ldrh	r3, [r7, #2]
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d002      	beq.n	8001a1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	e001      	b.n	8001a22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	807b      	strh	r3, [r7, #2]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a40:	787b      	ldrb	r3, [r7, #1]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a46:	887a      	ldrh	r2, [r7, #2]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a4c:	e003      	b.n	8001a56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a4e:	887b      	ldrh	r3, [r7, #2]
 8001a50:	041a      	lsls	r2, r3, #16
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	619a      	str	r2, [r3, #24]
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a6e:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a70:	695a      	ldr	r2, [r3, #20]
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d006      	beq.n	8001a88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a7a:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f00a fb12 	bl	800c0ac <HAL_GPIO_EXTI_Callback>
  }
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40013c00 	.word	0x40013c00

08001a94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e11f      	b.n	8001ce6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d106      	bne.n	8001ac0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f009 fa96 	bl	800afec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2224      	movs	r2, #36	; 0x24
 8001ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0201 	bic.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ae6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001af6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001af8:	f002 ffb4 	bl	8004a64 <HAL_RCC_GetPCLK1Freq>
 8001afc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4a7b      	ldr	r2, [pc, #492]	; (8001cf0 <HAL_I2C_Init+0x25c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d807      	bhi.n	8001b18 <HAL_I2C_Init+0x84>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4a7a      	ldr	r2, [pc, #488]	; (8001cf4 <HAL_I2C_Init+0x260>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	bf94      	ite	ls
 8001b10:	2301      	movls	r3, #1
 8001b12:	2300      	movhi	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	e006      	b.n	8001b26 <HAL_I2C_Init+0x92>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4a77      	ldr	r2, [pc, #476]	; (8001cf8 <HAL_I2C_Init+0x264>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	bf94      	ite	ls
 8001b20:	2301      	movls	r3, #1
 8001b22:	2300      	movhi	r3, #0
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e0db      	b.n	8001ce6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4a72      	ldr	r2, [pc, #456]	; (8001cfc <HAL_I2C_Init+0x268>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	0c9b      	lsrs	r3, r3, #18
 8001b38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	4a64      	ldr	r2, [pc, #400]	; (8001cf0 <HAL_I2C_Init+0x25c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d802      	bhi.n	8001b68 <HAL_I2C_Init+0xd4>
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	3301      	adds	r3, #1
 8001b66:	e009      	b.n	8001b7c <HAL_I2C_Init+0xe8>
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b6e:	fb02 f303 	mul.w	r3, r2, r3
 8001b72:	4a63      	ldr	r2, [pc, #396]	; (8001d00 <HAL_I2C_Init+0x26c>)
 8001b74:	fba2 2303 	umull	r2, r3, r2, r3
 8001b78:	099b      	lsrs	r3, r3, #6
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	430b      	orrs	r3, r1
 8001b82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4956      	ldr	r1, [pc, #344]	; (8001cf0 <HAL_I2C_Init+0x25c>)
 8001b98:	428b      	cmp	r3, r1
 8001b9a:	d80d      	bhi.n	8001bb8 <HAL_I2C_Init+0x124>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1e59      	subs	r1, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001baa:	3301      	adds	r3, #1
 8001bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	bf38      	it	cc
 8001bb4:	2304      	movcc	r3, #4
 8001bb6:	e04f      	b.n	8001c58 <HAL_I2C_Init+0x1c4>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d111      	bne.n	8001be4 <HAL_I2C_Init+0x150>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	1e58      	subs	r0, r3, #1
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6859      	ldr	r1, [r3, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	440b      	add	r3, r1
 8001bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	bf0c      	ite	eq
 8001bdc:	2301      	moveq	r3, #1
 8001bde:	2300      	movne	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	e012      	b.n	8001c0a <HAL_I2C_Init+0x176>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1e58      	subs	r0, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6859      	ldr	r1, [r3, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	0099      	lsls	r1, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	bf0c      	ite	eq
 8001c04:	2301      	moveq	r3, #1
 8001c06:	2300      	movne	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_I2C_Init+0x17e>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e022      	b.n	8001c58 <HAL_I2C_Init+0x1c4>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10e      	bne.n	8001c38 <HAL_I2C_Init+0x1a4>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1e58      	subs	r0, r3, #1
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6859      	ldr	r1, [r3, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	440b      	add	r3, r1
 8001c28:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c36:	e00f      	b.n	8001c58 <HAL_I2C_Init+0x1c4>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1e58      	subs	r0, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6859      	ldr	r1, [r3, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	0099      	lsls	r1, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c4e:	3301      	adds	r3, #1
 8001c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	6809      	ldr	r1, [r1, #0]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69da      	ldr	r2, [r3, #28]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6911      	ldr	r1, [r2, #16]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	68d2      	ldr	r2, [r2, #12]
 8001c92:	4311      	orrs	r1, r2
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	430b      	orrs	r3, r1
 8001c9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695a      	ldr	r2, [r3, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0201 	orr.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	000186a0 	.word	0x000186a0
 8001cf4:	001e847f 	.word	0x001e847f
 8001cf8:	003d08ff 	.word	0x003d08ff
 8001cfc:	431bde83 	.word	0x431bde83
 8001d00:	10624dd3 	.word	0x10624dd3

08001d04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	4608      	mov	r0, r1
 8001d0e:	4611      	mov	r1, r2
 8001d10:	461a      	mov	r2, r3
 8001d12:	4603      	mov	r3, r0
 8001d14:	817b      	strh	r3, [r7, #10]
 8001d16:	460b      	mov	r3, r1
 8001d18:	813b      	strh	r3, [r7, #8]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d1e:	f7fe fcad 	bl	800067c <HAL_GetTick>
 8001d22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b20      	cmp	r3, #32
 8001d2e:	f040 80d9 	bne.w	8001ee4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2319      	movs	r3, #25
 8001d38:	2201      	movs	r2, #1
 8001d3a:	496d      	ldr	r1, [pc, #436]	; (8001ef0 <HAL_I2C_Mem_Write+0x1ec>)
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f000 f971 	bl	8002024 <I2C_WaitOnFlagUntilTimeout>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e0cc      	b.n	8001ee6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d101      	bne.n	8001d5a <HAL_I2C_Mem_Write+0x56>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e0c5      	b.n	8001ee6 <HAL_I2C_Mem_Write+0x1e2>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d007      	beq.n	8001d80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0201 	orr.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2221      	movs	r2, #33	; 0x21
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2240      	movs	r2, #64	; 0x40
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a3a      	ldr	r2, [r7, #32]
 8001daa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001db0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4a4d      	ldr	r2, [pc, #308]	; (8001ef4 <HAL_I2C_Mem_Write+0x1f0>)
 8001dc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dc2:	88f8      	ldrh	r0, [r7, #6]
 8001dc4:	893a      	ldrh	r2, [r7, #8]
 8001dc6:	8979      	ldrh	r1, [r7, #10]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	9301      	str	r3, [sp, #4]
 8001dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 f890 	bl	8001ef8 <I2C_RequestMemoryWrite>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d052      	beq.n	8001e84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e081      	b.n	8001ee6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 f9f2 	bl	80021d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00d      	beq.n	8001e0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d107      	bne.n	8001e0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e06b      	b.n	8001ee6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	781a      	ldrb	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d11b      	bne.n	8001e84 <HAL_I2C_Mem_Write+0x180>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d017      	beq.n	8001e84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	781a      	ldrb	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1aa      	bne.n	8001de2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f000 f9de 	bl	8002252 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00d      	beq.n	8001eb8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d107      	bne.n	8001eb4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e016      	b.n	8001ee6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e000      	b.n	8001ee6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001ee4:	2302      	movs	r3, #2
  }
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	00100002 	.word	0x00100002
 8001ef4:	ffff0000 	.word	0xffff0000

08001ef8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af02      	add	r7, sp, #8
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	4608      	mov	r0, r1
 8001f02:	4611      	mov	r1, r2
 8001f04:	461a      	mov	r2, r3
 8001f06:	4603      	mov	r3, r0
 8001f08:	817b      	strh	r3, [r7, #10]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	813b      	strh	r3, [r7, #8]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 f878 	bl	8002024 <I2C_WaitOnFlagUntilTimeout>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00d      	beq.n	8001f56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f48:	d103      	bne.n	8001f52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e05f      	b.n	8002016 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f56:	897b      	ldrh	r3, [r7, #10]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	6a3a      	ldr	r2, [r7, #32]
 8001f6a:	492d      	ldr	r1, [pc, #180]	; (8002020 <I2C_RequestMemoryWrite+0x128>)
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 f8b0 	bl	80020d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e04c      	b.n	8002016 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f94:	6a39      	ldr	r1, [r7, #32]
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 f91a 	bl	80021d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00d      	beq.n	8001fbe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d107      	bne.n	8001fba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e02b      	b.n	8002016 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d105      	bne.n	8001fd0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fc4:	893b      	ldrh	r3, [r7, #8]
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	611a      	str	r2, [r3, #16]
 8001fce:	e021      	b.n	8002014 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001fd0:	893b      	ldrh	r3, [r7, #8]
 8001fd2:	0a1b      	lsrs	r3, r3, #8
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe0:	6a39      	ldr	r1, [r7, #32]
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f000 f8f4 	bl	80021d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00d      	beq.n	800200a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d107      	bne.n	8002006 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002004:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e005      	b.n	8002016 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800200a:	893b      	ldrh	r3, [r7, #8]
 800200c:	b2da      	uxtb	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	00010002 	.word	0x00010002

08002024 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	4613      	mov	r3, r2
 8002032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002034:	e025      	b.n	8002082 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800203c:	d021      	beq.n	8002082 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800203e:	f7fe fb1d 	bl	800067c <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d302      	bcc.n	8002054 <I2C_WaitOnFlagUntilTimeout+0x30>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d116      	bne.n	8002082 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2220      	movs	r2, #32
 800205e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f043 0220 	orr.w	r2, r3, #32
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e023      	b.n	80020ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	0c1b      	lsrs	r3, r3, #16
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b01      	cmp	r3, #1
 800208a:	d10d      	bne.n	80020a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	43da      	mvns	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	4013      	ands	r3, r2
 8002098:	b29b      	uxth	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	bf0c      	ite	eq
 800209e:	2301      	moveq	r3, #1
 80020a0:	2300      	movne	r3, #0
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	461a      	mov	r2, r3
 80020a6:	e00c      	b.n	80020c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	43da      	mvns	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	4013      	ands	r3, r2
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf0c      	ite	eq
 80020ba:	2301      	moveq	r3, #1
 80020bc:	2300      	movne	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d0b6      	beq.n	8002036 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b084      	sub	sp, #16
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020e0:	e051      	b.n	8002186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f0:	d123      	bne.n	800213a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002100:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800210a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2220      	movs	r2, #32
 8002116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f043 0204 	orr.w	r2, r3, #4
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e046      	b.n	80021c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002140:	d021      	beq.n	8002186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002142:	f7fe fa9b 	bl	800067c <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	429a      	cmp	r2, r3
 8002150:	d302      	bcc.n	8002158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d116      	bne.n	8002186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2220      	movs	r2, #32
 8002162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f043 0220 	orr.w	r2, r3, #32
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e020      	b.n	80021c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	0c1b      	lsrs	r3, r3, #16
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b01      	cmp	r3, #1
 800218e:	d10c      	bne.n	80021aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	43da      	mvns	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	4013      	ands	r3, r2
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	bf14      	ite	ne
 80021a2:	2301      	movne	r3, #1
 80021a4:	2300      	moveq	r3, #0
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	e00b      	b.n	80021c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	43da      	mvns	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	4013      	ands	r3, r2
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	bf14      	ite	ne
 80021bc:	2301      	movne	r3, #1
 80021be:	2300      	moveq	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d18d      	bne.n	80020e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021dc:	e02d      	b.n	800223a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 f878 	bl	80022d4 <I2C_IsAcknowledgeFailed>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e02d      	b.n	800224a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021f4:	d021      	beq.n	800223a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f6:	f7fe fa41 	bl	800067c <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	429a      	cmp	r2, r3
 8002204:	d302      	bcc.n	800220c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d116      	bne.n	800223a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2220      	movs	r2, #32
 8002216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f043 0220 	orr.w	r2, r3, #32
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e007      	b.n	800224a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002244:	2b80      	cmp	r3, #128	; 0x80
 8002246:	d1ca      	bne.n	80021de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800225e:	e02d      	b.n	80022bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 f837 	bl	80022d4 <I2C_IsAcknowledgeFailed>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e02d      	b.n	80022cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002276:	d021      	beq.n	80022bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002278:	f7fe fa00 	bl	800067c <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	429a      	cmp	r2, r3
 8002286:	d302      	bcc.n	800228e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d116      	bne.n	80022bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	f043 0220 	orr.w	r2, r3, #32
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e007      	b.n	80022cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d1ca      	bne.n	8002260 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ea:	d11b      	bne.n	8002324 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	f043 0204 	orr.w	r2, r3, #4
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e154      	b.n	80025f0 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a98      	ldr	r2, [pc, #608]	; (80025c0 <HAL_I2S_Init+0x28c>)
 800235e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f008 fee3 	bl	800b12c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2202      	movs	r2, #2
 800236a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800237c:	f023 030f 	bic.w	r3, r3, #15
 8002380:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2202      	movs	r2, #2
 8002388:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d06f      	beq.n	8002472 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d102      	bne.n	80023a0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800239a:	2310      	movs	r3, #16
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	e001      	b.n	80023a4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80023a0:	2320      	movs	r3, #32
 80023a2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d802      	bhi.n	80023b2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a83      	ldr	r2, [pc, #524]	; (80025c4 <HAL_I2S_Init+0x290>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d004      	beq.n	80023c6 <HAL_I2S_Init+0x92>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a81      	ldr	r2, [pc, #516]	; (80025c8 <HAL_I2S_Init+0x294>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d104      	bne.n	80023d0 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80023c6:	2001      	movs	r0, #1
 80023c8:	f002 fd42 	bl	8004e50 <HAL_RCCEx_GetPeriphCLKFreq>
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	e003      	b.n	80023d8 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80023d0:	2002      	movs	r0, #2
 80023d2:	f002 fd3d 	bl	8004e50 <HAL_RCCEx_GetPeriphCLKFreq>
 80023d6:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023e0:	d125      	bne.n	800242e <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d010      	beq.n	800240c <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	461a      	mov	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	fbb2 f3f3 	udiv	r3, r2, r3
 8002406:	3305      	adds	r3, #5
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	e01f      	b.n	800244c <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	fbb2 f2f3 	udiv	r2, r2, r3
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	461a      	mov	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	fbb2 f3f3 	udiv	r3, r2, r3
 8002428:	3305      	adds	r3, #5
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	e00e      	b.n	800244c <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	fbb2 f2f3 	udiv	r2, r2, r3
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	461a      	mov	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	fbb2 f3f3 	udiv	r3, r2, r3
 8002448:	3305      	adds	r3, #5
 800244a:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4a5f      	ldr	r2, [pc, #380]	; (80025cc <HAL_I2S_Init+0x298>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	08db      	lsrs	r3, r3, #3
 8002456:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	085b      	lsrs	r3, r3, #1
 8002468:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	021b      	lsls	r3, r3, #8
 800246e:	61bb      	str	r3, [r7, #24]
 8002470:	e003      	b.n	800247a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002472:	2302      	movs	r3, #2
 8002474:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d902      	bls.n	8002486 <HAL_I2S_Init+0x152>
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	2bff      	cmp	r3, #255	; 0xff
 8002484:	d907      	bls.n	8002496 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	f043 0210 	orr.w	r2, r3, #16
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e0ac      	b.n	80025f0 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	ea42 0103 	orr.w	r1, r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80024b4:	f023 030f 	bic.w	r3, r3, #15
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6851      	ldr	r1, [r2, #4]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6892      	ldr	r2, [r2, #8]
 80024c0:	4311      	orrs	r1, r2
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68d2      	ldr	r2, [r2, #12]
 80024c6:	4311      	orrs	r1, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6992      	ldr	r2, [r2, #24]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024d8:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b30      	cmp	r3, #48	; 0x30
 80024e0:	d003      	beq.n	80024ea <HAL_I2S_Init+0x1b6>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2bb0      	cmp	r3, #176	; 0xb0
 80024e8:	d107      	bne.n	80024fa <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	69da      	ldr	r2, [r3, #28]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024f8:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d16e      	bne.n	80025e0 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a32      	ldr	r2, [pc, #200]	; (80025d0 <HAL_I2S_Init+0x29c>)
 8002506:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a2d      	ldr	r2, [pc, #180]	; (80025c4 <HAL_I2S_Init+0x290>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d101      	bne.n	8002516 <HAL_I2S_Init+0x1e2>
 8002512:	4b30      	ldr	r3, [pc, #192]	; (80025d4 <HAL_I2S_Init+0x2a0>)
 8002514:	e001      	b.n	800251a <HAL_I2S_Init+0x1e6>
 8002516:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	4928      	ldr	r1, [pc, #160]	; (80025c4 <HAL_I2S_Init+0x290>)
 8002522:	428a      	cmp	r2, r1
 8002524:	d101      	bne.n	800252a <HAL_I2S_Init+0x1f6>
 8002526:	4a2b      	ldr	r2, [pc, #172]	; (80025d4 <HAL_I2S_Init+0x2a0>)
 8002528:	e001      	b.n	800252e <HAL_I2S_Init+0x1fa>
 800252a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800252e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002532:	f023 030f 	bic.w	r3, r3, #15
 8002536:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a21      	ldr	r2, [pc, #132]	; (80025c4 <HAL_I2S_Init+0x290>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d101      	bne.n	8002546 <HAL_I2S_Init+0x212>
 8002542:	4b24      	ldr	r3, [pc, #144]	; (80025d4 <HAL_I2S_Init+0x2a0>)
 8002544:	e001      	b.n	800254a <HAL_I2S_Init+0x216>
 8002546:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800254a:	2202      	movs	r2, #2
 800254c:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1c      	ldr	r2, [pc, #112]	; (80025c4 <HAL_I2S_Init+0x290>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d101      	bne.n	800255c <HAL_I2S_Init+0x228>
 8002558:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <HAL_I2S_Init+0x2a0>)
 800255a:	e001      	b.n	8002560 <HAL_I2S_Init+0x22c>
 800255c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800256c:	d003      	beq.n	8002576 <HAL_I2S_Init+0x242>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d103      	bne.n	800257e <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002576:	f44f 7380 	mov.w	r3, #256	; 0x100
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	e001      	b.n	8002582 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	b299      	uxth	r1, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002598:	4303      	orrs	r3, r0
 800259a:	b29b      	uxth	r3, r3
 800259c:	430b      	orrs	r3, r1
 800259e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80025a0:	4313      	orrs	r3, r2
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	897b      	ldrh	r3, [r7, #10]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025ae:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a03      	ldr	r2, [pc, #12]	; (80025c4 <HAL_I2S_Init+0x290>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d10e      	bne.n	80025d8 <HAL_I2S_Init+0x2a4>
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_I2S_Init+0x2a0>)
 80025bc:	e00e      	b.n	80025dc <HAL_I2S_Init+0x2a8>
 80025be:	bf00      	nop
 80025c0:	080026ef 	.word	0x080026ef
 80025c4:	40003800 	.word	0x40003800
 80025c8:	40003c00 	.word	0x40003c00
 80025cc:	cccccccd 	.word	0xcccccccd
 80025d0:	08002b19 	.word	0x08002b19
 80025d4:	40003400 	.word	0x40003400
 80025d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025dc:	897a      	ldrh	r2, [r7, #10]
 80025de:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3720      	adds	r7, #32
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	881a      	ldrh	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	1c9a      	adds	r2, r3, #2
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002664:	b29b      	uxth	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10e      	bne.n	8002688 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002678:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff ffb8 	bl	80025f8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a2:	b292      	uxth	r2, r2
 80026a4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026aa:	1c9a      	adds	r2, r3, #2
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10e      	bne.n	80026e6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026d6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff ff93 	bl	800260c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b086      	sub	sp, #24
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b04      	cmp	r3, #4
 8002708:	d13a      	bne.n	8002780 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b01      	cmp	r3, #1
 8002712:	d109      	bne.n	8002728 <I2S_IRQHandler+0x3a>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271e:	2b40      	cmp	r3, #64	; 0x40
 8002720:	d102      	bne.n	8002728 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff ffb4 	bl	8002690 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272e:	2b40      	cmp	r3, #64	; 0x40
 8002730:	d126      	bne.n	8002780 <I2S_IRQHandler+0x92>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b20      	cmp	r3, #32
 800273e:	d11f      	bne.n	8002780 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800274e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002750:	2300      	movs	r3, #0
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	f043 0202 	orr.w	r2, r3, #2
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff ff50 	bl	8002620 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b03      	cmp	r3, #3
 800278a:	d136      	bne.n	80027fa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b02      	cmp	r3, #2
 8002794:	d109      	bne.n	80027aa <I2S_IRQHandler+0xbc>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a0:	2b80      	cmp	r3, #128	; 0x80
 80027a2:	d102      	bne.n	80027aa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff ff45 	bl	8002634 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d122      	bne.n	80027fa <I2S_IRQHandler+0x10c>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0320 	and.w	r3, r3, #32
 80027be:	2b20      	cmp	r3, #32
 80027c0:	d11b      	bne.n	80027fa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027d0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ec:	f043 0204 	orr.w	r2, r3, #4
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff ff13 	bl	8002620 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80027fa:	bf00      	nop
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
 8002810:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8002812:	2300      	movs	r3, #0
 8002814:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b01      	cmp	r3, #1
 8002828:	d002      	beq.n	8002830 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 800282a:	2302      	movs	r3, #2
 800282c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800282e:	e160      	b.n	8002af2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d005      	beq.n	8002842 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 800283c:	887b      	ldrh	r3, [r7, #2]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e15a      	b.n	8002afc <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8002852:	2302      	movs	r3, #2
 8002854:	e152      	b.n	8002afc <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2b03      	cmp	r3, #3
 800287a:	d002      	beq.n	8002882 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2b05      	cmp	r3, #5
 8002880:	d114      	bne.n	80028ac <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8002882:	887b      	ldrh	r3, [r7, #2]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 800288c:	887b      	ldrh	r3, [r7, #2]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8002896:	887b      	ldrh	r3, [r7, #2]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80028a0:	887b      	ldrh	r3, [r7, #2]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	865a      	strh	r2, [r3, #50]	; 0x32
 80028aa:	e00b      	b.n	80028c4 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	887a      	ldrh	r2, [r7, #2]
 80028b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	887a      	ldrh	r2, [r7, #2]
 80028b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	887a      	ldrh	r2, [r7, #2]
 80028bc:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	887a      	ldrh	r2, [r7, #2]
 80028c2:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2205      	movs	r2, #5
 80028ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d6:	4a8b      	ldr	r2, [pc, #556]	; (8002b04 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028de:	4a8a      	ldr	r2, [pc, #552]	; (8002b08 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80028e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e6:	4a89      	ldr	r2, [pc, #548]	; (8002b0c <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80028e8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ee:	4a85      	ldr	r2, [pc, #532]	; (8002b04 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f6:	4a84      	ldr	r2, [pc, #528]	; (8002b08 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80028f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fe:	4a83      	ldr	r2, [pc, #524]	; (8002b0c <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002900:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800290c:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002914:	d002      	beq.n	800291c <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d16b      	bne.n	80029f4 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 800291c:	1d3b      	adds	r3, r7, #4
 800291e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a79      	ldr	r2, [pc, #484]	; (8002b10 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d101      	bne.n	8002932 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 800292e:	4b79      	ldr	r3, [pc, #484]	; (8002b14 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002930:	e001      	b.n	8002936 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8002932:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002936:	330c      	adds	r3, #12
 8002938:	4619      	mov	r1, r3
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002942:	b29b      	uxth	r3, r3
 8002944:	f7fe fc22 	bl	800118c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a70      	ldr	r2, [pc, #448]	; (8002b10 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d101      	bne.n	8002956 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8002952:	4b70      	ldr	r3, [pc, #448]	; (8002b14 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002954:	e001      	b.n	800295a <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8002956:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	496b      	ldr	r1, [pc, #428]	; (8002b10 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002962:	428b      	cmp	r3, r1
 8002964:	d101      	bne.n	800296a <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8002966:	4b6b      	ldr	r3, [pc, #428]	; (8002b14 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002968:	e001      	b.n	800296e <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 800296a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002974:	f107 0308 	add.w	r3, r7, #8
 8002978:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	6819      	ldr	r1, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	330c      	adds	r3, #12
 8002988:	461a      	mov	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298e:	b29b      	uxth	r3, r3
 8002990:	f7fe fbfc 	bl	800118c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0202 	orr.w	r2, r2, #2
 80029a2:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b2:	f000 809e 	beq.w	8002af2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a55      	ldr	r2, [pc, #340]	; (8002b10 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d101      	bne.n	80029c4 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 80029c0:	4b54      	ldr	r3, [pc, #336]	; (8002b14 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80029c2:	e001      	b.n	80029c8 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 80029c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029c8:	69da      	ldr	r2, [r3, #28]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4950      	ldr	r1, [pc, #320]	; (8002b10 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80029d0:	428b      	cmp	r3, r1
 80029d2:	d101      	bne.n	80029d8 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 80029d4:	4b4f      	ldr	r3, [pc, #316]	; (8002b14 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80029d6:	e001      	b.n	80029dc <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 80029d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029e0:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	69da      	ldr	r2, [r3, #28]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029f0:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80029f2:	e07e      	b.n	8002af2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a02:	d10a      	bne.n	8002a1a <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a04:	2300      	movs	r3, #0
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002a1a:	f107 0308 	add.w	r3, r7, #8
 8002a1e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	6819      	ldr	r1, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a38      	ldr	r2, [pc, #224]	; (8002b10 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d101      	bne.n	8002a36 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8002a32:	4b38      	ldr	r3, [pc, #224]	; (8002b14 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002a34:	e001      	b.n	8002a3a <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8002a36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a3a:	330c      	adds	r3, #12
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	f7fe fba2 	bl	800118c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a30      	ldr	r2, [pc, #192]	; (8002b10 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d101      	bne.n	8002a56 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8002a52:	4b30      	ldr	r3, [pc, #192]	; (8002b14 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002a54:	e001      	b.n	8002a5a <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8002a56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	492b      	ldr	r1, [pc, #172]	; (8002b10 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002a62:	428b      	cmp	r3, r1
 8002a64:	d101      	bne.n	8002a6a <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8002a66:	4b2b      	ldr	r3, [pc, #172]	; (8002b14 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002a68:	e001      	b.n	8002a6e <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8002a6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a6e:	f042 0202 	orr.w	r2, r2, #2
 8002a72:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002a74:	1d3b      	adds	r3, r7, #4
 8002a76:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	330c      	adds	r3, #12
 8002a82:	4619      	mov	r1, r3
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	f7fe fb7d 	bl	800118c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 0201 	orr.w	r2, r2, #1
 8002aa0:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab0:	d01e      	beq.n	8002af0 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a16      	ldr	r2, [pc, #88]	; (8002b10 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d101      	bne.n	8002ac0 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8002abc:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002abe:	e001      	b.n	8002ac4 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8002ac0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ac4:	69da      	ldr	r2, [r3, #28]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4911      	ldr	r1, [pc, #68]	; (8002b10 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002acc:	428b      	cmp	r3, r1
 8002ace:	d101      	bne.n	8002ad4 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8002ad0:	4b10      	ldr	r3, [pc, #64]	; (8002b14 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002ad2:	e001      	b.n	8002ad8 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8002ad4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ad8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002adc:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	69da      	ldr	r2, [r3, #28]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002aec:	61da      	str	r2, [r3, #28]
 8002aee:	e000      	b.n	8002af2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8002af0:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8002afa:	7ffb      	ldrb	r3, [r7, #31]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3720      	adds	r7, #32
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	08002de9 	.word	0x08002de9
 8002b08:	08002e05 	.word	0x08002e05
 8002b0c:	08002f35 	.word	0x08002f35
 8002b10:	40003800 	.word	0x40003800
 8002b14:	40003400 	.word	0x40003400

08002b18 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4aa2      	ldr	r2, [pc, #648]	; (8002db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d101      	bne.n	8002b36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002b32:	4ba2      	ldr	r3, [pc, #648]	; (8002dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b34:	e001      	b.n	8002b3a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002b36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a9b      	ldr	r2, [pc, #620]	; (8002db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d101      	bne.n	8002b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002b50:	4b9a      	ldr	r3, [pc, #616]	; (8002dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b52:	e001      	b.n	8002b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002b54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b64:	d004      	beq.n	8002b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f040 8099 	bne.w	8002ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d107      	bne.n	8002b8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fa15 	bl	8002fb4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d107      	bne.n	8002ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 fab8 	bl	8003114 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002baa:	2b40      	cmp	r3, #64	; 0x40
 8002bac:	d13a      	bne.n	8002c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d035      	beq.n	8002c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a7e      	ldr	r2, [pc, #504]	; (8002db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d101      	bne.n	8002bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002bc2:	4b7e      	ldr	r3, [pc, #504]	; (8002dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bc4:	e001      	b.n	8002bca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002bc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4979      	ldr	r1, [pc, #484]	; (8002db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bd2:	428b      	cmp	r3, r1
 8002bd4:	d101      	bne.n	8002bda <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002bd6:	4b79      	ldr	r3, [pc, #484]	; (8002dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bd8:	e001      	b.n	8002bde <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002bda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002be2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bf2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	f043 0202 	orr.w	r2, r3, #2
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff fcfe 	bl	8002620 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	f040 80be 	bne.w	8002dac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 80b8 	beq.w	8002dac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c4a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a59      	ldr	r2, [pc, #356]	; (8002db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d101      	bne.n	8002c5a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002c56:	4b59      	ldr	r3, [pc, #356]	; (8002dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c58:	e001      	b.n	8002c5e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002c5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4954      	ldr	r1, [pc, #336]	; (8002db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c66:	428b      	cmp	r3, r1
 8002c68:	d101      	bne.n	8002c6e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002c6a:	4b54      	ldr	r3, [pc, #336]	; (8002dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c6c:	e001      	b.n	8002c72 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002c6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c76:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	f043 0204 	orr.w	r2, r3, #4
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff fcc0 	bl	8002620 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ca0:	e084      	b.n	8002dac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d107      	bne.n	8002cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f9ae 	bl	8003018 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d107      	bne.n	8002cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f9ed 	bl	80030b0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cdc:	2b40      	cmp	r3, #64	; 0x40
 8002cde:	d12f      	bne.n	8002d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d02a      	beq.n	8002d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cf8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a2e      	ldr	r2, [pc, #184]	; (8002db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d101      	bne.n	8002d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002d04:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d06:	e001      	b.n	8002d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002d08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4929      	ldr	r1, [pc, #164]	; (8002db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d14:	428b      	cmp	r3, r1
 8002d16:	d101      	bne.n	8002d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002d18:	4b28      	ldr	r3, [pc, #160]	; (8002dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d1a:	e001      	b.n	8002d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002d1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d24:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	f043 0202 	orr.w	r2, r3, #2
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff fc70 	bl	8002620 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d131      	bne.n	8002dae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	f003 0320 	and.w	r3, r3, #32
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d02c      	beq.n	8002dae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a17      	ldr	r2, [pc, #92]	; (8002db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d101      	bne.n	8002d62 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002d5e:	4b17      	ldr	r3, [pc, #92]	; (8002dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d60:	e001      	b.n	8002d66 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002d62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4912      	ldr	r1, [pc, #72]	; (8002db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d6e:	428b      	cmp	r3, r1
 8002d70:	d101      	bne.n	8002d76 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002d72:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d74:	e001      	b.n	8002d7a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002d76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d7e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d8e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	f043 0204 	orr.w	r2, r3, #4
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff fc3b 	bl	8002620 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002daa:	e000      	b.n	8002dae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002dac:	bf00      	nop
}
 8002dae:	bf00      	nop
 8002db0:	3720      	adds	r7, #32
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40003800 	.word	0x40003800
 8002dbc:	40003400 	.word	0x40003400

08002dc0 <HAL_I2SEx_TxRxHalfCpltCallback>:
  * @brief  Tx and Rx Transfer half completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxHalfCpltCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f7ff ffe2 	bl	8002dc0 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f040 8084 	bne.w	8002f24 <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d13c      	bne.n	8002ea0 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e34:	d006      	beq.n	8002e44 <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d116      	bne.n	8002e72 <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a38      	ldr	r2, [pc, #224]	; (8002f2c <I2SEx_TxRxDMACplt+0x128>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d101      	bne.n	8002e52 <I2SEx_TxRxDMACplt+0x4e>
 8002e4e:	4b38      	ldr	r3, [pc, #224]	; (8002f30 <I2SEx_TxRxDMACplt+0x12c>)
 8002e50:	e001      	b.n	8002e56 <I2SEx_TxRxDMACplt+0x52>
 8002e52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4933      	ldr	r1, [pc, #204]	; (8002f2c <I2SEx_TxRxDMACplt+0x128>)
 8002e5e:	428b      	cmp	r3, r1
 8002e60:	d101      	bne.n	8002e66 <I2SEx_TxRxDMACplt+0x62>
 8002e62:	4b33      	ldr	r3, [pc, #204]	; (8002f30 <I2SEx_TxRxDMACplt+0x12c>)
 8002e64:	e001      	b.n	8002e6a <I2SEx_TxRxDMACplt+0x66>
 8002e66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e6a:	f022 0201 	bic.w	r2, r2, #1
 8002e6e:	605a      	str	r2, [r3, #4]
 8002e70:	e007      	b.n	8002e82 <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0201 	bic.w	r2, r2, #1
 8002e80:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f7ff ff9a 	bl	8002dd4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d13c      	bne.n	8002f24 <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb8:	d006      	beq.n	8002ec8 <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d108      	bne.n	8002eda <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0202 	bic.w	r2, r2, #2
 8002ed6:	605a      	str	r2, [r3, #4]
 8002ed8:	e015      	b.n	8002f06 <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a13      	ldr	r2, [pc, #76]	; (8002f2c <I2SEx_TxRxDMACplt+0x128>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d101      	bne.n	8002ee8 <I2SEx_TxRxDMACplt+0xe4>
 8002ee4:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <I2SEx_TxRxDMACplt+0x12c>)
 8002ee6:	e001      	b.n	8002eec <I2SEx_TxRxDMACplt+0xe8>
 8002ee8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	490e      	ldr	r1, [pc, #56]	; (8002f2c <I2SEx_TxRxDMACplt+0x128>)
 8002ef4:	428b      	cmp	r3, r1
 8002ef6:	d101      	bne.n	8002efc <I2SEx_TxRxDMACplt+0xf8>
 8002ef8:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <I2SEx_TxRxDMACplt+0x12c>)
 8002efa:	e001      	b.n	8002f00 <I2SEx_TxRxDMACplt+0xfc>
 8002efc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f00:	f022 0202 	bic.w	r2, r2, #2
 8002f04:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d106      	bne.n	8002f24 <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f7ff ff58 	bl	8002dd4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40003800 	.word	0x40003800
 8002f30:	40003400 	.word	0x40003400

08002f34 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f40:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0203 	bic.w	r2, r2, #3
 8002f50:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a15      	ldr	r2, [pc, #84]	; (8002fac <I2SEx_TxRxDMAError+0x78>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d101      	bne.n	8002f60 <I2SEx_TxRxDMAError+0x2c>
 8002f5c:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <I2SEx_TxRxDMAError+0x7c>)
 8002f5e:	e001      	b.n	8002f64 <I2SEx_TxRxDMAError+0x30>
 8002f60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4910      	ldr	r1, [pc, #64]	; (8002fac <I2SEx_TxRxDMAError+0x78>)
 8002f6c:	428b      	cmp	r3, r1
 8002f6e:	d101      	bne.n	8002f74 <I2SEx_TxRxDMAError+0x40>
 8002f70:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <I2SEx_TxRxDMAError+0x7c>)
 8002f72:	e001      	b.n	8002f78 <I2SEx_TxRxDMAError+0x44>
 8002f74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f78:	f022 0203 	bic.w	r2, r2, #3
 8002f7c:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	f043 0208 	orr.w	r2, r3, #8
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f7ff fb3e 	bl	8002620 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002fa4:	bf00      	nop
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40003800 	.word	0x40003800
 8002fb0:	40003400 	.word	0x40003400

08002fb4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	1c99      	adds	r1, r3, #2
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6251      	str	r1, [r2, #36]	; 0x24
 8002fc6:	881a      	ldrh	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d113      	bne.n	800300e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ff4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d106      	bne.n	800300e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff fee3 	bl	8002dd4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	1c99      	adds	r1, r3, #2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6251      	str	r1, [r2, #36]	; 0x24
 800302a:	8819      	ldrh	r1, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a1d      	ldr	r2, [pc, #116]	; (80030a8 <I2SEx_TxISR_I2SExt+0x90>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d101      	bne.n	800303a <I2SEx_TxISR_I2SExt+0x22>
 8003036:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <I2SEx_TxISR_I2SExt+0x94>)
 8003038:	e001      	b.n	800303e <I2SEx_TxISR_I2SExt+0x26>
 800303a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800303e:	460a      	mov	r2, r1
 8003040:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d121      	bne.n	800309e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a12      	ldr	r2, [pc, #72]	; (80030a8 <I2SEx_TxISR_I2SExt+0x90>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d101      	bne.n	8003068 <I2SEx_TxISR_I2SExt+0x50>
 8003064:	4b11      	ldr	r3, [pc, #68]	; (80030ac <I2SEx_TxISR_I2SExt+0x94>)
 8003066:	e001      	b.n	800306c <I2SEx_TxISR_I2SExt+0x54>
 8003068:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	490d      	ldr	r1, [pc, #52]	; (80030a8 <I2SEx_TxISR_I2SExt+0x90>)
 8003074:	428b      	cmp	r3, r1
 8003076:	d101      	bne.n	800307c <I2SEx_TxISR_I2SExt+0x64>
 8003078:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <I2SEx_TxISR_I2SExt+0x94>)
 800307a:	e001      	b.n	8003080 <I2SEx_TxISR_I2SExt+0x68>
 800307c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003080:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003084:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800308a:	b29b      	uxth	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d106      	bne.n	800309e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff fe9b 	bl	8002dd4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40003800 	.word	0x40003800
 80030ac:	40003400 	.word	0x40003400

080030b0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68d8      	ldr	r0, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	1c99      	adds	r1, r3, #2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80030c8:	b282      	uxth	r2, r0
 80030ca:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d113      	bne.n	800310c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030f2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff fe64 	bl	8002dd4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800310c:	bf00      	nop
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a20      	ldr	r2, [pc, #128]	; (80031a4 <I2SEx_RxISR_I2SExt+0x90>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d101      	bne.n	800312a <I2SEx_RxISR_I2SExt+0x16>
 8003126:	4b20      	ldr	r3, [pc, #128]	; (80031a8 <I2SEx_RxISR_I2SExt+0x94>)
 8003128:	e001      	b.n	800312e <I2SEx_RxISR_I2SExt+0x1a>
 800312a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800312e:	68d8      	ldr	r0, [r3, #12]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	1c99      	adds	r1, r3, #2
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	62d1      	str	r1, [r2, #44]	; 0x2c
 800313a:	b282      	uxth	r2, r0
 800313c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003150:	b29b      	uxth	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d121      	bne.n	800319a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a12      	ldr	r2, [pc, #72]	; (80031a4 <I2SEx_RxISR_I2SExt+0x90>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d101      	bne.n	8003164 <I2SEx_RxISR_I2SExt+0x50>
 8003160:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <I2SEx_RxISR_I2SExt+0x94>)
 8003162:	e001      	b.n	8003168 <I2SEx_RxISR_I2SExt+0x54>
 8003164:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	490d      	ldr	r1, [pc, #52]	; (80031a4 <I2SEx_RxISR_I2SExt+0x90>)
 8003170:	428b      	cmp	r3, r1
 8003172:	d101      	bne.n	8003178 <I2SEx_RxISR_I2SExt+0x64>
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <I2SEx_RxISR_I2SExt+0x94>)
 8003176:	e001      	b.n	800317c <I2SEx_RxISR_I2SExt+0x68>
 8003178:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800317c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003180:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d106      	bne.n	800319a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff fe1d 	bl	8002dd4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40003800 	.word	0x40003800
 80031a8:	40003400 	.word	0x40003400

080031ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ae:	b08f      	sub	sp, #60	; 0x3c
 80031b0:	af0a      	add	r7, sp, #40	; 0x28
 80031b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e116      	b.n	80033ec <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d106      	bne.n	80031de <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f008 fc9d 	bl	800bb18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2203      	movs	r2, #3
 80031e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d102      	bne.n	80031f8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f003 f938 	bl	8006472 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	687e      	ldr	r6, [r7, #4]
 800320a:	466d      	mov	r5, sp
 800320c:	f106 0410 	add.w	r4, r6, #16
 8003210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003212:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003216:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003218:	e894 0003 	ldmia.w	r4, {r0, r1}
 800321c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003220:	1d33      	adds	r3, r6, #4
 8003222:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003224:	6838      	ldr	r0, [r7, #0]
 8003226:	f003 f80f 	bl	8006248 <USB_CoreInit>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0d7      	b.n	80033ec <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2100      	movs	r1, #0
 8003242:	4618      	mov	r0, r3
 8003244:	f003 f926 	bl	8006494 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003248:	2300      	movs	r3, #0
 800324a:	73fb      	strb	r3, [r7, #15]
 800324c:	e04a      	b.n	80032e4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800324e:	7bfa      	ldrb	r2, [r7, #15]
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	1a9b      	subs	r3, r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	333d      	adds	r3, #61	; 0x3d
 800325e:	2201      	movs	r2, #1
 8003260:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003262:	7bfa      	ldrb	r2, [r7, #15]
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	333c      	adds	r3, #60	; 0x3c
 8003272:	7bfa      	ldrb	r2, [r7, #15]
 8003274:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003276:	7bfa      	ldrb	r2, [r7, #15]
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	b298      	uxth	r0, r3
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	3342      	adds	r3, #66	; 0x42
 800328a:	4602      	mov	r2, r0
 800328c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800328e:	7bfa      	ldrb	r2, [r7, #15]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	333f      	adds	r3, #63	; 0x3f
 800329e:	2200      	movs	r2, #0
 80032a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032a2:	7bfa      	ldrb	r2, [r7, #15]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	3344      	adds	r3, #68	; 0x44
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032b6:	7bfa      	ldrb	r2, [r7, #15]
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	1a9b      	subs	r3, r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	3348      	adds	r3, #72	; 0x48
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032ca:	7bfa      	ldrb	r2, [r7, #15]
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	3350      	adds	r3, #80	; 0x50
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032de:	7bfb      	ldrb	r3, [r7, #15]
 80032e0:	3301      	adds	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
 80032e4:	7bfa      	ldrb	r2, [r7, #15]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d3af      	bcc.n	800324e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ee:	2300      	movs	r3, #0
 80032f0:	73fb      	strb	r3, [r7, #15]
 80032f2:	e044      	b.n	800337e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032f4:	7bfa      	ldrb	r2, [r7, #15]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003306:	2200      	movs	r2, #0
 8003308:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800330a:	7bfa      	ldrb	r2, [r7, #15]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800331c:	7bfa      	ldrb	r2, [r7, #15]
 800331e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003320:	7bfa      	ldrb	r2, [r7, #15]
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003332:	2200      	movs	r2, #0
 8003334:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003336:	7bfa      	ldrb	r2, [r7, #15]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800334c:	7bfa      	ldrb	r2, [r7, #15]
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003362:	7bfa      	ldrb	r2, [r7, #15]
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	3301      	adds	r3, #1
 800337c:	73fb      	strb	r3, [r7, #15]
 800337e:	7bfa      	ldrb	r2, [r7, #15]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	429a      	cmp	r2, r3
 8003386:	d3b5      	bcc.n	80032f4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	603b      	str	r3, [r7, #0]
 800338e:	687e      	ldr	r6, [r7, #4]
 8003390:	466d      	mov	r5, sp
 8003392:	f106 0410 	add.w	r4, r6, #16
 8003396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800339a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800339c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800339e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80033a6:	1d33      	adds	r3, r6, #4
 80033a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033aa:	6838      	ldr	r0, [r7, #0]
 80033ac:	f003 f89c 	bl	80064e8 <USB_DevInit>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d005      	beq.n	80033c2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2202      	movs	r2, #2
 80033ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e014      	b.n	80033ec <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d102      	bne.n	80033e0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f001 f892 	bl	8004504 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f004 f8d7 	bl	8007598 <USB_DevDisconnect>

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033f4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_PCD_Start+0x1c>
 800340c:	2302      	movs	r3, #2
 800340e:	e020      	b.n	8003452 <HAL_PCD_Start+0x5e>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	2b01      	cmp	r3, #1
 800341e:	d109      	bne.n	8003434 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003424:	2b01      	cmp	r3, #1
 8003426:	d005      	beq.n	8003434 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f003 f809 	bl	8006450 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f004 f887 	bl	8007556 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800345a:	b590      	push	{r4, r7, lr}
 800345c:	b08d      	sub	sp, #52	; 0x34
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f004 f945 	bl	8007700 <USB_GetMode>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	f040 83ca 	bne.w	8003c12 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f004 f8a9 	bl	80075da <USB_ReadInterrupts>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 83c0 	beq.w	8003c10 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f004 f8a0 	bl	80075da <USB_ReadInterrupts>
 800349a:	4603      	mov	r3, r0
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d107      	bne.n	80034b4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695a      	ldr	r2, [r3, #20]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f002 0202 	and.w	r2, r2, #2
 80034b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f004 f88e 	bl	80075da <USB_ReadInterrupts>
 80034be:	4603      	mov	r3, r0
 80034c0:	f003 0310 	and.w	r3, r3, #16
 80034c4:	2b10      	cmp	r3, #16
 80034c6:	d161      	bne.n	800358c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699a      	ldr	r2, [r3, #24]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0210 	bic.w	r2, r2, #16
 80034d6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	f003 020f 	and.w	r2, r3, #15
 80034e4:	4613      	mov	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	4413      	add	r3, r2
 80034f4:	3304      	adds	r3, #4
 80034f6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	0c5b      	lsrs	r3, r3, #17
 80034fc:	f003 030f 	and.w	r3, r3, #15
 8003500:	2b02      	cmp	r3, #2
 8003502:	d124      	bne.n	800354e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800350a:	4013      	ands	r3, r2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d035      	beq.n	800357c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	091b      	lsrs	r3, r3, #4
 8003518:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800351a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800351e:	b29b      	uxth	r3, r3
 8003520:	461a      	mov	r2, r3
 8003522:	6a38      	ldr	r0, [r7, #32]
 8003524:	f003 fef4 	bl	8007310 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	091b      	lsrs	r3, r3, #4
 8003530:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003534:	441a      	add	r2, r3
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003546:	441a      	add	r2, r3
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	619a      	str	r2, [r3, #24]
 800354c:	e016      	b.n	800357c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	0c5b      	lsrs	r3, r3, #17
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	2b06      	cmp	r3, #6
 8003558:	d110      	bne.n	800357c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003560:	2208      	movs	r2, #8
 8003562:	4619      	mov	r1, r3
 8003564:	6a38      	ldr	r0, [r7, #32]
 8003566:	f003 fed3 	bl	8007310 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	699a      	ldr	r2, [r3, #24]
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	091b      	lsrs	r3, r3, #4
 8003572:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003576:	441a      	add	r2, r3
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699a      	ldr	r2, [r3, #24]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0210 	orr.w	r2, r2, #16
 800358a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f004 f822 	bl	80075da <USB_ReadInterrupts>
 8003596:	4603      	mov	r3, r0
 8003598:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800359c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035a0:	d16e      	bne.n	8003680 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f004 f828 	bl	8007600 <USB_ReadDevAllOutEpInterrupt>
 80035b0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80035b2:	e062      	b.n	800367a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80035b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d057      	beq.n	800366e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	4611      	mov	r1, r2
 80035c8:	4618      	mov	r0, r3
 80035ca:	f004 f84d 	bl	8007668 <USB_ReadDevOutEPInterrupt>
 80035ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00c      	beq.n	80035f4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	015a      	lsls	r2, r3, #5
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e6:	461a      	mov	r2, r3
 80035e8:	2301      	movs	r3, #1
 80035ea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80035ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fdde 	bl	80041b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00c      	beq.n	8003618 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	4413      	add	r3, r2
 8003606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360a:	461a      	mov	r2, r3
 800360c:	2308      	movs	r3, #8
 800360e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003610:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fed8 	bl	80043c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	2b00      	cmp	r3, #0
 8003620:	d008      	beq.n	8003634 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	4413      	add	r3, r2
 800362a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800362e:	461a      	mov	r2, r3
 8003630:	2310      	movs	r3, #16
 8003632:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b00      	cmp	r3, #0
 800363c:	d008      	beq.n	8003650 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	4413      	add	r3, r2
 8003646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364a:	461a      	mov	r2, r3
 800364c:	2320      	movs	r3, #32
 800364e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d009      	beq.n	800366e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003666:	461a      	mov	r2, r3
 8003668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800366c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	3301      	adds	r3, #1
 8003672:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003676:	085b      	lsrs	r3, r3, #1
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	2b00      	cmp	r3, #0
 800367e:	d199      	bne.n	80035b4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f003 ffa8 	bl	80075da <USB_ReadInterrupts>
 800368a:	4603      	mov	r3, r0
 800368c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003690:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003694:	f040 80c0 	bne.w	8003818 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f003 ffc9 	bl	8007634 <USB_ReadDevAllInEpInterrupt>
 80036a2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80036a8:	e0b2      	b.n	8003810 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 80a7 	beq.w	8003804 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	4611      	mov	r1, r2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f003 ffef 	bl	80076a4 <USB_ReadDevInEPInterrupt>
 80036c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d057      	beq.n	8003782 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	2201      	movs	r2, #1
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	43db      	mvns	r3, r3
 80036ec:	69f9      	ldr	r1, [r7, #28]
 80036ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036f2:	4013      	ands	r3, r2
 80036f4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003702:	461a      	mov	r2, r3
 8003704:	2301      	movs	r3, #1
 8003706:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d132      	bne.n	8003776 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003714:	4613      	mov	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	3348      	adds	r3, #72	; 0x48
 8003720:	6819      	ldr	r1, [r3, #0]
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003726:	4613      	mov	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4403      	add	r3, r0
 8003730:	3344      	adds	r3, #68	; 0x44
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4419      	add	r1, r3
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373a:	4613      	mov	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	1a9b      	subs	r3, r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4403      	add	r3, r0
 8003744:	3348      	adds	r3, #72	; 0x48
 8003746:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	2b00      	cmp	r3, #0
 800374c:	d113      	bne.n	8003776 <HAL_PCD_IRQHandler+0x31c>
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003752:	4613      	mov	r3, r2
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	1a9b      	subs	r3, r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	3350      	adds	r3, #80	; 0x50
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d108      	bne.n	8003776 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6818      	ldr	r0, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800376e:	461a      	mov	r2, r3
 8003770:	2101      	movs	r1, #1
 8003772:	f003 fff7 	bl	8007764 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	b2db      	uxtb	r3, r3
 800377a:	4619      	mov	r1, r3
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f008 fa4c 	bl	800bc1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	4413      	add	r3, r2
 8003794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003798:	461a      	mov	r2, r3
 800379a:	2308      	movs	r3, #8
 800379c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f003 0310 	and.w	r3, r3, #16
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b4:	461a      	mov	r2, r3
 80037b6:	2310      	movs	r3, #16
 80037b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d008      	beq.n	80037d6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d0:	461a      	mov	r2, r3
 80037d2:	2340      	movs	r3, #64	; 0x40
 80037d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ec:	461a      	mov	r2, r3
 80037ee:	2302      	movs	r3, #2
 80037f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80037fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fc48 	bl	8004094 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	3301      	adds	r3, #1
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	085b      	lsrs	r3, r3, #1
 800380e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003812:	2b00      	cmp	r3, #0
 8003814:	f47f af49 	bne.w	80036aa <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f003 fedc 	bl	80075da <USB_ReadInterrupts>
 8003822:	4603      	mov	r3, r0
 8003824:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800382c:	d122      	bne.n	8003874 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800383c:	f023 0301 	bic.w	r3, r3, #1
 8003840:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003848:	2b01      	cmp	r3, #1
 800384a:	d108      	bne.n	800385e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003854:	2100      	movs	r1, #0
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f008 fc3a 	bl	800c0d0 <HAL_PCDEx_LPM_Callback>
 800385c:	e002      	b.n	8003864 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f008 fa48 	bl	800bcf4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695a      	ldr	r2, [r3, #20]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003872:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f003 feae 	bl	80075da <USB_ReadInterrupts>
 800387e:	4603      	mov	r3, r0
 8003880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003888:	d112      	bne.n	80038b0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b01      	cmp	r3, #1
 8003898:	d102      	bne.n	80038a0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f008 fa04 	bl	800bca8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695a      	ldr	r2, [r3, #20]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80038ae:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f003 fe90 	bl	80075da <USB_ReadInterrupts>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038c4:	d121      	bne.n	800390a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695a      	ldr	r2, [r3, #20]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80038d4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d111      	bne.n	8003904 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ee:	089b      	lsrs	r3, r3, #2
 80038f0:	f003 020f 	and.w	r2, r3, #15
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80038fa:	2101      	movs	r1, #1
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f008 fbe7 	bl	800c0d0 <HAL_PCDEx_LPM_Callback>
 8003902:	e002      	b.n	800390a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f008 f9cf 	bl	800bca8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f003 fe63 	bl	80075da <USB_ReadInterrupts>
 8003914:	4603      	mov	r3, r0
 8003916:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800391a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800391e:	f040 80c7 	bne.w	8003ab0 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2110      	movs	r1, #16
 800393c:	4618      	mov	r0, r3
 800393e:	f002 ff31 	bl	80067a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003942:	2300      	movs	r3, #0
 8003944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003946:	e056      	b.n	80039f6 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	4413      	add	r3, r2
 8003950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003954:	461a      	mov	r2, r3
 8003956:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800395a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	4413      	add	r3, r2
 8003964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800396c:	0151      	lsls	r1, r2, #5
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	440a      	add	r2, r1
 8003972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003976:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800397a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800397c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	4413      	add	r3, r2
 8003984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800398c:	0151      	lsls	r1, r2, #5
 800398e:	69fa      	ldr	r2, [r7, #28]
 8003990:	440a      	add	r2, r1
 8003992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003996:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800399a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800399c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a8:	461a      	mov	r2, r3
 80039aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039ae:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80039b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039c0:	0151      	lsls	r1, r2, #5
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	440a      	add	r2, r1
 80039c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80039d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039e0:	0151      	lsls	r1, r2, #5
 80039e2:	69fa      	ldr	r2, [r7, #28]
 80039e4:	440a      	add	r2, r1
 80039e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039ee:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f2:	3301      	adds	r3, #1
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d3a3      	bcc.n	8003948 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a0e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003a12:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d016      	beq.n	8003a4a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a2c:	f043 030b 	orr.w	r3, r3, #11
 8003a30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	69fa      	ldr	r2, [r7, #28]
 8003a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a42:	f043 030b 	orr.w	r3, r3, #11
 8003a46:	6453      	str	r3, [r2, #68]	; 0x44
 8003a48:	e015      	b.n	8003a76 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	69fa      	ldr	r2, [r7, #28]
 8003a54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a5c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003a60:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	69fa      	ldr	r2, [r7, #28]
 8003a6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a70:	f043 030b 	orr.w	r3, r3, #11
 8003a74:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	69fa      	ldr	r2, [r7, #28]
 8003a80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a84:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a88:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	f003 fe62 	bl	8007764 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695a      	ldr	r2, [r3, #20]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003aae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f003 fd90 	bl	80075da <USB_ReadInterrupts>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac4:	d124      	bne.n	8003b10 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f003 fe26 	bl	800771c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f002 fec6 	bl	8006866 <USB_GetDevSpeed>
 8003ada:	4603      	mov	r3, r0
 8003adc:	461a      	mov	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681c      	ldr	r4, [r3, #0]
 8003ae6:	f000 ffb1 	bl	8004a4c <HAL_RCC_GetHCLKFreq>
 8003aea:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	461a      	mov	r2, r3
 8003af4:	4620      	mov	r0, r4
 8003af6:	f002 fc09 	bl	800630c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f008 f8b5 	bl	800bc6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695a      	ldr	r2, [r3, #20]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003b0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f003 fd60 	bl	80075da <USB_ReadInterrupts>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d10a      	bne.n	8003b3a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f008 f892 	bl	800bc4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695a      	ldr	r2, [r3, #20]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f002 0208 	and.w	r2, r2, #8
 8003b38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f003 fd4b 	bl	80075da <USB_ReadInterrupts>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b4e:	d10f      	bne.n	8003b70 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	4619      	mov	r1, r3
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f008 f8ea 	bl	800bd34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695a      	ldr	r2, [r3, #20]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003b6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f003 fd30 	bl	80075da <USB_ReadInterrupts>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b84:	d10f      	bne.n	8003ba6 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	4619      	mov	r1, r3
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f008 f8bd 	bl	800bd10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695a      	ldr	r2, [r3, #20]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003ba4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f003 fd15 	bl	80075da <USB_ReadInterrupts>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bba:	d10a      	bne.n	8003bd2 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f008 f8cb 	bl	800bd58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695a      	ldr	r2, [r3, #20]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003bd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f003 fcff 	bl	80075da <USB_ReadInterrupts>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d115      	bne.n	8003c12 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f008 f8bb 	bl	800bd74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6859      	ldr	r1, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	605a      	str	r2, [r3, #4]
 8003c0e:	e000      	b.n	8003c12 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8003c10:	bf00      	nop
    }
  }
}
 8003c12:	3734      	adds	r7, #52	; 0x34
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd90      	pop	{r4, r7, pc}

08003c18 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_PCD_SetAddress+0x1a>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e013      	b.n	8003c5a <HAL_PCD_SetAddress+0x42>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	78fa      	ldrb	r2, [r7, #3]
 8003c3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	78fa      	ldrb	r2, [r7, #3]
 8003c48:	4611      	mov	r1, r2
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f003 fc5d 	bl	800750a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	4608      	mov	r0, r1
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	461a      	mov	r2, r3
 8003c70:	4603      	mov	r3, r0
 8003c72:	70fb      	strb	r3, [r7, #3]
 8003c74:	460b      	mov	r3, r1
 8003c76:	803b      	strh	r3, [r7, #0]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	da0f      	bge.n	8003ca8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	f003 020f 	and.w	r2, r3, #15
 8003c8e:	4613      	mov	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	1a9b      	subs	r3, r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	3338      	adds	r3, #56	; 0x38
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	705a      	strb	r2, [r3, #1]
 8003ca6:	e00f      	b.n	8003cc8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	f003 020f 	and.w	r2, r3, #15
 8003cae:	4613      	mov	r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003cd4:	883a      	ldrh	r2, [r7, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	78ba      	ldrb	r2, [r7, #2]
 8003cde:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	785b      	ldrb	r3, [r3, #1]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d004      	beq.n	8003cf2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003cf2:	78bb      	ldrb	r3, [r7, #2]
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d102      	bne.n	8003cfe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_PCD_EP_Open+0xaa>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e00e      	b.n	8003d2a <HAL_PCD_EP_Open+0xc8>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68f9      	ldr	r1, [r7, #12]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f002 fdc8 	bl	80068b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003d28:	7afb      	ldrb	r3, [r7, #11]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	da0f      	bge.n	8003d66 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	f003 020f 	and.w	r2, r3, #15
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	3338      	adds	r3, #56	; 0x38
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	4413      	add	r3, r2
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	705a      	strb	r2, [r3, #1]
 8003d64:	e00f      	b.n	8003d86 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d66:	78fb      	ldrb	r3, [r7, #3]
 8003d68:	f003 020f 	and.w	r2, r3, #15
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d86:	78fb      	ldrb	r3, [r7, #3]
 8003d88:	f003 030f 	and.w	r3, r3, #15
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_PCD_EP_Close+0x6e>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e00e      	b.n	8003dbe <HAL_PCD_EP_Close+0x8c>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68f9      	ldr	r1, [r7, #12]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f002 fe06 	bl	80069c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b086      	sub	sp, #24
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	603b      	str	r3, [r7, #0]
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dd6:	7afb      	ldrb	r3, [r7, #11]
 8003dd8:	f003 020f 	and.w	r2, r3, #15
 8003ddc:	4613      	mov	r3, r2
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	1a9b      	subs	r3, r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4413      	add	r3, r2
 8003dec:	3304      	adds	r3, #4
 8003dee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2200      	movs	r2, #0
 8003e06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e08:	7afb      	ldrb	r3, [r7, #11]
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d102      	bne.n	8003e22 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e22:	7afb      	ldrb	r3, [r7, #11]
 8003e24:	f003 030f 	and.w	r3, r3, #15
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d109      	bne.n	8003e40 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6818      	ldr	r0, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	461a      	mov	r2, r3
 8003e38:	6979      	ldr	r1, [r7, #20]
 8003e3a:	f003 f8e1 	bl	8007000 <USB_EP0StartXfer>
 8003e3e:	e008      	b.n	8003e52 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6818      	ldr	r0, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	6979      	ldr	r1, [r7, #20]
 8003e4e:	f002 fe93 	bl	8006b78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	460b      	mov	r3, r1
 8003e66:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	f003 020f 	and.w	r2, r3, #15
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003e7e:	681b      	ldr	r3, [r3, #0]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	607a      	str	r2, [r7, #4]
 8003e96:	603b      	str	r3, [r7, #0]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e9c:	7afb      	ldrb	r3, [r7, #11]
 8003e9e:	f003 020f 	and.w	r2, r3, #15
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	1a9b      	subs	r3, r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	3338      	adds	r3, #56	; 0x38
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4413      	add	r3, r2
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ecc:	7afb      	ldrb	r3, [r7, #11]
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d102      	bne.n	8003ee6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ee6:	7afb      	ldrb	r3, [r7, #11]
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d109      	bne.n	8003f04 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6818      	ldr	r0, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	461a      	mov	r2, r3
 8003efc:	6979      	ldr	r1, [r7, #20]
 8003efe:	f003 f87f 	bl	8007000 <USB_EP0StartXfer>
 8003f02:	e008      	b.n	8003f16 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6818      	ldr	r0, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	461a      	mov	r2, r3
 8003f10:	6979      	ldr	r1, [r7, #20]
 8003f12:	f002 fe31 	bl	8006b78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	f003 020f 	and.w	r2, r3, #15
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d901      	bls.n	8003f3e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e050      	b.n	8003fe0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	da0f      	bge.n	8003f66 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f46:	78fb      	ldrb	r3, [r7, #3]
 8003f48:	f003 020f 	and.w	r2, r3, #15
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	1a9b      	subs	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	3338      	adds	r3, #56	; 0x38
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	4413      	add	r3, r2
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	705a      	strb	r2, [r3, #1]
 8003f64:	e00d      	b.n	8003f82 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f66:	78fa      	ldrb	r2, [r7, #3]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	1a9b      	subs	r3, r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	4413      	add	r3, r2
 8003f78:	3304      	adds	r3, #4
 8003f7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2201      	movs	r2, #1
 8003f86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f88:	78fb      	ldrb	r3, [r7, #3]
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <HAL_PCD_EP_SetStall+0x82>
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	e01e      	b.n	8003fe0 <HAL_PCD_EP_SetStall+0xc0>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68f9      	ldr	r1, [r7, #12]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f003 f9d6 	bl	8007362 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fb6:	78fb      	ldrb	r3, [r7, #3]
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10a      	bne.n	8003fd6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	b2d9      	uxtb	r1, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	f003 fbc7 	bl	8007764 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ff4:	78fb      	ldrb	r3, [r7, #3]
 8003ff6:	f003 020f 	and.w	r2, r3, #15
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d901      	bls.n	8004006 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e042      	b.n	800408c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800400a:	2b00      	cmp	r3, #0
 800400c:	da0f      	bge.n	800402e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800400e:	78fb      	ldrb	r3, [r7, #3]
 8004010:	f003 020f 	and.w	r2, r3, #15
 8004014:	4613      	mov	r3, r2
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	1a9b      	subs	r3, r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	3338      	adds	r3, #56	; 0x38
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	4413      	add	r3, r2
 8004022:	3304      	adds	r3, #4
 8004024:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2201      	movs	r2, #1
 800402a:	705a      	strb	r2, [r3, #1]
 800402c:	e00f      	b.n	800404e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800402e:	78fb      	ldrb	r3, [r7, #3]
 8004030:	f003 020f 	and.w	r2, r3, #15
 8004034:	4613      	mov	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	4413      	add	r3, r2
 8004044:	3304      	adds	r3, #4
 8004046:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	b2da      	uxtb	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <HAL_PCD_EP_ClrStall+0x86>
 800406a:	2302      	movs	r3, #2
 800406c:	e00e      	b.n	800408c <HAL_PCD_EP_ClrStall+0xa4>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68f9      	ldr	r1, [r7, #12]
 800407c:	4618      	mov	r0, r3
 800407e:	f003 f9de 	bl	800743e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08a      	sub	sp, #40	; 0x28
 8004098:	af02      	add	r7, sp, #8
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	4613      	mov	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	1a9b      	subs	r3, r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	3338      	adds	r3, #56	; 0x38
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	4413      	add	r3, r2
 80040b8:	3304      	adds	r3, #4
 80040ba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	699a      	ldr	r2, [r3, #24]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d901      	bls.n	80040cc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e06c      	b.n	80041a6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	695a      	ldr	r2, [r3, #20]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d902      	bls.n	80040e8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	3303      	adds	r3, #3
 80040ec:	089b      	lsrs	r3, r3, #2
 80040ee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040f0:	e02b      	b.n	800414a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	695a      	ldr	r2, [r3, #20]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	429a      	cmp	r2, r3
 8004106:	d902      	bls.n	800410e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	3303      	adds	r3, #3
 8004112:	089b      	lsrs	r3, r3, #2
 8004114:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	68d9      	ldr	r1, [r3, #12]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	b2da      	uxtb	r2, r3
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004126:	b2db      	uxtb	r3, r3
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	4603      	mov	r3, r0
 800412c:	6978      	ldr	r0, [r7, #20]
 800412e:	f003 f8ba 	bl	80072a6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	441a      	add	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	699a      	ldr	r2, [r3, #24]
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	441a      	add	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	4413      	add	r3, r2
 8004152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	b29b      	uxth	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	429a      	cmp	r2, r3
 800415e:	d809      	bhi.n	8004174 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	699a      	ldr	r2, [r3, #24]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004168:	429a      	cmp	r2, r3
 800416a:	d203      	bcs.n	8004174 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1be      	bne.n	80040f2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	695a      	ldr	r2, [r3, #20]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	429a      	cmp	r2, r3
 800417e:	d811      	bhi.n	80041a4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	2201      	movs	r2, #1
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	43db      	mvns	r3, r3
 800419a:	6939      	ldr	r1, [r7, #16]
 800419c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041a0:	4013      	ands	r3, r2
 80041a2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3720      	adds	r7, #32
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	333c      	adds	r3, #60	; 0x3c
 80041c8:	3304      	adds	r3, #4
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	f040 80a0 	bne.w	8004328 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d015      	beq.n	800421e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4a72      	ldr	r2, [pc, #456]	; (80043c0 <PCD_EP_OutXfrComplete_int+0x210>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	f240 80dd 	bls.w	80043b6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 80d7 	beq.w	80043b6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004214:	461a      	mov	r2, r3
 8004216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800421a:	6093      	str	r3, [r2, #8]
 800421c:	e0cb      	b.n	80043b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f003 0320 	and.w	r3, r3, #32
 8004224:	2b00      	cmp	r3, #0
 8004226:	d009      	beq.n	800423c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004234:	461a      	mov	r2, r3
 8004236:	2320      	movs	r3, #32
 8004238:	6093      	str	r3, [r2, #8]
 800423a:	e0bc      	b.n	80043b6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004242:	2b00      	cmp	r3, #0
 8004244:	f040 80b7 	bne.w	80043b6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4a5d      	ldr	r2, [pc, #372]	; (80043c0 <PCD_EP_OutXfrComplete_int+0x210>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d90f      	bls.n	8004270 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004266:	461a      	mov	r2, r3
 8004268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800426c:	6093      	str	r3, [r2, #8]
 800426e:	e0a2      	b.n	80043b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	4613      	mov	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004282:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	0159      	lsls	r1, r3, #5
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	440b      	add	r3, r1
 800428c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004296:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	4613      	mov	r3, r2
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	1a9b      	subs	r3, r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4403      	add	r3, r0
 80042a6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80042aa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	4613      	mov	r3, r2
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	1a9b      	subs	r3, r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80042be:	6819      	ldr	r1, [r3, #0]
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	4613      	mov	r3, r2
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	1a9b      	subs	r3, r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4403      	add	r3, r0
 80042ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4419      	add	r1, r3
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	4613      	mov	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4403      	add	r3, r0
 80042e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80042e8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d114      	bne.n	800431a <PCD_EP_OutXfrComplete_int+0x16a>
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	1a9b      	subs	r3, r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	440b      	add	r3, r1
 80042fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d108      	bne.n	800431a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6818      	ldr	r0, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004312:	461a      	mov	r2, r3
 8004314:	2101      	movs	r1, #1
 8004316:	f003 fa25 	bl	8007764 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	4619      	mov	r1, r3
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f007 fc5f 	bl	800bbe4 <HAL_PCD_DataOutStageCallback>
 8004326:	e046      	b.n	80043b6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4a26      	ldr	r2, [pc, #152]	; (80043c4 <PCD_EP_OutXfrComplete_int+0x214>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d124      	bne.n	800437a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004346:	461a      	mov	r2, r3
 8004348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800434c:	6093      	str	r3, [r2, #8]
 800434e:	e032      	b.n	80043b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f003 0320 	and.w	r3, r3, #32
 8004356:	2b00      	cmp	r3, #0
 8004358:	d008      	beq.n	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	4413      	add	r3, r2
 8004362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004366:	461a      	mov	r2, r3
 8004368:	2320      	movs	r3, #32
 800436a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	b2db      	uxtb	r3, r3
 8004370:	4619      	mov	r1, r3
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f007 fc36 	bl	800bbe4 <HAL_PCD_DataOutStageCallback>
 8004378:	e01d      	b.n	80043b6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d114      	bne.n	80043aa <PCD_EP_OutXfrComplete_int+0x1fa>
 8004380:	6879      	ldr	r1, [r7, #4]
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	4613      	mov	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	1a9b      	subs	r3, r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	440b      	add	r3, r1
 800438e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d108      	bne.n	80043aa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80043a2:	461a      	mov	r2, r3
 80043a4:	2100      	movs	r1, #0
 80043a6:	f003 f9dd 	bl	8007764 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	4619      	mov	r1, r3
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f007 fc17 	bl	800bbe4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	4f54300a 	.word	0x4f54300a
 80043c4:	4f54310a 	.word	0x4f54310a

080043c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	333c      	adds	r3, #60	; 0x3c
 80043e0:	3304      	adds	r3, #4
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4a15      	ldr	r2, [pc, #84]	; (8004450 <PCD_EP_OutSetupPacket_int+0x88>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d90e      	bls.n	800441c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004404:	2b00      	cmp	r3, #0
 8004406:	d009      	beq.n	800441c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004414:	461a      	mov	r2, r3
 8004416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800441a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f007 fbcf 	bl	800bbc0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4a0a      	ldr	r2, [pc, #40]	; (8004450 <PCD_EP_OutSetupPacket_int+0x88>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d90c      	bls.n	8004444 <PCD_EP_OutSetupPacket_int+0x7c>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d108      	bne.n	8004444 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6818      	ldr	r0, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800443c:	461a      	mov	r2, r3
 800443e:	2101      	movs	r1, #1
 8004440:	f003 f990 	bl	8007764 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	4f54300a 	.word	0x4f54300a

08004454 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	70fb      	strb	r3, [r7, #3]
 8004460:	4613      	mov	r3, r2
 8004462:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d107      	bne.n	8004482 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004472:	883b      	ldrh	r3, [r7, #0]
 8004474:	0419      	lsls	r1, r3, #16
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	430a      	orrs	r2, r1
 800447e:	629a      	str	r2, [r3, #40]	; 0x28
 8004480:	e028      	b.n	80044d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004488:	0c1b      	lsrs	r3, r3, #16
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	4413      	add	r3, r2
 800448e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004490:	2300      	movs	r3, #0
 8004492:	73fb      	strb	r3, [r7, #15]
 8004494:	e00d      	b.n	80044b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	7bfb      	ldrb	r3, [r7, #15]
 800449c:	3340      	adds	r3, #64	; 0x40
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	0c1b      	lsrs	r3, r3, #16
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	4413      	add	r3, r2
 80044aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	3301      	adds	r3, #1
 80044b0:	73fb      	strb	r3, [r7, #15]
 80044b2:	7bfa      	ldrb	r2, [r7, #15]
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d3ec      	bcc.n	8004496 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80044bc:	883b      	ldrh	r3, [r7, #0]
 80044be:	0418      	lsls	r0, r3, #16
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6819      	ldr	r1, [r3, #0]
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	4302      	orrs	r2, r0
 80044cc:	3340      	adds	r3, #64	; 0x40
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	460b      	mov	r3, r1
 80044ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	887a      	ldrh	r2, [r7, #2]
 80044f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004536:	f043 0303 	orr.w	r3, r3, #3
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_PCDEx_BCD_VBUSDetect>:
  * @brief  Handle BatteryCharging Process.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCDEx_BCD_VBUSDetect(PCD_HandleTypeDef *hpcd)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = HAL_GetTick();
 800455a:	f7fc f88f 	bl	800067c <HAL_GetTick>
 800455e:	60b8      	str	r0, [r7, #8]

  /* Enable DCD : Data Contact Detect */
  USBx->GCCFG |= USB_OTG_GCCFG_DCDEN;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Wait Detect flag or a timeout is happen*/
  while ((USBx->GCCFG & USB_OTG_GCCFG_DCDET) == 0U)
 800456c:	e00c      	b.n	8004588 <HAL_PCDEx_BCD_VBUSDetect+0x3c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > 1000U)
 800456e:	f7fc f885 	bl	800067c <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800457c:	d904      	bls.n	8004588 <HAL_PCDEx_BCD_VBUSDetect+0x3c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->BCDCallback(hpcd, PCD_BCD_ERROR);
#else
      HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_ERROR);
 800457e:	21ff      	movs	r1, #255	; 0xff
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f880 	bl	8004686 <HAL_PCDEx_BCD_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      return;
 8004586:	e057      	b.n	8004638 <HAL_PCDEx_BCD_VBUSDetect+0xec>
  while ((USBx->GCCFG & USB_OTG_GCCFG_DCDET) == 0U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0ec      	beq.n	800456e <HAL_PCDEx_BCD_VBUSDetect+0x22>
    }
  }

  /* Right response got */
  HAL_Delay(200U);
 8004594:	20c8      	movs	r0, #200	; 0xc8
 8004596:	f7fc f87d 	bl	8000694 <HAL_Delay>

  /* Check Detect flag*/
  if ((USBx->GCCFG & USB_OTG_GCCFG_DCDET) == USB_OTG_GCCFG_DCDET)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d103      	bne.n	80045ae <HAL_PCDEx_BCD_VBUSDetect+0x62>
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_CONTACT_DETECTION);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_CONTACT_DETECTION);
 80045a6:	21fe      	movs	r1, #254	; 0xfe
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f86c 	bl	8004686 <HAL_PCDEx_BCD_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /*Primary detection: checks if connected to Standard Downstream Port
  (without charging capability) */
  USBx->GCCFG &= ~ USB_OTG_GCCFG_DCDEN;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(50U);
 80045ba:	2032      	movs	r0, #50	; 0x32
 80045bc:	f7fc f86a 	bl	8000694 <HAL_Delay>
  USBx->GCCFG |=  USB_OTG_GCCFG_PDEN;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(50U);
 80045cc:	2032      	movs	r0, #50	; 0x32
 80045ce:	f7fc f861 	bl	8000694 <HAL_Delay>

  if ((USBx->GCCFG & USB_OTG_GCCFG_PDET) == 0U)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d104      	bne.n	80045e8 <HAL_PCDEx_BCD_VBUSDetect+0x9c>
  {
    /* Case of Standard Downstream Port */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_STD_DOWNSTREAM_PORT);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_STD_DOWNSTREAM_PORT);
 80045de:	21fd      	movs	r1, #253	; 0xfd
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f850 	bl	8004686 <HAL_PCDEx_BCD_Callback>
 80045e6:	e020      	b.n	800462a <HAL_PCDEx_BCD_VBUSDetect+0xde>
  }
  else
  {
    /* start secondary detection to check connection to Charging Downstream
    Port or Dedicated Charging Port */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_PDEN;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(50U);
 80045f4:	2032      	movs	r0, #50	; 0x32
 80045f6:	f7fc f84d 	bl	8000694 <HAL_Delay>
    USBx->GCCFG |=  USB_OTG_GCCFG_SDEN;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(50U);
 8004606:	2032      	movs	r0, #50	; 0x32
 8004608:	f7fc f844 	bl	8000694 <HAL_Delay>

    if ((USBx->GCCFG & USB_OTG_GCCFG_SDET) == USB_OTG_GCCFG_SDET)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b04      	cmp	r3, #4
 8004616:	d104      	bne.n	8004622 <HAL_PCDEx_BCD_VBUSDetect+0xd6>
    {
      /* case Dedicated Charging Port  */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->BCDCallback(hpcd, PCD_BCD_DEDICATED_CHARGING_PORT);
#else
      HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DEDICATED_CHARGING_PORT);
 8004618:	21fb      	movs	r1, #251	; 0xfb
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f833 	bl	8004686 <HAL_PCDEx_BCD_Callback>
 8004620:	e003      	b.n	800462a <HAL_PCDEx_BCD_VBUSDetect+0xde>
    {
      /* case Charging Downstream Port  */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->BCDCallback(hpcd, PCD_BCD_CHARGING_DOWNSTREAM_PORT);
#else
      HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_CHARGING_DOWNSTREAM_PORT);
 8004622:	21fc      	movs	r1, #252	; 0xfc
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f82e 	bl	8004686 <HAL_PCDEx_BCD_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Battery Charging capability discovery finished */
  (void)HAL_PCDEx_DeActivateBCD(hpcd);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f807 	bl	800463e <HAL_PCDEx_DeActivateBCD>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->BCDCallback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
#else
  HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
 8004630:	2100      	movs	r1, #0
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f827 	bl	8004686 <HAL_PCDEx_BCD_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
}
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_PCDEx_DeActivateBCD>:
  * @brief  Deactivate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_DeActivateBCD(PCD_HandleTypeDef *hpcd)
{
 800463e:	b480      	push	{r7}
 8004640:	b085      	sub	sp, #20
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60fb      	str	r3, [r7, #12]

  USBx->GCCFG &= ~(USB_OTG_GCCFG_SDEN);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_PDEN);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery charging */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	639a      	str	r2, [r3, #56]	; 0x38

  hpcd->battery_charging_active = 0U;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <HAL_PCDEx_BCD_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_BCD_Callback(PCD_HandleTypeDef *hpcd, PCD_BCD_MsgTypeDef msg)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	460b      	mov	r3, r1
 8004690:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_BCD_Callback could be implemented in the user file
   */
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
	...

080046a0 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80046a4:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a07      	ldr	r2, [pc, #28]	; (80046c8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80046aa:	f043 0302 	orr.w	r3, r3, #2
 80046ae:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80046b0:	4b06      	ldr	r3, [pc, #24]	; (80046cc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	4a05      	ldr	r2, [pc, #20]	; (80046cc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80046b6:	f043 0304 	orr.w	r3, r3, #4
 80046ba:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80046bc:	bf30      	wfi
}
 80046be:	bf00      	nop
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	40007000 	.word	0x40007000
 80046cc:	e000ed00 	.word	0xe000ed00

080046d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e0cc      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046e4:	4b68      	ldr	r3, [pc, #416]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 030f 	and.w	r3, r3, #15
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d90c      	bls.n	800470c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f2:	4b65      	ldr	r3, [pc, #404]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fa:	4b63      	ldr	r3, [pc, #396]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d001      	beq.n	800470c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0b8      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d020      	beq.n	800475a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004724:	4b59      	ldr	r3, [pc, #356]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	4a58      	ldr	r2, [pc, #352]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800472e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800473c:	4b53      	ldr	r3, [pc, #332]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	4a52      	ldr	r2, [pc, #328]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004748:	4b50      	ldr	r3, [pc, #320]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	494d      	ldr	r1, [pc, #308]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	4313      	orrs	r3, r2
 8004758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d044      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d107      	bne.n	800477e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476e:	4b47      	ldr	r3, [pc, #284]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d119      	bne.n	80047ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e07f      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b02      	cmp	r3, #2
 8004784:	d003      	beq.n	800478e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800478a:	2b03      	cmp	r3, #3
 800478c:	d107      	bne.n	800479e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800478e:	4b3f      	ldr	r3, [pc, #252]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e06f      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800479e:	4b3b      	ldr	r3, [pc, #236]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e067      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ae:	4b37      	ldr	r3, [pc, #220]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f023 0203 	bic.w	r2, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	4934      	ldr	r1, [pc, #208]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047c0:	f7fb ff5c 	bl	800067c <HAL_GetTick>
 80047c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c6:	e00a      	b.n	80047de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c8:	f7fb ff58 	bl	800067c <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e04f      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047de:	4b2b      	ldr	r3, [pc, #172]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 020c 	and.w	r2, r3, #12
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d1eb      	bne.n	80047c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047f0:	4b25      	ldr	r3, [pc, #148]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 030f 	and.w	r3, r3, #15
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d20c      	bcs.n	8004818 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047fe:	4b22      	ldr	r3, [pc, #136]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004806:	4b20      	ldr	r3, [pc, #128]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d001      	beq.n	8004818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e032      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d008      	beq.n	8004836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004824:	4b19      	ldr	r3, [pc, #100]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	4916      	ldr	r1, [pc, #88]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	4313      	orrs	r3, r2
 8004834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d009      	beq.n	8004856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004842:	4b12      	ldr	r3, [pc, #72]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	490e      	ldr	r1, [pc, #56]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	4313      	orrs	r3, r2
 8004854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004856:	f000 f821 	bl	800489c <HAL_RCC_GetSysClockFreq>
 800485a:	4601      	mov	r1, r0
 800485c:	4b0b      	ldr	r3, [pc, #44]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	091b      	lsrs	r3, r3, #4
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	4a0a      	ldr	r2, [pc, #40]	; (8004890 <HAL_RCC_ClockConfig+0x1c0>)
 8004868:	5cd3      	ldrb	r3, [r2, r3]
 800486a:	fa21 f303 	lsr.w	r3, r1, r3
 800486e:	4a09      	ldr	r2, [pc, #36]	; (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 8004870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004872:	4b09      	ldr	r3, [pc, #36]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f7fb febc 	bl	80005f4 <HAL_InitTick>

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40023c00 	.word	0x40023c00
 800488c:	40023800 	.word	0x40023800
 8004890:	0800ed3c 	.word	0x0800ed3c
 8004894:	200000d4 	.word	0x200000d4
 8004898:	20000000 	.word	0x20000000

0800489c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800489c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	607b      	str	r3, [r7, #4]
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	2300      	movs	r3, #0
 80048ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048b2:	4b63      	ldr	r3, [pc, #396]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d007      	beq.n	80048ce <HAL_RCC_GetSysClockFreq+0x32>
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d008      	beq.n	80048d4 <HAL_RCC_GetSysClockFreq+0x38>
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f040 80b4 	bne.w	8004a30 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048c8:	4b5e      	ldr	r3, [pc, #376]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80048ca:	60bb      	str	r3, [r7, #8]
       break;
 80048cc:	e0b3      	b.n	8004a36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048ce:	4b5e      	ldr	r3, [pc, #376]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80048d0:	60bb      	str	r3, [r7, #8]
      break;
 80048d2:	e0b0      	b.n	8004a36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048d4:	4b5a      	ldr	r3, [pc, #360]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048de:	4b58      	ldr	r3, [pc, #352]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d04a      	beq.n	8004980 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ea:	4b55      	ldr	r3, [pc, #340]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	099b      	lsrs	r3, r3, #6
 80048f0:	f04f 0400 	mov.w	r4, #0
 80048f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	ea03 0501 	and.w	r5, r3, r1
 8004900:	ea04 0602 	and.w	r6, r4, r2
 8004904:	4629      	mov	r1, r5
 8004906:	4632      	mov	r2, r6
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	f04f 0400 	mov.w	r4, #0
 8004910:	0154      	lsls	r4, r2, #5
 8004912:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004916:	014b      	lsls	r3, r1, #5
 8004918:	4619      	mov	r1, r3
 800491a:	4622      	mov	r2, r4
 800491c:	1b49      	subs	r1, r1, r5
 800491e:	eb62 0206 	sbc.w	r2, r2, r6
 8004922:	f04f 0300 	mov.w	r3, #0
 8004926:	f04f 0400 	mov.w	r4, #0
 800492a:	0194      	lsls	r4, r2, #6
 800492c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004930:	018b      	lsls	r3, r1, #6
 8004932:	1a5b      	subs	r3, r3, r1
 8004934:	eb64 0402 	sbc.w	r4, r4, r2
 8004938:	f04f 0100 	mov.w	r1, #0
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	00e2      	lsls	r2, r4, #3
 8004942:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004946:	00d9      	lsls	r1, r3, #3
 8004948:	460b      	mov	r3, r1
 800494a:	4614      	mov	r4, r2
 800494c:	195b      	adds	r3, r3, r5
 800494e:	eb44 0406 	adc.w	r4, r4, r6
 8004952:	f04f 0100 	mov.w	r1, #0
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	0262      	lsls	r2, r4, #9
 800495c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004960:	0259      	lsls	r1, r3, #9
 8004962:	460b      	mov	r3, r1
 8004964:	4614      	mov	r4, r2
 8004966:	4618      	mov	r0, r3
 8004968:	4621      	mov	r1, r4
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f04f 0400 	mov.w	r4, #0
 8004970:	461a      	mov	r2, r3
 8004972:	4623      	mov	r3, r4
 8004974:	f7fb fc9c 	bl	80002b0 <__aeabi_uldivmod>
 8004978:	4603      	mov	r3, r0
 800497a:	460c      	mov	r4, r1
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	e049      	b.n	8004a14 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004980:	4b2f      	ldr	r3, [pc, #188]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	099b      	lsrs	r3, r3, #6
 8004986:	f04f 0400 	mov.w	r4, #0
 800498a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	ea03 0501 	and.w	r5, r3, r1
 8004996:	ea04 0602 	and.w	r6, r4, r2
 800499a:	4629      	mov	r1, r5
 800499c:	4632      	mov	r2, r6
 800499e:	f04f 0300 	mov.w	r3, #0
 80049a2:	f04f 0400 	mov.w	r4, #0
 80049a6:	0154      	lsls	r4, r2, #5
 80049a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80049ac:	014b      	lsls	r3, r1, #5
 80049ae:	4619      	mov	r1, r3
 80049b0:	4622      	mov	r2, r4
 80049b2:	1b49      	subs	r1, r1, r5
 80049b4:	eb62 0206 	sbc.w	r2, r2, r6
 80049b8:	f04f 0300 	mov.w	r3, #0
 80049bc:	f04f 0400 	mov.w	r4, #0
 80049c0:	0194      	lsls	r4, r2, #6
 80049c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049c6:	018b      	lsls	r3, r1, #6
 80049c8:	1a5b      	subs	r3, r3, r1
 80049ca:	eb64 0402 	sbc.w	r4, r4, r2
 80049ce:	f04f 0100 	mov.w	r1, #0
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	00e2      	lsls	r2, r4, #3
 80049d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049dc:	00d9      	lsls	r1, r3, #3
 80049de:	460b      	mov	r3, r1
 80049e0:	4614      	mov	r4, r2
 80049e2:	195b      	adds	r3, r3, r5
 80049e4:	eb44 0406 	adc.w	r4, r4, r6
 80049e8:	f04f 0100 	mov.w	r1, #0
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	02a2      	lsls	r2, r4, #10
 80049f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80049f6:	0299      	lsls	r1, r3, #10
 80049f8:	460b      	mov	r3, r1
 80049fa:	4614      	mov	r4, r2
 80049fc:	4618      	mov	r0, r3
 80049fe:	4621      	mov	r1, r4
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f04f 0400 	mov.w	r4, #0
 8004a06:	461a      	mov	r2, r3
 8004a08:	4623      	mov	r3, r4
 8004a0a:	f7fb fc51 	bl	80002b0 <__aeabi_uldivmod>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	460c      	mov	r4, r1
 8004a12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a14:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	0c1b      	lsrs	r3, r3, #16
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	3301      	adds	r3, #1
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2c:	60bb      	str	r3, [r7, #8]
      break;
 8004a2e:	e002      	b.n	8004a36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a30:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a32:	60bb      	str	r3, [r7, #8]
      break;
 8004a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a36:	68bb      	ldr	r3, [r7, #8]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a40:	40023800 	.word	0x40023800
 8004a44:	00f42400 	.word	0x00f42400
 8004a48:	007a1200 	.word	0x007a1200

08004a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a50:	4b03      	ldr	r3, [pc, #12]	; (8004a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a52:	681b      	ldr	r3, [r3, #0]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	200000d4 	.word	0x200000d4

08004a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a68:	f7ff fff0 	bl	8004a4c <HAL_RCC_GetHCLKFreq>
 8004a6c:	4601      	mov	r1, r0
 8004a6e:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	0a9b      	lsrs	r3, r3, #10
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	4a03      	ldr	r2, [pc, #12]	; (8004a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a7a:	5cd3      	ldrb	r3, [r2, r3]
 8004a7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40023800 	.word	0x40023800
 8004a88:	0800ed4c 	.word	0x0800ed4c

08004a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a90:	f7ff ffdc 	bl	8004a4c <HAL_RCC_GetHCLKFreq>
 8004a94:	4601      	mov	r1, r0
 8004a96:	4b05      	ldr	r3, [pc, #20]	; (8004aac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	0b5b      	lsrs	r3, r3, #13
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	4a03      	ldr	r2, [pc, #12]	; (8004ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aa2:	5cd3      	ldrb	r3, [r2, r3]
 8004aa4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	40023800 	.word	0x40023800
 8004ab0:	0800ed4c 	.word	0x0800ed4c

08004ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d010      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004ad4:	4b87      	ldr	r3, [pc, #540]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ada:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	4984      	ldr	r1, [pc, #528]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8004af2:	2301      	movs	r3, #1
 8004af4:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d010      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004b02:	4b7c      	ldr	r3, [pc, #496]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b08:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	4978      	ldr	r1, [pc, #480]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8004b20:	2301      	movs	r3, #1
 8004b22:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0308 	and.w	r3, r3, #8
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8083 	beq.w	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b32:	2300      	movs	r3, #0
 8004b34:	60bb      	str	r3, [r7, #8]
 8004b36:	4b6f      	ldr	r3, [pc, #444]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	4a6e      	ldr	r2, [pc, #440]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b40:	6413      	str	r3, [r2, #64]	; 0x40
 8004b42:	4b6c      	ldr	r3, [pc, #432]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4a:	60bb      	str	r3, [r7, #8]
 8004b4c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b4e:	4b6a      	ldr	r3, [pc, #424]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a69      	ldr	r2, [pc, #420]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b5a:	f7fb fd8f 	bl	800067c <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b60:	e008      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b62:	f7fb fd8b 	bl	800067c <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e162      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b74:	4b60      	ldr	r3, [pc, #384]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0f0      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b80:	4b5c      	ldr	r3, [pc, #368]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b88:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d02f      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d028      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b9e:	4b55      	ldr	r3, [pc, #340]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ba8:	4b54      	ldr	r3, [pc, #336]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bae:	4b53      	ldr	r3, [pc, #332]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004bb4:	4a4f      	ldr	r2, [pc, #316]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bba:	4b4e      	ldr	r3, [pc, #312]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d114      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004bc6:	f7fb fd59 	bl	800067c <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bcc:	e00a      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bce:	f7fb fd55 	bl	800067c <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e12a      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be4:	4b43      	ldr	r3, [pc, #268]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0ee      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bfc:	d10d      	bne.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004bfe:	4b3d      	ldr	r3, [pc, #244]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c12:	4938      	ldr	r1, [pc, #224]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	608b      	str	r3, [r1, #8]
 8004c18:	e005      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004c1a:	4b36      	ldr	r3, [pc, #216]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	4a35      	ldr	r2, [pc, #212]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c20:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c24:	6093      	str	r3, [r2, #8]
 8004c26:	4b33      	ldr	r3, [pc, #204]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c32:	4930      	ldr	r1, [pc, #192]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d004      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8004c4a:	4b2d      	ldr	r3, [pc, #180]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004c4c:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0310 	and.w	r3, r3, #16
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004c5a:	4b26      	ldr	r3, [pc, #152]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	4922      	ldr	r1, [pc, #136]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0320 	and.w	r3, r3, #32
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d011      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c7c:	4b1d      	ldr	r3, [pc, #116]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c82:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8a:	491a      	ldr	r1, [pc, #104]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c9a:	d101      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004cac:	4b11      	ldr	r3, [pc, #68]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cb2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	490e      	ldr	r1, [pc, #56]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d004      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b80      	cmp	r3, #128	; 0x80
 8004cce:	f040 8091 	bne.w	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004cd2:	4b0c      	ldr	r3, [pc, #48]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cd8:	f7fb fcd0 	bl	800067c <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cde:	e013      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ce0:	f7fb fccc 	bl	800067c <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d90c      	bls.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e0a3      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004cf2:	bf00      	nop
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	40007000 	.word	0x40007000
 8004cfc:	42470e40 	.word	0x42470e40
 8004d00:	424711e0 	.word	0x424711e0
 8004d04:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d08:	4b4e      	ldr	r3, [pc, #312]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1e5      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004d14:	4a4c      	ldr	r2, [pc, #304]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d023      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d019      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d004      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d58:	d00e      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d019      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d115      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d76:	d110      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	019b      	lsls	r3, r3, #6
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	061b      	lsls	r3, r3, #24
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	071b      	lsls	r3, r3, #28
 8004d92:	492c      	ldr	r1, [pc, #176]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d010      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	019b      	lsls	r3, r3, #6
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	061b      	lsls	r3, r3, #24
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	071b      	lsls	r3, r3, #28
 8004dc0:	4920      	ldr	r1, [pc, #128]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004dc8:	4b20      	ldr	r3, [pc, #128]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004dca:	2201      	movs	r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004dce:	f7fb fc55 	bl	800067c <HAL_GetTick>
 8004dd2:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dd4:	e008      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004dd6:	f7fb fc51 	bl	800067c <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e028      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004de8:	4b16      	ldr	r3, [pc, #88]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0f0      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e00:	4b10      	ldr	r3, [pc, #64]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0e:	490d      	ldr	r1, [pc, #52]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e22:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e28:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e30:	4904      	ldr	r1, [pc, #16]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40023800 	.word	0x40023800
 8004e48:	424710d8 	.word	0x424710d8
 8004e4c:	42470068 	.word	0x42470068

08004e50 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d003      	beq.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	f000 8098 	beq.w	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004e74:	e12d      	b.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8004e76:	4b9a      	ldr	r3, [pc, #616]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e7c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004e80:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e88:	d00c      	beq.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8004e8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e8e:	d802      	bhi.n	8004e96 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8004e94:	e082      	b.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8004e96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e9a:	d047      	beq.n	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8004e9c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004ea0:	d06f      	beq.n	8004f82 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 8004ea2:	e07b      	b.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ea4:	4b8f      	ldr	r3, [pc, #572]	; (80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ea6:	617b      	str	r3, [r7, #20]
          break;
 8004ea8:	e07b      	b.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8004eaa:	4b8d      	ldr	r3, [pc, #564]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eb8:	d109      	bne.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004eba:	4b89      	ldr	r3, [pc, #548]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ec4:	4a87      	ldr	r2, [pc, #540]	; (80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eca:	613b      	str	r3, [r7, #16]
 8004ecc:	e019      	b.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ece:	4b84      	ldr	r3, [pc, #528]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ed6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eda:	d109      	bne.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004edc:	4b80      	ldr	r3, [pc, #512]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ee2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ee6:	4a80      	ldr	r2, [pc, #512]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eec:	613b      	str	r3, [r7, #16]
 8004eee:	e008      	b.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004ef0:	4b7b      	ldr	r3, [pc, #492]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004efa:	4a7c      	ldr	r2, [pc, #496]	; (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f00:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004f02:	4b77      	ldr	r3, [pc, #476]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f08:	099b      	lsrs	r3, r3, #6
 8004f0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	fb02 f303 	mul.w	r3, r2, r3
 8004f14:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004f16:	4b72      	ldr	r3, [pc, #456]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f1c:	0f1b      	lsrs	r3, r3, #28
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f28:	617b      	str	r3, [r7, #20]
          break;
 8004f2a:	e03a      	b.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004f2c:	4b6c      	ldr	r3, [pc, #432]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f38:	d108      	bne.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f3a:	4b69      	ldr	r3, [pc, #420]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f42:	4a69      	ldr	r2, [pc, #420]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f48:	613b      	str	r3, [r7, #16]
 8004f4a:	e007      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f4c:	4b64      	ldr	r3, [pc, #400]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f54:	4a65      	ldr	r2, [pc, #404]	; (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5a:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004f5c:	4b60      	ldr	r3, [pc, #384]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	099b      	lsrs	r3, r3, #6
 8004f62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	fb02 f303 	mul.w	r3, r2, r3
 8004f6c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004f6e:	4b5c      	ldr	r3, [pc, #368]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	0f1b      	lsrs	r3, r3, #28
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7e:	617b      	str	r3, [r7, #20]
          break;
 8004f80:	e00f      	b.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004f82:	4b57      	ldr	r3, [pc, #348]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f8e:	d102      	bne.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 8004f90:	4b55      	ldr	r3, [pc, #340]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004f92:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004f94:	e005      	b.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8004f96:	4b55      	ldr	r3, [pc, #340]	; (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004f98:	617b      	str	r3, [r7, #20]
          break;
 8004f9a:	e002      	b.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	617b      	str	r3, [r7, #20]
          break;
 8004fa0:	bf00      	nop
        }
      }
      break;
 8004fa2:	e096      	b.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8004fa4:	4b4e      	ldr	r3, [pc, #312]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004faa:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8004fae:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fb6:	d00c      	beq.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8004fb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fbc:	d802      	bhi.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8004fc2:	e082      	b.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8004fc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fc8:	d047      	beq.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8004fca:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004fce:	d06f      	beq.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004fd0:	e07b      	b.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004fd2:	4b44      	ldr	r3, [pc, #272]	; (80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004fd4:	617b      	str	r3, [r7, #20]
          break;
 8004fd6:	e07b      	b.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8004fd8:	4b41      	ldr	r3, [pc, #260]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fe6:	d109      	bne.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004fe8:	4b3d      	ldr	r3, [pc, #244]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ff2:	4a3c      	ldr	r2, [pc, #240]	; (80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff8:	613b      	str	r3, [r7, #16]
 8004ffa:	e019      	b.n	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ffc:	4b38      	ldr	r3, [pc, #224]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005004:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005008:	d109      	bne.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800500a:	4b35      	ldr	r3, [pc, #212]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800500c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005014:	4a34      	ldr	r2, [pc, #208]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005016:	fbb2 f3f3 	udiv	r3, r2, r3
 800501a:	613b      	str	r3, [r7, #16]
 800501c:	e008      	b.n	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800501e:	4b30      	ldr	r3, [pc, #192]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005028:	4a30      	ldr	r2, [pc, #192]	; (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800502a:	fbb2 f3f3 	udiv	r3, r2, r3
 800502e:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005030:	4b2b      	ldr	r3, [pc, #172]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005036:	099b      	lsrs	r3, r3, #6
 8005038:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	fb02 f303 	mul.w	r3, r2, r3
 8005042:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005044:	4b26      	ldr	r3, [pc, #152]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800504a:	0f1b      	lsrs	r3, r3, #28
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	fbb2 f3f3 	udiv	r3, r2, r3
 8005056:	617b      	str	r3, [r7, #20]
          break;
 8005058:	e03a      	b.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800505a:	4b21      	ldr	r3, [pc, #132]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005062:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005066:	d108      	bne.n	800507a <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005068:	4b1d      	ldr	r3, [pc, #116]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005070:	4a1d      	ldr	r2, [pc, #116]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005072:	fbb2 f3f3 	udiv	r3, r2, r3
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	e007      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800507a:	4b19      	ldr	r3, [pc, #100]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005082:	4a1a      	ldr	r2, [pc, #104]	; (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005084:	fbb2 f3f3 	udiv	r3, r2, r3
 8005088:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800508a:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	099b      	lsrs	r3, r3, #6
 8005090:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	fb02 f303 	mul.w	r3, r2, r3
 800509a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800509c:	4b10      	ldr	r3, [pc, #64]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	0f1b      	lsrs	r3, r3, #28
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ac:	617b      	str	r3, [r7, #20]
          break;
 80050ae:	e00f      	b.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050bc:	d102      	bne.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 80050be:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80050c0:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80050c2:	e005      	b.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 80050c4:	4b09      	ldr	r3, [pc, #36]	; (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80050c6:	617b      	str	r3, [r7, #20]
          break;
 80050c8:	e002      	b.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	617b      	str	r3, [r7, #20]
          break;
 80050ce:	bf00      	nop
        }
      }
      break;
 80050d0:	bf00      	nop
    }
  }
  return frequency;
 80050d2:	697b      	ldr	r3, [r7, #20]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	371c      	adds	r7, #28
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	40023800 	.word	0x40023800
 80050e4:	00bb8000 	.word	0x00bb8000
 80050e8:	007a1200 	.word	0x007a1200
 80050ec:	00f42400 	.word	0x00f42400

080050f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d075      	beq.n	80051f4 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005108:	4ba2      	ldr	r3, [pc, #648]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f003 030c 	and.w	r3, r3, #12
 8005110:	2b04      	cmp	r3, #4
 8005112:	d00c      	beq.n	800512e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005114:	4b9f      	ldr	r3, [pc, #636]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800511c:	2b08      	cmp	r3, #8
 800511e:	d112      	bne.n	8005146 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005120:	4b9c      	ldr	r3, [pc, #624]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005128:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800512c:	d10b      	bne.n	8005146 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800512e:	4b99      	ldr	r3, [pc, #612]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d05b      	beq.n	80051f2 <HAL_RCC_OscConfig+0x102>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d157      	bne.n	80051f2 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e20b      	b.n	800555e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800514e:	d106      	bne.n	800515e <HAL_RCC_OscConfig+0x6e>
 8005150:	4b90      	ldr	r3, [pc, #576]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a8f      	ldr	r2, [pc, #572]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 8005156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800515a:	6013      	str	r3, [r2, #0]
 800515c:	e01d      	b.n	800519a <HAL_RCC_OscConfig+0xaa>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005166:	d10c      	bne.n	8005182 <HAL_RCC_OscConfig+0x92>
 8005168:	4b8a      	ldr	r3, [pc, #552]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a89      	ldr	r2, [pc, #548]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 800516e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	4b87      	ldr	r3, [pc, #540]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a86      	ldr	r2, [pc, #536]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 800517a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800517e:	6013      	str	r3, [r2, #0]
 8005180:	e00b      	b.n	800519a <HAL_RCC_OscConfig+0xaa>
 8005182:	4b84      	ldr	r3, [pc, #528]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a83      	ldr	r2, [pc, #524]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 8005188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	4b81      	ldr	r3, [pc, #516]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a80      	ldr	r2, [pc, #512]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 8005194:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005198:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d013      	beq.n	80051ca <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a2:	f7fb fa6b 	bl	800067c <HAL_GetTick>
 80051a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051a8:	e008      	b.n	80051bc <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051aa:	f7fb fa67 	bl	800067c <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b64      	cmp	r3, #100	; 0x64
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e1d0      	b.n	800555e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051bc:	4b75      	ldr	r3, [pc, #468]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0f0      	beq.n	80051aa <HAL_RCC_OscConfig+0xba>
 80051c8:	e014      	b.n	80051f4 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ca:	f7fb fa57 	bl	800067c <HAL_GetTick>
 80051ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051d0:	e008      	b.n	80051e4 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051d2:	f7fb fa53 	bl	800067c <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b64      	cmp	r3, #100	; 0x64
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e1bc      	b.n	800555e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051e4:	4b6b      	ldr	r3, [pc, #428]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1f0      	bne.n	80051d2 <HAL_RCC_OscConfig+0xe2>
 80051f0:	e000      	b.n	80051f4 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d063      	beq.n	80052c8 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005200:	4b64      	ldr	r3, [pc, #400]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f003 030c 	and.w	r3, r3, #12
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00b      	beq.n	8005224 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800520c:	4b61      	ldr	r3, [pc, #388]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005214:	2b08      	cmp	r3, #8
 8005216:	d11c      	bne.n	8005252 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005218:	4b5e      	ldr	r3, [pc, #376]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d116      	bne.n	8005252 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005224:	4b5b      	ldr	r3, [pc, #364]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d005      	beq.n	800523c <HAL_RCC_OscConfig+0x14c>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d001      	beq.n	800523c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e190      	b.n	800555e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800523c:	4b55      	ldr	r3, [pc, #340]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	00db      	lsls	r3, r3, #3
 800524a:	4952      	ldr	r1, [pc, #328]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 800524c:	4313      	orrs	r3, r2
 800524e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005250:	e03a      	b.n	80052c8 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d020      	beq.n	800529c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800525a:	4b4f      	ldr	r3, [pc, #316]	; (8005398 <HAL_RCC_OscConfig+0x2a8>)
 800525c:	2201      	movs	r2, #1
 800525e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005260:	f7fb fa0c 	bl	800067c <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005268:	f7fb fa08 	bl	800067c <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e171      	b.n	800555e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800527a:	4b46      	ldr	r3, [pc, #280]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0f0      	beq.n	8005268 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005286:	4b43      	ldr	r3, [pc, #268]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	493f      	ldr	r1, [pc, #252]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 8005296:	4313      	orrs	r3, r2
 8005298:	600b      	str	r3, [r1, #0]
 800529a:	e015      	b.n	80052c8 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800529c:	4b3e      	ldr	r3, [pc, #248]	; (8005398 <HAL_RCC_OscConfig+0x2a8>)
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a2:	f7fb f9eb 	bl	800067c <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052aa:	f7fb f9e7 	bl	800067c <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e150      	b.n	800555e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052bc:	4b35      	ldr	r3, [pc, #212]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1f0      	bne.n	80052aa <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0308 	and.w	r3, r3, #8
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d030      	beq.n	8005336 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d016      	beq.n	800530a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052dc:	4b2f      	ldr	r3, [pc, #188]	; (800539c <HAL_RCC_OscConfig+0x2ac>)
 80052de:	2201      	movs	r2, #1
 80052e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e2:	f7fb f9cb 	bl	800067c <HAL_GetTick>
 80052e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052e8:	e008      	b.n	80052fc <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052ea:	f7fb f9c7 	bl	800067c <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e130      	b.n	800555e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052fc:	4b25      	ldr	r3, [pc, #148]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 80052fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0f0      	beq.n	80052ea <HAL_RCC_OscConfig+0x1fa>
 8005308:	e015      	b.n	8005336 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800530a:	4b24      	ldr	r3, [pc, #144]	; (800539c <HAL_RCC_OscConfig+0x2ac>)
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005310:	f7fb f9b4 	bl	800067c <HAL_GetTick>
 8005314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005316:	e008      	b.n	800532a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005318:	f7fb f9b0 	bl	800067c <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e119      	b.n	800555e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800532a:	4b1a      	ldr	r3, [pc, #104]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 800532c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1f0      	bne.n	8005318 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 809f 	beq.w	8005482 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005344:	2300      	movs	r3, #0
 8005346:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005348:	4b12      	ldr	r3, [pc, #72]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 800534a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10f      	bne.n	8005374 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005354:	2300      	movs	r3, #0
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	4b0e      	ldr	r3, [pc, #56]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 800535a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535c:	4a0d      	ldr	r2, [pc, #52]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 800535e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005362:	6413      	str	r3, [r2, #64]	; 0x40
 8005364:	4b0b      	ldr	r3, [pc, #44]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005370:	2301      	movs	r3, #1
 8005372:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005374:	4b0a      	ldr	r3, [pc, #40]	; (80053a0 <HAL_RCC_OscConfig+0x2b0>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537c:	2b00      	cmp	r3, #0
 800537e:	d120      	bne.n	80053c2 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005380:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <HAL_RCC_OscConfig+0x2b0>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a06      	ldr	r2, [pc, #24]	; (80053a0 <HAL_RCC_OscConfig+0x2b0>)
 8005386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800538a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800538c:	f7fb f976 	bl	800067c <HAL_GetTick>
 8005390:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005392:	e010      	b.n	80053b6 <HAL_RCC_OscConfig+0x2c6>
 8005394:	40023800 	.word	0x40023800
 8005398:	42470000 	.word	0x42470000
 800539c:	42470e80 	.word	0x42470e80
 80053a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053a4:	f7fb f96a 	bl	800067c <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e0d3      	b.n	800555e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b6:	4b6c      	ldr	r3, [pc, #432]	; (8005568 <HAL_RCC_OscConfig+0x478>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0f0      	beq.n	80053a4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d106      	bne.n	80053d8 <HAL_RCC_OscConfig+0x2e8>
 80053ca:	4b68      	ldr	r3, [pc, #416]	; (800556c <HAL_RCC_OscConfig+0x47c>)
 80053cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ce:	4a67      	ldr	r2, [pc, #412]	; (800556c <HAL_RCC_OscConfig+0x47c>)
 80053d0:	f043 0301 	orr.w	r3, r3, #1
 80053d4:	6713      	str	r3, [r2, #112]	; 0x70
 80053d6:	e01c      	b.n	8005412 <HAL_RCC_OscConfig+0x322>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	2b05      	cmp	r3, #5
 80053de:	d10c      	bne.n	80053fa <HAL_RCC_OscConfig+0x30a>
 80053e0:	4b62      	ldr	r3, [pc, #392]	; (800556c <HAL_RCC_OscConfig+0x47c>)
 80053e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e4:	4a61      	ldr	r2, [pc, #388]	; (800556c <HAL_RCC_OscConfig+0x47c>)
 80053e6:	f043 0304 	orr.w	r3, r3, #4
 80053ea:	6713      	str	r3, [r2, #112]	; 0x70
 80053ec:	4b5f      	ldr	r3, [pc, #380]	; (800556c <HAL_RCC_OscConfig+0x47c>)
 80053ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f0:	4a5e      	ldr	r2, [pc, #376]	; (800556c <HAL_RCC_OscConfig+0x47c>)
 80053f2:	f043 0301 	orr.w	r3, r3, #1
 80053f6:	6713      	str	r3, [r2, #112]	; 0x70
 80053f8:	e00b      	b.n	8005412 <HAL_RCC_OscConfig+0x322>
 80053fa:	4b5c      	ldr	r3, [pc, #368]	; (800556c <HAL_RCC_OscConfig+0x47c>)
 80053fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fe:	4a5b      	ldr	r2, [pc, #364]	; (800556c <HAL_RCC_OscConfig+0x47c>)
 8005400:	f023 0301 	bic.w	r3, r3, #1
 8005404:	6713      	str	r3, [r2, #112]	; 0x70
 8005406:	4b59      	ldr	r3, [pc, #356]	; (800556c <HAL_RCC_OscConfig+0x47c>)
 8005408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540a:	4a58      	ldr	r2, [pc, #352]	; (800556c <HAL_RCC_OscConfig+0x47c>)
 800540c:	f023 0304 	bic.w	r3, r3, #4
 8005410:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d015      	beq.n	8005446 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800541a:	f7fb f92f 	bl	800067c <HAL_GetTick>
 800541e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005420:	e00a      	b.n	8005438 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005422:	f7fb f92b 	bl	800067c <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005430:	4293      	cmp	r3, r2
 8005432:	d901      	bls.n	8005438 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e092      	b.n	800555e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005438:	4b4c      	ldr	r3, [pc, #304]	; (800556c <HAL_RCC_OscConfig+0x47c>)
 800543a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0ee      	beq.n	8005422 <HAL_RCC_OscConfig+0x332>
 8005444:	e014      	b.n	8005470 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005446:	f7fb f919 	bl	800067c <HAL_GetTick>
 800544a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800544c:	e00a      	b.n	8005464 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800544e:	f7fb f915 	bl	800067c <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	f241 3288 	movw	r2, #5000	; 0x1388
 800545c:	4293      	cmp	r3, r2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e07c      	b.n	800555e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005464:	4b41      	ldr	r3, [pc, #260]	; (800556c <HAL_RCC_OscConfig+0x47c>)
 8005466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1ee      	bne.n	800544e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005470:	7dfb      	ldrb	r3, [r7, #23]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d105      	bne.n	8005482 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005476:	4b3d      	ldr	r3, [pc, #244]	; (800556c <HAL_RCC_OscConfig+0x47c>)
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	4a3c      	ldr	r2, [pc, #240]	; (800556c <HAL_RCC_OscConfig+0x47c>)
 800547c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005480:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d068      	beq.n	800555c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800548a:	4b38      	ldr	r3, [pc, #224]	; (800556c <HAL_RCC_OscConfig+0x47c>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 030c 	and.w	r3, r3, #12
 8005492:	2b08      	cmp	r3, #8
 8005494:	d060      	beq.n	8005558 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	2b02      	cmp	r3, #2
 800549c:	d145      	bne.n	800552a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800549e:	4b34      	ldr	r3, [pc, #208]	; (8005570 <HAL_RCC_OscConfig+0x480>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a4:	f7fb f8ea 	bl	800067c <HAL_GetTick>
 80054a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054aa:	e008      	b.n	80054be <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ac:	f7fb f8e6 	bl	800067c <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e04f      	b.n	800555e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054be:	4b2b      	ldr	r3, [pc, #172]	; (800556c <HAL_RCC_OscConfig+0x47c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1f0      	bne.n	80054ac <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	69da      	ldr	r2, [r3, #28]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	019b      	lsls	r3, r3, #6
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e0:	085b      	lsrs	r3, r3, #1
 80054e2:	3b01      	subs	r3, #1
 80054e4:	041b      	lsls	r3, r3, #16
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ec:	061b      	lsls	r3, r3, #24
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f4:	071b      	lsls	r3, r3, #28
 80054f6:	491d      	ldr	r1, [pc, #116]	; (800556c <HAL_RCC_OscConfig+0x47c>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054fc:	4b1c      	ldr	r3, [pc, #112]	; (8005570 <HAL_RCC_OscConfig+0x480>)
 80054fe:	2201      	movs	r2, #1
 8005500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005502:	f7fb f8bb 	bl	800067c <HAL_GetTick>
 8005506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005508:	e008      	b.n	800551c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800550a:	f7fb f8b7 	bl	800067c <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e020      	b.n	800555e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800551c:	4b13      	ldr	r3, [pc, #76]	; (800556c <HAL_RCC_OscConfig+0x47c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0f0      	beq.n	800550a <HAL_RCC_OscConfig+0x41a>
 8005528:	e018      	b.n	800555c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800552a:	4b11      	ldr	r3, [pc, #68]	; (8005570 <HAL_RCC_OscConfig+0x480>)
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005530:	f7fb f8a4 	bl	800067c <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005538:	f7fb f8a0 	bl	800067c <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e009      	b.n	800555e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800554a:	4b08      	ldr	r3, [pc, #32]	; (800556c <HAL_RCC_OscConfig+0x47c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1f0      	bne.n	8005538 <HAL_RCC_OscConfig+0x448>
 8005556:	e001      	b.n	800555c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e000      	b.n	800555e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	40007000 	.word	0x40007000
 800556c:	40023800 	.word	0x40023800
 8005570:	42470060 	.word	0x42470060

08005574 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e01c      	b.n	80055c0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	795b      	ldrb	r3, [r3, #5]
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d105      	bne.n	800559c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f005 febe 	bl	800b318 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f042 0204 	orr.w	r2, r2, #4
 80055b0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	2b20      	cmp	r3, #32
 80055e0:	d105      	bne.n	80055ee <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2210      	movs	r2, #16
 80055e6:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80055e8:	2301      	movs	r3, #1
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	e00b      	b.n	8005606 <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f8:	2b40      	cmp	r3, #64	; 0x40
 80055fa:	d104      	bne.n	8005606 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2208      	movs	r2, #8
 8005600:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8005602:	2301      	movs	r3, #1
 8005604:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d10a      	bne.n	8005622 <HAL_RNG_IRQHandler+0x5a>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2204      	movs	r2, #4
 8005610:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f839 	bl	800568a <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8005620:	605a      	str	r2, [r3, #4]
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b01      	cmp	r3, #1
 800562e:	d11d      	bne.n	800566c <HAL_RNG_IRQHandler+0xa4>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0208 	bic.w	r2, r2, #8
 800563e:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689a      	ldr	r2, [r3, #8]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	795b      	ldrb	r3, [r3, #5]
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b04      	cmp	r3, #4
 8005652:	d00b      	beq.n	800566c <HAL_RNG_IRQHandler+0xa4>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	4619      	mov	r1, r3
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f804 	bl	8005674 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 800566c:	bf00      	nop
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 800567e:	bf00      	nop
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b086      	sub	sp, #24
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e083      	b.n	80057ba <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d106      	bne.n	80056cc <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f005 fe4e 	bl	800b368 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6812      	ldr	r2, [r2, #0]
 80056de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056e2:	f023 0307 	bic.w	r3, r3, #7
 80056e6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3304      	adds	r3, #4
 80056f0:	4619      	mov	r1, r3
 80056f2:	4610      	mov	r0, r2
 80056f4:	f000 f89c 	bl	8005830 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	4313      	orrs	r3, r2
 8005718:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005720:	f023 0303 	bic.w	r3, r3, #3
 8005724:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	021b      	lsls	r3, r3, #8
 8005730:	4313      	orrs	r3, r2
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	4313      	orrs	r3, r2
 8005736:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800573e:	f023 030c 	bic.w	r3, r3, #12
 8005742:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800574a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800574e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	021b      	lsls	r3, r3, #8
 800575a:	4313      	orrs	r3, r2
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	4313      	orrs	r3, r2
 8005760:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	011a      	lsls	r2, r3, #4
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	031b      	lsls	r3, r3, #12
 800576e:	4313      	orrs	r3, r2
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	4313      	orrs	r3, r2
 8005774:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800577c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005784:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	011b      	lsls	r3, r3, #4
 8005790:	4313      	orrs	r3, r2
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3718      	adds	r7, #24
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b082      	sub	sp, #8
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d002      	beq.n	80057d8 <HAL_TIM_Encoder_Start+0x16>
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	d008      	beq.n	80057e8 <HAL_TIM_Encoder_Start+0x26>
 80057d6:	e00f      	b.n	80057f8 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2201      	movs	r2, #1
 80057de:	2100      	movs	r1, #0
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 f8c5 	bl	8005970 <TIM_CCxChannelCmd>
      break;
 80057e6:	e016      	b.n	8005816 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2201      	movs	r2, #1
 80057ee:	2104      	movs	r1, #4
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 f8bd 	bl	8005970 <TIM_CCxChannelCmd>
      break;
 80057f6:	e00e      	b.n	8005816 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2201      	movs	r2, #1
 80057fe:	2100      	movs	r1, #0
 8005800:	4618      	mov	r0, r3
 8005802:	f000 f8b5 	bl	8005970 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2201      	movs	r2, #1
 800580c:	2104      	movs	r1, #4
 800580e:	4618      	mov	r0, r3
 8005810:	f000 f8ae 	bl	8005970 <TIM_CCxChannelCmd>
      break;
 8005814:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f042 0201 	orr.w	r2, r2, #1
 8005824:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a40      	ldr	r2, [pc, #256]	; (8005944 <TIM_Base_SetConfig+0x114>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d013      	beq.n	8005870 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584e:	d00f      	beq.n	8005870 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a3d      	ldr	r2, [pc, #244]	; (8005948 <TIM_Base_SetConfig+0x118>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00b      	beq.n	8005870 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a3c      	ldr	r2, [pc, #240]	; (800594c <TIM_Base_SetConfig+0x11c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d007      	beq.n	8005870 <TIM_Base_SetConfig+0x40>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a3b      	ldr	r2, [pc, #236]	; (8005950 <TIM_Base_SetConfig+0x120>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d003      	beq.n	8005870 <TIM_Base_SetConfig+0x40>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a3a      	ldr	r2, [pc, #232]	; (8005954 <TIM_Base_SetConfig+0x124>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d108      	bne.n	8005882 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a2f      	ldr	r2, [pc, #188]	; (8005944 <TIM_Base_SetConfig+0x114>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d02b      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005890:	d027      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a2c      	ldr	r2, [pc, #176]	; (8005948 <TIM_Base_SetConfig+0x118>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d023      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a2b      	ldr	r2, [pc, #172]	; (800594c <TIM_Base_SetConfig+0x11c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d01f      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a2a      	ldr	r2, [pc, #168]	; (8005950 <TIM_Base_SetConfig+0x120>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d01b      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a29      	ldr	r2, [pc, #164]	; (8005954 <TIM_Base_SetConfig+0x124>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d017      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a28      	ldr	r2, [pc, #160]	; (8005958 <TIM_Base_SetConfig+0x128>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d013      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a27      	ldr	r2, [pc, #156]	; (800595c <TIM_Base_SetConfig+0x12c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00f      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a26      	ldr	r2, [pc, #152]	; (8005960 <TIM_Base_SetConfig+0x130>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00b      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a25      	ldr	r2, [pc, #148]	; (8005964 <TIM_Base_SetConfig+0x134>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d007      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a24      	ldr	r2, [pc, #144]	; (8005968 <TIM_Base_SetConfig+0x138>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d003      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a23      	ldr	r2, [pc, #140]	; (800596c <TIM_Base_SetConfig+0x13c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d108      	bne.n	80058f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a0a      	ldr	r2, [pc, #40]	; (8005944 <TIM_Base_SetConfig+0x114>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d003      	beq.n	8005928 <TIM_Base_SetConfig+0xf8>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a0c      	ldr	r2, [pc, #48]	; (8005954 <TIM_Base_SetConfig+0x124>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d103      	bne.n	8005930 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	691a      	ldr	r2, [r3, #16]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	615a      	str	r2, [r3, #20]
}
 8005936:	bf00      	nop
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	40010000 	.word	0x40010000
 8005948:	40000400 	.word	0x40000400
 800594c:	40000800 	.word	0x40000800
 8005950:	40000c00 	.word	0x40000c00
 8005954:	40010400 	.word	0x40010400
 8005958:	40014000 	.word	0x40014000
 800595c:	40014400 	.word	0x40014400
 8005960:	40014800 	.word	0x40014800
 8005964:	40001800 	.word	0x40001800
 8005968:	40001c00 	.word	0x40001c00
 800596c:	40002000 	.word	0x40002000

08005970 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f003 031f 	and.w	r3, r3, #31
 8005982:	2201      	movs	r2, #1
 8005984:	fa02 f303 	lsl.w	r3, r2, r3
 8005988:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a1a      	ldr	r2, [r3, #32]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	43db      	mvns	r3, r3
 8005992:	401a      	ands	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a1a      	ldr	r2, [r3, #32]
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	fa01 f303 	lsl.w	r3, r1, r3
 80059a8:	431a      	orrs	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	621a      	str	r2, [r3, #32]
}
 80059ae:	bf00      	nop
 80059b0:	371c      	adds	r7, #28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
	...

080059bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e05a      	b.n	8005a8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a21      	ldr	r2, [pc, #132]	; (8005a98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d022      	beq.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a20:	d01d      	beq.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a1d      	ldr	r2, [pc, #116]	; (8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d018      	beq.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a1b      	ldr	r2, [pc, #108]	; (8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d013      	beq.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a1a      	ldr	r2, [pc, #104]	; (8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d00e      	beq.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a18      	ldr	r2, [pc, #96]	; (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d009      	beq.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a17      	ldr	r2, [pc, #92]	; (8005aac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d004      	beq.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a15      	ldr	r2, [pc, #84]	; (8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d10c      	bne.n	8005a78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40010000 	.word	0x40010000
 8005a9c:	40000400 	.word	0x40000400
 8005aa0:	40000800 	.word	0x40000800
 8005aa4:	40000c00 	.word	0x40000c00
 8005aa8:	40010400 	.word	0x40010400
 8005aac:	40014000 	.word	0x40014000
 8005ab0:	40001800 	.word	0x40001800

08005ab4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e03f      	b.n	8005b46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d106      	bne.n	8005ae0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f005 fcc0 	bl	800b460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2224      	movs	r2, #36	; 0x24
 8005ae4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005af6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f829 	bl	8005b50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	691a      	ldr	r2, [r3, #16]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	695a      	ldr	r2, [r3, #20]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68da      	ldr	r2, [r3, #12]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
	...

08005b50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b54:	b085      	sub	sp, #20
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68da      	ldr	r2, [r3, #12]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005b92:	f023 030c 	bic.w	r3, r3, #12
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	6812      	ldr	r2, [r2, #0]
 8005b9a:	68f9      	ldr	r1, [r7, #12]
 8005b9c:	430b      	orrs	r3, r1
 8005b9e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bbe:	f040 818b 	bne.w	8005ed8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4ac1      	ldr	r2, [pc, #772]	; (8005ecc <UART_SetConfig+0x37c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d005      	beq.n	8005bd8 <UART_SetConfig+0x88>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4abf      	ldr	r2, [pc, #764]	; (8005ed0 <UART_SetConfig+0x380>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	f040 80bd 	bne.w	8005d52 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bd8:	f7fe ff58 	bl	8004a8c <HAL_RCC_GetPCLK2Freq>
 8005bdc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	461d      	mov	r5, r3
 8005be2:	f04f 0600 	mov.w	r6, #0
 8005be6:	46a8      	mov	r8, r5
 8005be8:	46b1      	mov	r9, r6
 8005bea:	eb18 0308 	adds.w	r3, r8, r8
 8005bee:	eb49 0409 	adc.w	r4, r9, r9
 8005bf2:	4698      	mov	r8, r3
 8005bf4:	46a1      	mov	r9, r4
 8005bf6:	eb18 0805 	adds.w	r8, r8, r5
 8005bfa:	eb49 0906 	adc.w	r9, r9, r6
 8005bfe:	f04f 0100 	mov.w	r1, #0
 8005c02:	f04f 0200 	mov.w	r2, #0
 8005c06:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c0a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c0e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c12:	4688      	mov	r8, r1
 8005c14:	4691      	mov	r9, r2
 8005c16:	eb18 0005 	adds.w	r0, r8, r5
 8005c1a:	eb49 0106 	adc.w	r1, r9, r6
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	461d      	mov	r5, r3
 8005c24:	f04f 0600 	mov.w	r6, #0
 8005c28:	196b      	adds	r3, r5, r5
 8005c2a:	eb46 0406 	adc.w	r4, r6, r6
 8005c2e:	461a      	mov	r2, r3
 8005c30:	4623      	mov	r3, r4
 8005c32:	f7fa fb3d 	bl	80002b0 <__aeabi_uldivmod>
 8005c36:	4603      	mov	r3, r0
 8005c38:	460c      	mov	r4, r1
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	4ba5      	ldr	r3, [pc, #660]	; (8005ed4 <UART_SetConfig+0x384>)
 8005c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	461d      	mov	r5, r3
 8005c4c:	f04f 0600 	mov.w	r6, #0
 8005c50:	46a9      	mov	r9, r5
 8005c52:	46b2      	mov	sl, r6
 8005c54:	eb19 0309 	adds.w	r3, r9, r9
 8005c58:	eb4a 040a 	adc.w	r4, sl, sl
 8005c5c:	4699      	mov	r9, r3
 8005c5e:	46a2      	mov	sl, r4
 8005c60:	eb19 0905 	adds.w	r9, r9, r5
 8005c64:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c68:	f04f 0100 	mov.w	r1, #0
 8005c6c:	f04f 0200 	mov.w	r2, #0
 8005c70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c7c:	4689      	mov	r9, r1
 8005c7e:	4692      	mov	sl, r2
 8005c80:	eb19 0005 	adds.w	r0, r9, r5
 8005c84:	eb4a 0106 	adc.w	r1, sl, r6
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	461d      	mov	r5, r3
 8005c8e:	f04f 0600 	mov.w	r6, #0
 8005c92:	196b      	adds	r3, r5, r5
 8005c94:	eb46 0406 	adc.w	r4, r6, r6
 8005c98:	461a      	mov	r2, r3
 8005c9a:	4623      	mov	r3, r4
 8005c9c:	f7fa fb08 	bl	80002b0 <__aeabi_uldivmod>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	4b8b      	ldr	r3, [pc, #556]	; (8005ed4 <UART_SetConfig+0x384>)
 8005ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cac:	095b      	lsrs	r3, r3, #5
 8005cae:	2164      	movs	r1, #100	; 0x64
 8005cb0:	fb01 f303 	mul.w	r3, r1, r3
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	3332      	adds	r3, #50	; 0x32
 8005cba:	4a86      	ldr	r2, [pc, #536]	; (8005ed4 <UART_SetConfig+0x384>)
 8005cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc0:	095b      	lsrs	r3, r3, #5
 8005cc2:	005b      	lsls	r3, r3, #1
 8005cc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cc8:	4498      	add	r8, r3
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	461d      	mov	r5, r3
 8005cce:	f04f 0600 	mov.w	r6, #0
 8005cd2:	46a9      	mov	r9, r5
 8005cd4:	46b2      	mov	sl, r6
 8005cd6:	eb19 0309 	adds.w	r3, r9, r9
 8005cda:	eb4a 040a 	adc.w	r4, sl, sl
 8005cde:	4699      	mov	r9, r3
 8005ce0:	46a2      	mov	sl, r4
 8005ce2:	eb19 0905 	adds.w	r9, r9, r5
 8005ce6:	eb4a 0a06 	adc.w	sl, sl, r6
 8005cea:	f04f 0100 	mov.w	r1, #0
 8005cee:	f04f 0200 	mov.w	r2, #0
 8005cf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cfe:	4689      	mov	r9, r1
 8005d00:	4692      	mov	sl, r2
 8005d02:	eb19 0005 	adds.w	r0, r9, r5
 8005d06:	eb4a 0106 	adc.w	r1, sl, r6
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	461d      	mov	r5, r3
 8005d10:	f04f 0600 	mov.w	r6, #0
 8005d14:	196b      	adds	r3, r5, r5
 8005d16:	eb46 0406 	adc.w	r4, r6, r6
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	4623      	mov	r3, r4
 8005d1e:	f7fa fac7 	bl	80002b0 <__aeabi_uldivmod>
 8005d22:	4603      	mov	r3, r0
 8005d24:	460c      	mov	r4, r1
 8005d26:	461a      	mov	r2, r3
 8005d28:	4b6a      	ldr	r3, [pc, #424]	; (8005ed4 <UART_SetConfig+0x384>)
 8005d2a:	fba3 1302 	umull	r1, r3, r3, r2
 8005d2e:	095b      	lsrs	r3, r3, #5
 8005d30:	2164      	movs	r1, #100	; 0x64
 8005d32:	fb01 f303 	mul.w	r3, r1, r3
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	3332      	adds	r3, #50	; 0x32
 8005d3c:	4a65      	ldr	r2, [pc, #404]	; (8005ed4 <UART_SetConfig+0x384>)
 8005d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d42:	095b      	lsrs	r3, r3, #5
 8005d44:	f003 0207 	and.w	r2, r3, #7
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4442      	add	r2, r8
 8005d4e:	609a      	str	r2, [r3, #8]
 8005d50:	e26f      	b.n	8006232 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d52:	f7fe fe87 	bl	8004a64 <HAL_RCC_GetPCLK1Freq>
 8005d56:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	461d      	mov	r5, r3
 8005d5c:	f04f 0600 	mov.w	r6, #0
 8005d60:	46a8      	mov	r8, r5
 8005d62:	46b1      	mov	r9, r6
 8005d64:	eb18 0308 	adds.w	r3, r8, r8
 8005d68:	eb49 0409 	adc.w	r4, r9, r9
 8005d6c:	4698      	mov	r8, r3
 8005d6e:	46a1      	mov	r9, r4
 8005d70:	eb18 0805 	adds.w	r8, r8, r5
 8005d74:	eb49 0906 	adc.w	r9, r9, r6
 8005d78:	f04f 0100 	mov.w	r1, #0
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d84:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d88:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d8c:	4688      	mov	r8, r1
 8005d8e:	4691      	mov	r9, r2
 8005d90:	eb18 0005 	adds.w	r0, r8, r5
 8005d94:	eb49 0106 	adc.w	r1, r9, r6
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	461d      	mov	r5, r3
 8005d9e:	f04f 0600 	mov.w	r6, #0
 8005da2:	196b      	adds	r3, r5, r5
 8005da4:	eb46 0406 	adc.w	r4, r6, r6
 8005da8:	461a      	mov	r2, r3
 8005daa:	4623      	mov	r3, r4
 8005dac:	f7fa fa80 	bl	80002b0 <__aeabi_uldivmod>
 8005db0:	4603      	mov	r3, r0
 8005db2:	460c      	mov	r4, r1
 8005db4:	461a      	mov	r2, r3
 8005db6:	4b47      	ldr	r3, [pc, #284]	; (8005ed4 <UART_SetConfig+0x384>)
 8005db8:	fba3 2302 	umull	r2, r3, r3, r2
 8005dbc:	095b      	lsrs	r3, r3, #5
 8005dbe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	461d      	mov	r5, r3
 8005dc6:	f04f 0600 	mov.w	r6, #0
 8005dca:	46a9      	mov	r9, r5
 8005dcc:	46b2      	mov	sl, r6
 8005dce:	eb19 0309 	adds.w	r3, r9, r9
 8005dd2:	eb4a 040a 	adc.w	r4, sl, sl
 8005dd6:	4699      	mov	r9, r3
 8005dd8:	46a2      	mov	sl, r4
 8005dda:	eb19 0905 	adds.w	r9, r9, r5
 8005dde:	eb4a 0a06 	adc.w	sl, sl, r6
 8005de2:	f04f 0100 	mov.w	r1, #0
 8005de6:	f04f 0200 	mov.w	r2, #0
 8005dea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005df2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005df6:	4689      	mov	r9, r1
 8005df8:	4692      	mov	sl, r2
 8005dfa:	eb19 0005 	adds.w	r0, r9, r5
 8005dfe:	eb4a 0106 	adc.w	r1, sl, r6
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	461d      	mov	r5, r3
 8005e08:	f04f 0600 	mov.w	r6, #0
 8005e0c:	196b      	adds	r3, r5, r5
 8005e0e:	eb46 0406 	adc.w	r4, r6, r6
 8005e12:	461a      	mov	r2, r3
 8005e14:	4623      	mov	r3, r4
 8005e16:	f7fa fa4b 	bl	80002b0 <__aeabi_uldivmod>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	460c      	mov	r4, r1
 8005e1e:	461a      	mov	r2, r3
 8005e20:	4b2c      	ldr	r3, [pc, #176]	; (8005ed4 <UART_SetConfig+0x384>)
 8005e22:	fba3 1302 	umull	r1, r3, r3, r2
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	2164      	movs	r1, #100	; 0x64
 8005e2a:	fb01 f303 	mul.w	r3, r1, r3
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	00db      	lsls	r3, r3, #3
 8005e32:	3332      	adds	r3, #50	; 0x32
 8005e34:	4a27      	ldr	r2, [pc, #156]	; (8005ed4 <UART_SetConfig+0x384>)
 8005e36:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3a:	095b      	lsrs	r3, r3, #5
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e42:	4498      	add	r8, r3
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	461d      	mov	r5, r3
 8005e48:	f04f 0600 	mov.w	r6, #0
 8005e4c:	46a9      	mov	r9, r5
 8005e4e:	46b2      	mov	sl, r6
 8005e50:	eb19 0309 	adds.w	r3, r9, r9
 8005e54:	eb4a 040a 	adc.w	r4, sl, sl
 8005e58:	4699      	mov	r9, r3
 8005e5a:	46a2      	mov	sl, r4
 8005e5c:	eb19 0905 	adds.w	r9, r9, r5
 8005e60:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e64:	f04f 0100 	mov.w	r1, #0
 8005e68:	f04f 0200 	mov.w	r2, #0
 8005e6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e78:	4689      	mov	r9, r1
 8005e7a:	4692      	mov	sl, r2
 8005e7c:	eb19 0005 	adds.w	r0, r9, r5
 8005e80:	eb4a 0106 	adc.w	r1, sl, r6
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	461d      	mov	r5, r3
 8005e8a:	f04f 0600 	mov.w	r6, #0
 8005e8e:	196b      	adds	r3, r5, r5
 8005e90:	eb46 0406 	adc.w	r4, r6, r6
 8005e94:	461a      	mov	r2, r3
 8005e96:	4623      	mov	r3, r4
 8005e98:	f7fa fa0a 	bl	80002b0 <__aeabi_uldivmod>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	460c      	mov	r4, r1
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	4b0c      	ldr	r3, [pc, #48]	; (8005ed4 <UART_SetConfig+0x384>)
 8005ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ea8:	095b      	lsrs	r3, r3, #5
 8005eaa:	2164      	movs	r1, #100	; 0x64
 8005eac:	fb01 f303 	mul.w	r3, r1, r3
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	3332      	adds	r3, #50	; 0x32
 8005eb6:	4a07      	ldr	r2, [pc, #28]	; (8005ed4 <UART_SetConfig+0x384>)
 8005eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ebc:	095b      	lsrs	r3, r3, #5
 8005ebe:	f003 0207 	and.w	r2, r3, #7
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4442      	add	r2, r8
 8005ec8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005eca:	e1b2      	b.n	8006232 <UART_SetConfig+0x6e2>
 8005ecc:	40011000 	.word	0x40011000
 8005ed0:	40011400 	.word	0x40011400
 8005ed4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4ad7      	ldr	r2, [pc, #860]	; (800623c <UART_SetConfig+0x6ec>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d005      	beq.n	8005eee <UART_SetConfig+0x39e>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4ad6      	ldr	r2, [pc, #856]	; (8006240 <UART_SetConfig+0x6f0>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	f040 80d1 	bne.w	8006090 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005eee:	f7fe fdcd 	bl	8004a8c <HAL_RCC_GetPCLK2Freq>
 8005ef2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	469a      	mov	sl, r3
 8005ef8:	f04f 0b00 	mov.w	fp, #0
 8005efc:	46d0      	mov	r8, sl
 8005efe:	46d9      	mov	r9, fp
 8005f00:	eb18 0308 	adds.w	r3, r8, r8
 8005f04:	eb49 0409 	adc.w	r4, r9, r9
 8005f08:	4698      	mov	r8, r3
 8005f0a:	46a1      	mov	r9, r4
 8005f0c:	eb18 080a 	adds.w	r8, r8, sl
 8005f10:	eb49 090b 	adc.w	r9, r9, fp
 8005f14:	f04f 0100 	mov.w	r1, #0
 8005f18:	f04f 0200 	mov.w	r2, #0
 8005f1c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f20:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f24:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f28:	4688      	mov	r8, r1
 8005f2a:	4691      	mov	r9, r2
 8005f2c:	eb1a 0508 	adds.w	r5, sl, r8
 8005f30:	eb4b 0609 	adc.w	r6, fp, r9
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	4619      	mov	r1, r3
 8005f3a:	f04f 0200 	mov.w	r2, #0
 8005f3e:	f04f 0300 	mov.w	r3, #0
 8005f42:	f04f 0400 	mov.w	r4, #0
 8005f46:	0094      	lsls	r4, r2, #2
 8005f48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f4c:	008b      	lsls	r3, r1, #2
 8005f4e:	461a      	mov	r2, r3
 8005f50:	4623      	mov	r3, r4
 8005f52:	4628      	mov	r0, r5
 8005f54:	4631      	mov	r1, r6
 8005f56:	f7fa f9ab 	bl	80002b0 <__aeabi_uldivmod>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	461a      	mov	r2, r3
 8005f60:	4bb8      	ldr	r3, [pc, #736]	; (8006244 <UART_SetConfig+0x6f4>)
 8005f62:	fba3 2302 	umull	r2, r3, r3, r2
 8005f66:	095b      	lsrs	r3, r3, #5
 8005f68:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	469b      	mov	fp, r3
 8005f70:	f04f 0c00 	mov.w	ip, #0
 8005f74:	46d9      	mov	r9, fp
 8005f76:	46e2      	mov	sl, ip
 8005f78:	eb19 0309 	adds.w	r3, r9, r9
 8005f7c:	eb4a 040a 	adc.w	r4, sl, sl
 8005f80:	4699      	mov	r9, r3
 8005f82:	46a2      	mov	sl, r4
 8005f84:	eb19 090b 	adds.w	r9, r9, fp
 8005f88:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f8c:	f04f 0100 	mov.w	r1, #0
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fa0:	4689      	mov	r9, r1
 8005fa2:	4692      	mov	sl, r2
 8005fa4:	eb1b 0509 	adds.w	r5, fp, r9
 8005fa8:	eb4c 060a 	adc.w	r6, ip, sl
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	f04f 0200 	mov.w	r2, #0
 8005fb6:	f04f 0300 	mov.w	r3, #0
 8005fba:	f04f 0400 	mov.w	r4, #0
 8005fbe:	0094      	lsls	r4, r2, #2
 8005fc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fc4:	008b      	lsls	r3, r1, #2
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	4623      	mov	r3, r4
 8005fca:	4628      	mov	r0, r5
 8005fcc:	4631      	mov	r1, r6
 8005fce:	f7fa f96f 	bl	80002b0 <__aeabi_uldivmod>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	460c      	mov	r4, r1
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	4b9a      	ldr	r3, [pc, #616]	; (8006244 <UART_SetConfig+0x6f4>)
 8005fda:	fba3 1302 	umull	r1, r3, r3, r2
 8005fde:	095b      	lsrs	r3, r3, #5
 8005fe0:	2164      	movs	r1, #100	; 0x64
 8005fe2:	fb01 f303 	mul.w	r3, r1, r3
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	011b      	lsls	r3, r3, #4
 8005fea:	3332      	adds	r3, #50	; 0x32
 8005fec:	4a95      	ldr	r2, [pc, #596]	; (8006244 <UART_SetConfig+0x6f4>)
 8005fee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff2:	095b      	lsrs	r3, r3, #5
 8005ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ff8:	4498      	add	r8, r3
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	469b      	mov	fp, r3
 8005ffe:	f04f 0c00 	mov.w	ip, #0
 8006002:	46d9      	mov	r9, fp
 8006004:	46e2      	mov	sl, ip
 8006006:	eb19 0309 	adds.w	r3, r9, r9
 800600a:	eb4a 040a 	adc.w	r4, sl, sl
 800600e:	4699      	mov	r9, r3
 8006010:	46a2      	mov	sl, r4
 8006012:	eb19 090b 	adds.w	r9, r9, fp
 8006016:	eb4a 0a0c 	adc.w	sl, sl, ip
 800601a:	f04f 0100 	mov.w	r1, #0
 800601e:	f04f 0200 	mov.w	r2, #0
 8006022:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006026:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800602a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800602e:	4689      	mov	r9, r1
 8006030:	4692      	mov	sl, r2
 8006032:	eb1b 0509 	adds.w	r5, fp, r9
 8006036:	eb4c 060a 	adc.w	r6, ip, sl
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	4619      	mov	r1, r3
 8006040:	f04f 0200 	mov.w	r2, #0
 8006044:	f04f 0300 	mov.w	r3, #0
 8006048:	f04f 0400 	mov.w	r4, #0
 800604c:	0094      	lsls	r4, r2, #2
 800604e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006052:	008b      	lsls	r3, r1, #2
 8006054:	461a      	mov	r2, r3
 8006056:	4623      	mov	r3, r4
 8006058:	4628      	mov	r0, r5
 800605a:	4631      	mov	r1, r6
 800605c:	f7fa f928 	bl	80002b0 <__aeabi_uldivmod>
 8006060:	4603      	mov	r3, r0
 8006062:	460c      	mov	r4, r1
 8006064:	461a      	mov	r2, r3
 8006066:	4b77      	ldr	r3, [pc, #476]	; (8006244 <UART_SetConfig+0x6f4>)
 8006068:	fba3 1302 	umull	r1, r3, r3, r2
 800606c:	095b      	lsrs	r3, r3, #5
 800606e:	2164      	movs	r1, #100	; 0x64
 8006070:	fb01 f303 	mul.w	r3, r1, r3
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	3332      	adds	r3, #50	; 0x32
 800607a:	4a72      	ldr	r2, [pc, #456]	; (8006244 <UART_SetConfig+0x6f4>)
 800607c:	fba2 2303 	umull	r2, r3, r2, r3
 8006080:	095b      	lsrs	r3, r3, #5
 8006082:	f003 020f 	and.w	r2, r3, #15
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4442      	add	r2, r8
 800608c:	609a      	str	r2, [r3, #8]
 800608e:	e0d0      	b.n	8006232 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006090:	f7fe fce8 	bl	8004a64 <HAL_RCC_GetPCLK1Freq>
 8006094:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	469a      	mov	sl, r3
 800609a:	f04f 0b00 	mov.w	fp, #0
 800609e:	46d0      	mov	r8, sl
 80060a0:	46d9      	mov	r9, fp
 80060a2:	eb18 0308 	adds.w	r3, r8, r8
 80060a6:	eb49 0409 	adc.w	r4, r9, r9
 80060aa:	4698      	mov	r8, r3
 80060ac:	46a1      	mov	r9, r4
 80060ae:	eb18 080a 	adds.w	r8, r8, sl
 80060b2:	eb49 090b 	adc.w	r9, r9, fp
 80060b6:	f04f 0100 	mov.w	r1, #0
 80060ba:	f04f 0200 	mov.w	r2, #0
 80060be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060ca:	4688      	mov	r8, r1
 80060cc:	4691      	mov	r9, r2
 80060ce:	eb1a 0508 	adds.w	r5, sl, r8
 80060d2:	eb4b 0609 	adc.w	r6, fp, r9
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	4619      	mov	r1, r3
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	f04f 0300 	mov.w	r3, #0
 80060e4:	f04f 0400 	mov.w	r4, #0
 80060e8:	0094      	lsls	r4, r2, #2
 80060ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060ee:	008b      	lsls	r3, r1, #2
 80060f0:	461a      	mov	r2, r3
 80060f2:	4623      	mov	r3, r4
 80060f4:	4628      	mov	r0, r5
 80060f6:	4631      	mov	r1, r6
 80060f8:	f7fa f8da 	bl	80002b0 <__aeabi_uldivmod>
 80060fc:	4603      	mov	r3, r0
 80060fe:	460c      	mov	r4, r1
 8006100:	461a      	mov	r2, r3
 8006102:	4b50      	ldr	r3, [pc, #320]	; (8006244 <UART_SetConfig+0x6f4>)
 8006104:	fba3 2302 	umull	r2, r3, r3, r2
 8006108:	095b      	lsrs	r3, r3, #5
 800610a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	469b      	mov	fp, r3
 8006112:	f04f 0c00 	mov.w	ip, #0
 8006116:	46d9      	mov	r9, fp
 8006118:	46e2      	mov	sl, ip
 800611a:	eb19 0309 	adds.w	r3, r9, r9
 800611e:	eb4a 040a 	adc.w	r4, sl, sl
 8006122:	4699      	mov	r9, r3
 8006124:	46a2      	mov	sl, r4
 8006126:	eb19 090b 	adds.w	r9, r9, fp
 800612a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800612e:	f04f 0100 	mov.w	r1, #0
 8006132:	f04f 0200 	mov.w	r2, #0
 8006136:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800613a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800613e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006142:	4689      	mov	r9, r1
 8006144:	4692      	mov	sl, r2
 8006146:	eb1b 0509 	adds.w	r5, fp, r9
 800614a:	eb4c 060a 	adc.w	r6, ip, sl
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	4619      	mov	r1, r3
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	f04f 0300 	mov.w	r3, #0
 800615c:	f04f 0400 	mov.w	r4, #0
 8006160:	0094      	lsls	r4, r2, #2
 8006162:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006166:	008b      	lsls	r3, r1, #2
 8006168:	461a      	mov	r2, r3
 800616a:	4623      	mov	r3, r4
 800616c:	4628      	mov	r0, r5
 800616e:	4631      	mov	r1, r6
 8006170:	f7fa f89e 	bl	80002b0 <__aeabi_uldivmod>
 8006174:	4603      	mov	r3, r0
 8006176:	460c      	mov	r4, r1
 8006178:	461a      	mov	r2, r3
 800617a:	4b32      	ldr	r3, [pc, #200]	; (8006244 <UART_SetConfig+0x6f4>)
 800617c:	fba3 1302 	umull	r1, r3, r3, r2
 8006180:	095b      	lsrs	r3, r3, #5
 8006182:	2164      	movs	r1, #100	; 0x64
 8006184:	fb01 f303 	mul.w	r3, r1, r3
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	3332      	adds	r3, #50	; 0x32
 800618e:	4a2d      	ldr	r2, [pc, #180]	; (8006244 <UART_SetConfig+0x6f4>)
 8006190:	fba2 2303 	umull	r2, r3, r2, r3
 8006194:	095b      	lsrs	r3, r3, #5
 8006196:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800619a:	4498      	add	r8, r3
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	469b      	mov	fp, r3
 80061a0:	f04f 0c00 	mov.w	ip, #0
 80061a4:	46d9      	mov	r9, fp
 80061a6:	46e2      	mov	sl, ip
 80061a8:	eb19 0309 	adds.w	r3, r9, r9
 80061ac:	eb4a 040a 	adc.w	r4, sl, sl
 80061b0:	4699      	mov	r9, r3
 80061b2:	46a2      	mov	sl, r4
 80061b4:	eb19 090b 	adds.w	r9, r9, fp
 80061b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061bc:	f04f 0100 	mov.w	r1, #0
 80061c0:	f04f 0200 	mov.w	r2, #0
 80061c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061d0:	4689      	mov	r9, r1
 80061d2:	4692      	mov	sl, r2
 80061d4:	eb1b 0509 	adds.w	r5, fp, r9
 80061d8:	eb4c 060a 	adc.w	r6, ip, sl
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	4619      	mov	r1, r3
 80061e2:	f04f 0200 	mov.w	r2, #0
 80061e6:	f04f 0300 	mov.w	r3, #0
 80061ea:	f04f 0400 	mov.w	r4, #0
 80061ee:	0094      	lsls	r4, r2, #2
 80061f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061f4:	008b      	lsls	r3, r1, #2
 80061f6:	461a      	mov	r2, r3
 80061f8:	4623      	mov	r3, r4
 80061fa:	4628      	mov	r0, r5
 80061fc:	4631      	mov	r1, r6
 80061fe:	f7fa f857 	bl	80002b0 <__aeabi_uldivmod>
 8006202:	4603      	mov	r3, r0
 8006204:	460c      	mov	r4, r1
 8006206:	461a      	mov	r2, r3
 8006208:	4b0e      	ldr	r3, [pc, #56]	; (8006244 <UART_SetConfig+0x6f4>)
 800620a:	fba3 1302 	umull	r1, r3, r3, r2
 800620e:	095b      	lsrs	r3, r3, #5
 8006210:	2164      	movs	r1, #100	; 0x64
 8006212:	fb01 f303 	mul.w	r3, r1, r3
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	011b      	lsls	r3, r3, #4
 800621a:	3332      	adds	r3, #50	; 0x32
 800621c:	4a09      	ldr	r2, [pc, #36]	; (8006244 <UART_SetConfig+0x6f4>)
 800621e:	fba2 2303 	umull	r2, r3, r2, r3
 8006222:	095b      	lsrs	r3, r3, #5
 8006224:	f003 020f 	and.w	r2, r3, #15
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4442      	add	r2, r8
 800622e:	609a      	str	r2, [r3, #8]
}
 8006230:	e7ff      	b.n	8006232 <UART_SetConfig+0x6e2>
 8006232:	bf00      	nop
 8006234:	3714      	adds	r7, #20
 8006236:	46bd      	mov	sp, r7
 8006238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800623c:	40011000 	.word	0x40011000
 8006240:	40011400 	.word	0x40011400
 8006244:	51eb851f 	.word	0x51eb851f

08006248 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006248:	b084      	sub	sp, #16
 800624a:	b580      	push	{r7, lr}
 800624c:	b084      	sub	sp, #16
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	f107 001c 	add.w	r0, r7, #28
 8006256:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	2b01      	cmp	r3, #1
 800625e:	d122      	bne.n	80062a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006264:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800628a:	2b01      	cmp	r3, #1
 800628c:	d105      	bne.n	800629a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f001 fac0 	bl	8007820 <USB_CoreReset>
 80062a0:	4603      	mov	r3, r0
 80062a2:	73fb      	strb	r3, [r7, #15]
 80062a4:	e01a      	b.n	80062dc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f001 fab4 	bl	8007820 <USB_CoreReset>
 80062b8:	4603      	mov	r3, r0
 80062ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80062bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d106      	bne.n	80062d0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	639a      	str	r2, [r3, #56]	; 0x38
 80062ce:	e005      	b.n	80062dc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d10b      	bne.n	80062fa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f043 0206 	orr.w	r2, r3, #6
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f043 0220 	orr.w	r2, r3, #32
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006306:	b004      	add	sp, #16
 8006308:	4770      	bx	lr
	...

0800630c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	4613      	mov	r3, r2
 8006318:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800631a:	79fb      	ldrb	r3, [r7, #7]
 800631c:	2b02      	cmp	r3, #2
 800631e:	d165      	bne.n	80063ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	4a41      	ldr	r2, [pc, #260]	; (8006428 <USB_SetTurnaroundTime+0x11c>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d906      	bls.n	8006336 <USB_SetTurnaroundTime+0x2a>
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4a40      	ldr	r2, [pc, #256]	; (800642c <USB_SetTurnaroundTime+0x120>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d802      	bhi.n	8006336 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006330:	230f      	movs	r3, #15
 8006332:	617b      	str	r3, [r7, #20]
 8006334:	e062      	b.n	80063fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	4a3c      	ldr	r2, [pc, #240]	; (800642c <USB_SetTurnaroundTime+0x120>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d906      	bls.n	800634c <USB_SetTurnaroundTime+0x40>
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	4a3b      	ldr	r2, [pc, #236]	; (8006430 <USB_SetTurnaroundTime+0x124>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d802      	bhi.n	800634c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006346:	230e      	movs	r3, #14
 8006348:	617b      	str	r3, [r7, #20]
 800634a:	e057      	b.n	80063fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	4a38      	ldr	r2, [pc, #224]	; (8006430 <USB_SetTurnaroundTime+0x124>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d906      	bls.n	8006362 <USB_SetTurnaroundTime+0x56>
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	4a37      	ldr	r2, [pc, #220]	; (8006434 <USB_SetTurnaroundTime+0x128>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d802      	bhi.n	8006362 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800635c:	230d      	movs	r3, #13
 800635e:	617b      	str	r3, [r7, #20]
 8006360:	e04c      	b.n	80063fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	4a33      	ldr	r2, [pc, #204]	; (8006434 <USB_SetTurnaroundTime+0x128>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d906      	bls.n	8006378 <USB_SetTurnaroundTime+0x6c>
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	4a32      	ldr	r2, [pc, #200]	; (8006438 <USB_SetTurnaroundTime+0x12c>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d802      	bhi.n	8006378 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006372:	230c      	movs	r3, #12
 8006374:	617b      	str	r3, [r7, #20]
 8006376:	e041      	b.n	80063fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	4a2f      	ldr	r2, [pc, #188]	; (8006438 <USB_SetTurnaroundTime+0x12c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d906      	bls.n	800638e <USB_SetTurnaroundTime+0x82>
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	4a2e      	ldr	r2, [pc, #184]	; (800643c <USB_SetTurnaroundTime+0x130>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d802      	bhi.n	800638e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006388:	230b      	movs	r3, #11
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	e036      	b.n	80063fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	4a2a      	ldr	r2, [pc, #168]	; (800643c <USB_SetTurnaroundTime+0x130>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d906      	bls.n	80063a4 <USB_SetTurnaroundTime+0x98>
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	4a29      	ldr	r2, [pc, #164]	; (8006440 <USB_SetTurnaroundTime+0x134>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d802      	bhi.n	80063a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800639e:	230a      	movs	r3, #10
 80063a0:	617b      	str	r3, [r7, #20]
 80063a2:	e02b      	b.n	80063fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	4a26      	ldr	r2, [pc, #152]	; (8006440 <USB_SetTurnaroundTime+0x134>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d906      	bls.n	80063ba <USB_SetTurnaroundTime+0xae>
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	4a25      	ldr	r2, [pc, #148]	; (8006444 <USB_SetTurnaroundTime+0x138>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d802      	bhi.n	80063ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80063b4:	2309      	movs	r3, #9
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	e020      	b.n	80063fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	4a21      	ldr	r2, [pc, #132]	; (8006444 <USB_SetTurnaroundTime+0x138>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d906      	bls.n	80063d0 <USB_SetTurnaroundTime+0xc4>
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	4a20      	ldr	r2, [pc, #128]	; (8006448 <USB_SetTurnaroundTime+0x13c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d802      	bhi.n	80063d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80063ca:	2308      	movs	r3, #8
 80063cc:	617b      	str	r3, [r7, #20]
 80063ce:	e015      	b.n	80063fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	4a1d      	ldr	r2, [pc, #116]	; (8006448 <USB_SetTurnaroundTime+0x13c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d906      	bls.n	80063e6 <USB_SetTurnaroundTime+0xda>
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	4a1c      	ldr	r2, [pc, #112]	; (800644c <USB_SetTurnaroundTime+0x140>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d802      	bhi.n	80063e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80063e0:	2307      	movs	r3, #7
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	e00a      	b.n	80063fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80063e6:	2306      	movs	r3, #6
 80063e8:	617b      	str	r3, [r7, #20]
 80063ea:	e007      	b.n	80063fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80063ec:	79fb      	ldrb	r3, [r7, #7]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d102      	bne.n	80063f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80063f2:	2309      	movs	r3, #9
 80063f4:	617b      	str	r3, [r7, #20]
 80063f6:	e001      	b.n	80063fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80063f8:	2309      	movs	r3, #9
 80063fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	68da      	ldr	r2, [r3, #12]
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	029b      	lsls	r3, r3, #10
 8006410:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006414:	431a      	orrs	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	371c      	adds	r7, #28
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	00d8acbf 	.word	0x00d8acbf
 800642c:	00e4e1bf 	.word	0x00e4e1bf
 8006430:	00f423ff 	.word	0x00f423ff
 8006434:	0106737f 	.word	0x0106737f
 8006438:	011a499f 	.word	0x011a499f
 800643c:	01312cff 	.word	0x01312cff
 8006440:	014ca43f 	.word	0x014ca43f
 8006444:	016e35ff 	.word	0x016e35ff
 8006448:	01a6ab1f 	.word	0x01a6ab1f
 800644c:	01e847ff 	.word	0x01e847ff

08006450 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f043 0201 	orr.w	r2, r3, #1
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f023 0201 	bic.w	r2, r3, #1
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	460b      	mov	r3, r1
 800649e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80064ac:	78fb      	ldrb	r3, [r7, #3]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d106      	bne.n	80064c0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	60da      	str	r2, [r3, #12]
 80064be:	e00b      	b.n	80064d8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80064c0:	78fb      	ldrb	r3, [r7, #3]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d106      	bne.n	80064d4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	60da      	str	r2, [r3, #12]
 80064d2:	e001      	b.n	80064d8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e003      	b.n	80064e0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80064d8:	2032      	movs	r0, #50	; 0x32
 80064da:	f7fa f8db 	bl	8000694 <HAL_Delay>

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064e8:	b084      	sub	sp, #16
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b086      	sub	sp, #24
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80064f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006502:	2300      	movs	r3, #0
 8006504:	613b      	str	r3, [r7, #16]
 8006506:	e009      	b.n	800651c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	3340      	adds	r3, #64	; 0x40
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	2200      	movs	r2, #0
 8006514:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	3301      	adds	r3, #1
 800651a:	613b      	str	r3, [r7, #16]
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	2b0e      	cmp	r3, #14
 8006520:	d9f2      	bls.n	8006508 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006524:	2b00      	cmp	r3, #0
 8006526:	d11c      	bne.n	8006562 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006536:	f043 0302 	orr.w	r3, r3, #2
 800653a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006540:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	e005      	b.n	800656e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006566:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006574:	461a      	mov	r2, r3
 8006576:	2300      	movs	r3, #0
 8006578:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006580:	4619      	mov	r1, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006588:	461a      	mov	r2, r3
 800658a:	680b      	ldr	r3, [r1, #0]
 800658c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800658e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006590:	2b01      	cmp	r3, #1
 8006592:	d10c      	bne.n	80065ae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006596:	2b00      	cmp	r3, #0
 8006598:	d104      	bne.n	80065a4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800659a:	2100      	movs	r1, #0
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f949 	bl	8006834 <USB_SetDevSpeed>
 80065a2:	e008      	b.n	80065b6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065a4:	2101      	movs	r1, #1
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f944 	bl	8006834 <USB_SetDevSpeed>
 80065ac:	e003      	b.n	80065b6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065ae:	2103      	movs	r1, #3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f93f 	bl	8006834 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065b6:	2110      	movs	r1, #16
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f8f3 	bl	80067a4 <USB_FlushTxFifo>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f911 	bl	80067f0 <USB_FlushRxFifo>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065de:	461a      	mov	r2, r3
 80065e0:	2300      	movs	r3, #0
 80065e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ea:	461a      	mov	r2, r3
 80065ec:	2300      	movs	r3, #0
 80065ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f6:	461a      	mov	r2, r3
 80065f8:	2300      	movs	r3, #0
 80065fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065fc:	2300      	movs	r3, #0
 80065fe:	613b      	str	r3, [r7, #16]
 8006600:	e043      	b.n	800668a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4413      	add	r3, r2
 800660a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006618:	d118      	bne.n	800664c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10a      	bne.n	8006636 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662c:	461a      	mov	r2, r3
 800662e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	e013      	b.n	800665e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006642:	461a      	mov	r2, r3
 8006644:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	e008      	b.n	800665e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006658:	461a      	mov	r2, r3
 800665a:	2300      	movs	r3, #0
 800665c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666a:	461a      	mov	r2, r3
 800666c:	2300      	movs	r3, #0
 800666e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4413      	add	r3, r2
 8006678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800667c:	461a      	mov	r2, r3
 800667e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006682:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	3301      	adds	r3, #1
 8006688:	613b      	str	r3, [r7, #16]
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	429a      	cmp	r2, r3
 8006690:	d3b7      	bcc.n	8006602 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006692:	2300      	movs	r3, #0
 8006694:	613b      	str	r3, [r7, #16]
 8006696:	e043      	b.n	8006720 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066ae:	d118      	bne.n	80066e2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10a      	bne.n	80066cc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c2:	461a      	mov	r2, r3
 80066c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	e013      	b.n	80066f4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d8:	461a      	mov	r2, r3
 80066da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	e008      	b.n	80066f4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ee:	461a      	mov	r2, r3
 80066f0:	2300      	movs	r3, #0
 80066f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006700:	461a      	mov	r2, r3
 8006702:	2300      	movs	r3, #0
 8006704:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006712:	461a      	mov	r2, r3
 8006714:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006718:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	3301      	adds	r3, #1
 800671e:	613b      	str	r3, [r7, #16]
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	429a      	cmp	r2, r3
 8006726:	d3b7      	bcc.n	8006698 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006736:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800673a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006748:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	2b00      	cmp	r3, #0
 800674e:	d105      	bne.n	800675c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	f043 0210 	orr.w	r2, r3, #16
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699a      	ldr	r2, [r3, #24]
 8006760:	4b0f      	ldr	r3, [pc, #60]	; (80067a0 <USB_DevInit+0x2b8>)
 8006762:	4313      	orrs	r3, r2
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800676a:	2b00      	cmp	r3, #0
 800676c:	d005      	beq.n	800677a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	f043 0208 	orr.w	r2, r3, #8
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800677a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800677c:	2b01      	cmp	r3, #1
 800677e:	d107      	bne.n	8006790 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006788:	f043 0304 	orr.w	r3, r3, #4
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006790:	7dfb      	ldrb	r3, [r7, #23]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800679c:	b004      	add	sp, #16
 800679e:	4770      	bx	lr
 80067a0:	803c3800 	.word	0x803c3800

080067a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	019b      	lsls	r3, r3, #6
 80067b6:	f043 0220 	orr.w	r2, r3, #32
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	3301      	adds	r3, #1
 80067c2:	60fb      	str	r3, [r7, #12]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4a09      	ldr	r2, [pc, #36]	; (80067ec <USB_FlushTxFifo+0x48>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d901      	bls.n	80067d0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e006      	b.n	80067de <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	f003 0320 	and.w	r3, r3, #32
 80067d8:	2b20      	cmp	r3, #32
 80067da:	d0f0      	beq.n	80067be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	00030d40 	.word	0x00030d40

080067f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80067f8:	2300      	movs	r3, #0
 80067fa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2210      	movs	r2, #16
 8006800:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3301      	adds	r3, #1
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4a09      	ldr	r2, [pc, #36]	; (8006830 <USB_FlushRxFifo+0x40>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d901      	bls.n	8006814 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e006      	b.n	8006822 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	f003 0310 	and.w	r3, r3, #16
 800681c:	2b10      	cmp	r3, #16
 800681e:	d0f0      	beq.n	8006802 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	00030d40 	.word	0x00030d40

08006834 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	78fb      	ldrb	r3, [r7, #3]
 800684e:	68f9      	ldr	r1, [r7, #12]
 8006850:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006854:	4313      	orrs	r3, r2
 8006856:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006866:	b480      	push	{r7}
 8006868:	b087      	sub	sp, #28
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f003 0306 	and.w	r3, r3, #6
 800687e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d102      	bne.n	800688c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006886:	2300      	movs	r3, #0
 8006888:	75fb      	strb	r3, [r7, #23]
 800688a:	e00a      	b.n	80068a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2b02      	cmp	r3, #2
 8006890:	d002      	beq.n	8006898 <USB_GetDevSpeed+0x32>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2b06      	cmp	r3, #6
 8006896:	d102      	bne.n	800689e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006898:	2302      	movs	r3, #2
 800689a:	75fb      	strb	r3, [r7, #23]
 800689c:	e001      	b.n	80068a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800689e:	230f      	movs	r3, #15
 80068a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80068a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	371c      	adds	r7, #28
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	785b      	ldrb	r3, [r3, #1]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d13a      	bne.n	8006942 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d2:	69da      	ldr	r2, [r3, #28]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	f003 030f 	and.w	r3, r3, #15
 80068dc:	2101      	movs	r1, #1
 80068de:	fa01 f303 	lsl.w	r3, r1, r3
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	68f9      	ldr	r1, [r7, #12]
 80068e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068ea:	4313      	orrs	r3, r2
 80068ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d155      	bne.n	80069b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4413      	add	r3, r2
 800690c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	78db      	ldrb	r3, [r3, #3]
 800691e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006920:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	059b      	lsls	r3, r3, #22
 8006926:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006928:	4313      	orrs	r3, r2
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	0151      	lsls	r1, r2, #5
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	440a      	add	r2, r1
 8006932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800693a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	e036      	b.n	80069b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006948:	69da      	ldr	r2, [r3, #28]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	f003 030f 	and.w	r3, r3, #15
 8006952:	2101      	movs	r1, #1
 8006954:	fa01 f303 	lsl.w	r3, r1, r3
 8006958:	041b      	lsls	r3, r3, #16
 800695a:	68f9      	ldr	r1, [r7, #12]
 800695c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006960:	4313      	orrs	r3, r2
 8006962:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4413      	add	r3, r2
 800696c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d11a      	bne.n	80069b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4413      	add	r3, r2
 8006982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	78db      	ldrb	r3, [r3, #3]
 8006994:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006996:	430b      	orrs	r3, r1
 8006998:	4313      	orrs	r3, r2
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	0151      	lsls	r1, r2, #5
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	440a      	add	r2, r1
 80069a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
	...

080069c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	785b      	ldrb	r3, [r3, #1]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d161      	bne.n	8006aa0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069f2:	d11f      	bne.n	8006a34 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	0151      	lsls	r1, r2, #5
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	440a      	add	r2, r1
 8006a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a12:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	0151      	lsls	r1, r2, #5
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	440a      	add	r2, r1
 8006a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	f003 030f 	and.w	r3, r3, #15
 8006a44:	2101      	movs	r1, #1
 8006a46:	fa01 f303 	lsl.w	r3, r1, r3
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	43db      	mvns	r3, r3
 8006a4e:	68f9      	ldr	r1, [r7, #12]
 8006a50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a54:	4013      	ands	r3, r2
 8006a56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5e:	69da      	ldr	r2, [r3, #28]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	f003 030f 	and.w	r3, r3, #15
 8006a68:	2101      	movs	r1, #1
 8006a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	43db      	mvns	r3, r3
 8006a72:	68f9      	ldr	r1, [r7, #12]
 8006a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a78:	4013      	ands	r3, r2
 8006a7a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	0159      	lsls	r1, r3, #5
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	440b      	add	r3, r1
 8006a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a96:	4619      	mov	r1, r3
 8006a98:	4b35      	ldr	r3, [pc, #212]	; (8006b70 <USB_DeactivateEndpoint+0x1b0>)
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	600b      	str	r3, [r1, #0]
 8006a9e:	e060      	b.n	8006b62 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ab2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ab6:	d11f      	bne.n	8006af8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	0151      	lsls	r1, r2, #5
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	440a      	add	r2, r1
 8006ace:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ad2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ad6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	015a      	lsls	r2, r3, #5
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	0151      	lsls	r1, r2, #5
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	440a      	add	r2, r1
 8006aee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006af2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006af6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006afe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	f003 030f 	and.w	r3, r3, #15
 8006b08:	2101      	movs	r1, #1
 8006b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b0e:	041b      	lsls	r3, r3, #16
 8006b10:	43db      	mvns	r3, r3
 8006b12:	68f9      	ldr	r1, [r7, #12]
 8006b14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b18:	4013      	ands	r3, r2
 8006b1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b22:	69da      	ldr	r2, [r3, #28]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	f003 030f 	and.w	r3, r3, #15
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b32:	041b      	lsls	r3, r3, #16
 8006b34:	43db      	mvns	r3, r3
 8006b36:	68f9      	ldr	r1, [r7, #12]
 8006b38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	0159      	lsls	r1, r3, #5
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	440b      	add	r3, r1
 8006b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <USB_DeactivateEndpoint+0x1b4>)
 8006b5e:	4013      	ands	r3, r2
 8006b60:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	ec337800 	.word	0xec337800
 8006b74:	eff37800 	.word	0xeff37800

08006b78 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b08a      	sub	sp, #40	; 0x28
 8006b7c:	af02      	add	r7, sp, #8
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	4613      	mov	r3, r2
 8006b84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	785b      	ldrb	r3, [r3, #1]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	f040 815c 	bne.w	8006e52 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d132      	bne.n	8006c08 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	0151      	lsls	r1, r2, #5
 8006bb4:	69fa      	ldr	r2, [r7, #28]
 8006bb6:	440a      	add	r2, r1
 8006bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	0151      	lsls	r1, r2, #5
 8006bd8:	69fa      	ldr	r2, [r7, #28]
 8006bda:	440a      	add	r2, r1
 8006bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006be4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	0151      	lsls	r1, r2, #5
 8006bf8:	69fa      	ldr	r2, [r7, #28]
 8006bfa:	440a      	add	r2, r1
 8006bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c00:	0cdb      	lsrs	r3, r3, #19
 8006c02:	04db      	lsls	r3, r3, #19
 8006c04:	6113      	str	r3, [r2, #16]
 8006c06:	e074      	b.n	8006cf2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	015a      	lsls	r2, r3, #5
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	69ba      	ldr	r2, [r7, #24]
 8006c18:	0151      	lsls	r1, r2, #5
 8006c1a:	69fa      	ldr	r2, [r7, #28]
 8006c1c:	440a      	add	r2, r1
 8006c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c22:	0cdb      	lsrs	r3, r3, #19
 8006c24:	04db      	lsls	r3, r3, #19
 8006c26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	69ba      	ldr	r2, [r7, #24]
 8006c38:	0151      	lsls	r1, r2, #5
 8006c3a:	69fa      	ldr	r2, [r7, #28]
 8006c3c:	440a      	add	r2, r1
 8006c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c58:	691a      	ldr	r2, [r3, #16]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	6959      	ldr	r1, [r3, #20]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	440b      	add	r3, r1
 8006c64:	1e59      	subs	r1, r3, #1
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c6e:	04d9      	lsls	r1, r3, #19
 8006c70:	4b9d      	ldr	r3, [pc, #628]	; (8006ee8 <USB_EPStartXfer+0x370>)
 8006c72:	400b      	ands	r3, r1
 8006c74:	69b9      	ldr	r1, [r7, #24]
 8006c76:	0148      	lsls	r0, r1, #5
 8006c78:	69f9      	ldr	r1, [r7, #28]
 8006c7a:	4401      	add	r1, r0
 8006c7c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c80:	4313      	orrs	r3, r2
 8006c82:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c90:	691a      	ldr	r2, [r3, #16]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c9a:	69b9      	ldr	r1, [r7, #24]
 8006c9c:	0148      	lsls	r0, r1, #5
 8006c9e:	69f9      	ldr	r1, [r7, #28]
 8006ca0:	4401      	add	r1, r0
 8006ca2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	78db      	ldrb	r3, [r3, #3]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d11f      	bne.n	8006cf2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	0151      	lsls	r1, r2, #5
 8006cc4:	69fa      	ldr	r2, [r7, #28]
 8006cc6:	440a      	add	r2, r1
 8006cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ccc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006cd0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	015a      	lsls	r2, r3, #5
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	4413      	add	r3, r2
 8006cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	69ba      	ldr	r2, [r7, #24]
 8006ce2:	0151      	lsls	r1, r2, #5
 8006ce4:	69fa      	ldr	r2, [r7, #28]
 8006ce6:	440a      	add	r2, r1
 8006ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cf0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006cf2:	79fb      	ldrb	r3, [r7, #7]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d14b      	bne.n	8006d90 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d009      	beq.n	8006d14 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	78db      	ldrb	r3, [r3, #3]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d128      	bne.n	8006d6e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d110      	bne.n	8006d4e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	69ba      	ldr	r2, [r7, #24]
 8006d3c:	0151      	lsls	r1, r2, #5
 8006d3e:	69fa      	ldr	r2, [r7, #28]
 8006d40:	440a      	add	r2, r1
 8006d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d4a:	6013      	str	r3, [r2, #0]
 8006d4c:	e00f      	b.n	8006d6e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	0151      	lsls	r1, r2, #5
 8006d60:	69fa      	ldr	r2, [r7, #28]
 8006d62:	440a      	add	r2, r1
 8006d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d6c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	0151      	lsls	r1, r2, #5
 8006d80:	69fa      	ldr	r2, [r7, #28]
 8006d82:	440a      	add	r2, r1
 8006d84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d8c:	6013      	str	r3, [r2, #0]
 8006d8e:	e12f      	b.n	8006ff0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	015a      	lsls	r2, r3, #5
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	69ba      	ldr	r2, [r7, #24]
 8006da0:	0151      	lsls	r1, r2, #5
 8006da2:	69fa      	ldr	r2, [r7, #28]
 8006da4:	440a      	add	r2, r1
 8006da6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006daa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	78db      	ldrb	r3, [r3, #3]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d015      	beq.n	8006de4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 8117 	beq.w	8006ff0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	f003 030f 	and.w	r3, r3, #15
 8006dd2:	2101      	movs	r1, #1
 8006dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd8:	69f9      	ldr	r1, [r7, #28]
 8006dda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dde:	4313      	orrs	r3, r2
 8006de0:	634b      	str	r3, [r1, #52]	; 0x34
 8006de2:	e105      	b.n	8006ff0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d110      	bne.n	8006e16 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	0151      	lsls	r1, r2, #5
 8006e06:	69fa      	ldr	r2, [r7, #28]
 8006e08:	440a      	add	r2, r1
 8006e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e12:	6013      	str	r3, [r2, #0]
 8006e14:	e00f      	b.n	8006e36 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	0151      	lsls	r1, r2, #5
 8006e28:	69fa      	ldr	r2, [r7, #28]
 8006e2a:	440a      	add	r2, r1
 8006e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e34:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	68d9      	ldr	r1, [r3, #12]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	781a      	ldrb	r2, [r3, #0]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	b298      	uxth	r0, r3
 8006e44:	79fb      	ldrb	r3, [r7, #7]
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	4603      	mov	r3, r0
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f000 fa2b 	bl	80072a6 <USB_WritePacket>
 8006e50:	e0ce      	b.n	8006ff0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	69ba      	ldr	r2, [r7, #24]
 8006e62:	0151      	lsls	r1, r2, #5
 8006e64:	69fa      	ldr	r2, [r7, #28]
 8006e66:	440a      	add	r2, r1
 8006e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e6c:	0cdb      	lsrs	r3, r3, #19
 8006e6e:	04db      	lsls	r3, r3, #19
 8006e70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	0151      	lsls	r1, r2, #5
 8006e84:	69fa      	ldr	r2, [r7, #28]
 8006e86:	440a      	add	r2, r1
 8006e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e94:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d126      	bne.n	8006eec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eaa:	691a      	ldr	r2, [r3, #16]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eb4:	69b9      	ldr	r1, [r7, #24]
 8006eb6:	0148      	lsls	r0, r1, #5
 8006eb8:	69f9      	ldr	r1, [r7, #28]
 8006eba:	4401      	add	r1, r0
 8006ebc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	015a      	lsls	r2, r3, #5
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	4413      	add	r3, r2
 8006ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	0151      	lsls	r1, r2, #5
 8006ed6:	69fa      	ldr	r2, [r7, #28]
 8006ed8:	440a      	add	r2, r1
 8006eda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ede:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ee2:	6113      	str	r3, [r2, #16]
 8006ee4:	e036      	b.n	8006f54 <USB_EPStartXfer+0x3dc>
 8006ee6:	bf00      	nop
 8006ee8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	695a      	ldr	r2, [r3, #20]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	1e5a      	subs	r2, r3, #1
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f00:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	015a      	lsls	r2, r3, #5
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	4413      	add	r3, r2
 8006f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0e:	691a      	ldr	r2, [r3, #16]
 8006f10:	8afb      	ldrh	r3, [r7, #22]
 8006f12:	04d9      	lsls	r1, r3, #19
 8006f14:	4b39      	ldr	r3, [pc, #228]	; (8006ffc <USB_EPStartXfer+0x484>)
 8006f16:	400b      	ands	r3, r1
 8006f18:	69b9      	ldr	r1, [r7, #24]
 8006f1a:	0148      	lsls	r0, r1, #5
 8006f1c:	69f9      	ldr	r1, [r7, #28]
 8006f1e:	4401      	add	r1, r0
 8006f20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f24:	4313      	orrs	r3, r2
 8006f26:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f34:	691a      	ldr	r2, [r3, #16]
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	8af9      	ldrh	r1, [r7, #22]
 8006f3c:	fb01 f303 	mul.w	r3, r1, r3
 8006f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f44:	69b9      	ldr	r1, [r7, #24]
 8006f46:	0148      	lsls	r0, r1, #5
 8006f48:	69f9      	ldr	r1, [r7, #28]
 8006f4a:	4401      	add	r1, r0
 8006f4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f50:	4313      	orrs	r3, r2
 8006f52:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006f54:	79fb      	ldrb	r3, [r7, #7]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d10d      	bne.n	8006f76 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d009      	beq.n	8006f76 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	68d9      	ldr	r1, [r3, #12]
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f72:	460a      	mov	r2, r1
 8006f74:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	78db      	ldrb	r3, [r3, #3]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d128      	bne.n	8006fd0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d110      	bne.n	8006fb0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	69ba      	ldr	r2, [r7, #24]
 8006f9e:	0151      	lsls	r1, r2, #5
 8006fa0:	69fa      	ldr	r2, [r7, #28]
 8006fa2:	440a      	add	r2, r1
 8006fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fa8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	e00f      	b.n	8006fd0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	69ba      	ldr	r2, [r7, #24]
 8006fc0:	0151      	lsls	r1, r2, #5
 8006fc2:	69fa      	ldr	r2, [r7, #28]
 8006fc4:	440a      	add	r2, r1
 8006fc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	015a      	lsls	r2, r3, #5
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	69ba      	ldr	r2, [r7, #24]
 8006fe0:	0151      	lsls	r1, r2, #5
 8006fe2:	69fa      	ldr	r2, [r7, #28]
 8006fe4:	440a      	add	r2, r1
 8006fe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3720      	adds	r7, #32
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	1ff80000 	.word	0x1ff80000

08007000 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007000:	b480      	push	{r7}
 8007002:	b087      	sub	sp, #28
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	4613      	mov	r3, r2
 800700c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	785b      	ldrb	r3, [r3, #1]
 800701c:	2b01      	cmp	r3, #1
 800701e:	f040 80cd 	bne.w	80071bc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d132      	bne.n	8007090 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	4413      	add	r3, r2
 8007032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	0151      	lsls	r1, r2, #5
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	440a      	add	r2, r1
 8007040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007044:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007048:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800704c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	015a      	lsls	r2, r3, #5
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	4413      	add	r3, r2
 8007056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	0151      	lsls	r1, r2, #5
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	440a      	add	r2, r1
 8007064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007068:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800706c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	015a      	lsls	r2, r3, #5
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	4413      	add	r3, r2
 8007076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	0151      	lsls	r1, r2, #5
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	440a      	add	r2, r1
 8007084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007088:	0cdb      	lsrs	r3, r3, #19
 800708a:	04db      	lsls	r3, r3, #19
 800708c:	6113      	str	r3, [r2, #16]
 800708e:	e04e      	b.n	800712e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	0151      	lsls	r1, r2, #5
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	440a      	add	r2, r1
 80070a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070aa:	0cdb      	lsrs	r3, r3, #19
 80070ac:	04db      	lsls	r3, r3, #19
 80070ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	0151      	lsls	r1, r2, #5
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	440a      	add	r2, r1
 80070c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	695a      	ldr	r2, [r3, #20]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d903      	bls.n	80070e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	689a      	ldr	r2, [r3, #8]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	015a      	lsls	r2, r3, #5
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	4413      	add	r3, r2
 80070f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	0151      	lsls	r1, r2, #5
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	440a      	add	r2, r1
 80070fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007102:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007106:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	4413      	add	r3, r2
 8007110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007114:	691a      	ldr	r2, [r3, #16]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800711e:	6939      	ldr	r1, [r7, #16]
 8007120:	0148      	lsls	r0, r1, #5
 8007122:	6979      	ldr	r1, [r7, #20]
 8007124:	4401      	add	r1, r0
 8007126:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800712a:	4313      	orrs	r3, r2
 800712c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d11e      	bne.n	8007172 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d009      	beq.n	8007150 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	015a      	lsls	r2, r3, #5
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	4413      	add	r3, r2
 8007144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007148:	461a      	mov	r2, r3
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	4413      	add	r3, r2
 8007158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	0151      	lsls	r1, r2, #5
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	440a      	add	r2, r1
 8007166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800716a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800716e:	6013      	str	r3, [r2, #0]
 8007170:	e092      	b.n	8007298 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	0151      	lsls	r1, r2, #5
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	440a      	add	r2, r1
 8007188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800718c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007190:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d07e      	beq.n	8007298 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	f003 030f 	and.w	r3, r3, #15
 80071aa:	2101      	movs	r1, #1
 80071ac:	fa01 f303 	lsl.w	r3, r1, r3
 80071b0:	6979      	ldr	r1, [r7, #20]
 80071b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071b6:	4313      	orrs	r3, r2
 80071b8:	634b      	str	r3, [r1, #52]	; 0x34
 80071ba:	e06d      	b.n	8007298 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	0151      	lsls	r1, r2, #5
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	440a      	add	r2, r1
 80071d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071d6:	0cdb      	lsrs	r3, r3, #19
 80071d8:	04db      	lsls	r3, r3, #19
 80071da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	0151      	lsls	r1, r2, #5
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	440a      	add	r2, r1
 80071f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071fe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	689a      	ldr	r2, [r3, #8]
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	4413      	add	r3, r2
 8007218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	0151      	lsls	r1, r2, #5
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	440a      	add	r2, r1
 8007226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800722a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800722e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	4413      	add	r3, r2
 8007238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723c:	691a      	ldr	r2, [r3, #16]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007246:	6939      	ldr	r1, [r7, #16]
 8007248:	0148      	lsls	r0, r1, #5
 800724a:	6979      	ldr	r1, [r7, #20]
 800724c:	4401      	add	r1, r0
 800724e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007252:	4313      	orrs	r3, r2
 8007254:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d10d      	bne.n	8007278 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d009      	beq.n	8007278 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	68d9      	ldr	r1, [r3, #12]
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007274:	460a      	mov	r2, r1
 8007276:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	015a      	lsls	r2, r3, #5
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	4413      	add	r3, r2
 8007280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	0151      	lsls	r1, r2, #5
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	440a      	add	r2, r1
 800728e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007292:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007296:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	371c      	adds	r7, #28
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b089      	sub	sp, #36	; 0x24
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	60f8      	str	r0, [r7, #12]
 80072ae:	60b9      	str	r1, [r7, #8]
 80072b0:	4611      	mov	r1, r2
 80072b2:	461a      	mov	r2, r3
 80072b4:	460b      	mov	r3, r1
 80072b6:	71fb      	strb	r3, [r7, #7]
 80072b8:	4613      	mov	r3, r2
 80072ba:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80072c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d11a      	bne.n	8007302 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80072cc:	88bb      	ldrh	r3, [r7, #4]
 80072ce:	3303      	adds	r3, #3
 80072d0:	089b      	lsrs	r3, r3, #2
 80072d2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80072d4:	2300      	movs	r3, #0
 80072d6:	61bb      	str	r3, [r7, #24]
 80072d8:	e00f      	b.n	80072fa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80072da:	79fb      	ldrb	r3, [r7, #7]
 80072dc:	031a      	lsls	r2, r3, #12
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072e6:	461a      	mov	r2, r3
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6013      	str	r3, [r2, #0]
      pSrc++;
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	3304      	adds	r3, #4
 80072f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	3301      	adds	r3, #1
 80072f8:	61bb      	str	r3, [r7, #24]
 80072fa:	69ba      	ldr	r2, [r7, #24]
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d3eb      	bcc.n	80072da <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3724      	adds	r7, #36	; 0x24
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007310:	b480      	push	{r7}
 8007312:	b089      	sub	sp, #36	; 0x24
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	4613      	mov	r3, r2
 800731c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007326:	88fb      	ldrh	r3, [r7, #6]
 8007328:	3303      	adds	r3, #3
 800732a:	089b      	lsrs	r3, r3, #2
 800732c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800732e:	2300      	movs	r3, #0
 8007330:	61bb      	str	r3, [r7, #24]
 8007332:	e00b      	b.n	800734c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	3304      	adds	r3, #4
 8007344:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	3301      	adds	r3, #1
 800734a:	61bb      	str	r3, [r7, #24]
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	429a      	cmp	r2, r3
 8007352:	d3ef      	bcc.n	8007334 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007354:	69fb      	ldr	r3, [r7, #28]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3724      	adds	r7, #36	; 0x24
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007362:	b480      	push	{r7}
 8007364:	b085      	sub	sp, #20
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	785b      	ldrb	r3, [r3, #1]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d12c      	bne.n	80073d8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	db12      	blt.n	80073b6 <USB_EPSetStall+0x54>
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00f      	beq.n	80073b6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4413      	add	r3, r2
 800739e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	0151      	lsls	r1, r2, #5
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	440a      	add	r2, r1
 80073ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80073b4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	015a      	lsls	r2, r3, #5
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	4413      	add	r3, r2
 80073be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	0151      	lsls	r1, r2, #5
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	440a      	add	r2, r1
 80073cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073d4:	6013      	str	r3, [r2, #0]
 80073d6:	e02b      	b.n	8007430 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	db12      	blt.n	8007410 <USB_EPSetStall+0xae>
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00f      	beq.n	8007410 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	0151      	lsls	r1, r2, #5
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	440a      	add	r2, r1
 8007406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800740a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800740e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	0151      	lsls	r1, r2, #5
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	440a      	add	r2, r1
 8007426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800742a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800742e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800743e:	b480      	push	{r7}
 8007440:	b085      	sub	sp, #20
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	785b      	ldrb	r3, [r3, #1]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d128      	bne.n	80074ac <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	4413      	add	r3, r2
 8007462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	0151      	lsls	r1, r2, #5
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	440a      	add	r2, r1
 8007470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007474:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007478:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	78db      	ldrb	r3, [r3, #3]
 800747e:	2b03      	cmp	r3, #3
 8007480:	d003      	beq.n	800748a <USB_EPClearStall+0x4c>
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	78db      	ldrb	r3, [r3, #3]
 8007486:	2b02      	cmp	r3, #2
 8007488:	d138      	bne.n	80074fc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	015a      	lsls	r2, r3, #5
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	4413      	add	r3, r2
 8007492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	0151      	lsls	r1, r2, #5
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	440a      	add	r2, r1
 80074a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074a8:	6013      	str	r3, [r2, #0]
 80074aa:	e027      	b.n	80074fc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	0151      	lsls	r1, r2, #5
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	440a      	add	r2, r1
 80074c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80074ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	78db      	ldrb	r3, [r3, #3]
 80074d0:	2b03      	cmp	r3, #3
 80074d2:	d003      	beq.n	80074dc <USB_EPClearStall+0x9e>
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	78db      	ldrb	r3, [r3, #3]
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d10f      	bne.n	80074fc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	015a      	lsls	r2, r3, #5
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	0151      	lsls	r1, r2, #5
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	440a      	add	r2, r1
 80074f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074fa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800750a:	b480      	push	{r7}
 800750c:	b085      	sub	sp, #20
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	460b      	mov	r3, r1
 8007514:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007528:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800752c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	78fb      	ldrb	r3, [r7, #3]
 8007538:	011b      	lsls	r3, r3, #4
 800753a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800753e:	68f9      	ldr	r1, [r7, #12]
 8007540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007544:	4313      	orrs	r3, r2
 8007546:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007556:	b480      	push	{r7}
 8007558:	b085      	sub	sp, #20
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007570:	f023 0303 	bic.w	r3, r3, #3
 8007574:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007584:	f023 0302 	bic.w	r3, r3, #2
 8007588:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3714      	adds	r7, #20
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075b2:	f023 0303 	bic.w	r3, r3, #3
 80075b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075c6:	f043 0302 	orr.w	r3, r3, #2
 80075ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80075da:	b480      	push	{r7}
 80075dc:	b085      	sub	sp, #20
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	4013      	ands	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80075f2:	68fb      	ldr	r3, [r7, #12]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3714      	adds	r7, #20
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800761c:	69db      	ldr	r3, [r3, #28]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	4013      	ands	r3, r2
 8007622:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	0c1b      	lsrs	r3, r3, #16
}
 8007628:	4618      	mov	r0, r3
 800762a:	3714      	adds	r7, #20
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	4013      	ands	r3, r2
 8007656:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	b29b      	uxth	r3, r3
}
 800765c:	4618      	mov	r0, r3
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007678:	78fb      	ldrb	r3, [r7, #3]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	4013      	ands	r3, r2
 8007694:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007696:	68bb      	ldr	r3, [r7, #8]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b087      	sub	sp, #28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	460b      	mov	r3, r1
 80076ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80076c8:	78fb      	ldrb	r3, [r7, #3]
 80076ca:	f003 030f 	and.w	r3, r3, #15
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	fa22 f303 	lsr.w	r3, r2, r3
 80076d4:	01db      	lsls	r3, r3, #7
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	4313      	orrs	r3, r2
 80076dc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80076de:	78fb      	ldrb	r3, [r7, #3]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	4013      	ands	r3, r2
 80076f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80076f2:	68bb      	ldr	r3, [r7, #8]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	371c      	adds	r7, #28
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	f003 0301 	and.w	r3, r3, #1
}
 8007710:	4618      	mov	r0, r3
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007736:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800773a:	f023 0307 	bic.w	r3, r3, #7
 800773e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800774e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007752:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3714      	adds	r7, #20
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
	...

08007764 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	460b      	mov	r3, r1
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	333c      	adds	r3, #60	; 0x3c
 800777a:	3304      	adds	r3, #4
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	4a26      	ldr	r2, [pc, #152]	; (800781c <USB_EP0_OutStart+0xb8>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d90a      	bls.n	800779e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007794:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007798:	d101      	bne.n	800779e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800779a:	2300      	movs	r3, #0
 800779c:	e037      	b.n	800780e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a4:	461a      	mov	r2, r3
 80077a6:	2300      	movs	r3, #0
 80077a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077cc:	f043 0318 	orr.w	r3, r3, #24
 80077d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80077e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80077e6:	7afb      	ldrb	r3, [r7, #11]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d10f      	bne.n	800780c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f2:	461a      	mov	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007806:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800780a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	371c      	adds	r7, #28
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	4f54300a 	.word	0x4f54300a

08007820 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007828:	2300      	movs	r3, #0
 800782a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	3301      	adds	r3, #1
 8007830:	60fb      	str	r3, [r7, #12]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	4a13      	ldr	r2, [pc, #76]	; (8007884 <USB_CoreReset+0x64>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d901      	bls.n	800783e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800783a:	2303      	movs	r3, #3
 800783c:	e01b      	b.n	8007876 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	daf2      	bge.n	800782c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007846:	2300      	movs	r3, #0
 8007848:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	f043 0201 	orr.w	r2, r3, #1
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	3301      	adds	r3, #1
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4a09      	ldr	r2, [pc, #36]	; (8007884 <USB_CoreReset+0x64>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d901      	bls.n	8007868 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	e006      	b.n	8007876 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	2b01      	cmp	r3, #1
 8007872:	d0f0      	beq.n	8007856 <USB_CoreReset+0x36>

  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	00030d40 	.word	0x00030d40

08007888 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	460b      	mov	r3, r1
 8007892:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

    /* Allocate Audio structure */
  haudio = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8007894:	f643 4050 	movw	r0, #15440	; 0x3c50
 8007898:	f004 fe08 	bl	800c4ac <malloc>
 800789c:	4603      	mov	r3, r0
 800789e:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d105      	bne.n	80078b2 <USBD_AUDIO_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80078ae:	2302      	movs	r3, #2
 80078b0:	e04b      	b.n	800794a <USBD_AUDIO_Init+0xc2>
  }

  pdev->pClassData = (void *)haudio;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	7c1b      	ldrb	r3, [r3, #16]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d104      	bne.n	80078cc <USBD_AUDIO_Init+0x44>
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 80078ca:	e003      	b.n	80078d4 <USBD_AUDIO_Init+0x4c>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 80078d4:	23c0      	movs	r3, #192	; 0xc0
 80078d6:	2201      	movs	r2, #1
 80078d8:	2101      	movs	r1, #1
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f004 fac3 	bl	800be66 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  haudio->alt_setting = 0U;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80078f4:	3304      	adds	r3, #4
 80078f6:	2203      	movs	r2, #3
 80078f8:	701a      	strb	r2, [r3, #0]
  haudio->wr_ptr = 0U;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007900:	3308      	adds	r3, #8
 8007902:	2200      	movs	r2, #0
 8007904:	801a      	strh	r2, [r3, #0]
  haudio->rd_ptr = 0U;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800790c:	3306      	adds	r3, #6
 800790e:	2200      	movs	r2, #0
 8007910:	801a      	strh	r2, [r3, #0]
  haudio->rd_enable = 0U;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007918:	3305      	adds	r3, #5
 800791a:	2200      	movs	r2, #0
 800791c:	701a      	strb	r2, [r3, #0]

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2200      	movs	r2, #0
 8007928:	2146      	movs	r1, #70	; 0x46
 800792a:	f64b 3080 	movw	r0, #48000	; 0xbb80
 800792e:	4798      	blx	r3
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <USBD_AUDIO_Init+0xb2>
                                                       AUDIO_DEFAULT_VOLUME,
                                                       0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 8007936:	2303      	movs	r3, #3
 8007938:	e007      	b.n	800794a <USBD_AUDIO_Init+0xc2>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	1d1a      	adds	r2, r3, #4
 800793e:	23c0      	movs	r3, #192	; 0xc0
 8007940:	2101      	movs	r1, #1
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f004 fb7e 	bl	800c044 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b082      	sub	sp, #8
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	460b      	mov	r3, r1
 800795c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 800795e:	2101      	movs	r1, #1
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f004 faa6 	bl	800beb2 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = 0U;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00f      	beq.n	80079a0 <USBD_AUDIO_DeInit+0x4e>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	2000      	movs	r0, #0
 800798a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007992:	4618      	mov	r0, r3
 8007994:	f004 fd92 	bl	800c4bc <free>
    pdev->pClassData = NULL;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
	...

080079ac <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80079b6:	2300      	movs	r3, #0
 80079b8:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079c4:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d01a      	beq.n	8007a08 <USBD_AUDIO_Setup+0x5c>
 80079d2:	2b20      	cmp	r3, #32
 80079d4:	f040 809e 	bne.w	8007b14 <USBD_AUDIO_Setup+0x168>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	785b      	ldrb	r3, [r3, #1]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d006      	beq.n	80079ee <USBD_AUDIO_Setup+0x42>
 80079e0:	2b81      	cmp	r3, #129	; 0x81
 80079e2:	d109      	bne.n	80079f8 <USBD_AUDIO_Setup+0x4c>
    {
    case AUDIO_REQ_GET_CUR:
      AUDIO_REQ_GetCurrent(pdev, req);
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f9a0 	bl	8007d2c <AUDIO_REQ_GetCurrent>
      break;
 80079ec:	e00b      	b.n	8007a06 <USBD_AUDIO_Setup+0x5a>

    case AUDIO_REQ_SET_CUR:
      AUDIO_REQ_SetCurrent(pdev, req);
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f9bb 	bl	8007d6c <AUDIO_REQ_SetCurrent>
      break;
 80079f6:	e006      	b.n	8007a06 <USBD_AUDIO_Setup+0x5a>

    default:
      USBD_CtlError(pdev, req);
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f001 fa68 	bl	8008ed0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007a00:	2303      	movs	r3, #3
 8007a02:	75fb      	strb	r3, [r7, #23]
      break;
 8007a04:	bf00      	nop
    }
    break;
 8007a06:	e08c      	b.n	8007b22 <USBD_AUDIO_Setup+0x176>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	785b      	ldrb	r3, [r3, #1]
 8007a0c:	2b0b      	cmp	r3, #11
 8007a0e:	d876      	bhi.n	8007afe <USBD_AUDIO_Setup+0x152>
 8007a10:	a201      	add	r2, pc, #4	; (adr r2, 8007a18 <USBD_AUDIO_Setup+0x6c>)
 8007a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a16:	bf00      	nop
 8007a18:	08007a49 	.word	0x08007a49
 8007a1c:	08007b0d 	.word	0x08007b0d
 8007a20:	08007aff 	.word	0x08007aff
 8007a24:	08007aff 	.word	0x08007aff
 8007a28:	08007aff 	.word	0x08007aff
 8007a2c:	08007aff 	.word	0x08007aff
 8007a30:	08007a71 	.word	0x08007a71
 8007a34:	08007aff 	.word	0x08007aff
 8007a38:	08007aff 	.word	0x08007aff
 8007a3c:	08007aff 	.word	0x08007aff
 8007a40:	08007a9b 	.word	0x08007a9b
 8007a44:	08007ac1 	.word	0x08007ac1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	d107      	bne.n	8007a62 <USBD_AUDIO_Setup+0xb6>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007a52:	f107 0308 	add.w	r3, r7, #8
 8007a56:	2202      	movs	r2, #2
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f001 faa9 	bl	8008fb2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007a60:	e057      	b.n	8007b12 <USBD_AUDIO_Setup+0x166>
        USBD_CtlError(pdev, req);
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f001 fa33 	bl	8008ed0 <USBD_CtlError>
        ret = USBD_FAIL;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a6e:	e050      	b.n	8007b12 <USBD_AUDIO_Setup+0x166>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	885b      	ldrh	r3, [r3, #2]
 8007a74:	0a1b      	lsrs	r3, r3, #8
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	2b21      	cmp	r3, #33	; 0x21
 8007a7a:	d149      	bne.n	8007b10 <USBD_AUDIO_Setup+0x164>
      {
        pbuf = USBD_AUDIO_CfgDesc + 18;
 8007a7c:	4b2b      	ldr	r3, [pc, #172]	; (8007b2c <USBD_AUDIO_Setup+0x180>)
 8007a7e:	60fb      	str	r3, [r7, #12]
        len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	88db      	ldrh	r3, [r3, #6]
 8007a84:	2b09      	cmp	r3, #9
 8007a86:	bf28      	it	cs
 8007a88:	2309      	movcs	r3, #9
 8007a8a:	817b      	strh	r3, [r7, #10]

        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a8c:	897b      	ldrh	r3, [r7, #10]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	68f9      	ldr	r1, [r7, #12]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f001 fa8d 	bl	8008fb2 <USBD_CtlSendData>
      }
      break;
 8007a98:	e03a      	b.n	8007b10 <USBD_AUDIO_Setup+0x164>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d106      	bne.n	8007ab2 <USBD_AUDIO_Setup+0x106>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f001 fa81 	bl	8008fb2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007ab0:	e02f      	b.n	8007b12 <USBD_AUDIO_Setup+0x166>
        USBD_CtlError(pdev, req);
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f001 fa0b 	bl	8008ed0 <USBD_CtlError>
        ret = USBD_FAIL;
 8007aba:	2303      	movs	r3, #3
 8007abc:	75fb      	strb	r3, [r7, #23]
      break;
 8007abe:	e028      	b.n	8007b12 <USBD_AUDIO_Setup+0x166>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d112      	bne.n	8007af0 <USBD_AUDIO_Setup+0x144>
      {
        if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	885b      	ldrh	r3, [r3, #2]
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b08      	cmp	r3, #8
 8007ad2:	d806      	bhi.n	8007ae2 <USBD_AUDIO_Setup+0x136>
        {
          haudio->alt_setting = (uint8_t)(req->wValue);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	885b      	ldrh	r3, [r3, #2]
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	461a      	mov	r2, r3
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	601a      	str	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007ae0:	e017      	b.n	8007b12 <USBD_AUDIO_Setup+0x166>
          USBD_CtlError(pdev, req);
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f001 f9f3 	bl	8008ed0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007aea:	2303      	movs	r3, #3
 8007aec:	75fb      	strb	r3, [r7, #23]
      break;
 8007aee:	e010      	b.n	8007b12 <USBD_AUDIO_Setup+0x166>
        USBD_CtlError(pdev, req);
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f001 f9ec 	bl	8008ed0 <USBD_CtlError>
        ret = USBD_FAIL;
 8007af8:	2303      	movs	r3, #3
 8007afa:	75fb      	strb	r3, [r7, #23]
      break;
 8007afc:	e009      	b.n	8007b12 <USBD_AUDIO_Setup+0x166>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f001 f9e5 	bl	8008ed0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007b06:	2303      	movs	r3, #3
 8007b08:	75fb      	strb	r3, [r7, #23]
      break;
 8007b0a:	e002      	b.n	8007b12 <USBD_AUDIO_Setup+0x166>
      break;
 8007b0c:	bf00      	nop
 8007b0e:	e008      	b.n	8007b22 <USBD_AUDIO_Setup+0x176>
      break;
 8007b10:	bf00      	nop
    }
    break;
 8007b12:	e006      	b.n	8007b22 <USBD_AUDIO_Setup+0x176>
  default:
    USBD_CtlError(pdev, req);
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f001 f9da 	bl	8008ed0 <USBD_CtlError>
    ret = USBD_FAIL;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	75fb      	strb	r3, [r7, #23]
    break;
 8007b20:	bf00      	nop
  }

  return (uint8_t)ret;
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3718      	adds	r7, #24
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	20000052 	.word	0x20000052

08007b30 <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	226d      	movs	r2, #109	; 0x6d
 8007b3c:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 8007b3e:	4b03      	ldr	r3, [pc, #12]	; (8007b4c <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	20000040 	.word	0x20000040

08007b50 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b084      	sub	sp, #16
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b78:	60fb      	str	r3, [r7, #12]

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007b80:	330a      	adds	r3, #10
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d11d      	bne.n	8007bc4 <USBD_AUDIO_EP0_RxReady+0x5a>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 8007b8e:	330c      	adds	r3, #12
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d116      	bne.n	8007bc4 <USBD_AUDIO_EP0_RxReady+0x5a>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b9c:	691a      	ldr	r2, [r3, #16]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007ba4:	330b      	adds	r3, #11
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	4790      	blx	r2
      haudio->control.cmd = 0U;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007bb2:	330a      	adds	r3, #10
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	701a      	strb	r2, [r3, #0]
      haudio->control.len = 0U;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 8007bbe:	330b      	adds	r3, #11
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	701a      	strb	r2, [r3, #0]
    }
  }

  return (uint8_t)USBD_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b083      	sub	sp, #12
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b083      	sub	sp, #12
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	460b      	mov	r3, r1
 8007c04:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c2e:	b590      	push	{r4, r7, lr}
 8007c30:	b085      	sub	sp, #20
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	460b      	mov	r3, r1
 8007c38:	70fb      	strb	r3, [r7, #3]
  uint16_t PacketSize;
  USBD_AUDIO_HandleTypeDef *haudio;

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c40:	60fb      	str	r3, [r7, #12]

  if (epnum == AUDIO_OUT_EP)
 8007c42:	78fb      	ldrb	r3, [r7, #3]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d16c      	bne.n	8007d22 <USBD_AUDIO_DataOut+0xf4>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8007c48:	78fb      	ldrb	r3, [r7, #3]
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f004 fa1a 	bl	800c086 <USBD_LL_GetRxDataSize>
 8007c52:	4603      	mov	r3, r0
 8007c54:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c5c:	695c      	ldr	r4, [r3, #20]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007c64:	3308      	adds	r3, #8
 8007c66:	881b      	ldrh	r3, [r3, #0]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	3304      	adds	r3, #4
 8007c70:	8979      	ldrh	r1, [r7, #10]
 8007c72:	2201      	movs	r2, #1
 8007c74:	4618      	mov	r0, r3
 8007c76:	47a0      	blx	r4
                                                           PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007c7e:	3308      	adds	r3, #8
 8007c80:	881a      	ldrh	r2, [r3, #0]
 8007c82:	897b      	ldrh	r3, [r7, #10]
 8007c84:	4413      	add	r3, r2
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007c8e:	3308      	adds	r3, #8
 8007c90:	801a      	strh	r2, [r3, #0]

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007c98:	3308      	adds	r3, #8
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8007ca0:	d11c      	bne.n	8007cdc <USBD_AUDIO_DataOut+0xae>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007ca8:	3308      	adds	r3, #8
 8007caa:	2200      	movs	r2, #0
 8007cac:	801a      	strh	r2, [r3, #0]

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007cb4:	3304      	adds	r3, #4
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	2b03      	cmp	r3, #3
 8007cba:	d10f      	bne.n	8007cdc <USBD_AUDIO_DataOut+0xae>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	1d10      	adds	r0, r2, #4
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8007cce:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007cd6:	3304      	adds	r3, #4
 8007cd8:	2200      	movs	r2, #0
 8007cda:	701a      	strb	r2, [r3, #0]
      }
    }

    if (haudio->rd_enable == 0U)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007ce2:	3305      	adds	r3, #5
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10d      	bne.n	8007d06 <USBD_AUDIO_DataOut+0xd8>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8007cf8:	d105      	bne.n	8007d06 <USBD_AUDIO_DataOut+0xd8>
      {
        haudio->rd_enable = 1U;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007d00:	3305      	adds	r3, #5
 8007d02:	2201      	movs	r2, #1
 8007d04:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
                                 &haudio->buffer[haudio->wr_ptr],
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007d0c:	3308      	adds	r3, #8
 8007d0e:	881b      	ldrh	r3, [r3, #0]
 8007d10:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	4413      	add	r3, r2
 8007d16:	1d1a      	adds	r2, r3, #4
 8007d18:	23c0      	movs	r3, #192	; 0xc0
 8007d1a:	2101      	movs	r1, #1
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f004 f991 	bl	800c044 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd90      	pop	{r4, r7, pc}

08007d2c <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d3c:	60fb      	str	r3, [r7, #12]

  (void)USBD_memset(haudio->control.data, 0, 64U);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007d44:	330b      	adds	r3, #11
 8007d46:	2240      	movs	r2, #64	; 0x40
 8007d48:	2100      	movs	r1, #0
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f004 fbbe 	bl	800c4cc <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007d56:	330b      	adds	r3, #11
 8007d58:	683a      	ldr	r2, [r7, #0]
 8007d5a:	88d2      	ldrh	r2, [r2, #6]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f001 f927 	bl	8008fb2 <USBD_CtlSendData>
}
 8007d64:	bf00      	nop
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d7c:	60fb      	str	r3, [r7, #12]

  if (req->wLength != 0U)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	88db      	ldrh	r3, [r3, #6]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d021      	beq.n	8007dca <AUDIO_REQ_SetCurrent+0x5e>
  {
    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007d8c:	330b      	adds	r3, #11
 8007d8e:	683a      	ldr	r2, [r7, #0]
 8007d90:	88d2      	ldrh	r2, [r2, #6]
 8007d92:	4619      	mov	r1, r3
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f001 f938 	bl	800900a <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007da0:	330a      	adds	r3, #10
 8007da2:	2201      	movs	r2, #1
 8007da4:	701a      	strb	r2, [r3, #0]
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	88db      	ldrh	r3, [r3, #6]
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 8007db2:	330b      	adds	r3, #11
 8007db4:	701a      	strb	r2, [r3, #0]
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	889b      	ldrh	r3, [r3, #4]
 8007dba:	0a1b      	lsrs	r3, r3, #8
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 8007dc6:	330c      	adds	r3, #12
 8007dc8:	701a      	strb	r2, [r3, #0]
  }
}
 8007dca:	bf00      	nop
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
	...

08007dd4 <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	220a      	movs	r2, #10
 8007de0:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 8007de2:	4b03      	ldr	r3, [pc, #12]	; (8007df0 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr
 8007df0:	200000b0 	.word	0x200000b0

08007df4 <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d101      	bne.n	8007e08 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e004      	b.n	8007e12 <USBD_AUDIO_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
	...

08007e20 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10a      	bne.n	8007e4a <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8007e34:	481a      	ldr	r0, [pc, #104]	; (8007ea0 <USBD_Init+0x80>)
 8007e36:	f004 fbf9 	bl	800c62c <iprintf>
 8007e3a:	481a      	ldr	r0, [pc, #104]	; (8007ea4 <USBD_Init+0x84>)
 8007e3c:	f004 fbf6 	bl	800c62c <iprintf>
 8007e40:	200a      	movs	r0, #10
 8007e42:	f004 fc0b 	bl	800c65c <putchar>
#endif
    return USBD_FAIL;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e025      	b.n	8007e96 <USBD_Init+0x76>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d003      	beq.n	8007e5c <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d003      	beq.n	8007e6e <USBD_Init+0x4e>
  {
    pdev->pConfDesc = NULL;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d003      	beq.n	8007e7c <USBD_Init+0x5c>
  {
    pdev->pDesc = pdesc;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	68ba      	ldr	r2, [r7, #8]
 8007e78:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	79fa      	ldrb	r2, [r7, #7]
 8007e88:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f003 ff80 	bl	800bd90 <USBD_LL_Init>
 8007e90:	4603      	mov	r3, r0
 8007e92:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3718      	adds	r7, #24
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	0800d6d8 	.word	0x0800d6d8
 8007ea4:	0800d6e0 	.word	0x0800d6e0

08007ea8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10a      	bne.n	8007ed2 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8007ebc:	480f      	ldr	r0, [pc, #60]	; (8007efc <USBD_RegisterClass+0x54>)
 8007ebe:	f004 fbb5 	bl	800c62c <iprintf>
 8007ec2:	480f      	ldr	r0, [pc, #60]	; (8007f00 <USBD_RegisterClass+0x58>)
 8007ec4:	f004 fbb2 	bl	800c62c <iprintf>
 8007ec8:	200a      	movs	r0, #10
 8007eca:	f004 fbc7 	bl	800c65c <putchar>
#endif
    return USBD_FAIL;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e010      	b.n	8007ef4 <USBD_RegisterClass+0x4c>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee2:	f107 020e 	add.w	r2, r7, #14
 8007ee6:	4610      	mov	r0, r2
 8007ee8:	4798      	blx	r3
 8007eea:	4602      	mov	r2, r0
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	0800d6d8 	.word	0x0800d6d8
 8007f00:	0800d6f8 	.word	0x0800d6f8

08007f04 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f003 ff8f 	bl	800be30 <USBD_LL_Start>
 8007f12:	4603      	mov	r3, r0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b084      	sub	sp, #16
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d009      	beq.n	8007f60 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	78fa      	ldrb	r2, [r7, #3]
 8007f56:	4611      	mov	r1, r2
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	4798      	blx	r3
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b082      	sub	sp, #8
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	460b      	mov	r3, r1
 8007f74:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d007      	beq.n	8007f90 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	78fa      	ldrb	r2, [r7, #3]
 8007f8a:	4611      	mov	r1, r2
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	4798      	blx	r3
  }

  return USBD_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b084      	sub	sp, #16
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 ff55 	bl	8008e5c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007fce:	f003 031f 	and.w	r3, r3, #31
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d00e      	beq.n	8007ff4 <USBD_LL_SetupStage+0x5a>
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d302      	bcc.n	8007fe0 <USBD_LL_SetupStage+0x46>
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d014      	beq.n	8008008 <USBD_LL_SetupStage+0x6e>
 8007fde:	e01d      	b.n	800801c <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fa17 	bl	800841c <USBD_StdDevReq>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ff2:	e020      	b.n	8008036 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fa7b 	bl	80084f8 <USBD_StdItfReq>
 8008002:	4603      	mov	r3, r0
 8008004:	73fb      	strb	r3, [r7, #15]
      break;
 8008006:	e016      	b.n	8008036 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800800e:	4619      	mov	r1, r3
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fab7 	bl	8008584 <USBD_StdEPReq>
 8008016:	4603      	mov	r3, r0
 8008018:	73fb      	strb	r3, [r7, #15]
      break;
 800801a:	e00c      	b.n	8008036 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008022:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008026:	b2db      	uxtb	r3, r3
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f003 ff60 	bl	800bef0 <USBD_LL_StallEP>
 8008030:	4603      	mov	r3, r0
 8008032:	73fb      	strb	r3, [r7, #15]
      break;
 8008034:	bf00      	nop
  }

  return ret;
 8008036:	7bfb      	ldrb	r3, [r7, #15]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	460b      	mov	r3, r1
 800804a:	607a      	str	r2, [r7, #4]
 800804c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800804e:	7afb      	ldrb	r3, [r7, #11]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d137      	bne.n	80080c4 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800805a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008062:	2b03      	cmp	r3, #3
 8008064:	d14a      	bne.n	80080fc <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	429a      	cmp	r2, r3
 8008070:	d913      	bls.n	800809a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	689a      	ldr	r2, [r3, #8]
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	1ad2      	subs	r2, r2, r3
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	68da      	ldr	r2, [r3, #12]
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	4293      	cmp	r3, r2
 800808a:	bf28      	it	cs
 800808c:	4613      	movcs	r3, r2
 800808e:	461a      	mov	r2, r3
 8008090:	6879      	ldr	r1, [r7, #4]
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f000 ffd6 	bl	8009044 <USBD_CtlContinueRx>
 8008098:	e030      	b.n	80080fc <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00a      	beq.n	80080bc <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80080ac:	2b03      	cmp	r3, #3
 80080ae:	d105      	bne.n	80080bc <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 ffd2 	bl	8009066 <USBD_CtlSendStatus>
 80080c2:	e01b      	b.n	80080fc <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d013      	beq.n	80080f8 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80080d6:	2b03      	cmp	r3, #3
 80080d8:	d10e      	bne.n	80080f8 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	7afa      	ldrb	r2, [r7, #11]
 80080e4:	4611      	mov	r1, r2
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	4798      	blx	r3
 80080ea:	4603      	mov	r3, r0
 80080ec:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d003      	beq.n	80080fc <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80080f4:	7dfb      	ldrb	r3, [r7, #23]
 80080f6:	e002      	b.n	80080fe <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e000      	b.n	80080fe <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3718      	adds	r7, #24
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b086      	sub	sp, #24
 800810a:	af00      	add	r7, sp, #0
 800810c:	60f8      	str	r0, [r7, #12]
 800810e:	460b      	mov	r3, r1
 8008110:	607a      	str	r2, [r7, #4]
 8008112:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008114:	7afb      	ldrb	r3, [r7, #11]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d16a      	bne.n	80081f0 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3314      	adds	r3, #20
 800811e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008126:	2b02      	cmp	r3, #2
 8008128:	d155      	bne.n	80081d6 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	689a      	ldr	r2, [r3, #8]
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	429a      	cmp	r2, r3
 8008134:	d914      	bls.n	8008160 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	689a      	ldr	r2, [r3, #8]
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	1ad2      	subs	r2, r2, r3
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	461a      	mov	r2, r3
 800814a:	6879      	ldr	r1, [r7, #4]
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f000 ff4b 	bl	8008fe8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008152:	2300      	movs	r3, #0
 8008154:	2200      	movs	r2, #0
 8008156:	2100      	movs	r1, #0
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f003 ff73 	bl	800c044 <USBD_LL_PrepareReceive>
 800815e:	e03a      	b.n	80081d6 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	68da      	ldr	r2, [r3, #12]
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	429a      	cmp	r2, r3
 800816a:	d11c      	bne.n	80081a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	685a      	ldr	r2, [r3, #4]
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008174:	429a      	cmp	r2, r3
 8008176:	d316      	bcc.n	80081a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008182:	429a      	cmp	r2, r3
 8008184:	d20f      	bcs.n	80081a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008186:	2200      	movs	r2, #0
 8008188:	2100      	movs	r1, #0
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f000 ff2c 	bl	8008fe8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008198:	2300      	movs	r3, #0
 800819a:	2200      	movs	r2, #0
 800819c:	2100      	movs	r1, #0
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f003 ff50 	bl	800c044 <USBD_LL_PrepareReceive>
 80081a4:	e017      	b.n	80081d6 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00a      	beq.n	80081c8 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d105      	bne.n	80081c8 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80081c8:	2180      	movs	r1, #128	; 0x80
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f003 fe90 	bl	800bef0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f000 ff5b 	bl	800908c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d123      	bne.n	8008228 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f7ff fe9b 	bl	8007f1c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80081ee:	e01b      	b.n	8008228 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f6:	695b      	ldr	r3, [r3, #20]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d013      	beq.n	8008224 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008202:	2b03      	cmp	r3, #3
 8008204:	d10e      	bne.n	8008224 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	7afa      	ldrb	r2, [r7, #11]
 8008210:	4611      	mov	r1, r2
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	4798      	blx	r3
 8008216:	4603      	mov	r3, r0
 8008218:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800821a:	7dfb      	ldrb	r3, [r7, #23]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d003      	beq.n	8008228 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	e002      	b.n	800822a <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008224:	2303      	movs	r3, #3
 8008226:	e000      	b.n	800822a <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3718      	adds	r7, #24
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b082      	sub	sp, #8
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800825e:	2b00      	cmp	r3, #0
 8008260:	d009      	beq.n	8008276 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	6852      	ldr	r2, [r2, #4]
 800826e:	b2d2      	uxtb	r2, r2
 8008270:	4611      	mov	r1, r2
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008276:	2340      	movs	r3, #64	; 0x40
 8008278:	2200      	movs	r2, #0
 800827a:	2100      	movs	r1, #0
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f003 fdf2 	bl	800be66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2240      	movs	r2, #64	; 0x40
 800828e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008292:	2340      	movs	r3, #64	; 0x40
 8008294:	2200      	movs	r2, #0
 8008296:	2180      	movs	r1, #128	; 0x80
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f003 fde4 	bl	800be66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2240      	movs	r2, #64	; 0x40
 80082a8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	78fa      	ldrb	r2, [r7, #3]
 80082c4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2204      	movs	r2, #4
 80082ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80082fe:	b480      	push	{r7}
 8008300:	b083      	sub	sp, #12
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800830c:	2b04      	cmp	r3, #4
 800830e:	d105      	bne.n	800831c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b082      	sub	sp, #8
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008338:	2b03      	cmp	r3, #3
 800833a:	d10b      	bne.n	8008354 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008342:	69db      	ldr	r3, [r3, #28]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d005      	beq.n	8008354 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800834e:	69db      	ldr	r3, [r3, #28]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800835e:	b480      	push	{r7}
 8008360:	b083      	sub	sp, #12
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	460b      	mov	r3, r1
 8008368:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	460b      	mov	r3, r1
 8008382:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	370c      	adds	r7, #12
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d009      	beq.n	80083d6 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	6852      	ldr	r2, [r2, #4]
 80083ce:	b2d2      	uxtb	r2, r2
 80083d0:	4611      	mov	r1, r2
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	4798      	blx	r3
  }

  return USBD_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b087      	sub	sp, #28
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	3301      	adds	r3, #1
 80083f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80083fe:	8a3b      	ldrh	r3, [r7, #16]
 8008400:	021b      	lsls	r3, r3, #8
 8008402:	b21a      	sxth	r2, r3
 8008404:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008408:	4313      	orrs	r3, r2
 800840a:	b21b      	sxth	r3, r3
 800840c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800840e:	89fb      	ldrh	r3, [r7, #14]
}
 8008410:	4618      	mov	r0, r3
 8008412:	371c      	adds	r7, #28
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008432:	2b20      	cmp	r3, #32
 8008434:	d004      	beq.n	8008440 <USBD_StdDevReq+0x24>
 8008436:	2b40      	cmp	r3, #64	; 0x40
 8008438:	d002      	beq.n	8008440 <USBD_StdDevReq+0x24>
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00a      	beq.n	8008454 <USBD_StdDevReq+0x38>
 800843e:	e050      	b.n	80084e2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	6839      	ldr	r1, [r7, #0]
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	4798      	blx	r3
 800844e:	4603      	mov	r3, r0
 8008450:	73fb      	strb	r3, [r7, #15]
    break;
 8008452:	e04b      	b.n	80084ec <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	785b      	ldrb	r3, [r3, #1]
 8008458:	2b09      	cmp	r3, #9
 800845a:	d83c      	bhi.n	80084d6 <USBD_StdDevReq+0xba>
 800845c:	a201      	add	r2, pc, #4	; (adr r2, 8008464 <USBD_StdDevReq+0x48>)
 800845e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008462:	bf00      	nop
 8008464:	080084b9 	.word	0x080084b9
 8008468:	080084cd 	.word	0x080084cd
 800846c:	080084d7 	.word	0x080084d7
 8008470:	080084c3 	.word	0x080084c3
 8008474:	080084d7 	.word	0x080084d7
 8008478:	08008497 	.word	0x08008497
 800847c:	0800848d 	.word	0x0800848d
 8008480:	080084d7 	.word	0x080084d7
 8008484:	080084af 	.word	0x080084af
 8008488:	080084a1 	.word	0x080084a1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f9ce 	bl	8008830 <USBD_GetDescriptor>
      break;
 8008494:	e024      	b.n	80084e0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008496:	6839      	ldr	r1, [r7, #0]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 fb5d 	bl	8008b58 <USBD_SetAddress>
      break;
 800849e:	e01f      	b.n	80084e0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80084a0:	6839      	ldr	r1, [r7, #0]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fb9a 	bl	8008bdc <USBD_SetConfig>
 80084a8:	4603      	mov	r3, r0
 80084aa:	73fb      	strb	r3, [r7, #15]
      break;
 80084ac:	e018      	b.n	80084e0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fc37 	bl	8008d24 <USBD_GetConfig>
      break;
 80084b6:	e013      	b.n	80084e0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80084b8:	6839      	ldr	r1, [r7, #0]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fc66 	bl	8008d8c <USBD_GetStatus>
      break;
 80084c0:	e00e      	b.n	80084e0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fc94 	bl	8008df2 <USBD_SetFeature>
      break;
 80084ca:	e009      	b.n	80084e0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fca3 	bl	8008e1a <USBD_ClrFeature>
      break;
 80084d4:	e004      	b.n	80084e0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fcf9 	bl	8008ed0 <USBD_CtlError>
      break;
 80084de:	bf00      	nop
    }
    break;
 80084e0:	e004      	b.n	80084ec <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 fcf3 	bl	8008ed0 <USBD_CtlError>
    break;
 80084ea:	bf00      	nop
  }

  return ret;
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop

080084f8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800850e:	2b20      	cmp	r3, #32
 8008510:	d003      	beq.n	800851a <USBD_StdItfReq+0x22>
 8008512:	2b40      	cmp	r3, #64	; 0x40
 8008514:	d001      	beq.n	800851a <USBD_StdItfReq+0x22>
 8008516:	2b00      	cmp	r3, #0
 8008518:	d12a      	bne.n	8008570 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008520:	3b01      	subs	r3, #1
 8008522:	2b02      	cmp	r3, #2
 8008524:	d81d      	bhi.n	8008562 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	889b      	ldrh	r3, [r3, #4]
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b08      	cmp	r3, #8
 800852e:	d813      	bhi.n	8008558 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	6839      	ldr	r1, [r7, #0]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	4798      	blx	r3
 800853e:	4603      	mov	r3, r0
 8008540:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	88db      	ldrh	r3, [r3, #6]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d110      	bne.n	800856c <USBD_StdItfReq+0x74>
 800854a:	7bfb      	ldrb	r3, [r7, #15]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10d      	bne.n	800856c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fd88 	bl	8009066 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008556:	e009      	b.n	800856c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fcb8 	bl	8008ed0 <USBD_CtlError>
      break;
 8008560:	e004      	b.n	800856c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008562:	6839      	ldr	r1, [r7, #0]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fcb3 	bl	8008ed0 <USBD_CtlError>
      break;
 800856a:	e000      	b.n	800856e <USBD_StdItfReq+0x76>
      break;
 800856c:	bf00      	nop
    }
    break;
 800856e:	e004      	b.n	800857a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008570:	6839      	ldr	r1, [r7, #0]
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fcac 	bl	8008ed0 <USBD_CtlError>
    break;
 8008578:	bf00      	nop
  }

  return ret;
 800857a:	7bfb      	ldrb	r3, [r7, #15]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	889b      	ldrh	r3, [r3, #4]
 8008596:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085a0:	2b20      	cmp	r3, #32
 80085a2:	d004      	beq.n	80085ae <USBD_StdEPReq+0x2a>
 80085a4:	2b40      	cmp	r3, #64	; 0x40
 80085a6:	d002      	beq.n	80085ae <USBD_StdEPReq+0x2a>
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00a      	beq.n	80085c2 <USBD_StdEPReq+0x3e>
 80085ac:	e135      	b.n	800881a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	4798      	blx	r3
 80085bc:	4603      	mov	r3, r0
 80085be:	73fb      	strb	r3, [r7, #15]
    break;
 80085c0:	e130      	b.n	8008824 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	785b      	ldrb	r3, [r3, #1]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d03e      	beq.n	8008648 <USBD_StdEPReq+0xc4>
 80085ca:	2b03      	cmp	r3, #3
 80085cc:	d002      	beq.n	80085d4 <USBD_StdEPReq+0x50>
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d077      	beq.n	80086c2 <USBD_StdEPReq+0x13e>
 80085d2:	e11c      	b.n	800880e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085da:	2b02      	cmp	r3, #2
 80085dc:	d002      	beq.n	80085e4 <USBD_StdEPReq+0x60>
 80085de:	2b03      	cmp	r3, #3
 80085e0:	d015      	beq.n	800860e <USBD_StdEPReq+0x8a>
 80085e2:	e02b      	b.n	800863c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085e4:	7bbb      	ldrb	r3, [r7, #14]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00c      	beq.n	8008604 <USBD_StdEPReq+0x80>
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
 80085ec:	2b80      	cmp	r3, #128	; 0x80
 80085ee:	d009      	beq.n	8008604 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80085f0:	7bbb      	ldrb	r3, [r7, #14]
 80085f2:	4619      	mov	r1, r3
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f003 fc7b 	bl	800bef0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80085fa:	2180      	movs	r1, #128	; 0x80
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f003 fc77 	bl	800bef0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008602:	e020      	b.n	8008646 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008604:	6839      	ldr	r1, [r7, #0]
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fc62 	bl	8008ed0 <USBD_CtlError>
        break;
 800860c:	e01b      	b.n	8008646 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	885b      	ldrh	r3, [r3, #2]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d10e      	bne.n	8008634 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008616:	7bbb      	ldrb	r3, [r7, #14]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00b      	beq.n	8008634 <USBD_StdEPReq+0xb0>
 800861c:	7bbb      	ldrb	r3, [r7, #14]
 800861e:	2b80      	cmp	r3, #128	; 0x80
 8008620:	d008      	beq.n	8008634 <USBD_StdEPReq+0xb0>
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	88db      	ldrh	r3, [r3, #6]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d104      	bne.n	8008634 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800862a:	7bbb      	ldrb	r3, [r7, #14]
 800862c:	4619      	mov	r1, r3
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f003 fc5e 	bl	800bef0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fd16 	bl	8009066 <USBD_CtlSendStatus>

        break;
 800863a:	e004      	b.n	8008646 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fc46 	bl	8008ed0 <USBD_CtlError>
        break;
 8008644:	bf00      	nop
      }
      break;
 8008646:	e0e7      	b.n	8008818 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800864e:	2b02      	cmp	r3, #2
 8008650:	d002      	beq.n	8008658 <USBD_StdEPReq+0xd4>
 8008652:	2b03      	cmp	r3, #3
 8008654:	d015      	beq.n	8008682 <USBD_StdEPReq+0xfe>
 8008656:	e02d      	b.n	80086b4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008658:	7bbb      	ldrb	r3, [r7, #14]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00c      	beq.n	8008678 <USBD_StdEPReq+0xf4>
 800865e:	7bbb      	ldrb	r3, [r7, #14]
 8008660:	2b80      	cmp	r3, #128	; 0x80
 8008662:	d009      	beq.n	8008678 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008664:	7bbb      	ldrb	r3, [r7, #14]
 8008666:	4619      	mov	r1, r3
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f003 fc41 	bl	800bef0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800866e:	2180      	movs	r1, #128	; 0x80
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f003 fc3d 	bl	800bef0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008676:	e023      	b.n	80086c0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fc28 	bl	8008ed0 <USBD_CtlError>
        break;
 8008680:	e01e      	b.n	80086c0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	885b      	ldrh	r3, [r3, #2]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d119      	bne.n	80086be <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800868a:	7bbb      	ldrb	r3, [r7, #14]
 800868c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008690:	2b00      	cmp	r3, #0
 8008692:	d004      	beq.n	800869e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008694:	7bbb      	ldrb	r3, [r7, #14]
 8008696:	4619      	mov	r1, r3
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f003 fc48 	bl	800bf2e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 fce1 	bl	8009066 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	4798      	blx	r3
        }
        break;
 80086b2:	e004      	b.n	80086be <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80086b4:	6839      	ldr	r1, [r7, #0]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fc0a 	bl	8008ed0 <USBD_CtlError>
        break;
 80086bc:	e000      	b.n	80086c0 <USBD_StdEPReq+0x13c>
        break;
 80086be:	bf00      	nop
      }
      break;
 80086c0:	e0aa      	b.n	8008818 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d002      	beq.n	80086d2 <USBD_StdEPReq+0x14e>
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	d032      	beq.n	8008736 <USBD_StdEPReq+0x1b2>
 80086d0:	e097      	b.n	8008802 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086d2:	7bbb      	ldrb	r3, [r7, #14]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d007      	beq.n	80086e8 <USBD_StdEPReq+0x164>
 80086d8:	7bbb      	ldrb	r3, [r7, #14]
 80086da:	2b80      	cmp	r3, #128	; 0x80
 80086dc:	d004      	beq.n	80086e8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80086de:	6839      	ldr	r1, [r7, #0]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fbf5 	bl	8008ed0 <USBD_CtlError>
          break;
 80086e6:	e091      	b.n	800880c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	da0b      	bge.n	8008708 <USBD_StdEPReq+0x184>
 80086f0:	7bbb      	ldrb	r3, [r7, #14]
 80086f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086f6:	4613      	mov	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	3310      	adds	r3, #16
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	4413      	add	r3, r2
 8008704:	3304      	adds	r3, #4
 8008706:	e00b      	b.n	8008720 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008708:	7bbb      	ldrb	r3, [r7, #14]
 800870a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800870e:	4613      	mov	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	4413      	add	r3, r2
 800871e:	3304      	adds	r3, #4
 8008720:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	2200      	movs	r2, #0
 8008726:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2202      	movs	r2, #2
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fc3f 	bl	8008fb2 <USBD_CtlSendData>
        break;
 8008734:	e06a      	b.n	800880c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008736:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800873a:	2b00      	cmp	r3, #0
 800873c:	da11      	bge.n	8008762 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	f003 020f 	and.w	r2, r3, #15
 8008744:	6879      	ldr	r1, [r7, #4]
 8008746:	4613      	mov	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4413      	add	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	440b      	add	r3, r1
 8008750:	3324      	adds	r3, #36	; 0x24
 8008752:	881b      	ldrh	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d117      	bne.n	8008788 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008758:	6839      	ldr	r1, [r7, #0]
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fbb8 	bl	8008ed0 <USBD_CtlError>
            break;
 8008760:	e054      	b.n	800880c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008762:	7bbb      	ldrb	r3, [r7, #14]
 8008764:	f003 020f 	and.w	r2, r3, #15
 8008768:	6879      	ldr	r1, [r7, #4]
 800876a:	4613      	mov	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	440b      	add	r3, r1
 8008774:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008778:	881b      	ldrh	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d104      	bne.n	8008788 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fba5 	bl	8008ed0 <USBD_CtlError>
            break;
 8008786:	e041      	b.n	800880c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008788:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800878c:	2b00      	cmp	r3, #0
 800878e:	da0b      	bge.n	80087a8 <USBD_StdEPReq+0x224>
 8008790:	7bbb      	ldrb	r3, [r7, #14]
 8008792:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008796:	4613      	mov	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4413      	add	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	3310      	adds	r3, #16
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	4413      	add	r3, r2
 80087a4:	3304      	adds	r3, #4
 80087a6:	e00b      	b.n	80087c0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80087a8:	7bbb      	ldrb	r3, [r7, #14]
 80087aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087ae:	4613      	mov	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	4413      	add	r3, r2
 80087be:	3304      	adds	r3, #4
 80087c0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087c2:	7bbb      	ldrb	r3, [r7, #14]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d002      	beq.n	80087ce <USBD_StdEPReq+0x24a>
 80087c8:	7bbb      	ldrb	r3, [r7, #14]
 80087ca:	2b80      	cmp	r3, #128	; 0x80
 80087cc:	d103      	bne.n	80087d6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	2200      	movs	r2, #0
 80087d2:	601a      	str	r2, [r3, #0]
 80087d4:	e00e      	b.n	80087f4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80087d6:	7bbb      	ldrb	r3, [r7, #14]
 80087d8:	4619      	mov	r1, r3
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f003 fbc6 	bl	800bf6c <USBD_LL_IsStallEP>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	2201      	movs	r2, #1
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	e002      	b.n	80087f4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2200      	movs	r2, #0
 80087f2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2202      	movs	r2, #2
 80087f8:	4619      	mov	r1, r3
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fbd9 	bl	8008fb2 <USBD_CtlSendData>
          break;
 8008800:	e004      	b.n	800880c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fb63 	bl	8008ed0 <USBD_CtlError>
        break;
 800880a:	bf00      	nop
      }
      break;
 800880c:	e004      	b.n	8008818 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fb5d 	bl	8008ed0 <USBD_CtlError>
      break;
 8008816:	bf00      	nop
    }
    break;
 8008818:	e004      	b.n	8008824 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fb57 	bl	8008ed0 <USBD_CtlError>
    break;
 8008822:	bf00      	nop
  }

  return ret;
 8008824:	7bfb      	ldrb	r3, [r7, #15]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
	...

08008830 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800883a:	2300      	movs	r3, #0
 800883c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800883e:	2300      	movs	r3, #0
 8008840:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008842:	2300      	movs	r3, #0
 8008844:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	885b      	ldrh	r3, [r3, #2]
 800884a:	0a1b      	lsrs	r3, r3, #8
 800884c:	b29b      	uxth	r3, r3
 800884e:	3b01      	subs	r3, #1
 8008850:	2b0e      	cmp	r3, #14
 8008852:	f200 8152 	bhi.w	8008afa <USBD_GetDescriptor+0x2ca>
 8008856:	a201      	add	r2, pc, #4	; (adr r2, 800885c <USBD_GetDescriptor+0x2c>)
 8008858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885c:	080088cd 	.word	0x080088cd
 8008860:	080088e5 	.word	0x080088e5
 8008864:	08008925 	.word	0x08008925
 8008868:	08008afb 	.word	0x08008afb
 800886c:	08008afb 	.word	0x08008afb
 8008870:	08008a9b 	.word	0x08008a9b
 8008874:	08008ac7 	.word	0x08008ac7
 8008878:	08008afb 	.word	0x08008afb
 800887c:	08008afb 	.word	0x08008afb
 8008880:	08008afb 	.word	0x08008afb
 8008884:	08008afb 	.word	0x08008afb
 8008888:	08008afb 	.word	0x08008afb
 800888c:	08008afb 	.word	0x08008afb
 8008890:	08008afb 	.word	0x08008afb
 8008894:	08008899 	.word	0x08008899
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800889e:	69db      	ldr	r3, [r3, #28]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00b      	beq.n	80088bc <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088aa:	69db      	ldr	r3, [r3, #28]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	7c12      	ldrb	r2, [r2, #16]
 80088b0:	f107 0108 	add.w	r1, r7, #8
 80088b4:	4610      	mov	r0, r2
 80088b6:	4798      	blx	r3
 80088b8:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80088ba:	e126      	b.n	8008b0a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80088bc:	6839      	ldr	r1, [r7, #0]
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fb06 	bl	8008ed0 <USBD_CtlError>
      err++;
 80088c4:	7afb      	ldrb	r3, [r7, #11]
 80088c6:	3301      	adds	r3, #1
 80088c8:	72fb      	strb	r3, [r7, #11]
    break;
 80088ca:	e11e      	b.n	8008b0a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	7c12      	ldrb	r2, [r2, #16]
 80088d8:	f107 0108 	add.w	r1, r7, #8
 80088dc:	4610      	mov	r0, r2
 80088de:	4798      	blx	r3
 80088e0:	60f8      	str	r0, [r7, #12]
    break;
 80088e2:	e112      	b.n	8008b0a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	7c1b      	ldrb	r3, [r3, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10d      	bne.n	8008908 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f4:	f107 0208 	add.w	r2, r7, #8
 80088f8:	4610      	mov	r0, r2
 80088fa:	4798      	blx	r3
 80088fc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	3301      	adds	r3, #1
 8008902:	2202      	movs	r2, #2
 8008904:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008906:	e100      	b.n	8008b0a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800890e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008910:	f107 0208 	add.w	r2, r7, #8
 8008914:	4610      	mov	r0, r2
 8008916:	4798      	blx	r3
 8008918:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	3301      	adds	r3, #1
 800891e:	2202      	movs	r2, #2
 8008920:	701a      	strb	r2, [r3, #0]
    break;
 8008922:	e0f2      	b.n	8008b0a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	885b      	ldrh	r3, [r3, #2]
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b05      	cmp	r3, #5
 800892c:	f200 80ac 	bhi.w	8008a88 <USBD_GetDescriptor+0x258>
 8008930:	a201      	add	r2, pc, #4	; (adr r2, 8008938 <USBD_GetDescriptor+0x108>)
 8008932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008936:	bf00      	nop
 8008938:	08008951 	.word	0x08008951
 800893c:	08008985 	.word	0x08008985
 8008940:	080089b9 	.word	0x080089b9
 8008944:	080089ed 	.word	0x080089ed
 8008948:	08008a21 	.word	0x08008a21
 800894c:	08008a55 	.word	0x08008a55
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00b      	beq.n	8008974 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	7c12      	ldrb	r2, [r2, #16]
 8008968:	f107 0108 	add.w	r1, r7, #8
 800896c:	4610      	mov	r0, r2
 800896e:	4798      	blx	r3
 8008970:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008972:	e091      	b.n	8008a98 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008974:	6839      	ldr	r1, [r7, #0]
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 faaa 	bl	8008ed0 <USBD_CtlError>
        err++;
 800897c:	7afb      	ldrb	r3, [r7, #11]
 800897e:	3301      	adds	r3, #1
 8008980:	72fb      	strb	r3, [r7, #11]
      break;
 8008982:	e089      	b.n	8008a98 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00b      	beq.n	80089a8 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	7c12      	ldrb	r2, [r2, #16]
 800899c:	f107 0108 	add.w	r1, r7, #8
 80089a0:	4610      	mov	r0, r2
 80089a2:	4798      	blx	r3
 80089a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089a6:	e077      	b.n	8008a98 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fa90 	bl	8008ed0 <USBD_CtlError>
        err++;
 80089b0:	7afb      	ldrb	r3, [r7, #11]
 80089b2:	3301      	adds	r3, #1
 80089b4:	72fb      	strb	r3, [r7, #11]
      break;
 80089b6:	e06f      	b.n	8008a98 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00b      	beq.n	80089dc <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	7c12      	ldrb	r2, [r2, #16]
 80089d0:	f107 0108 	add.w	r1, r7, #8
 80089d4:	4610      	mov	r0, r2
 80089d6:	4798      	blx	r3
 80089d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089da:	e05d      	b.n	8008a98 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fa76 	bl	8008ed0 <USBD_CtlError>
        err++;
 80089e4:	7afb      	ldrb	r3, [r7, #11]
 80089e6:	3301      	adds	r3, #1
 80089e8:	72fb      	strb	r3, [r7, #11]
      break;
 80089ea:	e055      	b.n	8008a98 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00b      	beq.n	8008a10 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	7c12      	ldrb	r2, [r2, #16]
 8008a04:	f107 0108 	add.w	r1, r7, #8
 8008a08:	4610      	mov	r0, r2
 8008a0a:	4798      	blx	r3
 8008a0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a0e:	e043      	b.n	8008a98 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fa5c 	bl	8008ed0 <USBD_CtlError>
        err++;
 8008a18:	7afb      	ldrb	r3, [r7, #11]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	72fb      	strb	r3, [r7, #11]
      break;
 8008a1e:	e03b      	b.n	8008a98 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00b      	beq.n	8008a44 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	7c12      	ldrb	r2, [r2, #16]
 8008a38:	f107 0108 	add.w	r1, r7, #8
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	4798      	blx	r3
 8008a40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a42:	e029      	b.n	8008a98 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fa42 	bl	8008ed0 <USBD_CtlError>
        err++;
 8008a4c:	7afb      	ldrb	r3, [r7, #11]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	72fb      	strb	r3, [r7, #11]
      break;
 8008a52:	e021      	b.n	8008a98 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00b      	beq.n	8008a78 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a66:	699b      	ldr	r3, [r3, #24]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	7c12      	ldrb	r2, [r2, #16]
 8008a6c:	f107 0108 	add.w	r1, r7, #8
 8008a70:	4610      	mov	r0, r2
 8008a72:	4798      	blx	r3
 8008a74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a76:	e00f      	b.n	8008a98 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fa28 	bl	8008ed0 <USBD_CtlError>
        err++;
 8008a80:	7afb      	ldrb	r3, [r7, #11]
 8008a82:	3301      	adds	r3, #1
 8008a84:	72fb      	strb	r3, [r7, #11]
      break;
 8008a86:	e007      	b.n	8008a98 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008a88:	6839      	ldr	r1, [r7, #0]
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fa20 	bl	8008ed0 <USBD_CtlError>
      err++;
 8008a90:	7afb      	ldrb	r3, [r7, #11]
 8008a92:	3301      	adds	r3, #1
 8008a94:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008a96:	bf00      	nop
    }
    break;
 8008a98:	e037      	b.n	8008b0a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	7c1b      	ldrb	r3, [r3, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d109      	bne.n	8008ab6 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aaa:	f107 0208 	add.w	r2, r7, #8
 8008aae:	4610      	mov	r0, r2
 8008ab0:	4798      	blx	r3
 8008ab2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008ab4:	e029      	b.n	8008b0a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fa09 	bl	8008ed0 <USBD_CtlError>
      err++;
 8008abe:	7afb      	ldrb	r3, [r7, #11]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	72fb      	strb	r3, [r7, #11]
    break;
 8008ac4:	e021      	b.n	8008b0a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	7c1b      	ldrb	r3, [r3, #16]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10d      	bne.n	8008aea <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad6:	f107 0208 	add.w	r2, r7, #8
 8008ada:	4610      	mov	r0, r2
 8008adc:	4798      	blx	r3
 8008ade:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	2207      	movs	r2, #7
 8008ae6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008ae8:	e00f      	b.n	8008b0a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f9ef 	bl	8008ed0 <USBD_CtlError>
      err++;
 8008af2:	7afb      	ldrb	r3, [r7, #11]
 8008af4:	3301      	adds	r3, #1
 8008af6:	72fb      	strb	r3, [r7, #11]
    break;
 8008af8:	e007      	b.n	8008b0a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f9e7 	bl	8008ed0 <USBD_CtlError>
    err++;
 8008b02:	7afb      	ldrb	r3, [r7, #11]
 8008b04:	3301      	adds	r3, #1
 8008b06:	72fb      	strb	r3, [r7, #11]
    break;
 8008b08:	bf00      	nop
  }

  if (err != 0U)
 8008b0a:	7afb      	ldrb	r3, [r7, #11]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d11e      	bne.n	8008b4e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	88db      	ldrh	r3, [r3, #6]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d016      	beq.n	8008b46 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008b18:	893b      	ldrh	r3, [r7, #8]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00e      	beq.n	8008b3c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	88da      	ldrh	r2, [r3, #6]
 8008b22:	893b      	ldrh	r3, [r7, #8]
 8008b24:	4293      	cmp	r3, r2
 8008b26:	bf28      	it	cs
 8008b28:	4613      	movcs	r3, r2
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b2e:	893b      	ldrh	r3, [r7, #8]
 8008b30:	461a      	mov	r2, r3
 8008b32:	68f9      	ldr	r1, [r7, #12]
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 fa3c 	bl	8008fb2 <USBD_CtlSendData>
 8008b3a:	e009      	b.n	8008b50 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f9c6 	bl	8008ed0 <USBD_CtlError>
 8008b44:	e004      	b.n	8008b50 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fa8d 	bl	8009066 <USBD_CtlSendStatus>
 8008b4c:	e000      	b.n	8008b50 <USBD_GetDescriptor+0x320>
    return;
 8008b4e:	bf00      	nop
    }
  }
}
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop

08008b58 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	889b      	ldrh	r3, [r3, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d130      	bne.n	8008bcc <USBD_SetAddress+0x74>
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	88db      	ldrh	r3, [r3, #6]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d12c      	bne.n	8008bcc <USBD_SetAddress+0x74>
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	885b      	ldrh	r3, [r3, #2]
 8008b76:	2b7f      	cmp	r3, #127	; 0x7f
 8008b78:	d828      	bhi.n	8008bcc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	885b      	ldrh	r3, [r3, #2]
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b8c:	2b03      	cmp	r3, #3
 8008b8e:	d104      	bne.n	8008b9a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f99c 	bl	8008ed0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b98:	e01c      	b.n	8008bd4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	7bfa      	ldrb	r2, [r7, #15]
 8008b9e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ba2:	7bfb      	ldrb	r3, [r7, #15]
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f003 fa0c 	bl	800bfc4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fa5a 	bl	8009066 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008bb2:	7bfb      	ldrb	r3, [r7, #15]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d004      	beq.n	8008bc2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2202      	movs	r2, #2
 8008bbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc0:	e008      	b.n	8008bd4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bca:	e003      	b.n	8008bd4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f97e 	bl	8008ed0 <USBD_CtlError>
  }
}
 8008bd4:	bf00      	nop
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	885b      	ldrh	r3, [r3, #2]
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	4b4b      	ldr	r3, [pc, #300]	; (8008d20 <USBD_SetConfig+0x144>)
 8008bf2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bf4:	4b4a      	ldr	r3, [pc, #296]	; (8008d20 <USBD_SetConfig+0x144>)
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d905      	bls.n	8008c08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008bfc:	6839      	ldr	r1, [r7, #0]
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f966 	bl	8008ed0 <USBD_CtlError>
    return USBD_FAIL;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e087      	b.n	8008d18 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d002      	beq.n	8008c18 <USBD_SetConfig+0x3c>
 8008c12:	2b03      	cmp	r3, #3
 8008c14:	d025      	beq.n	8008c62 <USBD_SetConfig+0x86>
 8008c16:	e071      	b.n	8008cfc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008c18:	4b41      	ldr	r3, [pc, #260]	; (8008d20 <USBD_SetConfig+0x144>)
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d01c      	beq.n	8008c5a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008c20:	4b3f      	ldr	r3, [pc, #252]	; (8008d20 <USBD_SetConfig+0x144>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c2a:	4b3d      	ldr	r3, [pc, #244]	; (8008d20 <USBD_SetConfig+0x144>)
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	4619      	mov	r1, r3
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f7ff f97e 	bl	8007f32 <USBD_SetClassConfig>
 8008c36:	4603      	mov	r3, r0
 8008c38:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008c3a:	7bfb      	ldrb	r3, [r7, #15]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d004      	beq.n	8008c4a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f944 	bl	8008ed0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008c48:	e065      	b.n	8008d16 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fa0b 	bl	8009066 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2203      	movs	r2, #3
 8008c54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008c58:	e05d      	b.n	8008d16 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fa03 	bl	8009066 <USBD_CtlSendStatus>
    break;
 8008c60:	e059      	b.n	8008d16 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008c62:	4b2f      	ldr	r3, [pc, #188]	; (8008d20 <USBD_SetConfig+0x144>)
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d112      	bne.n	8008c90 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2202      	movs	r2, #2
 8008c6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008c72:	4b2b      	ldr	r3, [pc, #172]	; (8008d20 <USBD_SetConfig+0x144>)
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c7c:	4b28      	ldr	r3, [pc, #160]	; (8008d20 <USBD_SetConfig+0x144>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	4619      	mov	r1, r3
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7ff f971 	bl	8007f6a <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f9ec 	bl	8009066 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008c8e:	e042      	b.n	8008d16 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008c90:	4b23      	ldr	r3, [pc, #140]	; (8008d20 <USBD_SetConfig+0x144>)
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	461a      	mov	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d02a      	beq.n	8008cf4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7ff f95f 	bl	8007f6a <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008cac:	4b1c      	ldr	r3, [pc, #112]	; (8008d20 <USBD_SetConfig+0x144>)
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cb6:	4b1a      	ldr	r3, [pc, #104]	; (8008d20 <USBD_SetConfig+0x144>)
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7ff f938 	bl	8007f32 <USBD_SetClassConfig>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00f      	beq.n	8008cec <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008ccc:	6839      	ldr	r1, [r7, #0]
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f8fe 	bl	8008ed0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	4619      	mov	r1, r3
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f7ff f944 	bl	8007f6a <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2202      	movs	r2, #2
 8008ce6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008cea:	e014      	b.n	8008d16 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f9ba 	bl	8009066 <USBD_CtlSendStatus>
    break;
 8008cf2:	e010      	b.n	8008d16 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 f9b6 	bl	8009066 <USBD_CtlSendStatus>
    break;
 8008cfa:	e00c      	b.n	8008d16 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f8e6 	bl	8008ed0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d04:	4b06      	ldr	r3, [pc, #24]	; (8008d20 <USBD_SetConfig+0x144>)
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7ff f92d 	bl	8007f6a <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008d10:	2303      	movs	r3, #3
 8008d12:	73fb      	strb	r3, [r7, #15]
    break;
 8008d14:	bf00      	nop
  }

  return ret;
 8008d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	200001d4 	.word	0x200001d4

08008d24 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	88db      	ldrh	r3, [r3, #6]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d004      	beq.n	8008d40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f8c9 	bl	8008ed0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008d3e:	e021      	b.n	8008d84 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	db17      	blt.n	8008d7a <USBD_GetConfig+0x56>
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	dd02      	ble.n	8008d54 <USBD_GetConfig+0x30>
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d00b      	beq.n	8008d6a <USBD_GetConfig+0x46>
 8008d52:	e012      	b.n	8008d7a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	3308      	adds	r3, #8
 8008d5e:	2201      	movs	r2, #1
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f925 	bl	8008fb2 <USBD_CtlSendData>
      break;
 8008d68:	e00c      	b.n	8008d84 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	2201      	movs	r2, #1
 8008d70:	4619      	mov	r1, r3
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f91d 	bl	8008fb2 <USBD_CtlSendData>
      break;
 8008d78:	e004      	b.n	8008d84 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f8a7 	bl	8008ed0 <USBD_CtlError>
      break;
 8008d82:	bf00      	nop
}
 8008d84:	bf00      	nop
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d81e      	bhi.n	8008de0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	88db      	ldrh	r3, [r3, #6]
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d004      	beq.n	8008db4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f88f 	bl	8008ed0 <USBD_CtlError>
      break;
 8008db2:	e01a      	b.n	8008dea <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d005      	beq.n	8008dd0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	f043 0202 	orr.w	r2, r3, #2
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	330c      	adds	r3, #12
 8008dd4:	2202      	movs	r2, #2
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f8ea 	bl	8008fb2 <USBD_CtlSendData>
    break;
 8008dde:	e004      	b.n	8008dea <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008de0:	6839      	ldr	r1, [r7, #0]
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f874 	bl	8008ed0 <USBD_CtlError>
    break;
 8008de8:	bf00      	nop
  }
}
 8008dea:	bf00      	nop
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b082      	sub	sp, #8
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	885b      	ldrh	r3, [r3, #2]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d106      	bne.n	8008e12 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f92a 	bl	8009066 <USBD_CtlSendStatus>
  }
}
 8008e12:	bf00      	nop
 8008e14:	3708      	adds	r7, #8
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b082      	sub	sp, #8
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d80b      	bhi.n	8008e48 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	885b      	ldrh	r3, [r3, #2]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d10c      	bne.n	8008e52 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f910 	bl	8009066 <USBD_CtlSendStatus>
      }
      break;
 8008e46:	e004      	b.n	8008e52 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e48:	6839      	ldr	r1, [r7, #0]
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f840 	bl	8008ed0 <USBD_CtlError>
      break;
 8008e50:	e000      	b.n	8008e54 <USBD_ClrFeature+0x3a>
      break;
 8008e52:	bf00      	nop
  }
}
 8008e54:	bf00      	nop
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	781a      	ldrb	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	3301      	adds	r3, #1
 8008e76:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	781a      	ldrb	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	3301      	adds	r3, #1
 8008e84:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f7ff faaa 	bl	80083e0 <SWAPBYTE>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	461a      	mov	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	3301      	adds	r3, #1
 8008e98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f7ff fa9d 	bl	80083e0 <SWAPBYTE>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f7ff fa90 	bl	80083e0 <SWAPBYTE>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	80da      	strh	r2, [r3, #6]
}
 8008ec8:	bf00      	nop
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008eda:	2180      	movs	r1, #128	; 0x80
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f003 f807 	bl	800bef0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f003 f803 	bl	800bef0 <USBD_LL_StallEP>
}
 8008eea:	bf00      	nop
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b086      	sub	sp, #24
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	60f8      	str	r0, [r7, #12]
 8008efa:	60b9      	str	r1, [r7, #8]
 8008efc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008efe:	2300      	movs	r3, #0
 8008f00:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d036      	beq.n	8008f76 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f0c:	6938      	ldr	r0, [r7, #16]
 8008f0e:	f000 f836 	bl	8008f7e <USBD_GetLen>
 8008f12:	4603      	mov	r3, r0
 8008f14:	3301      	adds	r3, #1
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	005b      	lsls	r3, r3, #1
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f20:	7dfb      	ldrb	r3, [r7, #23]
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	4413      	add	r3, r2
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	7812      	ldrb	r2, [r2, #0]
 8008f2a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f2c:	7dfb      	ldrb	r3, [r7, #23]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f32:	7dfb      	ldrb	r3, [r7, #23]
 8008f34:	68ba      	ldr	r2, [r7, #8]
 8008f36:	4413      	add	r3, r2
 8008f38:	2203      	movs	r2, #3
 8008f3a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f3c:	7dfb      	ldrb	r3, [r7, #23]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f42:	e013      	b.n	8008f6c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f44:	7dfb      	ldrb	r3, [r7, #23]
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	4413      	add	r3, r2
 8008f4a:	693a      	ldr	r2, [r7, #16]
 8008f4c:	7812      	ldrb	r2, [r2, #0]
 8008f4e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	3301      	adds	r3, #1
 8008f54:	613b      	str	r3, [r7, #16]
    idx++;
 8008f56:	7dfb      	ldrb	r3, [r7, #23]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f5c:	7dfb      	ldrb	r3, [r7, #23]
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	4413      	add	r3, r2
 8008f62:	2200      	movs	r2, #0
 8008f64:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f66:	7dfb      	ldrb	r3, [r7, #23]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1e7      	bne.n	8008f44 <USBD_GetString+0x52>
 8008f74:	e000      	b.n	8008f78 <USBD_GetString+0x86>
    return;
 8008f76:	bf00      	nop
  }
}
 8008f78:	3718      	adds	r7, #24
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b085      	sub	sp, #20
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f86:	2300      	movs	r3, #0
 8008f88:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f8e:	e005      	b.n	8008f9c <USBD_GetLen+0x1e>
  {
    len++;
 8008f90:	7bfb      	ldrb	r3, [r7, #15]
 8008f92:	3301      	adds	r3, #1
 8008f94:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1f5      	bne.n	8008f90 <USBD_GetLen+0x12>
  }

  return len;
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b084      	sub	sp, #16
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	60f8      	str	r0, [r7, #12]
 8008fba:	60b9      	str	r1, [r7, #8]
 8008fbc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2202      	movs	r2, #2
 8008fc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f003 f812 	bl	800c002 <USBD_LL_Transmit>

  return USBD_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	2100      	movs	r1, #0
 8008ffa:	68f8      	ldr	r0, [r7, #12]
 8008ffc:	f003 f801 	bl	800c002 <USBD_LL_Transmit>

  return USBD_OK;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b084      	sub	sp, #16
 800900e:	af00      	add	r7, sp, #0
 8009010:	60f8      	str	r0, [r7, #12]
 8009012:	60b9      	str	r1, [r7, #8]
 8009014:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2203      	movs	r2, #3
 800901a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	2100      	movs	r1, #0
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f003 f805 	bl	800c044 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	2100      	movs	r1, #0
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f002 fff4 	bl	800c044 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b082      	sub	sp, #8
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2204      	movs	r2, #4
 8009072:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009076:	2300      	movs	r3, #0
 8009078:	2200      	movs	r2, #0
 800907a:	2100      	movs	r1, #0
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f002 ffc0 	bl	800c002 <USBD_LL_Transmit>

  return USBD_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2205      	movs	r2, #5
 8009098:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800909c:	2300      	movs	r3, #0
 800909e:	2200      	movs	r2, #0
 80090a0:	2100      	movs	r1, #0
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f002 ffce 	bl	800c044 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
	...

080090b4 <BSP_ReadBatteryVoltage>:
  * @param  n number of Samples to read for averaging
  * @return floating point number of converted voltage 
  * (voltage divider taken into account)
  */
float BSP_ReadBatteryVoltage(uint8_t n)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	4603      	mov	r3, r0
 80090bc:	71fb      	strb	r3, [r7, #7]
	uint32_t sum = 0;
 80090be:	2300      	movs	r3, #0
 80090c0:	60fb      	str	r3, [r7, #12]
	HAL_ADC_Start(&hadc1);
 80090c2:	481c      	ldr	r0, [pc, #112]	; (8009134 <BSP_ReadBatteryVoltage+0x80>)
 80090c4:	f7f7 fb4c 	bl	8000760 <HAL_ADC_Start>
	uint8_t avg = 0;
 80090c8:	2300      	movs	r3, #0
 80090ca:	72fb      	strb	r3, [r7, #11]
	
	for(uint8_t i=0; i<n; i++){
 80090cc:	2300      	movs	r3, #0
 80090ce:	72bb      	strb	r3, [r7, #10]
 80090d0:	e013      	b.n	80090fa <BSP_ReadBatteryVoltage+0x46>
		if(HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK){
 80090d2:	2105      	movs	r1, #5
 80090d4:	4817      	ldr	r0, [pc, #92]	; (8009134 <BSP_ReadBatteryVoltage+0x80>)
 80090d6:	f7f7 fbe9 	bl	80008ac <HAL_ADC_PollForConversion>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d109      	bne.n	80090f4 <BSP_ReadBatteryVoltage+0x40>
			sum += HAL_ADC_GetValue(&hadc1);
 80090e0:	4814      	ldr	r0, [pc, #80]	; (8009134 <BSP_ReadBatteryVoltage+0x80>)
 80090e2:	f7f7 fc67 	bl	80009b4 <HAL_ADC_GetValue>
 80090e6:	4602      	mov	r2, r0
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	4413      	add	r3, r2
 80090ec:	60fb      	str	r3, [r7, #12]
			avg ++;
 80090ee:	7afb      	ldrb	r3, [r7, #11]
 80090f0:	3301      	adds	r3, #1
 80090f2:	72fb      	strb	r3, [r7, #11]
	for(uint8_t i=0; i<n; i++){
 80090f4:	7abb      	ldrb	r3, [r7, #10]
 80090f6:	3301      	adds	r3, #1
 80090f8:	72bb      	strb	r3, [r7, #10]
 80090fa:	7aba      	ldrb	r2, [r7, #10]
 80090fc:	79fb      	ldrb	r3, [r7, #7]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d3e7      	bcc.n	80090d2 <BSP_ReadBatteryVoltage+0x1e>
		}
	}
	sum /= (uint32_t)avg;
 8009102:	7afb      	ldrb	r3, [r7, #11]
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	fbb2 f3f3 	udiv	r3, r2, r3
 800910a:	60fb      	str	r3, [r7, #12]
	// 4096 = 3.3V
	// 1 = 3.3/4096;
        // 4.2V correction factor = 0.7279 from Voltage Divider
        return (float)(sum) * (3.3f/4096.0f) / 0.7279f;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	ee07 3a90 	vmov	s15, r3
 8009112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009116:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8009138 <BSP_ReadBatteryVoltage+0x84>
 800911a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800911e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800913c <BSP_ReadBatteryVoltage+0x88>
 8009122:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009126:	eef0 7a66 	vmov.f32	s15, s13
}
 800912a:	eeb0 0a67 	vmov.f32	s0, s15
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}
 8009134:	20000f30 	.word	0x20000f30
 8009138:	3a533333 	.word	0x3a533333
 800913c:	3f3a57a8 	.word	0x3f3a57a8

08009140 <BSP_ReadEncoder_Difference>:
/**
  * @param  encoder The encoder of which to return the difference
  * @return signed integer of encoder difference since last call of this function
  */
int16_t BSP_ReadEncoder_Difference(EncoderPosition_t encoder)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	4603      	mov	r3, r0
 8009148:	71fb      	strb	r3, [r7, #7]
	BSP_ReadEncoder(encoder); // update both encoders
 800914a:	79fb      	ldrb	r3, [r7, #7]
 800914c:	4618      	mov	r0, r3
 800914e:	f000 f81d 	bl	800918c <BSP_ReadEncoder>
	int16_t delta = 0;
 8009152:	2300      	movs	r3, #0
 8009154:	81fb      	strh	r3, [r7, #14]
	if(encoder == ENCODER_LEFT){
 8009156:	79fb      	ldrb	r3, [r7, #7]
 8009158:	2b01      	cmp	r3, #1
 800915a:	d106      	bne.n	800916a <BSP_ReadEncoder_Difference+0x2a>
		delta = henc1.delta; // return accumulated delta
 800915c:	4b09      	ldr	r3, [pc, #36]	; (8009184 <BSP_ReadEncoder_Difference+0x44>)
 800915e:	885b      	ldrh	r3, [r3, #2]
 8009160:	81fb      	strh	r3, [r7, #14]
		henc1.delta = 0;  // clear for new accumulation
 8009162:	4b08      	ldr	r3, [pc, #32]	; (8009184 <BSP_ReadEncoder_Difference+0x44>)
 8009164:	2200      	movs	r2, #0
 8009166:	805a      	strh	r2, [r3, #2]
 8009168:	e005      	b.n	8009176 <BSP_ReadEncoder_Difference+0x36>
	} else {
		delta = henc2.delta;
 800916a:	4b07      	ldr	r3, [pc, #28]	; (8009188 <BSP_ReadEncoder_Difference+0x48>)
 800916c:	885b      	ldrh	r3, [r3, #2]
 800916e:	81fb      	strh	r3, [r7, #14]
		henc2.delta = 0;
 8009170:	4b05      	ldr	r3, [pc, #20]	; (8009188 <BSP_ReadEncoder_Difference+0x48>)
 8009172:	2200      	movs	r2, #0
 8009174:	805a      	strh	r2, [r3, #2]
	}
	return delta;
 8009176:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	20000790 	.word	0x20000790
 8009188:	2000078c 	.word	0x2000078c

0800918c <BSP_ReadEncoder>:
/**
  * @param  encoder The encoder of which to return the absolute counter value
  * @return unsigned integer of encoder's counter value
  */
uint16_t BSP_ReadEncoder(EncoderPosition_t encoder)
{
 800918c:	b480      	push	{r7}
 800918e:	b085      	sub	sp, #20
 8009190:	af00      	add	r7, sp, #0
 8009192:	4603      	mov	r3, r0
 8009194:	71fb      	strb	r3, [r7, #7]
	int16_t oldval = (int16_t)henc1.value;  // remember previous value
 8009196:	4b40      	ldr	r3, [pc, #256]	; (8009298 <BSP_ReadEncoder+0x10c>)
 8009198:	881b      	ldrh	r3, [r3, #0]
 800919a:	81bb      	strh	r3, [r7, #12]
	henc1.value = (((0xffff - TIM3->CNT)/2) +1) & 0x7fff;  // right encoder
 800919c:	4b3f      	ldr	r3, [pc, #252]	; (800929c <BSP_ReadEncoder+0x110>)
 800919e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80091a4:	33ff      	adds	r3, #255	; 0xff
 80091a6:	085b      	lsrs	r3, r3, #1
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	3301      	adds	r3, #1
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	4b38      	ldr	r3, [pc, #224]	; (8009298 <BSP_ReadEncoder+0x10c>)
 80091b6:	801a      	strh	r2, [r3, #0]
	int16_t delta = (int16_t)henc1.value - oldval;  // calculate difference
 80091b8:	4b37      	ldr	r3, [pc, #220]	; (8009298 <BSP_ReadEncoder+0x10c>)
 80091ba:	881a      	ldrh	r2, [r3, #0]
 80091bc:	89bb      	ldrh	r3, [r7, #12]
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	81fb      	strh	r3, [r7, #14]
	if(delta > 255) // overflow occured
 80091c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80091c8:	2bff      	cmp	r3, #255	; 0xff
 80091ca:	dd08      	ble.n	80091de <BSP_ReadEncoder+0x52>
		delta = (int16_t)henc1.value - (INT16_MAX+1) - oldval;
 80091cc:	4b32      	ldr	r3, [pc, #200]	; (8009298 <BSP_ReadEncoder+0x10c>)
 80091ce:	881a      	ldrh	r2, [r3, #0]
 80091d0:	89bb      	ldrh	r3, [r7, #12]
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80091da:	b29b      	uxth	r3, r3
 80091dc:	81fb      	strh	r3, [r7, #14]
	if(delta < -255) // underflow occured
 80091de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80091e2:	f113 0fff 	cmn.w	r3, #255	; 0xff
 80091e6:	da08      	bge.n	80091fa <BSP_ReadEncoder+0x6e>
		delta = (int16_t)henc1.value + (INT16_MAX+1) - oldval;
 80091e8:	4b2b      	ldr	r3, [pc, #172]	; (8009298 <BSP_ReadEncoder+0x10c>)
 80091ea:	881a      	ldrh	r2, [r3, #0]
 80091ec:	89bb      	ldrh	r3, [r7, #12]
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	81fb      	strh	r3, [r7, #14]
	henc1.delta += delta;  // update difference
 80091fa:	4b27      	ldr	r3, [pc, #156]	; (8009298 <BSP_ReadEncoder+0x10c>)
 80091fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009200:	b29a      	uxth	r2, r3
 8009202:	89fb      	ldrh	r3, [r7, #14]
 8009204:	4413      	add	r3, r2
 8009206:	b29b      	uxth	r3, r3
 8009208:	b21a      	sxth	r2, r3
 800920a:	4b23      	ldr	r3, [pc, #140]	; (8009298 <BSP_ReadEncoder+0x10c>)
 800920c:	805a      	strh	r2, [r3, #2]
	
	oldval = (int16_t)henc2.value;  // remember previous value
 800920e:	4b24      	ldr	r3, [pc, #144]	; (80092a0 <BSP_ReadEncoder+0x114>)
 8009210:	881b      	ldrh	r3, [r3, #0]
 8009212:	81bb      	strh	r3, [r7, #12]
	henc2.value = (((         TIM4->CNT)/2)   ) & 0x7fff;     // left encoder
 8009214:	4b23      	ldr	r3, [pc, #140]	; (80092a4 <BSP_ReadEncoder+0x118>)
 8009216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009218:	085b      	lsrs	r3, r3, #1
 800921a:	b29b      	uxth	r3, r3
 800921c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009220:	b29a      	uxth	r2, r3
 8009222:	4b1f      	ldr	r3, [pc, #124]	; (80092a0 <BSP_ReadEncoder+0x114>)
 8009224:	801a      	strh	r2, [r3, #0]
	delta = (int16_t)henc2.value - oldval;  // calculate difference
 8009226:	4b1e      	ldr	r3, [pc, #120]	; (80092a0 <BSP_ReadEncoder+0x114>)
 8009228:	881a      	ldrh	r2, [r3, #0]
 800922a:	89bb      	ldrh	r3, [r7, #12]
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	b29b      	uxth	r3, r3
 8009230:	81fb      	strh	r3, [r7, #14]
	if(delta > 255) // overflow occured
 8009232:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009236:	2bff      	cmp	r3, #255	; 0xff
 8009238:	dd08      	ble.n	800924c <BSP_ReadEncoder+0xc0>
		delta = (int16_t)henc2.value - (INT16_MAX+1) - oldval;
 800923a:	4b19      	ldr	r3, [pc, #100]	; (80092a0 <BSP_ReadEncoder+0x114>)
 800923c:	881a      	ldrh	r2, [r3, #0]
 800923e:	89bb      	ldrh	r3, [r7, #12]
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	b29b      	uxth	r3, r3
 8009244:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8009248:	b29b      	uxth	r3, r3
 800924a:	81fb      	strh	r3, [r7, #14]
	if(delta < -255) // underflow occured
 800924c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009250:	f113 0fff 	cmn.w	r3, #255	; 0xff
 8009254:	da08      	bge.n	8009268 <BSP_ReadEncoder+0xdc>
		delta = (int16_t)henc2.value + (INT16_MAX+1) - oldval;
 8009256:	4b12      	ldr	r3, [pc, #72]	; (80092a0 <BSP_ReadEncoder+0x114>)
 8009258:	881a      	ldrh	r2, [r3, #0]
 800925a:	89bb      	ldrh	r3, [r7, #12]
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	b29b      	uxth	r3, r3
 8009260:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8009264:	b29b      	uxth	r3, r3
 8009266:	81fb      	strh	r3, [r7, #14]
	henc2.delta += delta;  // update difference
 8009268:	4b0d      	ldr	r3, [pc, #52]	; (80092a0 <BSP_ReadEncoder+0x114>)
 800926a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800926e:	b29a      	uxth	r2, r3
 8009270:	89fb      	ldrh	r3, [r7, #14]
 8009272:	4413      	add	r3, r2
 8009274:	b29b      	uxth	r3, r3
 8009276:	b21a      	sxth	r2, r3
 8009278:	4b09      	ldr	r3, [pc, #36]	; (80092a0 <BSP_ReadEncoder+0x114>)
 800927a:	805a      	strh	r2, [r3, #2]

	if(encoder == ENCODER_LEFT)
 800927c:	79fb      	ldrb	r3, [r7, #7]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d102      	bne.n	8009288 <BSP_ReadEncoder+0xfc>
		return henc1.value;
 8009282:	4b05      	ldr	r3, [pc, #20]	; (8009298 <BSP_ReadEncoder+0x10c>)
 8009284:	881b      	ldrh	r3, [r3, #0]
 8009286:	e001      	b.n	800928c <BSP_ReadEncoder+0x100>
	else
		return henc2.value;
 8009288:	4b05      	ldr	r3, [pc, #20]	; (80092a0 <BSP_ReadEncoder+0x114>)
 800928a:	881b      	ldrh	r3, [r3, #0]
}
 800928c:	4618      	mov	r0, r3
 800928e:	3714      	adds	r7, #20
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr
 8009298:	20000790 	.word	0x20000790
 800929c:	40000400 	.word	0x40000400
 80092a0:	2000078c 	.word	0x2000078c
 80092a4:	40000800 	.word	0x40000800

080092a8 <BSP_SelectAudioIn>:

/* Select Audio Source -------------------------------------------------------*/
/**
  * @param  mode The Audio Input Mode
  */ 
void BSP_SelectAudioIn(AudioInState_t mode){
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	4603      	mov	r3, r0
 80092b0:	71fb      	strb	r3, [r7, #7]
	switch(mode){
 80092b2:	79fb      	ldrb	r3, [r7, #7]
 80092b4:	2b03      	cmp	r3, #3
 80092b6:	d823      	bhi.n	8009300 <BSP_SelectAudioIn+0x58>
 80092b8:	a201      	add	r2, pc, #4	; (adr r2, 80092c0 <BSP_SelectAudioIn+0x18>)
 80092ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092be:	bf00      	nop
 80092c0:	080092d1 	.word	0x080092d1
 80092c4:	080092e5 	.word	0x080092e5
 80092c8:	080092f9 	.word	0x080092f9
 80092cc:	08009301 	.word	0x08009301
		case AUDIO_IN_EXT:
			HAL_GPIO_WritePin(SET_LIN_GPIO_Port, SET_LIN_Pin, GPIO_PIN_RESET);
 80092d0:	2200      	movs	r2, #0
 80092d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80092d6:	480d      	ldr	r0, [pc, #52]	; (800930c <BSP_SelectAudioIn+0x64>)
 80092d8:	f7f8 fbaa 	bl	8001a30 <HAL_GPIO_WritePin>
			TLV320_SetInput(LINE);
 80092dc:	2000      	movs	r0, #0
 80092de:	f002 fb21 	bl	800b924 <TLV320_SetInput>
			break;
 80092e2:	e00e      	b.n	8009302 <BSP_SelectAudioIn+0x5a>
		case AUDIO_IN_LINE:
			HAL_GPIO_WritePin(SET_LIN_GPIO_Port, SET_LIN_Pin, GPIO_PIN_SET);
 80092e4:	2201      	movs	r2, #1
 80092e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80092ea:	4808      	ldr	r0, [pc, #32]	; (800930c <BSP_SelectAudioIn+0x64>)
 80092ec:	f7f8 fba0 	bl	8001a30 <HAL_GPIO_WritePin>
			TLV320_SetInput(LINE);
 80092f0:	2000      	movs	r0, #0
 80092f2:	f002 fb17 	bl	800b924 <TLV320_SetInput>
			break;
 80092f6:	e004      	b.n	8009302 <BSP_SelectAudioIn+0x5a>
		case AUDIO_IN_MIC:
			TLV320_SetInput(MIC);
 80092f8:	2001      	movs	r0, #1
 80092fa:	f002 fb13 	bl	800b924 <TLV320_SetInput>
			break;
 80092fe:	e000      	b.n	8009302 <BSP_SelectAudioIn+0x5a>
		case AUDIO_IN_USB:
			break;
		default:
			break;
 8009300:	bf00      	nop
	}
}
 8009302:	bf00      	nop
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	40020800 	.word	0x40020800

08009310 <DSP_Process_Data>:

/**
 * @param sourceBuffer Pointer to the Audio Signal Source Buffer (from DMA ISR)
 * @param targetBuffer Pointer to the Audio Signal Destination Buffer (to DMA)
 */
void DSP_Process_Data(uint16_t *sourceBuffer, uint16_t *targetBuffer) {
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]

#ifdef DEBUG_DSP_LATENCY
	/* Measure the Latency of the whole DSP_Process */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800931a:	2201      	movs	r2, #1
 800931c:	2140      	movs	r1, #64	; 0x40
 800931e:	4846      	ldr	r0, [pc, #280]	; (8009438 <DSP_Process_Data+0x128>)
 8009320:	f7f8 fb86 	bl	8001a30 <HAL_GPIO_WritePin>
#endif

	// copy sourceBuffer to leftSignalBuffer and rightSignalBuffer
	for (index1 = 0; index1 < DSP_BUFFERSIZE_HALF; index1++) {
 8009324:	4b45      	ldr	r3, [pc, #276]	; (800943c <DSP_Process_Data+0x12c>)
 8009326:	2200      	movs	r2, #0
 8009328:	801a      	strh	r2, [r3, #0]
 800932a:	e021      	b.n	8009370 <DSP_Process_Data+0x60>
		rxLeft[index1] = (int16_t) (sourceBuffer[2 * index1]);
 800932c:	4b43      	ldr	r3, [pc, #268]	; (800943c <DSP_Process_Data+0x12c>)
 800932e:	881b      	ldrh	r3, [r3, #0]
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	461a      	mov	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4413      	add	r3, r2
 8009338:	8819      	ldrh	r1, [r3, #0]
 800933a:	4b40      	ldr	r3, [pc, #256]	; (800943c <DSP_Process_Data+0x12c>)
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	461a      	mov	r2, r3
 8009340:	b209      	sxth	r1, r1
 8009342:	4b3f      	ldr	r3, [pc, #252]	; (8009440 <DSP_Process_Data+0x130>)
 8009344:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		rxRight[index1] = (int16_t) (sourceBuffer[2 * index1 + 1]);
 8009348:	4b3c      	ldr	r3, [pc, #240]	; (800943c <DSP_Process_Data+0x12c>)
 800934a:	881b      	ldrh	r3, [r3, #0]
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	3302      	adds	r3, #2
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	4413      	add	r3, r2
 8009354:	8819      	ldrh	r1, [r3, #0]
 8009356:	4b39      	ldr	r3, [pc, #228]	; (800943c <DSP_Process_Data+0x12c>)
 8009358:	881b      	ldrh	r3, [r3, #0]
 800935a:	461a      	mov	r2, r3
 800935c:	b209      	sxth	r1, r1
 800935e:	4b39      	ldr	r3, [pc, #228]	; (8009444 <DSP_Process_Data+0x134>)
 8009360:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (index1 = 0; index1 < DSP_BUFFERSIZE_HALF; index1++) {
 8009364:	4b35      	ldr	r3, [pc, #212]	; (800943c <DSP_Process_Data+0x12c>)
 8009366:	881b      	ldrh	r3, [r3, #0]
 8009368:	3301      	adds	r3, #1
 800936a:	b29a      	uxth	r2, r3
 800936c:	4b33      	ldr	r3, [pc, #204]	; (800943c <DSP_Process_Data+0x12c>)
 800936e:	801a      	strh	r2, [r3, #0]
 8009370:	4b32      	ldr	r3, [pc, #200]	; (800943c <DSP_Process_Data+0x12c>)
 8009372:	881b      	ldrh	r3, [r3, #0]
 8009374:	2b2f      	cmp	r3, #47	; 0x2f
 8009376:	d9d9      	bls.n	800932c <DSP_Process_Data+0x1c>
//
//		tmp = P14R;
//		P14R = P14R2;
//		P14R2 = tmp;

	switch (dsp_mode) {
 8009378:	4b33      	ldr	r3, [pc, #204]	; (8009448 <DSP_Process_Data+0x138>)
 800937a:	881b      	ldrh	r3, [r3, #0]
 800937c:	b29b      	uxth	r3, r3
 800937e:	2b00      	cmp	r3, #0
 8009380:	d002      	beq.n	8009388 <DSP_Process_Data+0x78>
 8009382:	2b01      	cmp	r3, #1
 8009384:	d023      	beq.n	80093ce <DSP_Process_Data+0xbe>
			txRight[i] = rxRight[i];
		}
		break;

	default:
		break;
 8009386:	e023      	b.n	80093d0 <DSP_Process_Data+0xc0>
		for (uint16_t i = 0; i < DSP_BUFFERSIZE_HALF; i++) {
 8009388:	2300      	movs	r3, #0
 800938a:	81fb      	strh	r3, [r7, #14]
 800938c:	e00a      	b.n	80093a4 <DSP_Process_Data+0x94>
			txLeft[i] = rxLeft[i];
 800938e:	89fa      	ldrh	r2, [r7, #14]
 8009390:	89fb      	ldrh	r3, [r7, #14]
 8009392:	492b      	ldr	r1, [pc, #172]	; (8009440 <DSP_Process_Data+0x130>)
 8009394:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8009398:	4a2c      	ldr	r2, [pc, #176]	; (800944c <DSP_Process_Data+0x13c>)
 800939a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint16_t i = 0; i < DSP_BUFFERSIZE_HALF; i++) {
 800939e:	89fb      	ldrh	r3, [r7, #14]
 80093a0:	3301      	adds	r3, #1
 80093a2:	81fb      	strh	r3, [r7, #14]
 80093a4:	89fb      	ldrh	r3, [r7, #14]
 80093a6:	2b2f      	cmp	r3, #47	; 0x2f
 80093a8:	d9f1      	bls.n	800938e <DSP_Process_Data+0x7e>
		for (uint16_t i = 0; i < DSP_BUFFERSIZE_HALF; i++) {
 80093aa:	2300      	movs	r3, #0
 80093ac:	81bb      	strh	r3, [r7, #12]
 80093ae:	e00a      	b.n	80093c6 <DSP_Process_Data+0xb6>
			txRight[i] = rxRight[i];
 80093b0:	89ba      	ldrh	r2, [r7, #12]
 80093b2:	89bb      	ldrh	r3, [r7, #12]
 80093b4:	4923      	ldr	r1, [pc, #140]	; (8009444 <DSP_Process_Data+0x134>)
 80093b6:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80093ba:	4a25      	ldr	r2, [pc, #148]	; (8009450 <DSP_Process_Data+0x140>)
 80093bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint16_t i = 0; i < DSP_BUFFERSIZE_HALF; i++) {
 80093c0:	89bb      	ldrh	r3, [r7, #12]
 80093c2:	3301      	adds	r3, #1
 80093c4:	81bb      	strh	r3, [r7, #12]
 80093c6:	89bb      	ldrh	r3, [r7, #12]
 80093c8:	2b2f      	cmp	r3, #47	; 0x2f
 80093ca:	d9f1      	bls.n	80093b0 <DSP_Process_Data+0xa0>
		break;
 80093cc:	e000      	b.n	80093d0 <DSP_Process_Data+0xc0>
		break;
 80093ce:	bf00      	nop
	}

	// copy left and right txBuffer into targetBuffer
	for (index1 = 0; index1 < DSP_BUFFERSIZE_HALF; index1++) {
 80093d0:	4b1a      	ldr	r3, [pc, #104]	; (800943c <DSP_Process_Data+0x12c>)
 80093d2:	2200      	movs	r2, #0
 80093d4:	801a      	strh	r2, [r3, #0]
 80093d6:	e021      	b.n	800941c <DSP_Process_Data+0x10c>
		targetBuffer[2 * index1] = (int16_t) (txLeft[index1]);
 80093d8:	4b18      	ldr	r3, [pc, #96]	; (800943c <DSP_Process_Data+0x12c>)
 80093da:	881b      	ldrh	r3, [r3, #0]
 80093dc:	461a      	mov	r2, r3
 80093de:	4b1b      	ldr	r3, [pc, #108]	; (800944c <DSP_Process_Data+0x13c>)
 80093e0:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 80093e4:	4b15      	ldr	r3, [pc, #84]	; (800943c <DSP_Process_Data+0x12c>)
 80093e6:	881b      	ldrh	r3, [r3, #0]
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	4619      	mov	r1, r3
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	440b      	add	r3, r1
 80093f0:	b292      	uxth	r2, r2
 80093f2:	801a      	strh	r2, [r3, #0]
		targetBuffer[2 * index1 + 1] = (int16_t) (txRight[index1]);
 80093f4:	4b11      	ldr	r3, [pc, #68]	; (800943c <DSP_Process_Data+0x12c>)
 80093f6:	881b      	ldrh	r3, [r3, #0]
 80093f8:	461a      	mov	r2, r3
 80093fa:	4b15      	ldr	r3, [pc, #84]	; (8009450 <DSP_Process_Data+0x140>)
 80093fc:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8009400:	4b0e      	ldr	r3, [pc, #56]	; (800943c <DSP_Process_Data+0x12c>)
 8009402:	881b      	ldrh	r3, [r3, #0]
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	3302      	adds	r3, #2
 8009408:	683a      	ldr	r2, [r7, #0]
 800940a:	4413      	add	r3, r2
 800940c:	b28a      	uxth	r2, r1
 800940e:	801a      	strh	r2, [r3, #0]
	for (index1 = 0; index1 < DSP_BUFFERSIZE_HALF; index1++) {
 8009410:	4b0a      	ldr	r3, [pc, #40]	; (800943c <DSP_Process_Data+0x12c>)
 8009412:	881b      	ldrh	r3, [r3, #0]
 8009414:	3301      	adds	r3, #1
 8009416:	b29a      	uxth	r2, r3
 8009418:	4b08      	ldr	r3, [pc, #32]	; (800943c <DSP_Process_Data+0x12c>)
 800941a:	801a      	strh	r2, [r3, #0]
 800941c:	4b07      	ldr	r3, [pc, #28]	; (800943c <DSP_Process_Data+0x12c>)
 800941e:	881b      	ldrh	r3, [r3, #0]
 8009420:	2b2f      	cmp	r3, #47	; 0x2f
 8009422:	d9d9      	bls.n	80093d8 <DSP_Process_Data+0xc8>
	}

#ifdef DEBUG_DSP_LATENCY
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8009424:	2200      	movs	r2, #0
 8009426:	2140      	movs	r1, #64	; 0x40
 8009428:	4803      	ldr	r0, [pc, #12]	; (8009438 <DSP_Process_Data+0x128>)
 800942a:	f7f8 fb01 	bl	8001a30 <HAL_GPIO_WritePin>
#endif
}
 800942e:	bf00      	nop
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	40020800 	.word	0x40020800
 800943c:	20000796 	.word	0x20000796
 8009440:	200001d8 	.word	0x200001d8
 8009444:	20000238 	.word	0x20000238
 8009448:	20000794 	.word	0x20000794
 800944c:	20000298 	.word	0x20000298
 8009450:	200002f8 	.word	0x200002f8

08009454 <__NVIC_SystemReset>:
{
 8009454:	b480      	push	{r7}
 8009456:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009458:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800945c:	4b05      	ldr	r3, [pc, #20]	; (8009474 <__NVIC_SystemReset+0x20>)
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009464:	4903      	ldr	r1, [pc, #12]	; (8009474 <__NVIC_SystemReset+0x20>)
 8009466:	4b04      	ldr	r3, [pc, #16]	; (8009478 <__NVIC_SystemReset+0x24>)
 8009468:	4313      	orrs	r3, r2
 800946a:	60cb      	str	r3, [r1, #12]
 800946c:	f3bf 8f4f 	dsb	sy
    __NOP();
 8009470:	bf00      	nop
 8009472:	e7fd      	b.n	8009470 <__NVIC_SystemReset+0x1c>
 8009474:	e000ed00 	.word	0xe000ed00
 8009478:	05fa0004 	.word	0x05fa0004

0800947c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009482:	f7f7 f895 	bl	80005b0 <HAL_Init>

  /* USER CODE BEGIN Init */
	/* Init Device Library */
	USBD_Init(&USBD_Device, &FS_Desc, 0);
 8009486:	2200      	movs	r2, #0
 8009488:	499e      	ldr	r1, [pc, #632]	; (8009704 <main+0x288>)
 800948a:	489f      	ldr	r0, [pc, #636]	; (8009708 <main+0x28c>)
 800948c:	f7fe fcc8 	bl	8007e20 <USBD_Init>

	/* Add Supported Class */
	USBD_RegisterClass(&USBD_Device, USBD_AUDIO_CLASS);
 8009490:	499e      	ldr	r1, [pc, #632]	; (800970c <main+0x290>)
 8009492:	489d      	ldr	r0, [pc, #628]	; (8009708 <main+0x28c>)
 8009494:	f7fe fd08 	bl	8007ea8 <USBD_RegisterClass>

	/* Add Interface callbacks for AUDIO Class */
	USBD_AUDIO_RegisterInterface(&USBD_Device, &audio_class_interface);
 8009498:	499d      	ldr	r1, [pc, #628]	; (8009710 <main+0x294>)
 800949a:	489b      	ldr	r0, [pc, #620]	; (8009708 <main+0x28c>)
 800949c:	f7fe fcaa 	bl	8007df4 <USBD_AUDIO_RegisterInterface>

	/* Start Device Process */
	USBD_Start(&USBD_Device);
 80094a0:	4899      	ldr	r0, [pc, #612]	; (8009708 <main+0x28c>)
 80094a2:	f7fe fd2f 	bl	8007f04 <USBD_Start>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80094a6:	f000 fb41 	bl	8009b2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80094aa:	f000 fdad 	bl	800a008 <MX_GPIO_Init>
  MX_DMA_Init();
 80094ae:	f000 fd83 	bl	8009fb8 <MX_DMA_Init>
  MX_I2C1_Init();
 80094b2:	f000 fc13 	bl	8009cdc <MX_I2C1_Init>
  MX_I2C3_Init();
 80094b6:	f000 fc3f 	bl	8009d38 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80094ba:	f000 fd53 	bl	8009f64 <MX_USART1_UART_Init>
  MX_I2S2_Init();
 80094be:	f000 fc69 	bl	8009d94 <MX_I2S2_Init>
  MX_TIM3_Init();
 80094c2:	f000 fca7 	bl	8009e14 <MX_TIM3_Init>
  MX_TIM4_Init();
 80094c6:	f000 fcf9 	bl	8009ebc <MX_TIM4_Init>
  MX_RNG_Init();
 80094ca:	f000 fc8f 	bl	8009dec <MX_RNG_Init>
  MX_ADC1_Init();
 80094ce:	f000 fbb3 	bl	8009c38 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80094d2:	f002 fa97 	bl	800ba04 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

   /* Set up SSD1306 OLED Displays on both I2C Busses */
 	holedR.hi2cx = &hi2c3;
 80094d6:	4b8f      	ldr	r3, [pc, #572]	; (8009714 <main+0x298>)
 80094d8:	4a8f      	ldr	r2, [pc, #572]	; (8009718 <main+0x29c>)
 80094da:	609a      	str	r2, [r3, #8]
 	holedL.hi2cx = &hi2c1;
 80094dc:	4b8f      	ldr	r3, [pc, #572]	; (800971c <main+0x2a0>)
 80094de:	4a90      	ldr	r2, [pc, #576]	; (8009720 <main+0x2a4>)
 80094e0:	609a      	str	r2, [r3, #8]
 	ssd1306_Init(&holedL);
 80094e2:	488e      	ldr	r0, [pc, #568]	; (800971c <main+0x2a0>)
 80094e4:	f001 f9e2 	bl	800a8ac <ssd1306_Init>
 	ssd1306_Fill(&holedL, Black);
 80094e8:	2100      	movs	r1, #0
 80094ea:	488c      	ldr	r0, [pc, #560]	; (800971c <main+0x2a0>)
 80094ec:	f001 fa72 	bl	800a9d4 <ssd1306_Fill>
 	ssd1306_DrawHLine(&holedL,0,128,13,White);
 80094f0:	2301      	movs	r3, #1
 80094f2:	9300      	str	r3, [sp, #0]
 80094f4:	230d      	movs	r3, #13
 80094f6:	2280      	movs	r2, #128	; 0x80
 80094f8:	2100      	movs	r1, #0
 80094fa:	4888      	ldr	r0, [pc, #544]	; (800971c <main+0x2a0>)
 80094fc:	f001 fc8a 	bl	800ae14 <ssd1306_DrawHLine>
 	ssd1306_DrawHLine(&holedL,0,128,48,White);
 8009500:	2301      	movs	r3, #1
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	2330      	movs	r3, #48	; 0x30
 8009506:	2280      	movs	r2, #128	; 0x80
 8009508:	2100      	movs	r1, #0
 800950a:	4884      	ldr	r0, [pc, #528]	; (800971c <main+0x2a0>)
 800950c:	f001 fc82 	bl	800ae14 <ssd1306_DrawHLine>
 	ssd1306_UpdateScreen(&holedL);
 8009510:	4882      	ldr	r0, [pc, #520]	; (800971c <main+0x2a0>)
 8009512:	f001 fa81 	bl	800aa18 <ssd1306_UpdateScreen>
 	ssd1306_Init(&holedR);
 8009516:	487f      	ldr	r0, [pc, #508]	; (8009714 <main+0x298>)
 8009518:	f001 f9c8 	bl	800a8ac <ssd1306_Init>
 	ssd1306_Fill(&holedR, Black);
 800951c:	2100      	movs	r1, #0
 800951e:	487d      	ldr	r0, [pc, #500]	; (8009714 <main+0x298>)
 8009520:	f001 fa58 	bl	800a9d4 <ssd1306_Fill>
 	ssd1306_DrawHLine(&holedR,0,128,13,White);
 8009524:	2301      	movs	r3, #1
 8009526:	9300      	str	r3, [sp, #0]
 8009528:	230d      	movs	r3, #13
 800952a:	2280      	movs	r2, #128	; 0x80
 800952c:	2100      	movs	r1, #0
 800952e:	4879      	ldr	r0, [pc, #484]	; (8009714 <main+0x298>)
 8009530:	f001 fc70 	bl	800ae14 <ssd1306_DrawHLine>
 	ssd1306_DrawHLine(&holedR,0,128,48,White);
 8009534:	2301      	movs	r3, #1
 8009536:	9300      	str	r3, [sp, #0]
 8009538:	2330      	movs	r3, #48	; 0x30
 800953a:	2280      	movs	r2, #128	; 0x80
 800953c:	2100      	movs	r1, #0
 800953e:	4875      	ldr	r0, [pc, #468]	; (8009714 <main+0x298>)
 8009540:	f001 fc68 	bl	800ae14 <ssd1306_DrawHLine>
 	ssd1306_UpdateScreen(&holedR);
 8009544:	4873      	ldr	r0, [pc, #460]	; (8009714 <main+0x298>)
 8009546:	f001 fa67 	bl	800aa18 <ssd1306_UpdateScreen>

   /* If User Button is pressed on Startup, enter DFU Firmware Upgrade Mode */
 	if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == GPIO_PIN_SET){
 800954a:	2102      	movs	r1, #2
 800954c:	4875      	ldr	r0, [pc, #468]	; (8009724 <main+0x2a8>)
 800954e:	f7f8 fa57 	bl	8001a00 <HAL_GPIO_ReadPin>
 8009552:	4603      	mov	r3, r0
 8009554:	2b01      	cmp	r3, #1
 8009556:	d12a      	bne.n	80095ae <main+0x132>
 		HAL_GPIO_WritePin(SET_BOOT0_GPIO_Port, SET_BOOT0_Pin, GPIO_PIN_SET);  // pull BOOT0 = 1
 8009558:	2201      	movs	r2, #1
 800955a:	2104      	movs	r1, #4
 800955c:	4872      	ldr	r0, [pc, #456]	; (8009728 <main+0x2ac>)
 800955e:	f7f8 fa67 	bl	8001a30 <HAL_GPIO_WritePin>
 		ssd1306_SetCursor(&holedL, 48, 23);
 8009562:	2217      	movs	r2, #23
 8009564:	2130      	movs	r1, #48	; 0x30
 8009566:	486d      	ldr	r0, [pc, #436]	; (800971c <main+0x2a0>)
 8009568:	f001 fc26 	bl	800adb8 <ssd1306_SetCursor>
 		ssd1306_WriteString(&holedL, "DFU", Font_11x18, White);
 800956c:	4b6f      	ldr	r3, [pc, #444]	; (800972c <main+0x2b0>)
 800956e:	2201      	movs	r2, #1
 8009570:	9200      	str	r2, [sp, #0]
 8009572:	cb0c      	ldmia	r3, {r2, r3}
 8009574:	496e      	ldr	r1, [pc, #440]	; (8009730 <main+0x2b4>)
 8009576:	4869      	ldr	r0, [pc, #420]	; (800971c <main+0x2a0>)
 8009578:	f001 fbf6 	bl	800ad68 <ssd1306_WriteString>
 		ssd1306_UpdateScreen(&holedL);
 800957c:	4867      	ldr	r0, [pc, #412]	; (800971c <main+0x2a0>)
 800957e:	f001 fa4b 	bl	800aa18 <ssd1306_UpdateScreen>
 		ssd1306_SetCursor(&holedR, 42, 23);
 8009582:	2217      	movs	r2, #23
 8009584:	212a      	movs	r1, #42	; 0x2a
 8009586:	4863      	ldr	r0, [pc, #396]	; (8009714 <main+0x298>)
 8009588:	f001 fc16 	bl	800adb8 <ssd1306_SetCursor>
 		ssd1306_WriteString(&holedR, "MODE", Font_11x18, White);
 800958c:	4b67      	ldr	r3, [pc, #412]	; (800972c <main+0x2b0>)
 800958e:	2201      	movs	r2, #1
 8009590:	9200      	str	r2, [sp, #0]
 8009592:	cb0c      	ldmia	r3, {r2, r3}
 8009594:	4967      	ldr	r1, [pc, #412]	; (8009734 <main+0x2b8>)
 8009596:	485f      	ldr	r0, [pc, #380]	; (8009714 <main+0x298>)
 8009598:	f001 fbe6 	bl	800ad68 <ssd1306_WriteString>
 		ssd1306_UpdateScreen(&holedR);
 800959c:	485d      	ldr	r0, [pc, #372]	; (8009714 <main+0x298>)
 800959e:	f001 fa3b 	bl	800aa18 <ssd1306_UpdateScreen>
 		HAL_Delay(500);      // wait for Capacitor to charge to ~3.3V
 80095a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80095a6:	f7f7 f875 	bl	8000694 <HAL_Delay>
 		NVIC_SystemReset();  // Reset the MCU
 80095aa:	f7ff ff53 	bl	8009454 <__NVIC_SystemReset>
 	}else{
 		ssd1306_SetCursor(&holedL, 48, 23);
 80095ae:	2217      	movs	r2, #23
 80095b0:	2130      	movs	r1, #48	; 0x30
 80095b2:	485a      	ldr	r0, [pc, #360]	; (800971c <main+0x2a0>)
 80095b4:	f001 fc00 	bl	800adb8 <ssd1306_SetCursor>
 		ssd1306_WriteString(&holedL, "DSP", Font_11x18, White);
 80095b8:	4b5c      	ldr	r3, [pc, #368]	; (800972c <main+0x2b0>)
 80095ba:	2201      	movs	r2, #1
 80095bc:	9200      	str	r2, [sp, #0]
 80095be:	cb0c      	ldmia	r3, {r2, r3}
 80095c0:	495d      	ldr	r1, [pc, #372]	; (8009738 <main+0x2bc>)
 80095c2:	4856      	ldr	r0, [pc, #344]	; (800971c <main+0x2a0>)
 80095c4:	f001 fbd0 	bl	800ad68 <ssd1306_WriteString>
 		ssd1306_UpdateScreen(&holedL);
 80095c8:	4854      	ldr	r0, [pc, #336]	; (800971c <main+0x2a0>)
 80095ca:	f001 fa25 	bl	800aa18 <ssd1306_UpdateScreen>
 		ssd1306_SetCursor(&holedR, 37, 23);
 80095ce:	2217      	movs	r2, #23
 80095d0:	2125      	movs	r1, #37	; 0x25
 80095d2:	4850      	ldr	r0, [pc, #320]	; (8009714 <main+0x298>)
 80095d4:	f001 fbf0 	bl	800adb8 <ssd1306_SetCursor>
 		ssd1306_WriteString(&holedR, "BOARD", Font_11x18, White);
 80095d8:	4b54      	ldr	r3, [pc, #336]	; (800972c <main+0x2b0>)
 80095da:	2201      	movs	r2, #1
 80095dc:	9200      	str	r2, [sp, #0]
 80095de:	cb0c      	ldmia	r3, {r2, r3}
 80095e0:	4956      	ldr	r1, [pc, #344]	; (800973c <main+0x2c0>)
 80095e2:	484c      	ldr	r0, [pc, #304]	; (8009714 <main+0x298>)
 80095e4:	f001 fbc0 	bl	800ad68 <ssd1306_WriteString>
 		ssd1306_UpdateScreen(&holedR);
 80095e8:	484a      	ldr	r0, [pc, #296]	; (8009714 <main+0x298>)
 80095ea:	f001 fa15 	bl	800aa18 <ssd1306_UpdateScreen>
 	}

 	/* Start ADC for Battery Voltage */
 	HAL_ADC_Start(&hadc1);
 80095ee:	4854      	ldr	r0, [pc, #336]	; (8009740 <main+0x2c4>)
 80095f0:	f7f7 f8b6 	bl	8000760 <HAL_ADC_Start>
 	if(HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK){
 80095f4:	2105      	movs	r1, #5
 80095f6:	4852      	ldr	r0, [pc, #328]	; (8009740 <main+0x2c4>)
 80095f8:	f7f7 f958 	bl	80008ac <HAL_ADC_PollForConversion>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d102      	bne.n	8009608 <main+0x18c>
 		HAL_ADC_GetValue(&hadc1);
 8009602:	484f      	ldr	r0, [pc, #316]	; (8009740 <main+0x2c4>)
 8009604:	f7f7 f9d6 	bl	80009b4 <HAL_ADC_GetValue>
 	}

 	/* Start both Timers in Encoder Mode for Rotary Encoders */
 	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1); // start encoder mode
 8009608:	2100      	movs	r1, #0
 800960a:	484e      	ldr	r0, [pc, #312]	; (8009744 <main+0x2c8>)
 800960c:	f7fc f8d9 	bl	80057c2 <HAL_TIM_Encoder_Start>
 	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8009610:	2100      	movs	r1, #0
 8009612:	484d      	ldr	r0, [pc, #308]	; (8009748 <main+0x2cc>)
 8009614:	f7fc f8d5 	bl	80057c2 <HAL_TIM_Encoder_Start>
 	TIM3->CNT = 0; // initialize zero
 8009618:	4b4c      	ldr	r3, [pc, #304]	; (800974c <main+0x2d0>)
 800961a:	2200      	movs	r2, #0
 800961c:	625a      	str	r2, [r3, #36]	; 0x24
 	TIM4->CNT = 0;
 800961e:	4b4c      	ldr	r3, [pc, #304]	; (8009750 <main+0x2d4>)
 8009620:	2200      	movs	r2, #0
 8009622:	625a      	str	r2, [r3, #36]	; 0x24

 	/* define the input state */
 	strcpy(In.title,"Input");
 8009624:	4b4b      	ldr	r3, [pc, #300]	; (8009754 <main+0x2d8>)
 8009626:	4a4c      	ldr	r2, [pc, #304]	; (8009758 <main+0x2dc>)
 8009628:	e892 0003 	ldmia.w	r2, {r0, r1}
 800962c:	6018      	str	r0, [r3, #0]
 800962e:	3304      	adds	r3, #4
 8009630:	8019      	strh	r1, [r3, #0]
 	strcpy(In.par0.name,"Line Vol");
 8009632:	4b4a      	ldr	r3, [pc, #296]	; (800975c <main+0x2e0>)
 8009634:	4a4a      	ldr	r2, [pc, #296]	; (8009760 <main+0x2e4>)
 8009636:	ca07      	ldmia	r2, {r0, r1, r2}
 8009638:	c303      	stmia	r3!, {r0, r1}
 800963a:	701a      	strb	r2, [r3, #0]
 	In.par0.value=17; //Line Vol, init value
 800963c:	4b45      	ldr	r3, [pc, #276]	; (8009754 <main+0x2d8>)
 800963e:	2211      	movs	r2, #17
 8009640:	629a      	str	r2, [r3, #40]	; 0x28
 	In.par0.max=22; //Line Vol, maximum
 8009642:	4b44      	ldr	r3, [pc, #272]	; (8009754 <main+0x2d8>)
 8009644:	2216      	movs	r2, #22
 8009646:	631a      	str	r2, [r3, #48]	; 0x30
 	In.par0.min=0; //Line Vol, minimum
 8009648:	4b42      	ldr	r3, [pc, #264]	; (8009754 <main+0x2d8>)
 800964a:	2200      	movs	r2, #0
 800964c:	62da      	str	r2, [r3, #44]	; 0x2c
 	In.par0.change=1; //Line Vol, step size
 800964e:	4b41      	ldr	r3, [pc, #260]	; (8009754 <main+0x2d8>)
 8009650:	2201      	movs	r2, #1
 8009652:	635a      	str	r2, [r3, #52]	; 0x34
 	strcpy(In.par1.name,"Source");
 8009654:	4b43      	ldr	r3, [pc, #268]	; (8009764 <main+0x2e8>)
 8009656:	4a44      	ldr	r2, [pc, #272]	; (8009768 <main+0x2ec>)
 8009658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800965c:	6018      	str	r0, [r3, #0]
 800965e:	3304      	adds	r3, #4
 8009660:	8019      	strh	r1, [r3, #0]
 8009662:	3302      	adds	r3, #2
 8009664:	0c0a      	lsrs	r2, r1, #16
 8009666:	701a      	strb	r2, [r3, #0]
 	In.par1.value=3;
 8009668:	4b3a      	ldr	r3, [pc, #232]	; (8009754 <main+0x2d8>)
 800966a:	2203      	movs	r2, #3
 800966c:	661a      	str	r2, [r3, #96]	; 0x60
 	In.par1.max=3;
 800966e:	4b39      	ldr	r3, [pc, #228]	; (8009754 <main+0x2d8>)
 8009670:	2203      	movs	r2, #3
 8009672:	669a      	str	r2, [r3, #104]	; 0x68
 	In.par1.min=0;
 8009674:	4b37      	ldr	r3, [pc, #220]	; (8009754 <main+0x2d8>)
 8009676:	2200      	movs	r2, #0
 8009678:	665a      	str	r2, [r3, #100]	; 0x64
 	In.par1.change=1;
 800967a:	4b36      	ldr	r3, [pc, #216]	; (8009754 <main+0x2d8>)
 800967c:	2201      	movs	r2, #1
 800967e:	66da      	str	r2, [r3, #108]	; 0x6c
 	strcpy(In.par2.name,"HP Vol");
 8009680:	4b3a      	ldr	r3, [pc, #232]	; (800976c <main+0x2f0>)
 8009682:	4a3b      	ldr	r2, [pc, #236]	; (8009770 <main+0x2f4>)
 8009684:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009688:	6018      	str	r0, [r3, #0]
 800968a:	3304      	adds	r3, #4
 800968c:	8019      	strh	r1, [r3, #0]
 800968e:	3302      	adds	r3, #2
 8009690:	0c0a      	lsrs	r2, r1, #16
 8009692:	701a      	strb	r2, [r3, #0]
 	In.par2.value=70; //HP Vol, init value
 8009694:	4b2f      	ldr	r3, [pc, #188]	; (8009754 <main+0x2d8>)
 8009696:	2246      	movs	r2, #70	; 0x46
 8009698:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 	In.par2.max=78; //HP Vol, maximum
 800969c:	4b2d      	ldr	r3, [pc, #180]	; (8009754 <main+0x2d8>)
 800969e:	224e      	movs	r2, #78	; 0x4e
 80096a0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 	In.par2.min=0; //HP Vol, minimum
 80096a4:	4b2b      	ldr	r3, [pc, #172]	; (8009754 <main+0x2d8>)
 80096a6:	2200      	movs	r2, #0
 80096a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 	In.par2.change=1; //HP Vol, step size
 80096ac:	4b29      	ldr	r3, [pc, #164]	; (8009754 <main+0x2d8>)
 80096ae:	2201      	movs	r2, #1
 80096b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

 	input_source=&In.par1.value;
 80096b4:	4b2f      	ldr	r3, [pc, #188]	; (8009774 <main+0x2f8>)
 80096b6:	4a30      	ldr	r2, [pc, #192]	; (8009778 <main+0x2fc>)
 80096b8:	601a      	str	r2, [r3, #0]
 	volume_line=&In.par0.value;
 80096ba:	4b30      	ldr	r3, [pc, #192]	; (800977c <main+0x300>)
 80096bc:	4a30      	ldr	r2, [pc, #192]	; (8009780 <main+0x304>)
 80096be:	601a      	str	r2, [r3, #0]
 	volume_hp=&In.par2.value;
 80096c0:	4b30      	ldr	r3, [pc, #192]	; (8009784 <main+0x308>)
 80096c2:	4a31      	ldr	r2, [pc, #196]	; (8009788 <main+0x30c>)
 80096c4:	601a      	str	r2, [r3, #0]

 	/* Init TLV320 Audio Codec */
 	TLV320_Init(&hi2c1);
 80096c6:	4816      	ldr	r0, [pc, #88]	; (8009720 <main+0x2a4>)
 80096c8:	f002 f902 	bl	800b8d0 <TLV320_Init>
 	BSP_SelectAudioIn(*input_source);
 80096cc:	4b29      	ldr	r3, [pc, #164]	; (8009774 <main+0x2f8>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7ff fde7 	bl	80092a8 <BSP_SelectAudioIn>
 	TLV320_SetLineInVol(*volume_line);
 80096da:	4b28      	ldr	r3, [pc, #160]	; (800977c <main+0x300>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	4618      	mov	r0, r3
 80096e4:	f002 f934 	bl	800b950 <TLV320_SetLineInVol>
 	TLV320_SetHeadphoneVol(*volume_hp);
 80096e8:	4b26      	ldr	r3, [pc, #152]	; (8009784 <main+0x308>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	4618      	mov	r0, r3
 80096f2:	f002 f955 	bl	800b9a0 <TLV320_SetHeadphoneVol>

   /* Signal Processing */
 	dsp_mode = DSP_MODE_PASSTHROUGH;
 80096f6:	4b25      	ldr	r3, [pc, #148]	; (800978c <main+0x310>)
 80096f8:	2200      	movs	r2, #0
 80096fa:	801a      	strh	r2, [r3, #0]

 	/* Clear Audio Rx and Tx buffer for DMA */
 	for(uint16_t i=0; i<DSP_BUFFERSIZE_DOUBLE; i++){
 80096fc:	2300      	movs	r3, #0
 80096fe:	80fb      	strh	r3, [r7, #6]
 8009700:	e053      	b.n	80097aa <main+0x32e>
 8009702:	bf00      	nop
 8009704:	200000f4 	.word	0x200000f4
 8009708:	20001388 	.word	0x20001388
 800970c:	20000008 	.word	0x20000008
 8009710:	20000cd4 	.word	0x20000cd4
 8009714:	20000798 	.word	0x20000798
 8009718:	20000be8 	.word	0x20000be8
 800971c:	20000f78 	.word	0x20000f78
 8009720:	20000c80 	.word	0x20000c80
 8009724:	40020000 	.word	0x40020000
 8009728:	40020c00 	.word	0x40020c00
 800972c:	200000cc 	.word	0x200000cc
 8009730:	0800d710 	.word	0x0800d710
 8009734:	0800d714 	.word	0x0800d714
 8009738:	0800d71c 	.word	0x0800d71c
 800973c:	0800d720 	.word	0x0800d720
 8009740:	20000f30 	.word	0x20000f30
 8009744:	20000ef0 	.word	0x20000ef0
 8009748:	20000c3c 	.word	0x20000c3c
 800974c:	40000400 	.word	0x40000400
 8009750:	40000800 	.word	0x40000800
 8009754:	2000169c 	.word	0x2000169c
 8009758:	0800d728 	.word	0x0800d728
 800975c:	200016b0 	.word	0x200016b0
 8009760:	0800d730 	.word	0x0800d730
 8009764:	200016e8 	.word	0x200016e8
 8009768:	0800d73c 	.word	0x0800d73c
 800976c:	20001720 	.word	0x20001720
 8009770:	0800d744 	.word	0x0800d744
 8009774:	20000788 	.word	0x20000788
 8009778:	200016fc 	.word	0x200016fc
 800977c:	2000198c 	.word	0x2000198c
 8009780:	200016c4 	.word	0x200016c4
 8009784:	20000c7c 	.word	0x20000c7c
 8009788:	20001734 	.word	0x20001734
 800978c:	20000794 	.word	0x20000794
 		pRxData[i] = 0;
 8009790:	88fb      	ldrh	r3, [r7, #6]
 8009792:	4a96      	ldr	r2, [pc, #600]	; (80099ec <main+0x570>)
 8009794:	2100      	movs	r1, #0
 8009796:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 		pTxData[i] = 0;
 800979a:	88fb      	ldrh	r3, [r7, #6]
 800979c:	4a94      	ldr	r2, [pc, #592]	; (80099f0 <main+0x574>)
 800979e:	2100      	movs	r1, #0
 80097a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 	for(uint16_t i=0; i<DSP_BUFFERSIZE_DOUBLE; i++){
 80097a4:	88fb      	ldrh	r3, [r7, #6]
 80097a6:	3301      	adds	r3, #1
 80097a8:	80fb      	strh	r3, [r7, #6]
 80097aa:	88fb      	ldrh	r3, [r7, #6]
 80097ac:	2bbf      	cmp	r3, #191	; 0xbf
 80097ae:	d9ef      	bls.n	8009790 <main+0x314>
 	}

 	/* Generate a 1kHz Sine Wave */
 	//uint16_t nDataPoints = BSP_SineWave(48000.0f, 1000.0f, 1000, sinWave, sizeof(sinWave)/sizeof(uint16_t));
 	uint8_t update_counter = 0;
 80097b0:	2300      	movs	r3, #0
 80097b2:	717b      	strb	r3, [r7, #5]

	/* Start automatic DMA Transmission (Full Duplex) */
	/* Double buffer length, Interrupt on Half-Full */
	HAL_I2SEx_TransmitReceive_DMA(&hi2s2, pTxData, pRxData, DSP_BUFFERSIZE_DOUBLE);
 80097b4:	23c0      	movs	r3, #192	; 0xc0
 80097b6:	4a8d      	ldr	r2, [pc, #564]	; (80099ec <main+0x570>)
 80097b8:	498d      	ldr	r1, [pc, #564]	; (80099f0 <main+0x574>)
 80097ba:	488e      	ldr	r0, [pc, #568]	; (80099f4 <main+0x578>)
 80097bc:	f7f9 f822 	bl	8002804 <HAL_I2SEx_TransmitReceive_DMA>

	/* show startup screen for 1s (and then clear it) */
	HAL_Delay(1000);
 80097c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80097c4:	f7f6 ff66 	bl	8000694 <HAL_Delay>
	ssd1306_Fill(&holedR, Black);
 80097c8:	2100      	movs	r1, #0
 80097ca:	488b      	ldr	r0, [pc, #556]	; (80099f8 <main+0x57c>)
 80097cc:	f001 f902 	bl	800a9d4 <ssd1306_Fill>
	ssd1306_Fill(&holedL, Black);
 80097d0:	2100      	movs	r1, #0
 80097d2:	488a      	ldr	r0, [pc, #552]	; (80099fc <main+0x580>)
 80097d4:	f001 f8fe 	bl	800a9d4 <ssd1306_Fill>
	ssd1306_DrawHLine(&holedL,0,128,13,White);
 80097d8:	2301      	movs	r3, #1
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	230d      	movs	r3, #13
 80097de:	2280      	movs	r2, #128	; 0x80
 80097e0:	2100      	movs	r1, #0
 80097e2:	4886      	ldr	r0, [pc, #536]	; (80099fc <main+0x580>)
 80097e4:	f001 fb16 	bl	800ae14 <ssd1306_DrawHLine>
	ssd1306_DrawHLine(&holedL,0,128,48,White);
 80097e8:	2301      	movs	r3, #1
 80097ea:	9300      	str	r3, [sp, #0]
 80097ec:	2330      	movs	r3, #48	; 0x30
 80097ee:	2280      	movs	r2, #128	; 0x80
 80097f0:	2100      	movs	r1, #0
 80097f2:	4882      	ldr	r0, [pc, #520]	; (80099fc <main+0x580>)
 80097f4:	f001 fb0e 	bl	800ae14 <ssd1306_DrawHLine>
	ssd1306_UpdateScreen(&holedL);
 80097f8:	4880      	ldr	r0, [pc, #512]	; (80099fc <main+0x580>)
 80097fa:	f001 f90d 	bl	800aa18 <ssd1306_UpdateScreen>
	ssd1306_DrawHLine(&holedR,0,128,13,White);
 80097fe:	2301      	movs	r3, #1
 8009800:	9300      	str	r3, [sp, #0]
 8009802:	230d      	movs	r3, #13
 8009804:	2280      	movs	r2, #128	; 0x80
 8009806:	2100      	movs	r1, #0
 8009808:	487b      	ldr	r0, [pc, #492]	; (80099f8 <main+0x57c>)
 800980a:	f001 fb03 	bl	800ae14 <ssd1306_DrawHLine>
	ssd1306_DrawHLine(&holedR,0,128,48,White);
 800980e:	2301      	movs	r3, #1
 8009810:	9300      	str	r3, [sp, #0]
 8009812:	2330      	movs	r3, #48	; 0x30
 8009814:	2280      	movs	r2, #128	; 0x80
 8009816:	2100      	movs	r1, #0
 8009818:	4877      	ldr	r0, [pc, #476]	; (80099f8 <main+0x57c>)
 800981a:	f001 fafb 	bl	800ae14 <ssd1306_DrawHLine>
	ssd1306_UpdateScreen(&holedR);
 800981e:	4876      	ldr	r0, [pc, #472]	; (80099f8 <main+0x57c>)
 8009820:	f001 f8fa 	bl	800aa18 <ssd1306_UpdateScreen>
	updateAkku();
 8009824:	f000 ff1a 	bl	800a65c <updateAkku>
//		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
//	      } else {
//	    	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
//	      }

	    if(state_nxt!=state_crrnt){
 8009828:	4b75      	ldr	r3, [pc, #468]	; (8009a00 <main+0x584>)
 800982a:	781a      	ldrb	r2, [r3, #0]
 800982c:	4b75      	ldr	r3, [pc, #468]	; (8009a04 <main+0x588>)
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	429a      	cmp	r2, r3
 8009832:	d001      	beq.n	8009838 <main+0x3bc>
			clearFX();
 8009834:	f000 feaa 	bl	800a58c <clearFX>
			}

			state_crrnt = state_nxt;
 8009838:	4b71      	ldr	r3, [pc, #452]	; (8009a00 <main+0x584>)
 800983a:	781a      	ldrb	r2, [r3, #0]
 800983c:	4b71      	ldr	r3, [pc, #452]	; (8009a04 <main+0x588>)
 800983e:	701a      	strb	r2, [r3, #0]
			update_counter ++;
 8009840:	797b      	ldrb	r3, [r7, #5]
 8009842:	3301      	adds	r3, #1
 8009844:	717b      	strb	r3, [r7, #5]

	    /* STATE MACHINE */
			switch (state_crrnt){
 8009846:	4b6f      	ldr	r3, [pc, #444]	; (8009a04 <main+0x588>)
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d000      	beq.n	8009850 <main+0x3d4>
	      /* State Machine Includes */



				default:
					break;
 800984e:	e00a      	b.n	8009866 <main+0x3ea>
					showFX(&In);
 8009850:	486d      	ldr	r0, [pc, #436]	; (8009a08 <main+0x58c>)
 8009852:	f000 fced 	bl	800a230 <showFX>
					BSP_SelectAudioIn(*input_source);
 8009856:	4b6d      	ldr	r3, [pc, #436]	; (8009a0c <main+0x590>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	b2db      	uxtb	r3, r3
 800985e:	4618      	mov	r0, r3
 8009860:	f7ff fd22 	bl	80092a8 <BSP_SelectAudioIn>
					break;
 8009864:	bf00      	nop
			}



			encoder_change = BSP_ReadEncoder_Difference(ENCODER_LEFT);
 8009866:	2001      	movs	r0, #1
 8009868:	f7ff fc6a 	bl	8009140 <BSP_ReadEncoder_Difference>
 800986c:	4603      	mov	r3, r0
 800986e:	461a      	mov	r2, r3
 8009870:	4b67      	ldr	r3, [pc, #412]	; (8009a10 <main+0x594>)
 8009872:	801a      	strh	r2, [r3, #0]
			if(encoder_change){    // only execute when something changed
 8009874:	4b66      	ldr	r3, [pc, #408]	; (8009a10 <main+0x594>)
 8009876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d02b      	beq.n	80098d6 <main+0x45a>
				(*para0).value+=encoder_change*(*para0).change;
 800987e:	4b65      	ldr	r3, [pc, #404]	; (8009a14 <main+0x598>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	6959      	ldr	r1, [r3, #20]
 8009884:	4b62      	ldr	r3, [pc, #392]	; (8009a10 <main+0x594>)
 8009886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800988a:	461a      	mov	r2, r3
 800988c:	4b61      	ldr	r3, [pc, #388]	; (8009a14 <main+0x598>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6a1b      	ldr	r3, [r3, #32]
 8009892:	fb03 f202 	mul.w	r2, r3, r2
 8009896:	4b5f      	ldr	r3, [pc, #380]	; (8009a14 <main+0x598>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	440a      	add	r2, r1
 800989c:	615a      	str	r2, [r3, #20]
				if((*para0).value<(*para0).min)
 800989e:	4b5d      	ldr	r3, [pc, #372]	; (8009a14 <main+0x598>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	695a      	ldr	r2, [r3, #20]
 80098a4:	4b5b      	ldr	r3, [pc, #364]	; (8009a14 <main+0x598>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	699b      	ldr	r3, [r3, #24]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	da05      	bge.n	80098ba <main+0x43e>
					(*para0).value=(*para0).min;
 80098ae:	4b59      	ldr	r3, [pc, #356]	; (8009a14 <main+0x598>)
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	4b58      	ldr	r3, [pc, #352]	; (8009a14 <main+0x598>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	6992      	ldr	r2, [r2, #24]
 80098b8:	615a      	str	r2, [r3, #20]
				if((*para0).value>(*para0).max)
 80098ba:	4b56      	ldr	r3, [pc, #344]	; (8009a14 <main+0x598>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	695a      	ldr	r2, [r3, #20]
 80098c0:	4b54      	ldr	r3, [pc, #336]	; (8009a14 <main+0x598>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	69db      	ldr	r3, [r3, #28]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	dd05      	ble.n	80098d6 <main+0x45a>
					(*para0).value=(*para0).max;
 80098ca:	4b52      	ldr	r3, [pc, #328]	; (8009a14 <main+0x598>)
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	4b51      	ldr	r3, [pc, #324]	; (8009a14 <main+0x598>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	69d2      	ldr	r2, [r2, #28]
 80098d4:	615a      	str	r2, [r3, #20]
			}

			encoder_change = BSP_ReadEncoder_Difference(ENCODER_RIGHT);
 80098d6:	2000      	movs	r0, #0
 80098d8:	f7ff fc32 	bl	8009140 <BSP_ReadEncoder_Difference>
 80098dc:	4603      	mov	r3, r0
 80098de:	461a      	mov	r2, r3
 80098e0:	4b4b      	ldr	r3, [pc, #300]	; (8009a10 <main+0x594>)
 80098e2:	801a      	strh	r2, [r3, #0]
			if(encoder_change){    // only execute when something changed
 80098e4:	4b4a      	ldr	r3, [pc, #296]	; (8009a10 <main+0x594>)
 80098e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d02b      	beq.n	8009946 <main+0x4ca>
				(*para2).value+=encoder_change*(*para2).change;
 80098ee:	4b4a      	ldr	r3, [pc, #296]	; (8009a18 <main+0x59c>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	6959      	ldr	r1, [r3, #20]
 80098f4:	4b46      	ldr	r3, [pc, #280]	; (8009a10 <main+0x594>)
 80098f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098fa:	461a      	mov	r2, r3
 80098fc:	4b46      	ldr	r3, [pc, #280]	; (8009a18 <main+0x59c>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	6a1b      	ldr	r3, [r3, #32]
 8009902:	fb03 f202 	mul.w	r2, r3, r2
 8009906:	4b44      	ldr	r3, [pc, #272]	; (8009a18 <main+0x59c>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	440a      	add	r2, r1
 800990c:	615a      	str	r2, [r3, #20]
				if((*para2).value<(*para2).min)
 800990e:	4b42      	ldr	r3, [pc, #264]	; (8009a18 <main+0x59c>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	695a      	ldr	r2, [r3, #20]
 8009914:	4b40      	ldr	r3, [pc, #256]	; (8009a18 <main+0x59c>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	699b      	ldr	r3, [r3, #24]
 800991a:	429a      	cmp	r2, r3
 800991c:	da05      	bge.n	800992a <main+0x4ae>
					(*para2).value=(*para2).min;
 800991e:	4b3e      	ldr	r3, [pc, #248]	; (8009a18 <main+0x59c>)
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	4b3d      	ldr	r3, [pc, #244]	; (8009a18 <main+0x59c>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6992      	ldr	r2, [r2, #24]
 8009928:	615a      	str	r2, [r3, #20]
				if((*para2).value>(*para2).max)
 800992a:	4b3b      	ldr	r3, [pc, #236]	; (8009a18 <main+0x59c>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	695a      	ldr	r2, [r3, #20]
 8009930:	4b39      	ldr	r3, [pc, #228]	; (8009a18 <main+0x59c>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	69db      	ldr	r3, [r3, #28]
 8009936:	429a      	cmp	r2, r3
 8009938:	dd05      	ble.n	8009946 <main+0x4ca>
					(*para2).value=(*para2).max;
 800993a:	4b37      	ldr	r3, [pc, #220]	; (8009a18 <main+0x59c>)
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	4b36      	ldr	r3, [pc, #216]	; (8009a18 <main+0x59c>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	69d2      	ldr	r2, [r2, #28]
 8009944:	615a      	str	r2, [r3, #20]
			}

			/* LEFT USER BUTTON */
			if(btnLeftPressed){
 8009946:	4b35      	ldr	r3, [pc, #212]	; (8009a1c <main+0x5a0>)
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	b2db      	uxtb	r3, r3
 800994c:	2b00      	cmp	r3, #0
 800994e:	d029      	beq.n	80099a4 <main+0x528>
				btnLeftPressed= 0;
 8009950:	4b32      	ldr	r3, [pc, #200]	; (8009a1c <main+0x5a0>)
 8009952:	2200      	movs	r2, #0
 8009954:	701a      	strb	r2, [r3, #0]
				if(state_crrnt==IN){
 8009956:	4b2b      	ldr	r3, [pc, #172]	; (8009a04 <main+0x588>)
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d117      	bne.n	800998e <main+0x512>
					if((*para1).value-1<(*para1).min)
 800995e:	4b30      	ldr	r3, [pc, #192]	; (8009a20 <main+0x5a4>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	695b      	ldr	r3, [r3, #20]
 8009964:	1e5a      	subs	r2, r3, #1
 8009966:	4b2e      	ldr	r3, [pc, #184]	; (8009a20 <main+0x5a4>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	699b      	ldr	r3, [r3, #24]
 800996c:	429a      	cmp	r2, r3
 800996e:	da06      	bge.n	800997e <main+0x502>
						(*para1).value=(*para1).max;
 8009970:	4b2b      	ldr	r3, [pc, #172]	; (8009a20 <main+0x5a4>)
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	4b2a      	ldr	r3, [pc, #168]	; (8009a20 <main+0x5a4>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	69d2      	ldr	r2, [r2, #28]
 800997a:	615a      	str	r2, [r3, #20]
 800997c:	e012      	b.n	80099a4 <main+0x528>
					else
						(*para1).value-=1;
 800997e:	4b28      	ldr	r3, [pc, #160]	; (8009a20 <main+0x5a4>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	695a      	ldr	r2, [r3, #20]
 8009984:	4b26      	ldr	r3, [pc, #152]	; (8009a20 <main+0x5a4>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	3a01      	subs	r2, #1
 800998a:	615a      	str	r2, [r3, #20]
 800998c:	e00a      	b.n	80099a4 <main+0x528>
				}else{
				(*para1).value=!(*para1).value;
 800998e:	4b24      	ldr	r3, [pc, #144]	; (8009a20 <main+0x5a4>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	695b      	ldr	r3, [r3, #20]
 8009994:	2b00      	cmp	r3, #0
 8009996:	bf0c      	ite	eq
 8009998:	2301      	moveq	r3, #1
 800999a:	2300      	movne	r3, #0
 800999c:	b2da      	uxtb	r2, r3
 800999e:	4b20      	ldr	r3, [pc, #128]	; (8009a20 <main+0x5a4>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	615a      	str	r2, [r3, #20]
				}
			}

			/* RIGHT USER BUTTON */
			if(btnRightPressed){
 80099a4:	4b1f      	ldr	r3, [pc, #124]	; (8009a24 <main+0x5a8>)
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d047      	beq.n	8009a3e <main+0x5c2>
				btnRightPressed= 0;
 80099ae:	4b1d      	ldr	r3, [pc, #116]	; (8009a24 <main+0x5a8>)
 80099b0:	2200      	movs	r2, #0
 80099b2:	701a      	strb	r2, [r3, #0]
				if(state_crrnt==IN){
 80099b4:	4b13      	ldr	r3, [pc, #76]	; (8009a04 <main+0x588>)
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d135      	bne.n	8009a28 <main+0x5ac>
					if((*para1).value+1>(*para1).max)
 80099bc:	4b18      	ldr	r3, [pc, #96]	; (8009a20 <main+0x5a4>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	1c5a      	adds	r2, r3, #1
 80099c4:	4b16      	ldr	r3, [pc, #88]	; (8009a20 <main+0x5a4>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	69db      	ldr	r3, [r3, #28]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	dd06      	ble.n	80099dc <main+0x560>
						(*para1).value=(*para1).min;
 80099ce:	4b14      	ldr	r3, [pc, #80]	; (8009a20 <main+0x5a4>)
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	4b13      	ldr	r3, [pc, #76]	; (8009a20 <main+0x5a4>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	6992      	ldr	r2, [r2, #24]
 80099d8:	615a      	str	r2, [r3, #20]
 80099da:	e030      	b.n	8009a3e <main+0x5c2>
					else
						(*para1).value+=1;
 80099dc:	4b10      	ldr	r3, [pc, #64]	; (8009a20 <main+0x5a4>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	695a      	ldr	r2, [r3, #20]
 80099e2:	4b0f      	ldr	r3, [pc, #60]	; (8009a20 <main+0x5a4>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	3201      	adds	r2, #1
 80099e8:	615a      	str	r2, [r3, #20]
 80099ea:	e028      	b.n	8009a3e <main+0x5c2>
 80099ec:	20001790 	.word	0x20001790
 80099f0:	20001a50 	.word	0x20001a50
 80099f4:	20001bd4 	.word	0x20001bd4
 80099f8:	20000798 	.word	0x20000798
 80099fc:	20000f78 	.word	0x20000f78
 8009a00:	20000362 	.word	0x20000362
 8009a04:	20000361 	.word	0x20000361
 8009a08:	2000169c 	.word	0x2000169c
 8009a0c:	20000788 	.word	0x20000788
 8009a10:	2000035e 	.word	0x2000035e
 8009a14:	20001c1c 	.word	0x20001c1c
 8009a18:	20001bd0 	.word	0x20001bd0
 8009a1c:	20000358 	.word	0x20000358
 8009a20:	20001698 	.word	0x20001698
 8009a24:	20000359 	.word	0x20000359
				}else{
					(*para3).value=!(*para3).value;
 8009a28:	4b3a      	ldr	r3, [pc, #232]	; (8009b14 <main+0x698>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	695b      	ldr	r3, [r3, #20]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	bf0c      	ite	eq
 8009a32:	2301      	moveq	r3, #1
 8009a34:	2300      	movne	r3, #0
 8009a36:	b2da      	uxtb	r2, r3
 8009a38:	4b36      	ldr	r3, [pc, #216]	; (8009b14 <main+0x698>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	615a      	str	r2, [r3, #20]
				}
			}

			/* LEFT ENCODER BUTTON */
			if(encLeftPressed){
 8009a3e:	4b36      	ldr	r3, [pc, #216]	; (8009b18 <main+0x69c>)
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d011      	beq.n	8009a6c <main+0x5f0>
				encLeftPressed = 0;
 8009a48:	4b33      	ldr	r3, [pc, #204]	; (8009b18 <main+0x69c>)
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	701a      	strb	r2, [r3, #0]
				/*switch to the previous state (limit first state)*/
				if(state_nxt-1<0){
 8009a4e:	4b33      	ldr	r3, [pc, #204]	; (8009b1c <main+0x6a0>)
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	3b01      	subs	r3, #1
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	da03      	bge.n	8009a60 <main+0x5e4>
				state_nxt=0;
 8009a58:	4b30      	ldr	r3, [pc, #192]	; (8009b1c <main+0x6a0>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	701a      	strb	r2, [r3, #0]
 8009a5e:	e005      	b.n	8009a6c <main+0x5f0>
				}else{
				state_nxt--;
 8009a60:	4b2e      	ldr	r3, [pc, #184]	; (8009b1c <main+0x6a0>)
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	3b01      	subs	r3, #1
 8009a66:	b2da      	uxtb	r2, r3
 8009a68:	4b2c      	ldr	r3, [pc, #176]	; (8009b1c <main+0x6a0>)
 8009a6a:	701a      	strb	r2, [r3, #0]
				}
			}

			/* RIGHT ENCODER BUTTON */
			if(encRightPressed){
 8009a6c:	4b2c      	ldr	r3, [pc, #176]	; (8009b20 <main+0x6a4>)
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d011      	beq.n	8009a9a <main+0x61e>
				encRightPressed = 0;
 8009a76:	4b2a      	ldr	r3, [pc, #168]	; (8009b20 <main+0x6a4>)
 8009a78:	2200      	movs	r2, #0
 8009a7a:	701a      	strb	r2, [r3, #0]
				/*switch to the next state (limit last state)*/
				if(state_nxt+1>CNT-1){
 8009a7c:	4b27      	ldr	r3, [pc, #156]	; (8009b1c <main+0x6a0>)
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	3301      	adds	r3, #1
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	dd03      	ble.n	8009a8e <main+0x612>
				state_nxt=CNT-1;
 8009a86:	4b25      	ldr	r3, [pc, #148]	; (8009b1c <main+0x6a0>)
 8009a88:	2200      	movs	r2, #0
 8009a8a:	701a      	strb	r2, [r3, #0]
 8009a8c:	e005      	b.n	8009a9a <main+0x61e>
				}else{
				state_nxt++;
 8009a8e:	4b23      	ldr	r3, [pc, #140]	; (8009b1c <main+0x6a0>)
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	3301      	adds	r3, #1
 8009a94:	b2da      	uxtb	r2, r3
 8009a96:	4b21      	ldr	r3, [pc, #132]	; (8009b1c <main+0x6a0>)
 8009a98:	701a      	strb	r2, [r3, #0]
				}
			}

	    //limit line vol
			if(*volume_line>22)
 8009a9a:	4b22      	ldr	r3, [pc, #136]	; (8009b24 <main+0x6a8>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b16      	cmp	r3, #22
 8009aa2:	dd04      	ble.n	8009aae <main+0x632>
				*volume_line=22;
 8009aa4:	4b1f      	ldr	r3, [pc, #124]	; (8009b24 <main+0x6a8>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2216      	movs	r2, #22
 8009aaa:	601a      	str	r2, [r3, #0]
 8009aac:	e008      	b.n	8009ac0 <main+0x644>
			else if(*volume_line<0)
 8009aae:	4b1d      	ldr	r3, [pc, #116]	; (8009b24 <main+0x6a8>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	da03      	bge.n	8009ac0 <main+0x644>
				*volume_line=0;
 8009ab8:	4b1a      	ldr	r3, [pc, #104]	; (8009b24 <main+0x6a8>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2200      	movs	r2, #0
 8009abe:	601a      	str	r2, [r3, #0]
			//limit HP vol
			if(*volume_hp>78)
 8009ac0:	4b19      	ldr	r3, [pc, #100]	; (8009b28 <main+0x6ac>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	2b4e      	cmp	r3, #78	; 0x4e
 8009ac8:	dd04      	ble.n	8009ad4 <main+0x658>
				*volume_hp=78;
 8009aca:	4b17      	ldr	r3, [pc, #92]	; (8009b28 <main+0x6ac>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	224e      	movs	r2, #78	; 0x4e
 8009ad0:	601a      	str	r2, [r3, #0]
 8009ad2:	e008      	b.n	8009ae6 <main+0x66a>
			else if(*volume_hp<0)
 8009ad4:	4b14      	ldr	r3, [pc, #80]	; (8009b28 <main+0x6ac>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	da03      	bge.n	8009ae6 <main+0x66a>
				*volume_hp=0;
 8009ade:	4b12      	ldr	r3, [pc, #72]	; (8009b28 <main+0x6ac>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	601a      	str	r2, [r3, #0]
			TLV320_SetLineInVol(*volume_line);
 8009ae6:	4b0f      	ldr	r3, [pc, #60]	; (8009b24 <main+0x6a8>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	4618      	mov	r0, r3
 8009af0:	f001 ff2e 	bl	800b950 <TLV320_SetLineInVol>
			TLV320_SetHeadphoneVol(*volume_hp);
 8009af4:	4b0c      	ldr	r3, [pc, #48]	; (8009b28 <main+0x6ac>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	4618      	mov	r0, r3
 8009afe:	f001 ff4f 	bl	800b9a0 <TLV320_SetHeadphoneVol>

			/* update the battery level (every 50 counts) */
			if(update_counter >= 50){
 8009b02:	797b      	ldrb	r3, [r7, #5]
 8009b04:	2b31      	cmp	r3, #49	; 0x31
 8009b06:	f67f ae8f 	bls.w	8009828 <main+0x3ac>
				update_counter = 0;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	717b      	strb	r3, [r7, #5]
				updateAkku();
 8009b0e:	f000 fda5 	bl	800a65c <updateAkku>
	    if(state_nxt!=state_crrnt){
 8009b12:	e689      	b.n	8009828 <main+0x3ac>
 8009b14:	20001920 	.word	0x20001920
 8009b18:	2000035a 	.word	0x2000035a
 8009b1c:	20000362 	.word	0x20000362
 8009b20:	2000035b 	.word	0x2000035b
 8009b24:	2000198c 	.word	0x2000198c
 8009b28:	20000c7c 	.word	0x20000c7c

08009b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b0a4      	sub	sp, #144	; 0x90
 8009b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009b32:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009b36:	2234      	movs	r2, #52	; 0x34
 8009b38:	2100      	movs	r1, #0
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f002 fcc6 	bl	800c4cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009b40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009b44:	2200      	movs	r2, #0
 8009b46:	601a      	str	r2, [r3, #0]
 8009b48:	605a      	str	r2, [r3, #4]
 8009b4a:	609a      	str	r2, [r3, #8]
 8009b4c:	60da      	str	r2, [r3, #12]
 8009b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009b50:	f107 030c 	add.w	r3, r7, #12
 8009b54:	223c      	movs	r2, #60	; 0x3c
 8009b56:	2100      	movs	r1, #0
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f002 fcb7 	bl	800c4cc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009b5e:	2300      	movs	r3, #0
 8009b60:	60bb      	str	r3, [r7, #8]
 8009b62:	4b33      	ldr	r3, [pc, #204]	; (8009c30 <SystemClock_Config+0x104>)
 8009b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b66:	4a32      	ldr	r2, [pc, #200]	; (8009c30 <SystemClock_Config+0x104>)
 8009b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8009b6e:	4b30      	ldr	r3, [pc, #192]	; (8009c30 <SystemClock_Config+0x104>)
 8009b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b76:	60bb      	str	r3, [r7, #8]
 8009b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	607b      	str	r3, [r7, #4]
 8009b7e:	4b2d      	ldr	r3, [pc, #180]	; (8009c34 <SystemClock_Config+0x108>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a2c      	ldr	r2, [pc, #176]	; (8009c34 <SystemClock_Config+0x108>)
 8009b84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b88:	6013      	str	r3, [r2, #0]
 8009b8a:	4b2a      	ldr	r3, [pc, #168]	; (8009c34 <SystemClock_Config+0x108>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009b92:	607b      	str	r3, [r7, #4]
 8009b94:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009b96:	2301      	movs	r3, #1
 8009b98:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009b9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009b9e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009ba0:	2302      	movs	r3, #2
 8009ba2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009ba4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009ba8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009baa:	2304      	movs	r3, #4
 8009bac:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8009bae:	2348      	movs	r3, #72	; 0x48
 8009bb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009bc6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7fb fa90 	bl	80050f0 <HAL_RCC_OscConfig>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d001      	beq.n	8009bda <SystemClock_Config+0xae>
  {
    Error_Handler();
 8009bd6:	f000 fe21 	bl	800a81c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009bda:	230f      	movs	r3, #15
 8009bdc:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009bde:	2302      	movs	r3, #2
 8009be0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009be2:	2300      	movs	r3, #0
 8009be4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009bec:	2300      	movs	r3, #0
 8009bee:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009bf0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009bf4:	2102      	movs	r1, #2
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7fa fd6a 	bl	80046d0 <HAL_RCC_ClockConfig>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d001      	beq.n	8009c06 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8009c02:	f000 fe0b 	bl	800a81c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_CLK48;
 8009c06:	2321      	movs	r3, #33	; 0x21
 8009c08:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_EXT;
 8009c0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c12:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009c14:	f107 030c 	add.w	r3, r7, #12
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7fa ff4b 	bl	8004ab4 <HAL_RCCEx_PeriphCLKConfig>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d001      	beq.n	8009c28 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8009c24:	f000 fdfa 	bl	800a81c <Error_Handler>
  }
}
 8009c28:	bf00      	nop
 8009c2a:	3790      	adds	r7, #144	; 0x90
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	40023800 	.word	0x40023800
 8009c34:	40007000 	.word	0x40007000

08009c38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009c3e:	463b      	mov	r3, r7
 8009c40:	2200      	movs	r2, #0
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	605a      	str	r2, [r3, #4]
 8009c46:	609a      	str	r2, [r3, #8]
 8009c48:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8009c4a:	4b21      	ldr	r3, [pc, #132]	; (8009cd0 <MX_ADC1_Init+0x98>)
 8009c4c:	4a21      	ldr	r2, [pc, #132]	; (8009cd4 <MX_ADC1_Init+0x9c>)
 8009c4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8009c50:	4b1f      	ldr	r3, [pc, #124]	; (8009cd0 <MX_ADC1_Init+0x98>)
 8009c52:	2200      	movs	r2, #0
 8009c54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009c56:	4b1e      	ldr	r3, [pc, #120]	; (8009cd0 <MX_ADC1_Init+0x98>)
 8009c58:	2200      	movs	r2, #0
 8009c5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8009c5c:	4b1c      	ldr	r3, [pc, #112]	; (8009cd0 <MX_ADC1_Init+0x98>)
 8009c5e:	2200      	movs	r2, #0
 8009c60:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8009c62:	4b1b      	ldr	r3, [pc, #108]	; (8009cd0 <MX_ADC1_Init+0x98>)
 8009c64:	2200      	movs	r2, #0
 8009c66:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009c68:	4b19      	ldr	r3, [pc, #100]	; (8009cd0 <MX_ADC1_Init+0x98>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009c70:	4b17      	ldr	r3, [pc, #92]	; (8009cd0 <MX_ADC1_Init+0x98>)
 8009c72:	2200      	movs	r2, #0
 8009c74:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009c76:	4b16      	ldr	r3, [pc, #88]	; (8009cd0 <MX_ADC1_Init+0x98>)
 8009c78:	4a17      	ldr	r2, [pc, #92]	; (8009cd8 <MX_ADC1_Init+0xa0>)
 8009c7a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009c7c:	4b14      	ldr	r3, [pc, #80]	; (8009cd0 <MX_ADC1_Init+0x98>)
 8009c7e:	2200      	movs	r2, #0
 8009c80:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8009c82:	4b13      	ldr	r3, [pc, #76]	; (8009cd0 <MX_ADC1_Init+0x98>)
 8009c84:	2201      	movs	r2, #1
 8009c86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8009c88:	4b11      	ldr	r3, [pc, #68]	; (8009cd0 <MX_ADC1_Init+0x98>)
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009c90:	4b0f      	ldr	r3, [pc, #60]	; (8009cd0 <MX_ADC1_Init+0x98>)
 8009c92:	2201      	movs	r2, #1
 8009c94:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009c96:	480e      	ldr	r0, [pc, #56]	; (8009cd0 <MX_ADC1_Init+0x98>)
 8009c98:	f7f6 fd1e 	bl	80006d8 <HAL_ADC_Init>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d001      	beq.n	8009ca6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8009ca2:	f000 fdbb 	bl	800a81c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8009ca6:	2309      	movs	r3, #9
 8009ca8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8009caa:	2301      	movs	r3, #1
 8009cac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009cb2:	463b      	mov	r3, r7
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	4806      	ldr	r0, [pc, #24]	; (8009cd0 <MX_ADC1_Init+0x98>)
 8009cb8:	f7f6 fe8a 	bl	80009d0 <HAL_ADC_ConfigChannel>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d001      	beq.n	8009cc6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8009cc2:	f000 fdab 	bl	800a81c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8009cc6:	bf00      	nop
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	20000f30 	.word	0x20000f30
 8009cd4:	40012000 	.word	0x40012000
 8009cd8:	0f000001 	.word	0x0f000001

08009cdc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009ce0:	4b12      	ldr	r3, [pc, #72]	; (8009d2c <MX_I2C1_Init+0x50>)
 8009ce2:	4a13      	ldr	r2, [pc, #76]	; (8009d30 <MX_I2C1_Init+0x54>)
 8009ce4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8009ce6:	4b11      	ldr	r3, [pc, #68]	; (8009d2c <MX_I2C1_Init+0x50>)
 8009ce8:	4a12      	ldr	r2, [pc, #72]	; (8009d34 <MX_I2C1_Init+0x58>)
 8009cea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009cec:	4b0f      	ldr	r3, [pc, #60]	; (8009d2c <MX_I2C1_Init+0x50>)
 8009cee:	2200      	movs	r2, #0
 8009cf0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8009cf2:	4b0e      	ldr	r3, [pc, #56]	; (8009d2c <MX_I2C1_Init+0x50>)
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009cf8:	4b0c      	ldr	r3, [pc, #48]	; (8009d2c <MX_I2C1_Init+0x50>)
 8009cfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009cfe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009d00:	4b0a      	ldr	r3, [pc, #40]	; (8009d2c <MX_I2C1_Init+0x50>)
 8009d02:	2200      	movs	r2, #0
 8009d04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009d06:	4b09      	ldr	r3, [pc, #36]	; (8009d2c <MX_I2C1_Init+0x50>)
 8009d08:	2200      	movs	r2, #0
 8009d0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009d0c:	4b07      	ldr	r3, [pc, #28]	; (8009d2c <MX_I2C1_Init+0x50>)
 8009d0e:	2200      	movs	r2, #0
 8009d10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009d12:	4b06      	ldr	r3, [pc, #24]	; (8009d2c <MX_I2C1_Init+0x50>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009d18:	4804      	ldr	r0, [pc, #16]	; (8009d2c <MX_I2C1_Init+0x50>)
 8009d1a:	f7f7 febb 	bl	8001a94 <HAL_I2C_Init>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8009d24:	f000 fd7a 	bl	800a81c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009d28:	bf00      	nop
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	20000c80 	.word	0x20000c80
 8009d30:	40005400 	.word	0x40005400
 8009d34:	000186a0 	.word	0x000186a0

08009d38 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8009d3c:	4b12      	ldr	r3, [pc, #72]	; (8009d88 <MX_I2C3_Init+0x50>)
 8009d3e:	4a13      	ldr	r2, [pc, #76]	; (8009d8c <MX_I2C3_Init+0x54>)
 8009d40:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8009d42:	4b11      	ldr	r3, [pc, #68]	; (8009d88 <MX_I2C3_Init+0x50>)
 8009d44:	4a12      	ldr	r2, [pc, #72]	; (8009d90 <MX_I2C3_Init+0x58>)
 8009d46:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009d48:	4b0f      	ldr	r3, [pc, #60]	; (8009d88 <MX_I2C3_Init+0x50>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8009d4e:	4b0e      	ldr	r3, [pc, #56]	; (8009d88 <MX_I2C3_Init+0x50>)
 8009d50:	2200      	movs	r2, #0
 8009d52:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009d54:	4b0c      	ldr	r3, [pc, #48]	; (8009d88 <MX_I2C3_Init+0x50>)
 8009d56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009d5a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009d5c:	4b0a      	ldr	r3, [pc, #40]	; (8009d88 <MX_I2C3_Init+0x50>)
 8009d5e:	2200      	movs	r2, #0
 8009d60:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8009d62:	4b09      	ldr	r3, [pc, #36]	; (8009d88 <MX_I2C3_Init+0x50>)
 8009d64:	2200      	movs	r2, #0
 8009d66:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009d68:	4b07      	ldr	r3, [pc, #28]	; (8009d88 <MX_I2C3_Init+0x50>)
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009d6e:	4b06      	ldr	r3, [pc, #24]	; (8009d88 <MX_I2C3_Init+0x50>)
 8009d70:	2200      	movs	r2, #0
 8009d72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8009d74:	4804      	ldr	r0, [pc, #16]	; (8009d88 <MX_I2C3_Init+0x50>)
 8009d76:	f7f7 fe8d 	bl	8001a94 <HAL_I2C_Init>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d001      	beq.n	8009d84 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8009d80:	f000 fd4c 	bl	800a81c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8009d84:	bf00      	nop
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	20000be8 	.word	0x20000be8
 8009d8c:	40005c00 	.word	0x40005c00
 8009d90:	000186a0 	.word	0x000186a0

08009d94 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8009d98:	4b12      	ldr	r3, [pc, #72]	; (8009de4 <MX_I2S2_Init+0x50>)
 8009d9a:	4a13      	ldr	r2, [pc, #76]	; (8009de8 <MX_I2S2_Init+0x54>)
 8009d9c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_SLAVE_TX;
 8009d9e:	4b11      	ldr	r3, [pc, #68]	; (8009de4 <MX_I2S2_Init+0x50>)
 8009da0:	2200      	movs	r2, #0
 8009da2:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8009da4:	4b0f      	ldr	r3, [pc, #60]	; (8009de4 <MX_I2S2_Init+0x50>)
 8009da6:	2210      	movs	r2, #16
 8009da8:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8009daa:	4b0e      	ldr	r3, [pc, #56]	; (8009de4 <MX_I2S2_Init+0x50>)
 8009dac:	2201      	movs	r2, #1
 8009dae:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8009db0:	4b0c      	ldr	r3, [pc, #48]	; (8009de4 <MX_I2S2_Init+0x50>)
 8009db2:	2200      	movs	r2, #0
 8009db4:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8009db6:	4b0b      	ldr	r3, [pc, #44]	; (8009de4 <MX_I2S2_Init+0x50>)
 8009db8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8009dbc:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8009dbe:	4b09      	ldr	r3, [pc, #36]	; (8009de4 <MX_I2S2_Init+0x50>)
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_EXTERNAL;
 8009dc4:	4b07      	ldr	r3, [pc, #28]	; (8009de4 <MX_I2S2_Init+0x50>)
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8009dca:	4b06      	ldr	r3, [pc, #24]	; (8009de4 <MX_I2S2_Init+0x50>)
 8009dcc:	2201      	movs	r2, #1
 8009dce:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8009dd0:	4804      	ldr	r0, [pc, #16]	; (8009de4 <MX_I2S2_Init+0x50>)
 8009dd2:	f7f8 faaf 	bl	8002334 <HAL_I2S_Init>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d001      	beq.n	8009de0 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8009ddc:	f000 fd1e 	bl	800a81c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8009de0:	bf00      	nop
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	20001bd4 	.word	0x20001bd4
 8009de8:	40003800 	.word	0x40003800

08009dec <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8009df0:	4b06      	ldr	r3, [pc, #24]	; (8009e0c <MX_RNG_Init+0x20>)
 8009df2:	4a07      	ldr	r2, [pc, #28]	; (8009e10 <MX_RNG_Init+0x24>)
 8009df4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8009df6:	4805      	ldr	r0, [pc, #20]	; (8009e0c <MX_RNG_Init+0x20>)
 8009df8:	f7fb fbbc 	bl	8005574 <HAL_RNG_Init>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d001      	beq.n	8009e06 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8009e02:	f000 fd0b 	bl	800a81c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8009e06:	bf00      	nop
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	20001910 	.word	0x20001910
 8009e10:	50060800 	.word	0x50060800

08009e14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b08c      	sub	sp, #48	; 0x30
 8009e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009e1a:	f107 030c 	add.w	r3, r7, #12
 8009e1e:	2224      	movs	r2, #36	; 0x24
 8009e20:	2100      	movs	r1, #0
 8009e22:	4618      	mov	r0, r3
 8009e24:	f002 fb52 	bl	800c4cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009e28:	1d3b      	adds	r3, r7, #4
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	601a      	str	r2, [r3, #0]
 8009e2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009e30:	4b20      	ldr	r3, [pc, #128]	; (8009eb4 <MX_TIM3_Init+0xa0>)
 8009e32:	4a21      	ldr	r2, [pc, #132]	; (8009eb8 <MX_TIM3_Init+0xa4>)
 8009e34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8009e36:	4b1f      	ldr	r3, [pc, #124]	; (8009eb4 <MX_TIM3_Init+0xa0>)
 8009e38:	2200      	movs	r2, #0
 8009e3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009e3c:	4b1d      	ldr	r3, [pc, #116]	; (8009eb4 <MX_TIM3_Init+0xa0>)
 8009e3e:	2200      	movs	r2, #0
 8009e40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8009e42:	4b1c      	ldr	r3, [pc, #112]	; (8009eb4 <MX_TIM3_Init+0xa0>)
 8009e44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009e4a:	4b1a      	ldr	r3, [pc, #104]	; (8009eb4 <MX_TIM3_Init+0xa0>)
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009e50:	4b18      	ldr	r3, [pc, #96]	; (8009eb4 <MX_TIM3_Init+0xa0>)
 8009e52:	2200      	movs	r2, #0
 8009e54:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8009e56:	2301      	movs	r3, #1
 8009e58:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009e62:	2300      	movs	r3, #0
 8009e64:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8009e66:	230a      	movs	r3, #10
 8009e68:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009e72:	2300      	movs	r3, #0
 8009e74:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8009e76:	230a      	movs	r3, #10
 8009e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8009e7a:	f107 030c 	add.w	r3, r7, #12
 8009e7e:	4619      	mov	r1, r3
 8009e80:	480c      	ldr	r0, [pc, #48]	; (8009eb4 <MX_TIM3_Init+0xa0>)
 8009e82:	f7fb fc0c 	bl	800569e <HAL_TIM_Encoder_Init>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d001      	beq.n	8009e90 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8009e8c:	f000 fcc6 	bl	800a81c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009e90:	2300      	movs	r3, #0
 8009e92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009e94:	2300      	movs	r3, #0
 8009e96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009e98:	1d3b      	adds	r3, r7, #4
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	4805      	ldr	r0, [pc, #20]	; (8009eb4 <MX_TIM3_Init+0xa0>)
 8009e9e:	f7fb fd8d 	bl	80059bc <HAL_TIMEx_MasterConfigSynchronization>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d001      	beq.n	8009eac <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8009ea8:	f000 fcb8 	bl	800a81c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8009eac:	bf00      	nop
 8009eae:	3730      	adds	r7, #48	; 0x30
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	20000ef0 	.word	0x20000ef0
 8009eb8:	40000400 	.word	0x40000400

08009ebc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b08c      	sub	sp, #48	; 0x30
 8009ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009ec2:	f107 030c 	add.w	r3, r7, #12
 8009ec6:	2224      	movs	r2, #36	; 0x24
 8009ec8:	2100      	movs	r1, #0
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f002 fafe 	bl	800c4cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ed0:	1d3b      	adds	r3, r7, #4
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	601a      	str	r2, [r3, #0]
 8009ed6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8009ed8:	4b20      	ldr	r3, [pc, #128]	; (8009f5c <MX_TIM4_Init+0xa0>)
 8009eda:	4a21      	ldr	r2, [pc, #132]	; (8009f60 <MX_TIM4_Init+0xa4>)
 8009edc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8009ede:	4b1f      	ldr	r3, [pc, #124]	; (8009f5c <MX_TIM4_Init+0xa0>)
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009ee4:	4b1d      	ldr	r3, [pc, #116]	; (8009f5c <MX_TIM4_Init+0xa0>)
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8009eea:	4b1c      	ldr	r3, [pc, #112]	; (8009f5c <MX_TIM4_Init+0xa0>)
 8009eec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ef0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009ef2:	4b1a      	ldr	r3, [pc, #104]	; (8009f5c <MX_TIM4_Init+0xa0>)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009ef8:	4b18      	ldr	r3, [pc, #96]	; (8009f5c <MX_TIM4_Init+0xa0>)
 8009efa:	2200      	movs	r2, #0
 8009efc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8009efe:	2301      	movs	r3, #1
 8009f00:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009f02:	2300      	movs	r3, #0
 8009f04:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009f06:	2301      	movs	r3, #1
 8009f08:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8009f0e:	230a      	movs	r3, #10
 8009f10:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009f12:	2300      	movs	r3, #0
 8009f14:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009f16:	2301      	movs	r3, #1
 8009f18:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8009f1e:	230a      	movs	r3, #10
 8009f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8009f22:	f107 030c 	add.w	r3, r7, #12
 8009f26:	4619      	mov	r1, r3
 8009f28:	480c      	ldr	r0, [pc, #48]	; (8009f5c <MX_TIM4_Init+0xa0>)
 8009f2a:	f7fb fbb8 	bl	800569e <HAL_TIM_Encoder_Init>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d001      	beq.n	8009f38 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8009f34:	f000 fc72 	bl	800a81c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009f40:	1d3b      	adds	r3, r7, #4
 8009f42:	4619      	mov	r1, r3
 8009f44:	4805      	ldr	r0, [pc, #20]	; (8009f5c <MX_TIM4_Init+0xa0>)
 8009f46:	f7fb fd39 	bl	80059bc <HAL_TIMEx_MasterConfigSynchronization>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d001      	beq.n	8009f54 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8009f50:	f000 fc64 	bl	800a81c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8009f54:	bf00      	nop
 8009f56:	3730      	adds	r7, #48	; 0x30
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	20000c3c 	.word	0x20000c3c
 8009f60:	40000800 	.word	0x40000800

08009f64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009f68:	4b11      	ldr	r3, [pc, #68]	; (8009fb0 <MX_USART1_UART_Init+0x4c>)
 8009f6a:	4a12      	ldr	r2, [pc, #72]	; (8009fb4 <MX_USART1_UART_Init+0x50>)
 8009f6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009f6e:	4b10      	ldr	r3, [pc, #64]	; (8009fb0 <MX_USART1_UART_Init+0x4c>)
 8009f70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009f74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009f76:	4b0e      	ldr	r3, [pc, #56]	; (8009fb0 <MX_USART1_UART_Init+0x4c>)
 8009f78:	2200      	movs	r2, #0
 8009f7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009f7c:	4b0c      	ldr	r3, [pc, #48]	; (8009fb0 <MX_USART1_UART_Init+0x4c>)
 8009f7e:	2200      	movs	r2, #0
 8009f80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009f82:	4b0b      	ldr	r3, [pc, #44]	; (8009fb0 <MX_USART1_UART_Init+0x4c>)
 8009f84:	2200      	movs	r2, #0
 8009f86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009f88:	4b09      	ldr	r3, [pc, #36]	; (8009fb0 <MX_USART1_UART_Init+0x4c>)
 8009f8a:	220c      	movs	r2, #12
 8009f8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009f8e:	4b08      	ldr	r3, [pc, #32]	; (8009fb0 <MX_USART1_UART_Init+0x4c>)
 8009f90:	2200      	movs	r2, #0
 8009f92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009f94:	4b06      	ldr	r3, [pc, #24]	; (8009fb0 <MX_USART1_UART_Init+0x4c>)
 8009f96:	2200      	movs	r2, #0
 8009f98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009f9a:	4805      	ldr	r0, [pc, #20]	; (8009fb0 <MX_USART1_UART_Init+0x4c>)
 8009f9c:	f7fb fd8a 	bl	8005ab4 <HAL_UART_Init>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d001      	beq.n	8009faa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009fa6:	f000 fc39 	bl	800a81c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009faa:	bf00      	nop
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	20001658 	.word	0x20001658
 8009fb4:	40011000 	.word	0x40011000

08009fb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	607b      	str	r3, [r7, #4]
 8009fc2:	4b10      	ldr	r3, [pc, #64]	; (800a004 <MX_DMA_Init+0x4c>)
 8009fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fc6:	4a0f      	ldr	r2, [pc, #60]	; (800a004 <MX_DMA_Init+0x4c>)
 8009fc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8009fce:	4b0d      	ldr	r3, [pc, #52]	; (800a004 <MX_DMA_Init+0x4c>)
 8009fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009fd6:	607b      	str	r3, [r7, #4]
 8009fd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8009fda:	2200      	movs	r2, #0
 8009fdc:	2100      	movs	r1, #0
 8009fde:	200e      	movs	r0, #14
 8009fe0:	f7f6 ffef 	bl	8000fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8009fe4:	200e      	movs	r0, #14
 8009fe6:	f7f7 f808 	bl	8000ffa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8009fea:	2200      	movs	r2, #0
 8009fec:	2100      	movs	r1, #0
 8009fee:	200f      	movs	r0, #15
 8009ff0:	f7f6 ffe7 	bl	8000fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8009ff4:	200f      	movs	r0, #15
 8009ff6:	f7f7 f800 	bl	8000ffa <HAL_NVIC_EnableIRQ>

}
 8009ffa:	bf00      	nop
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	40023800 	.word	0x40023800

0800a008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b08a      	sub	sp, #40	; 0x28
 800a00c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a00e:	f107 0314 	add.w	r3, r7, #20
 800a012:	2200      	movs	r2, #0
 800a014:	601a      	str	r2, [r3, #0]
 800a016:	605a      	str	r2, [r3, #4]
 800a018:	609a      	str	r2, [r3, #8]
 800a01a:	60da      	str	r2, [r3, #12]
 800a01c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a01e:	2300      	movs	r3, #0
 800a020:	613b      	str	r3, [r7, #16]
 800a022:	4b7c      	ldr	r3, [pc, #496]	; (800a214 <MX_GPIO_Init+0x20c>)
 800a024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a026:	4a7b      	ldr	r2, [pc, #492]	; (800a214 <MX_GPIO_Init+0x20c>)
 800a028:	f043 0304 	orr.w	r3, r3, #4
 800a02c:	6313      	str	r3, [r2, #48]	; 0x30
 800a02e:	4b79      	ldr	r3, [pc, #484]	; (800a214 <MX_GPIO_Init+0x20c>)
 800a030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a032:	f003 0304 	and.w	r3, r3, #4
 800a036:	613b      	str	r3, [r7, #16]
 800a038:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a03a:	2300      	movs	r3, #0
 800a03c:	60fb      	str	r3, [r7, #12]
 800a03e:	4b75      	ldr	r3, [pc, #468]	; (800a214 <MX_GPIO_Init+0x20c>)
 800a040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a042:	4a74      	ldr	r2, [pc, #464]	; (800a214 <MX_GPIO_Init+0x20c>)
 800a044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a048:	6313      	str	r3, [r2, #48]	; 0x30
 800a04a:	4b72      	ldr	r3, [pc, #456]	; (800a214 <MX_GPIO_Init+0x20c>)
 800a04c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a04e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a052:	60fb      	str	r3, [r7, #12]
 800a054:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a056:	2300      	movs	r3, #0
 800a058:	60bb      	str	r3, [r7, #8]
 800a05a:	4b6e      	ldr	r3, [pc, #440]	; (800a214 <MX_GPIO_Init+0x20c>)
 800a05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a05e:	4a6d      	ldr	r2, [pc, #436]	; (800a214 <MX_GPIO_Init+0x20c>)
 800a060:	f043 0301 	orr.w	r3, r3, #1
 800a064:	6313      	str	r3, [r2, #48]	; 0x30
 800a066:	4b6b      	ldr	r3, [pc, #428]	; (800a214 <MX_GPIO_Init+0x20c>)
 800a068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a06a:	f003 0301 	and.w	r3, r3, #1
 800a06e:	60bb      	str	r3, [r7, #8]
 800a070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a072:	2300      	movs	r3, #0
 800a074:	607b      	str	r3, [r7, #4]
 800a076:	4b67      	ldr	r3, [pc, #412]	; (800a214 <MX_GPIO_Init+0x20c>)
 800a078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a07a:	4a66      	ldr	r2, [pc, #408]	; (800a214 <MX_GPIO_Init+0x20c>)
 800a07c:	f043 0302 	orr.w	r3, r3, #2
 800a080:	6313      	str	r3, [r2, #48]	; 0x30
 800a082:	4b64      	ldr	r3, [pc, #400]	; (800a214 <MX_GPIO_Init+0x20c>)
 800a084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a086:	f003 0302 	and.w	r3, r3, #2
 800a08a:	607b      	str	r3, [r7, #4]
 800a08c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a08e:	2300      	movs	r3, #0
 800a090:	603b      	str	r3, [r7, #0]
 800a092:	4b60      	ldr	r3, [pc, #384]	; (800a214 <MX_GPIO_Init+0x20c>)
 800a094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a096:	4a5f      	ldr	r2, [pc, #380]	; (800a214 <MX_GPIO_Init+0x20c>)
 800a098:	f043 0308 	orr.w	r3, r3, #8
 800a09c:	6313      	str	r3, [r2, #48]	; 0x30
 800a09e:	4b5d      	ldr	r3, [pc, #372]	; (800a214 <MX_GPIO_Init+0x20c>)
 800a0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0a2:	f003 0308 	and.w	r3, r3, #8
 800a0a6:	603b      	str	r3, [r7, #0]
 800a0a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SET_LIN_Pin|LED1_Pin, GPIO_PIN_RESET);
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 800a0b0:	4859      	ldr	r0, [pc, #356]	; (800a218 <MX_GPIO_Init+0x210>)
 800a0b2:	f7f7 fcbd 	bl	8001a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SET_I_LIM_Pin|LED2_Pin, GPIO_PIN_RESET);
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800a0bc:	4857      	ldr	r0, [pc, #348]	; (800a21c <MX_GPIO_Init+0x214>)
 800a0be:	f7f7 fcb7 	bl	8001a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SET_BOOT0_GPIO_Port, SET_BOOT0_Pin, GPIO_PIN_RESET);
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	2104      	movs	r1, #4
 800a0c6:	4856      	ldr	r0, [pc, #344]	; (800a220 <MX_GPIO_Init+0x218>)
 800a0c8:	f7f7 fcb2 	bl	8001a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SET_LIN_Pin LED1_Pin */
  GPIO_InitStruct.Pin = SET_LIN_Pin|LED1_Pin;
 800a0cc:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 800a0d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a0de:	f107 0314 	add.w	r3, r7, #20
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	484c      	ldr	r0, [pc, #304]	; (800a218 <MX_GPIO_Init+0x210>)
 800a0e6:	f7f7 fb11 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : DTC_LIN_Pin DTC_MIC_Pin */
  GPIO_InitStruct.Pin = DTC_LIN_Pin|DTC_MIC_Pin;
 800a0ea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800a0ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800a0f0:	4b4c      	ldr	r3, [pc, #304]	; (800a224 <MX_GPIO_Init+0x21c>)
 800a0f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a0f8:	f107 0314 	add.w	r3, r7, #20
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	4846      	ldr	r0, [pc, #280]	; (800a218 <MX_GPIO_Init+0x210>)
 800a100:	f7f7 fb04 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : DTC_HP_Pin DTC_LOUT_Pin */
  GPIO_InitStruct.Pin = DTC_HP_Pin|DTC_LOUT_Pin;
 800a104:	2303      	movs	r3, #3
 800a106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a108:	2300      	movs	r3, #0
 800a10a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a10c:	2300      	movs	r3, #0
 800a10e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a110:	f107 0314 	add.w	r3, r7, #20
 800a114:	4619      	mov	r1, r3
 800a116:	4840      	ldr	r0, [pc, #256]	; (800a218 <MX_GPIO_Init+0x210>)
 800a118:	f7f7 faf8 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 800a11c:	2303      	movs	r3, #3
 800a11e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a120:	4b41      	ldr	r3, [pc, #260]	; (800a228 <MX_GPIO_Init+0x220>)
 800a122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a124:	2300      	movs	r3, #0
 800a126:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a128:	f107 0314 	add.w	r3, r7, #20
 800a12c:	4619      	mov	r1, r3
 800a12e:	483f      	ldr	r0, [pc, #252]	; (800a22c <MX_GPIO_Init+0x224>)
 800a130:	f7f7 faec 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a134:	2304      	movs	r3, #4
 800a136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a138:	2302      	movs	r3, #2
 800a13a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a13c:	2300      	movs	r3, #0
 800a13e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a140:	2300      	movs	r3, #0
 800a142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a144:	2305      	movs	r3, #5
 800a146:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a148:	f107 0314 	add.w	r3, r7, #20
 800a14c:	4619      	mov	r1, r3
 800a14e:	4837      	ldr	r0, [pc, #220]	; (800a22c <MX_GPIO_Init+0x224>)
 800a150:	f7f7 fadc 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800a154:	2304      	movs	r3, #4
 800a156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a158:	2300      	movs	r3, #0
 800a15a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a15c:	2300      	movs	r3, #0
 800a15e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800a160:	f107 0314 	add.w	r3, r7, #20
 800a164:	4619      	mov	r1, r3
 800a166:	482d      	ldr	r0, [pc, #180]	; (800a21c <MX_GPIO_Init+0x214>)
 800a168:	f7f7 fad0 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_ENC2_Pin */
  GPIO_InitStruct.Pin = BTN_ENC2_Pin;
 800a16c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a172:	4b2d      	ldr	r3, [pc, #180]	; (800a228 <MX_GPIO_Init+0x220>)
 800a174:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a176:	2300      	movs	r3, #0
 800a178:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_ENC2_GPIO_Port, &GPIO_InitStruct);
 800a17a:	f107 0314 	add.w	r3, r7, #20
 800a17e:	4619      	mov	r1, r3
 800a180:	4826      	ldr	r0, [pc, #152]	; (800a21c <MX_GPIO_Init+0x214>)
 800a182:	f7f7 fac3 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : SET_I_LIM_Pin LED2_Pin */
  GPIO_InitStruct.Pin = SET_I_LIM_Pin|LED2_Pin;
 800a186:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800a18a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a18c:	2301      	movs	r3, #1
 800a18e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a190:	2300      	movs	r3, #0
 800a192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a194:	2300      	movs	r3, #0
 800a196:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a198:	f107 0314 	add.w	r3, r7, #20
 800a19c:	4619      	mov	r1, r3
 800a19e:	481f      	ldr	r0, [pc, #124]	; (800a21c <MX_GPIO_Init+0x214>)
 800a1a0:	f7f7 fab4 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_ENC1_Pin */
  GPIO_InitStruct.Pin = BTN_ENC1_Pin;
 800a1a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a1aa:	4b1f      	ldr	r3, [pc, #124]	; (800a228 <MX_GPIO_Init+0x220>)
 800a1ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_ENC1_GPIO_Port, &GPIO_InitStruct);
 800a1b2:	f107 0314 	add.w	r3, r7, #20
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	4817      	ldr	r0, [pc, #92]	; (800a218 <MX_GPIO_Init+0x210>)
 800a1ba:	f7f7 faa7 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : SET_BOOT0_Pin */
  GPIO_InitStruct.Pin = SET_BOOT0_Pin;
 800a1be:	2304      	movs	r3, #4
 800a1c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SET_BOOT0_GPIO_Port, &GPIO_InitStruct);
 800a1ce:	f107 0314 	add.w	r3, r7, #20
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	4812      	ldr	r0, [pc, #72]	; (800a220 <MX_GPIO_Init+0x218>)
 800a1d6:	f7f7 fa99 	bl	800170c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800a1da:	2200      	movs	r2, #0
 800a1dc:	2100      	movs	r1, #0
 800a1de:	2006      	movs	r0, #6
 800a1e0:	f7f6 feef 	bl	8000fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800a1e4:	2006      	movs	r0, #6
 800a1e6:	f7f6 ff08 	bl	8000ffa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	2007      	movs	r0, #7
 800a1f0:	f7f6 fee7 	bl	8000fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800a1f4:	2007      	movs	r0, #7
 800a1f6:	f7f6 ff00 	bl	8000ffa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	2028      	movs	r0, #40	; 0x28
 800a200:	f7f6 fedf 	bl	8000fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a204:	2028      	movs	r0, #40	; 0x28
 800a206:	f7f6 fef8 	bl	8000ffa <HAL_NVIC_EnableIRQ>

}
 800a20a:	bf00      	nop
 800a20c:	3728      	adds	r7, #40	; 0x28
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	40023800 	.word	0x40023800
 800a218:	40020800 	.word	0x40020800
 800a21c:	40020400 	.word	0x40020400
 800a220:	40020c00 	.word	0x40020c00
 800a224:	10310000 	.word	0x10310000
 800a228:	10110000 	.word	0x10110000
 800a22c:	40020000 	.word	0x40020000

0800a230 <showFX>:
/**
  * @brief Display the current state effect struct
  * @retval None
	*	@param fx: pointer to the effect's struct
  */
void showFX(effect *fx){
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af02      	add	r7, sp, #8
 800a236:	6078      	str	r0, [r7, #4]
	/*direct the pointers to the currently displayed effect struct*/
	para0=&(*fx).par0;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	3314      	adds	r3, #20
 800a23c:	4a82      	ldr	r2, [pc, #520]	; (800a448 <showFX+0x218>)
 800a23e:	6013      	str	r3, [r2, #0]
	para1=&(*fx).par1;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	334c      	adds	r3, #76	; 0x4c
 800a244:	4a81      	ldr	r2, [pc, #516]	; (800a44c <showFX+0x21c>)
 800a246:	6013      	str	r3, [r2, #0]
	para2=&(*fx).par2;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	3384      	adds	r3, #132	; 0x84
 800a24c:	4a80      	ldr	r2, [pc, #512]	; (800a450 <showFX+0x220>)
 800a24e:	6013      	str	r3, [r2, #0]
	para3=&(*fx).par3;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	33bc      	adds	r3, #188	; 0xbc
 800a254:	4a7f      	ldr	r2, [pc, #508]	; (800a454 <showFX+0x224>)
 800a256:	6013      	str	r3, [r2, #0]

	/****************************************
	 * Draw the left display
	 ***************************************/

	if(state_crrnt!=0){
 800a258:	4b7f      	ldr	r3, [pc, #508]	; (800a458 <showFX+0x228>)
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d02d      	beq.n	800a2bc <showFX+0x8c>
    // draw the left arrow
		ssd1306_SetCursor(&holedL, 2, 23);
 800a260:	2217      	movs	r2, #23
 800a262:	2102      	movs	r1, #2
 800a264:	487d      	ldr	r0, [pc, #500]	; (800a45c <showFX+0x22c>)
 800a266:	f000 fda7 	bl	800adb8 <ssd1306_SetCursor>
		ssd1306_WriteString(&holedL, "<", Font_11x18, White);
 800a26a:	4b7d      	ldr	r3, [pc, #500]	; (800a460 <showFX+0x230>)
 800a26c:	2201      	movs	r2, #1
 800a26e:	9200      	str	r2, [sp, #0]
 800a270:	cb0c      	ldmia	r3, {r2, r3}
 800a272:	497c      	ldr	r1, [pc, #496]	; (800a464 <showFX+0x234>)
 800a274:	4879      	ldr	r0, [pc, #484]	; (800a45c <showFX+0x22c>)
 800a276:	f000 fd77 	bl	800ad68 <ssd1306_WriteString>
		ssd1306_DrawHLine(&holedL,0,13,23,White);
 800a27a:	2301      	movs	r3, #1
 800a27c:	9300      	str	r3, [sp, #0]
 800a27e:	2317      	movs	r3, #23
 800a280:	220d      	movs	r2, #13
 800a282:	2100      	movs	r1, #0
 800a284:	4875      	ldr	r0, [pc, #468]	; (800a45c <showFX+0x22c>)
 800a286:	f000 fdc5 	bl	800ae14 <ssd1306_DrawHLine>
		ssd1306_DrawVLine(&holedL,13,23,40,White);
 800a28a:	2301      	movs	r3, #1
 800a28c:	9300      	str	r3, [sp, #0]
 800a28e:	2328      	movs	r3, #40	; 0x28
 800a290:	2217      	movs	r2, #23
 800a292:	210d      	movs	r1, #13
 800a294:	4871      	ldr	r0, [pc, #452]	; (800a45c <showFX+0x22c>)
 800a296:	f000 fdfd 	bl	800ae94 <ssd1306_DrawVLine>
		ssd1306_DrawHLine(&holedL,0,13,40,White);
 800a29a:	2301      	movs	r3, #1
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	2328      	movs	r3, #40	; 0x28
 800a2a0:	220d      	movs	r2, #13
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	486d      	ldr	r0, [pc, #436]	; (800a45c <showFX+0x22c>)
 800a2a6:	f000 fdb5 	bl	800ae14 <ssd1306_DrawHLine>
		ssd1306_DrawVLine(&holedL,0,23,40,White);
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	9300      	str	r3, [sp, #0]
 800a2ae:	2328      	movs	r3, #40	; 0x28
 800a2b0:	2217      	movs	r2, #23
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	4869      	ldr	r0, [pc, #420]	; (800a45c <showFX+0x22c>)
 800a2b6:	f000 fded 	bl	800ae94 <ssd1306_DrawVLine>
 800a2ba:	e00c      	b.n	800a2d6 <showFX+0xa6>
	}else{
    // remove the left arrow
		ssd1306_SetCursor(&holedL, 0, 23);
 800a2bc:	2217      	movs	r2, #23
 800a2be:	2100      	movs	r1, #0
 800a2c0:	4866      	ldr	r0, [pc, #408]	; (800a45c <showFX+0x22c>)
 800a2c2:	f000 fd79 	bl	800adb8 <ssd1306_SetCursor>
		ssd1306_WriteString(&holedL, "  ", Font_11x18, White);
 800a2c6:	4b66      	ldr	r3, [pc, #408]	; (800a460 <showFX+0x230>)
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	9200      	str	r2, [sp, #0]
 800a2cc:	cb0c      	ldmia	r3, {r2, r3}
 800a2ce:	4966      	ldr	r1, [pc, #408]	; (800a468 <showFX+0x238>)
 800a2d0:	4862      	ldr	r0, [pc, #392]	; (800a45c <showFX+0x22c>)
 800a2d2:	f000 fd49 	bl	800ad68 <ssd1306_WriteString>
	}
	ssd1306_SetCursor(&holedL, 10, 0);
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	210a      	movs	r1, #10
 800a2da:	4860      	ldr	r0, [pc, #384]	; (800a45c <showFX+0x22c>)
 800a2dc:	f000 fd6c 	bl	800adb8 <ssd1306_SetCursor>
	if((*fx).par0.name[0]!= '\0'){
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	7d1b      	ldrb	r3, [r3, #20]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d014      	beq.n	800a312 <showFX+0xe2>
		sprintf(lcd_buf, "%s %5d %s",(*fx).par0.name, (*fx).par0.value, (*fx).par0.unit);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f103 0214 	add.w	r2, r3, #20
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	3338      	adds	r3, #56	; 0x38
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	495c      	ldr	r1, [pc, #368]	; (800a46c <showFX+0x23c>)
 800a2fc:	485c      	ldr	r0, [pc, #368]	; (800a470 <showFX+0x240>)
 800a2fe:	f002 f9d1 	bl	800c6a4 <siprintf>
		ssd1306_WriteString(&holedL, lcd_buf, Font_7x10, White);
 800a302:	4b5c      	ldr	r3, [pc, #368]	; (800a474 <showFX+0x244>)
 800a304:	2201      	movs	r2, #1
 800a306:	9200      	str	r2, [sp, #0]
 800a308:	cb0c      	ldmia	r3, {r2, r3}
 800a30a:	4959      	ldr	r1, [pc, #356]	; (800a470 <showFX+0x240>)
 800a30c:	4853      	ldr	r0, [pc, #332]	; (800a45c <showFX+0x22c>)
 800a30e:	f000 fd2b 	bl	800ad68 <ssd1306_WriteString>
	}

	ssd1306_SetCursor(&holedL, 10, 53);
 800a312:	2235      	movs	r2, #53	; 0x35
 800a314:	210a      	movs	r1, #10
 800a316:	4851      	ldr	r0, [pc, #324]	; (800a45c <showFX+0x22c>)
 800a318:	f000 fd4e 	bl	800adb8 <ssd1306_SetCursor>
	if((*fx).par1.name[0]!= '\0'){
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a322:	2b00      	cmp	r3, #0
 800a324:	d04e      	beq.n	800a3c4 <showFX+0x194>
		if(state_crrnt==IN){
 800a326:	4b4c      	ldr	r3, [pc, #304]	; (800a458 <showFX+0x228>)
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d135      	bne.n	800a39a <showFX+0x16a>
			char tmp[5];
			//check input state
			switch((*fx).par1.value){
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a332:	2b03      	cmp	r3, #3
 800a334:	d822      	bhi.n	800a37c <showFX+0x14c>
 800a336:	a201      	add	r2, pc, #4	; (adr r2, 800a33c <showFX+0x10c>)
 800a338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a33c:	0800a34d 	.word	0x0800a34d
 800a340:	0800a357 	.word	0x0800a357
 800a344:	0800a369 	.word	0x0800a369
 800a348:	0800a373 	.word	0x0800a373
				case 0:
					strcpy(tmp,"EXT");
 800a34c:	f107 0308 	add.w	r3, r7, #8
 800a350:	4a49      	ldr	r2, [pc, #292]	; (800a478 <showFX+0x248>)
 800a352:	601a      	str	r2, [r3, #0]
					break;
 800a354:	e013      	b.n	800a37e <showFX+0x14e>
				case 1:
					strcpy(tmp,"LINE");
 800a356:	4a49      	ldr	r2, [pc, #292]	; (800a47c <showFX+0x24c>)
 800a358:	f107 0308 	add.w	r3, r7, #8
 800a35c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a360:	6018      	str	r0, [r3, #0]
 800a362:	3304      	adds	r3, #4
 800a364:	7019      	strb	r1, [r3, #0]
					break;
 800a366:	e00a      	b.n	800a37e <showFX+0x14e>
				case 2:
					strcpy(tmp,"MIC");
 800a368:	f107 0308 	add.w	r3, r7, #8
 800a36c:	4a44      	ldr	r2, [pc, #272]	; (800a480 <showFX+0x250>)
 800a36e:	601a      	str	r2, [r3, #0]
					break;
 800a370:	e005      	b.n	800a37e <showFX+0x14e>
				case 3:
					strcpy(tmp,"USB");
 800a372:	f107 0308 	add.w	r3, r7, #8
 800a376:	4a43      	ldr	r2, [pc, #268]	; (800a484 <showFX+0x254>)
 800a378:	601a      	str	r2, [r3, #0]
					break;
 800a37a:	e000      	b.n	800a37e <showFX+0x14e>
				default:
					break;
 800a37c:	bf00      	nop
			}
			sprintf(lcd_buf, "%s %s %s",(*fx).par1.name, tmp, (*fx).par1.unit);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	3370      	adds	r3, #112	; 0x70
 800a388:	f107 0108 	add.w	r1, r7, #8
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	460b      	mov	r3, r1
 800a390:	493d      	ldr	r1, [pc, #244]	; (800a488 <showFX+0x258>)
 800a392:	4837      	ldr	r0, [pc, #220]	; (800a470 <showFX+0x240>)
 800a394:	f002 f986 	bl	800c6a4 <siprintf>
 800a398:	e00c      	b.n	800a3b4 <showFX+0x184>
		} else{
			sprintf(lcd_buf, "%s %1d %s",(*fx).par1.name, (*fx).par1.value, (*fx).par1.unit);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	3370      	adds	r3, #112	; 0x70
 800a3a8:	9300      	str	r3, [sp, #0]
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	4937      	ldr	r1, [pc, #220]	; (800a48c <showFX+0x25c>)
 800a3ae:	4830      	ldr	r0, [pc, #192]	; (800a470 <showFX+0x240>)
 800a3b0:	f002 f978 	bl	800c6a4 <siprintf>
		}
		ssd1306_WriteString(&holedL, lcd_buf, Font_7x10, White);
 800a3b4:	4b2f      	ldr	r3, [pc, #188]	; (800a474 <showFX+0x244>)
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	9200      	str	r2, [sp, #0]
 800a3ba:	cb0c      	ldmia	r3, {r2, r3}
 800a3bc:	492c      	ldr	r1, [pc, #176]	; (800a470 <showFX+0x240>)
 800a3be:	4827      	ldr	r0, [pc, #156]	; (800a45c <showFX+0x22c>)
 800a3c0:	f000 fcd2 	bl	800ad68 <ssd1306_WriteString>
	}
	ssd1306_SetCursor(&holedL, 30, 23);
 800a3c4:	2217      	movs	r2, #23
 800a3c6:	211e      	movs	r1, #30
 800a3c8:	4824      	ldr	r0, [pc, #144]	; (800a45c <showFX+0x22c>)
 800a3ca:	f000 fcf5 	bl	800adb8 <ssd1306_SetCursor>
	ssd1306_WriteString(&holedL, (*fx).title, Font_11x18, White);
 800a3ce:	6879      	ldr	r1, [r7, #4]
 800a3d0:	4b23      	ldr	r3, [pc, #140]	; (800a460 <showFX+0x230>)
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	9200      	str	r2, [sp, #0]
 800a3d6:	cb0c      	ldmia	r3, {r2, r3}
 800a3d8:	4820      	ldr	r0, [pc, #128]	; (800a45c <showFX+0x22c>)
 800a3da:	f000 fcc5 	bl	800ad68 <ssd1306_WriteString>
	ssd1306_UpdateScreen(&holedL);
 800a3de:	481f      	ldr	r0, [pc, #124]	; (800a45c <showFX+0x22c>)
 800a3e0:	f000 fb1a 	bl	800aa18 <ssd1306_UpdateScreen>

	/****************************************
	 * Draw the right display
	 ***************************************/

	if(state_crrnt!=CNT-1){
 800a3e4:	4b1c      	ldr	r3, [pc, #112]	; (800a458 <showFX+0x228>)
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d055      	beq.n	800a498 <showFX+0x268>
		//draw the right arrow
		ssd1306_SetCursor(&holedR, 116, 23);
 800a3ec:	2217      	movs	r2, #23
 800a3ee:	2174      	movs	r1, #116	; 0x74
 800a3f0:	4827      	ldr	r0, [pc, #156]	; (800a490 <showFX+0x260>)
 800a3f2:	f000 fce1 	bl	800adb8 <ssd1306_SetCursor>
		ssd1306_WriteString(&holedR, ">", Font_11x18, White);
 800a3f6:	4b1a      	ldr	r3, [pc, #104]	; (800a460 <showFX+0x230>)
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	9200      	str	r2, [sp, #0]
 800a3fc:	cb0c      	ldmia	r3, {r2, r3}
 800a3fe:	4925      	ldr	r1, [pc, #148]	; (800a494 <showFX+0x264>)
 800a400:	4823      	ldr	r0, [pc, #140]	; (800a490 <showFX+0x260>)
 800a402:	f000 fcb1 	bl	800ad68 <ssd1306_WriteString>
		ssd1306_DrawHLine(&holedR,114,127,23,White);
 800a406:	2301      	movs	r3, #1
 800a408:	9300      	str	r3, [sp, #0]
 800a40a:	2317      	movs	r3, #23
 800a40c:	227f      	movs	r2, #127	; 0x7f
 800a40e:	2172      	movs	r1, #114	; 0x72
 800a410:	481f      	ldr	r0, [pc, #124]	; (800a490 <showFX+0x260>)
 800a412:	f000 fcff 	bl	800ae14 <ssd1306_DrawHLine>
		ssd1306_DrawVLine(&holedR,114,23,40,White);
 800a416:	2301      	movs	r3, #1
 800a418:	9300      	str	r3, [sp, #0]
 800a41a:	2328      	movs	r3, #40	; 0x28
 800a41c:	2217      	movs	r2, #23
 800a41e:	2172      	movs	r1, #114	; 0x72
 800a420:	481b      	ldr	r0, [pc, #108]	; (800a490 <showFX+0x260>)
 800a422:	f000 fd37 	bl	800ae94 <ssd1306_DrawVLine>
		ssd1306_DrawHLine(&holedR,114,127,40,White);
 800a426:	2301      	movs	r3, #1
 800a428:	9300      	str	r3, [sp, #0]
 800a42a:	2328      	movs	r3, #40	; 0x28
 800a42c:	227f      	movs	r2, #127	; 0x7f
 800a42e:	2172      	movs	r1, #114	; 0x72
 800a430:	4817      	ldr	r0, [pc, #92]	; (800a490 <showFX+0x260>)
 800a432:	f000 fcef 	bl	800ae14 <ssd1306_DrawHLine>
		ssd1306_DrawVLine(&holedR,127,23,40,White);
 800a436:	2301      	movs	r3, #1
 800a438:	9300      	str	r3, [sp, #0]
 800a43a:	2328      	movs	r3, #40	; 0x28
 800a43c:	2217      	movs	r2, #23
 800a43e:	217f      	movs	r1, #127	; 0x7f
 800a440:	4813      	ldr	r0, [pc, #76]	; (800a490 <showFX+0x260>)
 800a442:	f000 fd27 	bl	800ae94 <ssd1306_DrawVLine>
 800a446:	e04c      	b.n	800a4e2 <showFX+0x2b2>
 800a448:	20001c1c 	.word	0x20001c1c
 800a44c:	20001698 	.word	0x20001698
 800a450:	20001bd0 	.word	0x20001bd0
 800a454:	20001920 	.word	0x20001920
 800a458:	20000361 	.word	0x20000361
 800a45c:	20000f78 	.word	0x20000f78
 800a460:	200000cc 	.word	0x200000cc
 800a464:	0800d74c 	.word	0x0800d74c
 800a468:	0800d750 	.word	0x0800d750
 800a46c:	0800d754 	.word	0x0800d754
 800a470:	20000ba8 	.word	0x20000ba8
 800a474:	200000c4 	.word	0x200000c4
 800a478:	00545845 	.word	0x00545845
 800a47c:	0800d760 	.word	0x0800d760
 800a480:	0043494d 	.word	0x0043494d
 800a484:	00425355 	.word	0x00425355
 800a488:	0800d768 	.word	0x0800d768
 800a48c:	0800d774 	.word	0x0800d774
 800a490:	20000798 	.word	0x20000798
 800a494:	0800d780 	.word	0x0800d780
	}else{
		//remove the right arrow
		ssd1306_SetCursor(&holedR, 114, 23);
 800a498:	2217      	movs	r2, #23
 800a49a:	2172      	movs	r1, #114	; 0x72
 800a49c:	4834      	ldr	r0, [pc, #208]	; (800a570 <showFX+0x340>)
 800a49e:	f000 fc8b 	bl	800adb8 <ssd1306_SetCursor>
		ssd1306_WriteString(&holedR, "  ", Font_11x18, White);
 800a4a2:	4b34      	ldr	r3, [pc, #208]	; (800a574 <showFX+0x344>)
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	9200      	str	r2, [sp, #0]
 800a4a8:	cb0c      	ldmia	r3, {r2, r3}
 800a4aa:	4933      	ldr	r1, [pc, #204]	; (800a578 <showFX+0x348>)
 800a4ac:	4830      	ldr	r0, [pc, #192]	; (800a570 <showFX+0x340>)
 800a4ae:	f000 fc5b 	bl	800ad68 <ssd1306_WriteString>
		ssd1306_DrawVLine(&holedR,127,23,40,Black);
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	9300      	str	r3, [sp, #0]
 800a4b6:	2328      	movs	r3, #40	; 0x28
 800a4b8:	2217      	movs	r2, #23
 800a4ba:	217f      	movs	r1, #127	; 0x7f
 800a4bc:	482c      	ldr	r0, [pc, #176]	; (800a570 <showFX+0x340>)
 800a4be:	f000 fce9 	bl	800ae94 <ssd1306_DrawVLine>
		ssd1306_DrawVLine(&holedR,126,23,40,Black);
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	9300      	str	r3, [sp, #0]
 800a4c6:	2328      	movs	r3, #40	; 0x28
 800a4c8:	2217      	movs	r2, #23
 800a4ca:	217e      	movs	r1, #126	; 0x7e
 800a4cc:	4828      	ldr	r0, [pc, #160]	; (800a570 <showFX+0x340>)
 800a4ce:	f000 fce1 	bl	800ae94 <ssd1306_DrawVLine>
		ssd1306_DrawVLine(&holedR,125,23,40,Black);
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	9300      	str	r3, [sp, #0]
 800a4d6:	2328      	movs	r3, #40	; 0x28
 800a4d8:	2217      	movs	r2, #23
 800a4da:	217d      	movs	r1, #125	; 0x7d
 800a4dc:	4824      	ldr	r0, [pc, #144]	; (800a570 <showFX+0x340>)
 800a4de:	f000 fcd9 	bl	800ae94 <ssd1306_DrawVLine>
	}
	ssd1306_SetCursor(&holedR, 10, 0);
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	210a      	movs	r1, #10
 800a4e6:	4822      	ldr	r0, [pc, #136]	; (800a570 <showFX+0x340>)
 800a4e8:	f000 fc66 	bl	800adb8 <ssd1306_SetCursor>
	if((*fx).par2.name[0]!= '\0'){
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d015      	beq.n	800a522 <showFX+0x2f2>
		sprintf(lcd_buf, "%s %5d %s",(*fx).par2.name, (*fx).par2.value, (*fx).par2.unit);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f103 0284 	add.w	r2, r3, #132	; 0x84
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	33a8      	adds	r3, #168	; 0xa8
 800a506:	9300      	str	r3, [sp, #0]
 800a508:	460b      	mov	r3, r1
 800a50a:	491c      	ldr	r1, [pc, #112]	; (800a57c <showFX+0x34c>)
 800a50c:	481c      	ldr	r0, [pc, #112]	; (800a580 <showFX+0x350>)
 800a50e:	f002 f8c9 	bl	800c6a4 <siprintf>
		ssd1306_WriteString(&holedR, lcd_buf, Font_7x10, White);
 800a512:	4b1c      	ldr	r3, [pc, #112]	; (800a584 <showFX+0x354>)
 800a514:	2201      	movs	r2, #1
 800a516:	9200      	str	r2, [sp, #0]
 800a518:	cb0c      	ldmia	r3, {r2, r3}
 800a51a:	4919      	ldr	r1, [pc, #100]	; (800a580 <showFX+0x350>)
 800a51c:	4814      	ldr	r0, [pc, #80]	; (800a570 <showFX+0x340>)
 800a51e:	f000 fc23 	bl	800ad68 <ssd1306_WriteString>
	}
	ssd1306_SetCursor(&holedR, 10, 53);
 800a522:	2235      	movs	r2, #53	; 0x35
 800a524:	210a      	movs	r1, #10
 800a526:	4812      	ldr	r0, [pc, #72]	; (800a570 <showFX+0x340>)
 800a528:	f000 fc46 	bl	800adb8 <ssd1306_SetCursor>
	if((*fx).par3.name[0]!= '\0'){
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800a532:	2b00      	cmp	r3, #0
 800a534:	d015      	beq.n	800a562 <showFX+0x332>
		sprintf(lcd_buf, "%s %1d %s",(*fx).par3.name, (*fx).par3.value, (*fx).par3.unit);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	33e0      	adds	r3, #224	; 0xe0
 800a546:	9300      	str	r3, [sp, #0]
 800a548:	460b      	mov	r3, r1
 800a54a:	490f      	ldr	r1, [pc, #60]	; (800a588 <showFX+0x358>)
 800a54c:	480c      	ldr	r0, [pc, #48]	; (800a580 <showFX+0x350>)
 800a54e:	f002 f8a9 	bl	800c6a4 <siprintf>
		ssd1306_WriteString(&holedR, lcd_buf, Font_7x10, White);
 800a552:	4b0c      	ldr	r3, [pc, #48]	; (800a584 <showFX+0x354>)
 800a554:	2201      	movs	r2, #1
 800a556:	9200      	str	r2, [sp, #0]
 800a558:	cb0c      	ldmia	r3, {r2, r3}
 800a55a:	4909      	ldr	r1, [pc, #36]	; (800a580 <showFX+0x350>)
 800a55c:	4804      	ldr	r0, [pc, #16]	; (800a570 <showFX+0x340>)
 800a55e:	f000 fc03 	bl	800ad68 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen(&holedR);
 800a562:	4803      	ldr	r0, [pc, #12]	; (800a570 <showFX+0x340>)
 800a564:	f000 fa58 	bl	800aa18 <ssd1306_UpdateScreen>
}
 800a568:	bf00      	nop
 800a56a:	3710      	adds	r7, #16
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	20000798 	.word	0x20000798
 800a574:	200000cc 	.word	0x200000cc
 800a578:	0800d750 	.word	0x0800d750
 800a57c:	0800d754 	.word	0x0800d754
 800a580:	20000ba8 	.word	0x20000ba8
 800a584:	200000c4 	.word	0x200000c4
 800a588:	0800d774 	.word	0x0800d774

0800a58c <clearFX>:

void clearFX(void){
 800a58c:	b5b0      	push	{r4, r5, r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af02      	add	r7, sp, #8
		//clear the Strings & Parameters
		sprintf(lcd_buf, "                  ");
 800a592:	4a2c      	ldr	r2, [pc, #176]	; (800a644 <clearFX+0xb8>)
 800a594:	4b2c      	ldr	r3, [pc, #176]	; (800a648 <clearFX+0xbc>)
 800a596:	4615      	mov	r5, r2
 800a598:	461c      	mov	r4, r3
 800a59a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a59c:	6028      	str	r0, [r5, #0]
 800a59e:	6069      	str	r1, [r5, #4]
 800a5a0:	60aa      	str	r2, [r5, #8]
 800a5a2:	60eb      	str	r3, [r5, #12]
 800a5a4:	8823      	ldrh	r3, [r4, #0]
 800a5a6:	78a2      	ldrb	r2, [r4, #2]
 800a5a8:	822b      	strh	r3, [r5, #16]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	74ab      	strb	r3, [r5, #18]
		//remove the parameters
		ssd1306_SetCursor(&holedL, 10, 0);
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	210a      	movs	r1, #10
 800a5b2:	4826      	ldr	r0, [pc, #152]	; (800a64c <clearFX+0xc0>)
 800a5b4:	f000 fc00 	bl	800adb8 <ssd1306_SetCursor>
		ssd1306_WriteString(&holedL, lcd_buf, Font_7x10, White);
 800a5b8:	4b25      	ldr	r3, [pc, #148]	; (800a650 <clearFX+0xc4>)
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	9200      	str	r2, [sp, #0]
 800a5be:	cb0c      	ldmia	r3, {r2, r3}
 800a5c0:	4920      	ldr	r1, [pc, #128]	; (800a644 <clearFX+0xb8>)
 800a5c2:	4822      	ldr	r0, [pc, #136]	; (800a64c <clearFX+0xc0>)
 800a5c4:	f000 fbd0 	bl	800ad68 <ssd1306_WriteString>
		ssd1306_SetCursor(&holedL, 10, 53);
 800a5c8:	2235      	movs	r2, #53	; 0x35
 800a5ca:	210a      	movs	r1, #10
 800a5cc:	481f      	ldr	r0, [pc, #124]	; (800a64c <clearFX+0xc0>)
 800a5ce:	f000 fbf3 	bl	800adb8 <ssd1306_SetCursor>
		ssd1306_WriteString(&holedL, lcd_buf, Font_7x10, White);
 800a5d2:	4b1f      	ldr	r3, [pc, #124]	; (800a650 <clearFX+0xc4>)
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	9200      	str	r2, [sp, #0]
 800a5d8:	cb0c      	ldmia	r3, {r2, r3}
 800a5da:	491a      	ldr	r1, [pc, #104]	; (800a644 <clearFX+0xb8>)
 800a5dc:	481b      	ldr	r0, [pc, #108]	; (800a64c <clearFX+0xc0>)
 800a5de:	f000 fbc3 	bl	800ad68 <ssd1306_WriteString>
		ssd1306_SetCursor(&holedR, 10, 0);
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	210a      	movs	r1, #10
 800a5e6:	481b      	ldr	r0, [pc, #108]	; (800a654 <clearFX+0xc8>)
 800a5e8:	f000 fbe6 	bl	800adb8 <ssd1306_SetCursor>
		ssd1306_WriteString(&holedR, lcd_buf, Font_7x10, White);
 800a5ec:	4b18      	ldr	r3, [pc, #96]	; (800a650 <clearFX+0xc4>)
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	9200      	str	r2, [sp, #0]
 800a5f2:	cb0c      	ldmia	r3, {r2, r3}
 800a5f4:	4913      	ldr	r1, [pc, #76]	; (800a644 <clearFX+0xb8>)
 800a5f6:	4817      	ldr	r0, [pc, #92]	; (800a654 <clearFX+0xc8>)
 800a5f8:	f000 fbb6 	bl	800ad68 <ssd1306_WriteString>
		ssd1306_SetCursor(&holedR, 10, 53);
 800a5fc:	2235      	movs	r2, #53	; 0x35
 800a5fe:	210a      	movs	r1, #10
 800a600:	4814      	ldr	r0, [pc, #80]	; (800a654 <clearFX+0xc8>)
 800a602:	f000 fbd9 	bl	800adb8 <ssd1306_SetCursor>
		ssd1306_WriteString(&holedR, lcd_buf, Font_7x10, White);
 800a606:	4b12      	ldr	r3, [pc, #72]	; (800a650 <clearFX+0xc4>)
 800a608:	2201      	movs	r2, #1
 800a60a:	9200      	str	r2, [sp, #0]
 800a60c:	cb0c      	ldmia	r3, {r2, r3}
 800a60e:	490d      	ldr	r1, [pc, #52]	; (800a644 <clearFX+0xb8>)
 800a610:	4810      	ldr	r0, [pc, #64]	; (800a654 <clearFX+0xc8>)
 800a612:	f000 fba9 	bl	800ad68 <ssd1306_WriteString>
		//remove the title
		ssd1306_SetCursor(&holedL, 30, 23);
 800a616:	2217      	movs	r2, #23
 800a618:	211e      	movs	r1, #30
 800a61a:	480c      	ldr	r0, [pc, #48]	; (800a64c <clearFX+0xc0>)
 800a61c:	f000 fbcc 	bl	800adb8 <ssd1306_SetCursor>
		ssd1306_WriteString(&holedL, lcd_buf, Font_11x18, White);
 800a620:	4b0d      	ldr	r3, [pc, #52]	; (800a658 <clearFX+0xcc>)
 800a622:	2201      	movs	r2, #1
 800a624:	9200      	str	r2, [sp, #0]
 800a626:	cb0c      	ldmia	r3, {r2, r3}
 800a628:	4906      	ldr	r1, [pc, #24]	; (800a644 <clearFX+0xb8>)
 800a62a:	4808      	ldr	r0, [pc, #32]	; (800a64c <clearFX+0xc0>)
 800a62c:	f000 fb9c 	bl	800ad68 <ssd1306_WriteString>
		//update
		ssd1306_UpdateScreen(&holedL);
 800a630:	4806      	ldr	r0, [pc, #24]	; (800a64c <clearFX+0xc0>)
 800a632:	f000 f9f1 	bl	800aa18 <ssd1306_UpdateScreen>
		ssd1306_UpdateScreen(&holedR);
 800a636:	4807      	ldr	r0, [pc, #28]	; (800a654 <clearFX+0xc8>)
 800a638:	f000 f9ee 	bl	800aa18 <ssd1306_UpdateScreen>
}
 800a63c:	bf00      	nop
 800a63e:	46bd      	mov	sp, r7
 800a640:	bdb0      	pop	{r4, r5, r7, pc}
 800a642:	bf00      	nop
 800a644:	20000ba8 	.word	0x20000ba8
 800a648:	0800d784 	.word	0x0800d784
 800a64c:	20000f78 	.word	0x20000f78
 800a650:	200000c4 	.word	0x200000c4
 800a654:	20000798 	.word	0x20000798
 800a658:	200000cc 	.word	0x200000cc

0800a65c <updateAkku>:
  * @brief Update the state of the akku
  * @retval None
  * @param None
*/

void updateAkku(void){
 800a65c:	b5b0      	push	{r4, r5, r7, lr}
 800a65e:	b086      	sub	sp, #24
 800a660:	af02      	add	r7, sp, #8
    float volt = BSP_ReadBatteryVoltage(10);
 800a662:	200a      	movs	r0, #10
 800a664:	f7fe fd26 	bl	80090b4 <BSP_ReadBatteryVoltage>
 800a668:	ed87 0a02 	vstr	s0, [r7, #8]

    //shut the uC down
    if(volt<=UNDER_VOLTAGE){
 800a66c:	edd7 7a02 	vldr	s15, [r7, #8]
 800a670:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800a7ec <updateAkku+0x190>
 800a674:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a67c:	d83f      	bhi.n	800a6fe <updateAkku+0xa2>
            ssd1306_Fill(&holedL, Black);
 800a67e:	2100      	movs	r1, #0
 800a680:	485b      	ldr	r0, [pc, #364]	; (800a7f0 <updateAkku+0x194>)
 800a682:	f000 f9a7 	bl	800a9d4 <ssd1306_Fill>
            ssd1306_Fill(&holedR, Black);
 800a686:	2100      	movs	r1, #0
 800a688:	485a      	ldr	r0, [pc, #360]	; (800a7f4 <updateAkku+0x198>)
 800a68a:	f000 f9a3 	bl	800a9d4 <ssd1306_Fill>
            sprintf(lcd_buf, "Going to sleep...");
 800a68e:	4a5a      	ldr	r2, [pc, #360]	; (800a7f8 <updateAkku+0x19c>)
 800a690:	4b5a      	ldr	r3, [pc, #360]	; (800a7fc <updateAkku+0x1a0>)
 800a692:	4615      	mov	r5, r2
 800a694:	461c      	mov	r4, r3
 800a696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a698:	6028      	str	r0, [r5, #0]
 800a69a:	6069      	str	r1, [r5, #4]
 800a69c:	60aa      	str	r2, [r5, #8]
 800a69e:	60eb      	str	r3, [r5, #12]
 800a6a0:	8823      	ldrh	r3, [r4, #0]
 800a6a2:	822b      	strh	r3, [r5, #16]
            ssd1306_SetCursor(&holedL, 10, 20);
 800a6a4:	2214      	movs	r2, #20
 800a6a6:	210a      	movs	r1, #10
 800a6a8:	4851      	ldr	r0, [pc, #324]	; (800a7f0 <updateAkku+0x194>)
 800a6aa:	f000 fb85 	bl	800adb8 <ssd1306_SetCursor>
            ssd1306_WriteString(&holedL, lcd_buf, Font_7x10, White);
 800a6ae:	4b54      	ldr	r3, [pc, #336]	; (800a800 <updateAkku+0x1a4>)
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	9200      	str	r2, [sp, #0]
 800a6b4:	cb0c      	ldmia	r3, {r2, r3}
 800a6b6:	4950      	ldr	r1, [pc, #320]	; (800a7f8 <updateAkku+0x19c>)
 800a6b8:	484d      	ldr	r0, [pc, #308]	; (800a7f0 <updateAkku+0x194>)
 800a6ba:	f000 fb55 	bl	800ad68 <ssd1306_WriteString>
            ssd1306_UpdateScreen(&holedL);
 800a6be:	484c      	ldr	r0, [pc, #304]	; (800a7f0 <updateAkku+0x194>)
 800a6c0:	f000 f9aa 	bl	800aa18 <ssd1306_UpdateScreen>
            sprintf(lcd_buf, "Charge battery!");
 800a6c4:	4a4c      	ldr	r2, [pc, #304]	; (800a7f8 <updateAkku+0x19c>)
 800a6c6:	4b4f      	ldr	r3, [pc, #316]	; (800a804 <updateAkku+0x1a8>)
 800a6c8:	4614      	mov	r4, r2
 800a6ca:	461d      	mov	r5, r3
 800a6cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6ce:	6020      	str	r0, [r4, #0]
 800a6d0:	6061      	str	r1, [r4, #4]
 800a6d2:	60a2      	str	r2, [r4, #8]
 800a6d4:	60e3      	str	r3, [r4, #12]
            ssd1306_SetCursor(&holedR, 10, 20);
 800a6d6:	2214      	movs	r2, #20
 800a6d8:	210a      	movs	r1, #10
 800a6da:	4846      	ldr	r0, [pc, #280]	; (800a7f4 <updateAkku+0x198>)
 800a6dc:	f000 fb6c 	bl	800adb8 <ssd1306_SetCursor>
            ssd1306_WriteString(&holedR, lcd_buf, Font_7x10, White);
 800a6e0:	4b47      	ldr	r3, [pc, #284]	; (800a800 <updateAkku+0x1a4>)
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	9200      	str	r2, [sp, #0]
 800a6e6:	cb0c      	ldmia	r3, {r2, r3}
 800a6e8:	4943      	ldr	r1, [pc, #268]	; (800a7f8 <updateAkku+0x19c>)
 800a6ea:	4842      	ldr	r0, [pc, #264]	; (800a7f4 <updateAkku+0x198>)
 800a6ec:	f000 fb3c 	bl	800ad68 <ssd1306_WriteString>
            ssd1306_UpdateScreen(&holedR);
 800a6f0:	4840      	ldr	r0, [pc, #256]	; (800a7f4 <updateAkku+0x198>)
 800a6f2:	f000 f991 	bl	800aa18 <ssd1306_UpdateScreen>
            TLV320_PowerDown();
 800a6f6:	f001 f97c 	bl	800b9f2 <TLV320_PowerDown>
            HAL_PWR_EnterSTANDBYMode();
 800a6fa:	f7f9 ffd1 	bl	80046a0 <HAL_PWR_EnterSTANDBYMode>
    }

    uint8_t akku_state =(volt-UNDER_VOLTAGE)/(MAX_VOLTAGE-UNDER_VOLTAGE)*100;
 800a6fe:	edd7 7a02 	vldr	s15, [r7, #8]
 800a702:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800a7ec <updateAkku+0x190>
 800a706:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a70a:	eddf 6a3f 	vldr	s13, [pc, #252]	; 800a808 <updateAkku+0x1ac>
 800a70e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a712:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800a80c <updateAkku+0x1b0>
 800a716:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a71a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a71e:	edc7 7a01 	vstr	s15, [r7, #4]
 800a722:	793b      	ldrb	r3, [r7, #4]
 800a724:	73fb      	strb	r3, [r7, #15]
    /* different levels of the batterie symbol */
    if(akku_state>100)
 800a726:	7bfb      	ldrb	r3, [r7, #15]
 800a728:	2b64      	cmp	r3, #100	; 0x64
 800a72a:	d901      	bls.n	800a730 <updateAkku+0xd4>
            akku_state=100;
 800a72c:	2364      	movs	r3, #100	; 0x64
 800a72e:	73fb      	strb	r3, [r7, #15]
    if (akku_state>=84){
 800a730:	7bfb      	ldrb	r3, [r7, #15]
 800a732:	2b53      	cmp	r3, #83	; 0x53
 800a734:	d903      	bls.n	800a73e <updateAkku+0xe2>
    level=5;
 800a736:	4b36      	ldr	r3, [pc, #216]	; (800a810 <updateAkku+0x1b4>)
 800a738:	2205      	movs	r2, #5
 800a73a:	701a      	strb	r2, [r3, #0]
 800a73c:	e02d      	b.n	800a79a <updateAkku+0x13e>
    } else if (akku_state<84 && akku_state>=68){
 800a73e:	7bfb      	ldrb	r3, [r7, #15]
 800a740:	2b53      	cmp	r3, #83	; 0x53
 800a742:	d806      	bhi.n	800a752 <updateAkku+0xf6>
 800a744:	7bfb      	ldrb	r3, [r7, #15]
 800a746:	2b43      	cmp	r3, #67	; 0x43
 800a748:	d903      	bls.n	800a752 <updateAkku+0xf6>
            level=4;
 800a74a:	4b31      	ldr	r3, [pc, #196]	; (800a810 <updateAkku+0x1b4>)
 800a74c:	2204      	movs	r2, #4
 800a74e:	701a      	strb	r2, [r3, #0]
 800a750:	e023      	b.n	800a79a <updateAkku+0x13e>
    }	else if (akku_state<68 && akku_state>=52){
 800a752:	7bfb      	ldrb	r3, [r7, #15]
 800a754:	2b43      	cmp	r3, #67	; 0x43
 800a756:	d806      	bhi.n	800a766 <updateAkku+0x10a>
 800a758:	7bfb      	ldrb	r3, [r7, #15]
 800a75a:	2b33      	cmp	r3, #51	; 0x33
 800a75c:	d903      	bls.n	800a766 <updateAkku+0x10a>
            level=3;
 800a75e:	4b2c      	ldr	r3, [pc, #176]	; (800a810 <updateAkku+0x1b4>)
 800a760:	2203      	movs	r2, #3
 800a762:	701a      	strb	r2, [r3, #0]
 800a764:	e019      	b.n	800a79a <updateAkku+0x13e>
    }	else if (akku_state<52 && akku_state>=36){
 800a766:	7bfb      	ldrb	r3, [r7, #15]
 800a768:	2b33      	cmp	r3, #51	; 0x33
 800a76a:	d806      	bhi.n	800a77a <updateAkku+0x11e>
 800a76c:	7bfb      	ldrb	r3, [r7, #15]
 800a76e:	2b23      	cmp	r3, #35	; 0x23
 800a770:	d903      	bls.n	800a77a <updateAkku+0x11e>
            level=2;
 800a772:	4b27      	ldr	r3, [pc, #156]	; (800a810 <updateAkku+0x1b4>)
 800a774:	2202      	movs	r2, #2
 800a776:	701a      	strb	r2, [r3, #0]
 800a778:	e00f      	b.n	800a79a <updateAkku+0x13e>
    }	else if (akku_state<36 && akku_state>=20){
 800a77a:	7bfb      	ldrb	r3, [r7, #15]
 800a77c:	2b23      	cmp	r3, #35	; 0x23
 800a77e:	d806      	bhi.n	800a78e <updateAkku+0x132>
 800a780:	7bfb      	ldrb	r3, [r7, #15]
 800a782:	2b13      	cmp	r3, #19
 800a784:	d903      	bls.n	800a78e <updateAkku+0x132>
            level=1;
 800a786:	4b22      	ldr	r3, [pc, #136]	; (800a810 <updateAkku+0x1b4>)
 800a788:	2201      	movs	r2, #1
 800a78a:	701a      	strb	r2, [r3, #0]
 800a78c:	e005      	b.n	800a79a <updateAkku+0x13e>
    }	else if (akku_state<20){
 800a78e:	7bfb      	ldrb	r3, [r7, #15]
 800a790:	2b13      	cmp	r3, #19
 800a792:	d802      	bhi.n	800a79a <updateAkku+0x13e>
            level=0;
 800a794:	4b1e      	ldr	r3, [pc, #120]	; (800a810 <updateAkku+0x1b4>)
 800a796:	2200      	movs	r2, #0
 800a798:	701a      	strb	r2, [r3, #0]
    }

    ssd1306_SetCursor(&holedR, 59, 27);
 800a79a:	221b      	movs	r2, #27
 800a79c:	213b      	movs	r1, #59	; 0x3b
 800a79e:	4815      	ldr	r0, [pc, #84]	; (800a7f4 <updateAkku+0x198>)
 800a7a0:	f000 fb0a 	bl	800adb8 <ssd1306_SetCursor>
    sprintf(lcd_buf, "%3.0d%%", akku_state);
 800a7a4:	7bfb      	ldrb	r3, [r7, #15]
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	491a      	ldr	r1, [pc, #104]	; (800a814 <updateAkku+0x1b8>)
 800a7aa:	4813      	ldr	r0, [pc, #76]	; (800a7f8 <updateAkku+0x19c>)
 800a7ac:	f001 ff7a 	bl	800c6a4 <siprintf>
    ssd1306_WriteString(&holedR, lcd_buf, Font_7x10, White);
 800a7b0:	4b13      	ldr	r3, [pc, #76]	; (800a800 <updateAkku+0x1a4>)
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	9200      	str	r2, [sp, #0]
 800a7b6:	cb0c      	ldmia	r3, {r2, r3}
 800a7b8:	490f      	ldr	r1, [pc, #60]	; (800a7f8 <updateAkku+0x19c>)
 800a7ba:	480e      	ldr	r0, [pc, #56]	; (800a7f4 <updateAkku+0x198>)
 800a7bc:	f000 fad4 	bl	800ad68 <ssd1306_WriteString>
    ssd1306_SetCursor(&holedR, 89, 27);
 800a7c0:	221b      	movs	r2, #27
 800a7c2:	2159      	movs	r1, #89	; 0x59
 800a7c4:	480b      	ldr	r0, [pc, #44]	; (800a7f4 <updateAkku+0x198>)
 800a7c6:	f000 faf7 	bl	800adb8 <ssd1306_SetCursor>
    ssd1306_DrawBat(&holedR,level, Bat_16x9, White);
 800a7ca:	4b11      	ldr	r3, [pc, #68]	; (800a810 <updateAkku+0x1b4>)
 800a7cc:	7819      	ldrb	r1, [r3, #0]
 800a7ce:	4b12      	ldr	r3, [pc, #72]	; (800a818 <updateAkku+0x1bc>)
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	9200      	str	r2, [sp, #0]
 800a7d4:	cb0c      	ldmia	r3, {r2, r3}
 800a7d6:	4807      	ldr	r0, [pc, #28]	; (800a7f4 <updateAkku+0x198>)
 800a7d8:	f000 fb06 	bl	800ade8 <ssd1306_DrawBat>
    ssd1306_UpdateScreen(&holedR);
 800a7dc:	4805      	ldr	r0, [pc, #20]	; (800a7f4 <updateAkku+0x198>)
 800a7de:	f000 f91b 	bl	800aa18 <ssd1306_UpdateScreen>
}
 800a7e2:	bf00      	nop
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bdb0      	pop	{r4, r5, r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	40533333 	.word	0x40533333
 800a7f0:	20000f78 	.word	0x20000f78
 800a7f4:	20000798 	.word	0x20000798
 800a7f8:	20000ba8 	.word	0x20000ba8
 800a7fc:	0800d798 	.word	0x0800d798
 800a800:	200000c4 	.word	0x200000c4
 800a804:	0800d7ac 	.word	0x0800d7ac
 800a808:	3f63d70c 	.word	0x3f63d70c
 800a80c:	42c80000 	.word	0x42c80000
 800a810:	20000360 	.word	0x20000360
 800a814:	0800d7bc 	.word	0x0800d7bc
 800a818:	200000bc 	.word	0x200000bc

0800a81c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a81c:	b480      	push	{r7}
 800a81e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a820:	bf00      	nop
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr

0800a82a <ssd1306_Reset>:

#if defined(SSD1306_USE_I2C)

extern SSD1306_t holed1;

void ssd1306_Reset(SSD1306_t *ssd) {
 800a82a:	b480      	push	{r7}
 800a82c:	b083      	sub	sp, #12
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
	/* for I2C - do nothing */
}
 800a832:	bf00      	nop
 800a834:	370c      	adds	r7, #12
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr

0800a83e <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(SSD1306_t *ssd, uint8_t byte) {
 800a83e:	b580      	push	{r7, lr}
 800a840:	b086      	sub	sp, #24
 800a842:	af04      	add	r7, sp, #16
 800a844:	6078      	str	r0, [r7, #4]
 800a846:	460b      	mov	r3, r1
 800a848:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(ssd->hi2cx, ssd->address, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6898      	ldr	r0, [r3, #8]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 800a854:	b299      	uxth	r1, r3
 800a856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a85a:	9302      	str	r3, [sp, #8]
 800a85c:	2301      	movs	r3, #1
 800a85e:	9301      	str	r3, [sp, #4]
 800a860:	1cfb      	adds	r3, r7, #3
 800a862:	9300      	str	r3, [sp, #0]
 800a864:	2301      	movs	r3, #1
 800a866:	2200      	movs	r2, #0
 800a868:	f7f7 fa4c 	bl	8001d04 <HAL_I2C_Mem_Write>
}
 800a86c:	bf00      	nop
 800a86e:	3708      	adds	r7, #8
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(SSD1306_t *ssd, uint8_t* buffer, size_t buff_size) {
 800a874:	b580      	push	{r7, lr}
 800a876:	b088      	sub	sp, #32
 800a878:	af04      	add	r7, sp, #16
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]
	HAL_I2C_Mem_Write(ssd->hi2cx, ssd->address, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6898      	ldr	r0, [r3, #8]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 800a88a:	b299      	uxth	r1, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	b29b      	uxth	r3, r3
 800a890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a894:	9202      	str	r2, [sp, #8]
 800a896:	9301      	str	r3, [sp, #4]
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	9300      	str	r3, [sp, #0]
 800a89c:	2301      	movs	r3, #1
 800a89e:	2240      	movs	r2, #64	; 0x40
 800a8a0:	f7f7 fa30 	bl	8001d04 <HAL_I2C_Mem_Write>
}
 800a8a4:	bf00      	nop
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(SSD1306_t *ssd) {
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
    // Reset OLED
    ssd1306_Reset(ssd);
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f7ff ffb8 	bl	800a82a <ssd1306_Reset>
	  ssd->address = SSD1306_I2C_ADDR;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2278      	movs	r2, #120	; 0x78
 800a8be:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

    // Wait for the screen to boot
    HAL_Delay(100);
 800a8c2:	2064      	movs	r0, #100	; 0x64
 800a8c4:	f7f5 fee6 	bl	8000694 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(ssd, 0xAE); //display off
 800a8c8:	21ae      	movs	r1, #174	; 0xae
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f7ff ffb7 	bl	800a83e <ssd1306_WriteCommand>

    ssd1306_WriteCommand(ssd, 0x20); //Set Memory Addressing Mode   
 800a8d0:	2120      	movs	r1, #32
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f7ff ffb3 	bl	800a83e <ssd1306_WriteCommand>
    ssd1306_WriteCommand(ssd, 0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 800a8d8:	2110      	movs	r1, #16
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f7ff ffaf 	bl	800a83e <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(ssd, 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800a8e0:	21b0      	movs	r1, #176	; 0xb0
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f7ff ffab 	bl	800a83e <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(ssd, 0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(ssd, 0xC8); //Set COM Output Scan Direction
 800a8e8:	21c8      	movs	r1, #200	; 0xc8
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7ff ffa7 	bl	800a83e <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(ssd, 0x00); //---set low column address
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f7ff ffa3 	bl	800a83e <ssd1306_WriteCommand>
    ssd1306_WriteCommand(ssd, 0x10); //---set high column address
 800a8f8:	2110      	movs	r1, #16
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f7ff ff9f 	bl	800a83e <ssd1306_WriteCommand>

    ssd1306_WriteCommand(ssd, 0x40); //--set start line address - CHECK
 800a900:	2140      	movs	r1, #64	; 0x40
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f7ff ff9b 	bl	800a83e <ssd1306_WriteCommand>

    ssd1306_WriteCommand(ssd, 0x81); //--set contrast control register - CHECK
 800a908:	2181      	movs	r1, #129	; 0x81
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7ff ff97 	bl	800a83e <ssd1306_WriteCommand>
    ssd1306_WriteCommand(ssd, 0xFF);
 800a910:	21ff      	movs	r1, #255	; 0xff
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f7ff ff93 	bl	800a83e <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(ssd, 0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(ssd, 0xA1); //--set segment re-map 0 to 127 - CHECK
 800a918:	21a1      	movs	r1, #161	; 0xa1
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f7ff ff8f 	bl	800a83e <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(ssd, 0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(ssd, 0xA6); //--set normal color
 800a920:	21a6      	movs	r1, #166	; 0xa6
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f7ff ff8b 	bl	800a83e <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(ssd, 0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800a928:	21a8      	movs	r1, #168	; 0xa8
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f7ff ff87 	bl	800a83e <ssd1306_WriteCommand>
    ssd1306_WriteCommand(ssd, 0x3F); //
 800a930:	213f      	movs	r1, #63	; 0x3f
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f7ff ff83 	bl	800a83e <ssd1306_WriteCommand>

    ssd1306_WriteCommand(ssd, 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800a938:	21a4      	movs	r1, #164	; 0xa4
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f7ff ff7f 	bl	800a83e <ssd1306_WriteCommand>

    ssd1306_WriteCommand(ssd, 0xD3); //-set display offset - CHECK
 800a940:	21d3      	movs	r1, #211	; 0xd3
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f7ff ff7b 	bl	800a83e <ssd1306_WriteCommand>
    ssd1306_WriteCommand(ssd, 0x00); //-not offset
 800a948:	2100      	movs	r1, #0
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f7ff ff77 	bl	800a83e <ssd1306_WriteCommand>

    ssd1306_WriteCommand(ssd, 0xD5); //--set display clock divide ratio/oscillator frequency
 800a950:	21d5      	movs	r1, #213	; 0xd5
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f7ff ff73 	bl	800a83e <ssd1306_WriteCommand>
    ssd1306_WriteCommand(ssd, 0xF0); //--set divide ratio
 800a958:	21f0      	movs	r1, #240	; 0xf0
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f7ff ff6f 	bl	800a83e <ssd1306_WriteCommand>

    ssd1306_WriteCommand(ssd, 0xD9); //--set pre-charge period
 800a960:	21d9      	movs	r1, #217	; 0xd9
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f7ff ff6b 	bl	800a83e <ssd1306_WriteCommand>
    ssd1306_WriteCommand(ssd, 0x22); //
 800a968:	2122      	movs	r1, #34	; 0x22
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f7ff ff67 	bl	800a83e <ssd1306_WriteCommand>

    ssd1306_WriteCommand(ssd, 0xDA); //--set com pins hardware configuration - CHECK
 800a970:	21da      	movs	r1, #218	; 0xda
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f7ff ff63 	bl	800a83e <ssd1306_WriteCommand>
    ssd1306_WriteCommand(ssd, 0x12);
 800a978:	2112      	movs	r1, #18
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f7ff ff5f 	bl	800a83e <ssd1306_WriteCommand>

    ssd1306_WriteCommand(ssd, 0xDB); //--set vcomh
 800a980:	21db      	movs	r1, #219	; 0xdb
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f7ff ff5b 	bl	800a83e <ssd1306_WriteCommand>
    ssd1306_WriteCommand(ssd, 0x20); //0x20,0.77xVcc
 800a988:	2120      	movs	r1, #32
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f7ff ff57 	bl	800a83e <ssd1306_WriteCommand>

    ssd1306_WriteCommand(ssd, 0x8D); //--set DC-DC enable
 800a990:	218d      	movs	r1, #141	; 0x8d
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f7ff ff53 	bl	800a83e <ssd1306_WriteCommand>
    ssd1306_WriteCommand(ssd, 0x14); //
 800a998:	2114      	movs	r1, #20
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f7ff ff4f 	bl	800a83e <ssd1306_WriteCommand>
    ssd1306_WriteCommand(ssd, 0xAF); //--turn on SSD1306 panel
 800a9a0:	21af      	movs	r1, #175	; 0xaf
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f7ff ff4b 	bl	800a83e <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(ssd, Black);
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 f812 	bl	800a9d4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen(ssd);
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 f831 	bl	800aa18 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800a9b6:	4b06      	ldr	r3, [pc, #24]	; (800a9d0 <ssd1306_Init+0x124>)
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800a9bc:	4b04      	ldr	r3, [pc, #16]	; (800a9d0 <ssd1306_Init+0x124>)
 800a9be:	2200      	movs	r2, #0
 800a9c0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800a9c2:	4b03      	ldr	r3, [pc, #12]	; (800a9d0 <ssd1306_Init+0x124>)
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	715a      	strb	r2, [r3, #5]
}
 800a9c8:	bf00      	nop
 800a9ca:	3708      	adds	r7, #8
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	20000364 	.word	0x20000364

0800a9d4 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_t *ssd, SSD1306_COLOR color) {
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	460b      	mov	r3, r1
 800a9de:	70fb      	strb	r3, [r7, #3]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(ssd->pixels); i++) {
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	60fb      	str	r3, [r7, #12]
 800a9e4:	e00e      	b.n	800aa04 <ssd1306_Fill+0x30>
        ssd->pixels[i] = (color == Black) ? 0x00 : 0xFF;
 800a9e6:	78fb      	ldrb	r3, [r7, #3]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d101      	bne.n	800a9f0 <ssd1306_Fill+0x1c>
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	e000      	b.n	800a9f2 <ssd1306_Fill+0x1e>
 800a9f0:	21ff      	movs	r1, #255	; 0xff
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	330c      	adds	r3, #12
 800a9fa:	460a      	mov	r2, r1
 800a9fc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(ssd->pixels); i++) {
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	3301      	adds	r3, #1
 800aa02:	60fb      	str	r3, [r7, #12]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa0a:	d3ec      	bcc.n	800a9e6 <ssd1306_Fill+0x12>
    }
}
 800aa0c:	bf00      	nop
 800aa0e:	3714      	adds	r7, #20
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(SSD1306_t *ssd) {
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for(i = 0; i < 8; i++) {
 800aa20:	2300      	movs	r3, #0
 800aa22:	73fb      	strb	r3, [r7, #15]
 800aa24:	e01c      	b.n	800aa60 <ssd1306_UpdateScreen+0x48>
        ssd1306_WriteCommand(ssd, 0xB0 + i);
 800aa26:	7bfb      	ldrb	r3, [r7, #15]
 800aa28:	3b50      	subs	r3, #80	; 0x50
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f7ff ff05 	bl	800a83e <ssd1306_WriteCommand>
        ssd1306_WriteCommand(ssd, 0x00);
 800aa34:	2100      	movs	r1, #0
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f7ff ff01 	bl	800a83e <ssd1306_WriteCommand>
        ssd1306_WriteCommand(ssd, 0x10);
 800aa3c:	2110      	movs	r1, #16
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f7ff fefd 	bl	800a83e <ssd1306_WriteCommand>
        ssd1306_WriteData(ssd, &ssd->pixels[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800aa44:	7bfb      	ldrb	r3, [r7, #15]
 800aa46:	01db      	lsls	r3, r3, #7
 800aa48:	3308      	adds	r3, #8
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	3304      	adds	r3, #4
 800aa50:	2280      	movs	r2, #128	; 0x80
 800aa52:	4619      	mov	r1, r3
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f7ff ff0d 	bl	800a874 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 800aa5a:	7bfb      	ldrb	r3, [r7, #15]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	73fb      	strb	r3, [r7, #15]
 800aa60:	7bfb      	ldrb	r3, [r7, #15]
 800aa62:	2b07      	cmp	r3, #7
 800aa64:	d9df      	bls.n	800aa26 <ssd1306_UpdateScreen+0xe>
    }
}
 800aa66:	bf00      	nop
 800aa68:	3710      	adds	r7, #16
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
	...

0800aa70 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(SSD1306_t *ssd, uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	4608      	mov	r0, r1
 800aa7a:	4611      	mov	r1, r2
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	4603      	mov	r3, r0
 800aa80:	70fb      	strb	r3, [r7, #3]
 800aa82:	460b      	mov	r3, r1
 800aa84:	70bb      	strb	r3, [r7, #2]
 800aa86:	4613      	mov	r3, r2
 800aa88:	707b      	strb	r3, [r7, #1]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800aa8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	db4e      	blt.n	800ab30 <ssd1306_DrawPixel+0xc0>
 800aa92:	78bb      	ldrb	r3, [r7, #2]
 800aa94:	2b3f      	cmp	r3, #63	; 0x3f
 800aa96:	d84b      	bhi.n	800ab30 <ssd1306_DrawPixel+0xc0>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 800aa98:	4b28      	ldr	r3, [pc, #160]	; (800ab3c <ssd1306_DrawPixel+0xcc>)
 800aa9a:	791b      	ldrb	r3, [r3, #4]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d006      	beq.n	800aaae <ssd1306_DrawPixel+0x3e>
        color = (SSD1306_COLOR)!color;
 800aaa0:	787b      	ldrb	r3, [r7, #1]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	bf0c      	ite	eq
 800aaa6:	2301      	moveq	r3, #1
 800aaa8:	2300      	movne	r3, #0
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	707b      	strb	r3, [r7, #1]
    }
    
    // Draw in the right color
    if(color == White) {
 800aaae:	787b      	ldrb	r3, [r7, #1]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d11d      	bne.n	800aaf0 <ssd1306_DrawPixel+0x80>
        ssd->pixels[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800aab4:	78fa      	ldrb	r2, [r7, #3]
 800aab6:	78bb      	ldrb	r3, [r7, #2]
 800aab8:	08db      	lsrs	r3, r3, #3
 800aaba:	b2d8      	uxtb	r0, r3
 800aabc:	4603      	mov	r3, r0
 800aabe:	01db      	lsls	r3, r3, #7
 800aac0:	4413      	add	r3, r2
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	4413      	add	r3, r2
 800aac6:	7b1b      	ldrb	r3, [r3, #12]
 800aac8:	b25a      	sxtb	r2, r3
 800aaca:	78bb      	ldrb	r3, [r7, #2]
 800aacc:	f003 0307 	and.w	r3, r3, #7
 800aad0:	2101      	movs	r1, #1
 800aad2:	fa01 f303 	lsl.w	r3, r1, r3
 800aad6:	b25b      	sxtb	r3, r3
 800aad8:	4313      	orrs	r3, r2
 800aada:	b259      	sxtb	r1, r3
 800aadc:	78fa      	ldrb	r2, [r7, #3]
 800aade:	4603      	mov	r3, r0
 800aae0:	01db      	lsls	r3, r3, #7
 800aae2:	4413      	add	r3, r2
 800aae4:	b2c9      	uxtb	r1, r1
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	4413      	add	r3, r2
 800aaea:	460a      	mov	r2, r1
 800aaec:	731a      	strb	r2, [r3, #12]
 800aaee:	e020      	b.n	800ab32 <ssd1306_DrawPixel+0xc2>
    } else { 
        ssd->pixels[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800aaf0:	78fa      	ldrb	r2, [r7, #3]
 800aaf2:	78bb      	ldrb	r3, [r7, #2]
 800aaf4:	08db      	lsrs	r3, r3, #3
 800aaf6:	b2d8      	uxtb	r0, r3
 800aaf8:	4603      	mov	r3, r0
 800aafa:	01db      	lsls	r3, r3, #7
 800aafc:	4413      	add	r3, r2
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	4413      	add	r3, r2
 800ab02:	7b1b      	ldrb	r3, [r3, #12]
 800ab04:	b25a      	sxtb	r2, r3
 800ab06:	78bb      	ldrb	r3, [r7, #2]
 800ab08:	f003 0307 	and.w	r3, r3, #7
 800ab0c:	2101      	movs	r1, #1
 800ab0e:	fa01 f303 	lsl.w	r3, r1, r3
 800ab12:	b25b      	sxtb	r3, r3
 800ab14:	43db      	mvns	r3, r3
 800ab16:	b25b      	sxtb	r3, r3
 800ab18:	4013      	ands	r3, r2
 800ab1a:	b259      	sxtb	r1, r3
 800ab1c:	78fa      	ldrb	r2, [r7, #3]
 800ab1e:	4603      	mov	r3, r0
 800ab20:	01db      	lsls	r3, r3, #7
 800ab22:	4413      	add	r3, r2
 800ab24:	b2c9      	uxtb	r1, r1
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	4413      	add	r3, r2
 800ab2a:	460a      	mov	r2, r1
 800ab2c:	731a      	strb	r2, [r3, #12]
 800ab2e:	e000      	b.n	800ab32 <ssd1306_DrawPixel+0xc2>
        return;
 800ab30:	bf00      	nop
    }
}
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr
 800ab3c:	20000364 	.word	0x20000364

0800ab40 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(SSD1306_t *ssd, char ch, FontDef Font, SSD1306_COLOR color) {
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b088      	sub	sp, #32
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	4608      	mov	r0, r1
 800ab4a:	4639      	mov	r1, r7
 800ab4c:	e881 000c 	stmia.w	r1, {r2, r3}
 800ab50:	4603      	mov	r3, r0
 800ab52:	72fb      	strb	r3, [r7, #11]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 800ab54:	7afb      	ldrb	r3, [r7, #11]
 800ab56:	2b1f      	cmp	r3, #31
 800ab58:	d902      	bls.n	800ab60 <ssd1306_WriteChar+0x20>
 800ab5a:	7afb      	ldrb	r3, [r7, #11]
 800ab5c:	2b7e      	cmp	r3, #126	; 0x7e
 800ab5e:	d901      	bls.n	800ab64 <ssd1306_WriteChar+0x24>
        return 0;
 800ab60:	2300      	movs	r3, #0
 800ab62:	e06f      	b.n	800ac44 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800ab64:	4b39      	ldr	r3, [pc, #228]	; (800ac4c <ssd1306_WriteChar+0x10c>)
 800ab66:	881b      	ldrh	r3, [r3, #0]
 800ab68:	461a      	mov	r2, r3
 800ab6a:	783b      	ldrb	r3, [r7, #0]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	2b7f      	cmp	r3, #127	; 0x7f
 800ab70:	dc06      	bgt.n	800ab80 <ssd1306_WriteChar+0x40>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800ab72:	4b36      	ldr	r3, [pc, #216]	; (800ac4c <ssd1306_WriteChar+0x10c>)
 800ab74:	885b      	ldrh	r3, [r3, #2]
 800ab76:	461a      	mov	r2, r3
 800ab78:	787b      	ldrb	r3, [r7, #1]
 800ab7a:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800ab7c:	2b3f      	cmp	r3, #63	; 0x3f
 800ab7e:	dd01      	ble.n	800ab84 <ssd1306_WriteChar+0x44>
    {
        // Not enough space on current line
        return 0;
 800ab80:	2300      	movs	r3, #0
 800ab82:	e05f      	b.n	800ac44 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800ab84:	2300      	movs	r3, #0
 800ab86:	61fb      	str	r3, [r7, #28]
 800ab88:	e04e      	b.n	800ac28 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	7afb      	ldrb	r3, [r7, #11]
 800ab8e:	3b20      	subs	r3, #32
 800ab90:	7879      	ldrb	r1, [r7, #1]
 800ab92:	fb01 f303 	mul.w	r3, r1, r3
 800ab96:	4619      	mov	r1, r3
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	440b      	add	r3, r1
 800ab9c:	005b      	lsls	r3, r3, #1
 800ab9e:	4413      	add	r3, r2
 800aba0:	881b      	ldrh	r3, [r3, #0]
 800aba2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800aba4:	2300      	movs	r3, #0
 800aba6:	61bb      	str	r3, [r7, #24]
 800aba8:	e036      	b.n	800ac18 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800abaa:	697a      	ldr	r2, [r7, #20]
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	fa02 f303 	lsl.w	r3, r2, r3
 800abb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d013      	beq.n	800abe2 <ssd1306_WriteChar+0xa2>
                ssd1306_DrawPixel(ssd, SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800abba:	4b24      	ldr	r3, [pc, #144]	; (800ac4c <ssd1306_WriteChar+0x10c>)
 800abbc:	881b      	ldrh	r3, [r3, #0]
 800abbe:	b2da      	uxtb	r2, r3
 800abc0:	69bb      	ldr	r3, [r7, #24]
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	4413      	add	r3, r2
 800abc6:	b2d9      	uxtb	r1, r3
 800abc8:	4b20      	ldr	r3, [pc, #128]	; (800ac4c <ssd1306_WriteChar+0x10c>)
 800abca:	885b      	ldrh	r3, [r3, #2]
 800abcc:	b2da      	uxtb	r2, r3
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	4413      	add	r3, r2
 800abd4:	b2da      	uxtb	r2, r3
 800abd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f7ff ff48 	bl	800aa70 <ssd1306_DrawPixel>
 800abe0:	e017      	b.n	800ac12 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(ssd, SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800abe2:	4b1a      	ldr	r3, [pc, #104]	; (800ac4c <ssd1306_WriteChar+0x10c>)
 800abe4:	881b      	ldrh	r3, [r3, #0]
 800abe6:	b2da      	uxtb	r2, r3
 800abe8:	69bb      	ldr	r3, [r7, #24]
 800abea:	b2db      	uxtb	r3, r3
 800abec:	4413      	add	r3, r2
 800abee:	b2d9      	uxtb	r1, r3
 800abf0:	4b16      	ldr	r3, [pc, #88]	; (800ac4c <ssd1306_WriteChar+0x10c>)
 800abf2:	885b      	ldrh	r3, [r3, #2]
 800abf4:	b2da      	uxtb	r2, r3
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	4413      	add	r3, r2
 800abfc:	b2da      	uxtb	r2, r3
 800abfe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	bf0c      	ite	eq
 800ac06:	2301      	moveq	r3, #1
 800ac08:	2300      	movne	r3, #0
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f7ff ff2f 	bl	800aa70 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800ac12:	69bb      	ldr	r3, [r7, #24]
 800ac14:	3301      	adds	r3, #1
 800ac16:	61bb      	str	r3, [r7, #24]
 800ac18:	783b      	ldrb	r3, [r7, #0]
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d3c3      	bcc.n	800abaa <ssd1306_WriteChar+0x6a>
    for(i = 0; i < Font.FontHeight; i++) {
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	3301      	adds	r3, #1
 800ac26:	61fb      	str	r3, [r7, #28]
 800ac28:	787b      	ldrb	r3, [r7, #1]
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	69fb      	ldr	r3, [r7, #28]
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d3ab      	bcc.n	800ab8a <ssd1306_WriteChar+0x4a>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800ac32:	4b06      	ldr	r3, [pc, #24]	; (800ac4c <ssd1306_WriteChar+0x10c>)
 800ac34:	881a      	ldrh	r2, [r3, #0]
 800ac36:	783b      	ldrb	r3, [r7, #0]
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	4413      	add	r3, r2
 800ac3c:	b29a      	uxth	r2, r3
 800ac3e:	4b03      	ldr	r3, [pc, #12]	; (800ac4c <ssd1306_WriteChar+0x10c>)
 800ac40:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800ac42:	7afb      	ldrb	r3, [r7, #11]
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3720      	adds	r7, #32
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	20000364 	.word	0x20000364

0800ac50 <ssd1306_DrawSign>:


char ssd1306_DrawSign(SSD1306_t *ssd,uint8_t level, SignDef Sign, SSD1306_COLOR color) {
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b088      	sub	sp, #32
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	4608      	mov	r0, r1
 800ac5a:	4639      	mov	r1, r7
 800ac5c:	e881 000c 	stmia.w	r1, {r2, r3}
 800ac60:	4603      	mov	r3, r0
 800ac62:	72fb      	strb	r3, [r7, #11]
    uint32_t i, b, j;
		char ch =32+level;
 800ac64:	7afb      	ldrb	r3, [r7, #11]
 800ac66:	3320      	adds	r3, #32
 800ac68:	75fb      	strb	r3, [r7, #23]
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800ac6a:	7dfb      	ldrb	r3, [r7, #23]
 800ac6c:	2b1f      	cmp	r3, #31
 800ac6e:	d902      	bls.n	800ac76 <ssd1306_DrawSign+0x26>
 800ac70:	7dfb      	ldrb	r3, [r7, #23]
 800ac72:	2b7e      	cmp	r3, #126	; 0x7e
 800ac74:	d901      	bls.n	800ac7a <ssd1306_DrawSign+0x2a>
        return 0;
 800ac76:	2300      	movs	r3, #0
 800ac78:	e06f      	b.n	800ad5a <ssd1306_DrawSign+0x10a>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Sign.SignWidth) ||
 800ac7a:	4b3a      	ldr	r3, [pc, #232]	; (800ad64 <ssd1306_DrawSign+0x114>)
 800ac7c:	881b      	ldrh	r3, [r3, #0]
 800ac7e:	461a      	mov	r2, r3
 800ac80:	783b      	ldrb	r3, [r7, #0]
 800ac82:	4413      	add	r3, r2
 800ac84:	2b7f      	cmp	r3, #127	; 0x7f
 800ac86:	dc06      	bgt.n	800ac96 <ssd1306_DrawSign+0x46>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Sign.SignHeight))
 800ac88:	4b36      	ldr	r3, [pc, #216]	; (800ad64 <ssd1306_DrawSign+0x114>)
 800ac8a:	885b      	ldrh	r3, [r3, #2]
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	787b      	ldrb	r3, [r7, #1]
 800ac90:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Sign.SignWidth) ||
 800ac92:	2b3f      	cmp	r3, #63	; 0x3f
 800ac94:	dd01      	ble.n	800ac9a <ssd1306_DrawSign+0x4a>
    {
        // Not enough space on current line
        return 0;
 800ac96:	2300      	movs	r3, #0
 800ac98:	e05f      	b.n	800ad5a <ssd1306_DrawSign+0x10a>
    }
    
    // Use the font to write
    for(i = 0; i < Sign.SignHeight; i++) {
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	61fb      	str	r3, [r7, #28]
 800ac9e:	e04e      	b.n	800ad3e <ssd1306_DrawSign+0xee>
        b = Sign.data[(ch - 32) * Sign.SignHeight + i];
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	7dfb      	ldrb	r3, [r7, #23]
 800aca4:	3b20      	subs	r3, #32
 800aca6:	7879      	ldrb	r1, [r7, #1]
 800aca8:	fb01 f303 	mul.w	r3, r1, r3
 800acac:	4619      	mov	r1, r3
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	440b      	add	r3, r1
 800acb2:	005b      	lsls	r3, r3, #1
 800acb4:	4413      	add	r3, r2
 800acb6:	881b      	ldrh	r3, [r3, #0]
 800acb8:	613b      	str	r3, [r7, #16]
        for(j = 0; j < Sign.SignWidth; j++) {
 800acba:	2300      	movs	r3, #0
 800acbc:	61bb      	str	r3, [r7, #24]
 800acbe:	e036      	b.n	800ad2e <ssd1306_DrawSign+0xde>
            if((b << j) & 0x8000)  {
 800acc0:	693a      	ldr	r2, [r7, #16]
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	fa02 f303 	lsl.w	r3, r2, r3
 800acc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800accc:	2b00      	cmp	r3, #0
 800acce:	d013      	beq.n	800acf8 <ssd1306_DrawSign+0xa8>
                ssd1306_DrawPixel(ssd, SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800acd0:	4b24      	ldr	r3, [pc, #144]	; (800ad64 <ssd1306_DrawSign+0x114>)
 800acd2:	881b      	ldrh	r3, [r3, #0]
 800acd4:	b2da      	uxtb	r2, r3
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	4413      	add	r3, r2
 800acdc:	b2d9      	uxtb	r1, r3
 800acde:	4b21      	ldr	r3, [pc, #132]	; (800ad64 <ssd1306_DrawSign+0x114>)
 800ace0:	885b      	ldrh	r3, [r3, #2]
 800ace2:	b2da      	uxtb	r2, r3
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	4413      	add	r3, r2
 800acea:	b2da      	uxtb	r2, r3
 800acec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f7ff febd 	bl	800aa70 <ssd1306_DrawPixel>
 800acf6:	e017      	b.n	800ad28 <ssd1306_DrawSign+0xd8>
            } else {
                ssd1306_DrawPixel(ssd, SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800acf8:	4b1a      	ldr	r3, [pc, #104]	; (800ad64 <ssd1306_DrawSign+0x114>)
 800acfa:	881b      	ldrh	r3, [r3, #0]
 800acfc:	b2da      	uxtb	r2, r3
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	4413      	add	r3, r2
 800ad04:	b2d9      	uxtb	r1, r3
 800ad06:	4b17      	ldr	r3, [pc, #92]	; (800ad64 <ssd1306_DrawSign+0x114>)
 800ad08:	885b      	ldrh	r3, [r3, #2]
 800ad0a:	b2da      	uxtb	r2, r3
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	4413      	add	r3, r2
 800ad12:	b2da      	uxtb	r2, r3
 800ad14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	bf0c      	ite	eq
 800ad1c:	2301      	moveq	r3, #1
 800ad1e:	2300      	movne	r3, #0
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f7ff fea4 	bl	800aa70 <ssd1306_DrawPixel>
        for(j = 0; j < Sign.SignWidth; j++) {
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	61bb      	str	r3, [r7, #24]
 800ad2e:	783b      	ldrb	r3, [r7, #0]
 800ad30:	461a      	mov	r2, r3
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d3c3      	bcc.n	800acc0 <ssd1306_DrawSign+0x70>
    for(i = 0; i < Sign.SignHeight; i++) {
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	61fb      	str	r3, [r7, #28]
 800ad3e:	787b      	ldrb	r3, [r7, #1]
 800ad40:	461a      	mov	r2, r3
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d3ab      	bcc.n	800aca0 <ssd1306_DrawSign+0x50>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Sign.SignWidth;
 800ad48:	4b06      	ldr	r3, [pc, #24]	; (800ad64 <ssd1306_DrawSign+0x114>)
 800ad4a:	881a      	ldrh	r2, [r3, #0]
 800ad4c:	783b      	ldrb	r3, [r7, #0]
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	4413      	add	r3, r2
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	4b03      	ldr	r3, [pc, #12]	; (800ad64 <ssd1306_DrawSign+0x114>)
 800ad56:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800ad58:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3720      	adds	r7, #32
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	20000364 	.word	0x20000364

0800ad68 <ssd1306_WriteString>:




// Write full string to screenbuffer
char ssd1306_WriteString(SSD1306_t *ssd, char* str, FontDef Font, SSD1306_COLOR color) {
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b086      	sub	sp, #24
 800ad6c:	af02      	add	r7, sp, #8
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	4639      	mov	r1, r7
 800ad74:	e881 000c 	stmia.w	r1, {r2, r3}
    // Write until null-byte
    while (*str) {
 800ad78:	e014      	b.n	800ada4 <ssd1306_WriteString+0x3c>
        if (ssd1306_WriteChar(ssd, *str, Font, color) != *str) {
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	7819      	ldrb	r1, [r3, #0]
 800ad7e:	7e3b      	ldrb	r3, [r7, #24]
 800ad80:	9300      	str	r3, [sp, #0]
 800ad82:	463b      	mov	r3, r7
 800ad84:	cb0c      	ldmia	r3, {r2, r3}
 800ad86:	68f8      	ldr	r0, [r7, #12]
 800ad88:	f7ff feda 	bl	800ab40 <ssd1306_WriteChar>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	461a      	mov	r2, r3
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d002      	beq.n	800ad9e <ssd1306_WriteString+0x36>
            // Char could not be written
            return *str;
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	e008      	b.n	800adb0 <ssd1306_WriteString+0x48>
        }
        
        // Next char
        str++;
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	3301      	adds	r3, #1
 800ada2:	60bb      	str	r3, [r7, #8]
    while (*str) {
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d1e6      	bne.n	800ad7a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	781b      	ldrb	r3, [r3, #0]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(SSD1306_t *ssd, uint8_t x, uint8_t y) {
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	460b      	mov	r3, r1
 800adc2:	70fb      	strb	r3, [r7, #3]
 800adc4:	4613      	mov	r3, r2
 800adc6:	70bb      	strb	r3, [r7, #2]
    SSD1306.CurrentX = x;
 800adc8:	78fb      	ldrb	r3, [r7, #3]
 800adca:	b29a      	uxth	r2, r3
 800adcc:	4b05      	ldr	r3, [pc, #20]	; (800ade4 <ssd1306_SetCursor+0x2c>)
 800adce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800add0:	78bb      	ldrb	r3, [r7, #2]
 800add2:	b29a      	uxth	r2, r3
 800add4:	4b03      	ldr	r3, [pc, #12]	; (800ade4 <ssd1306_SetCursor+0x2c>)
 800add6:	805a      	strh	r2, [r3, #2]
}
 800add8:	bf00      	nop
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr
 800ade4:	20000364 	.word	0x20000364

0800ade8 <ssd1306_DrawBat>:


//draw a battery sign 16x9
void ssd1306_DrawBat(SSD1306_t *ssd,uint8_t level, SignDef Sign, SSD1306_COLOR color){
 800ade8:	b580      	push	{r7, lr}
 800adea:	b086      	sub	sp, #24
 800adec:	af02      	add	r7, sp, #8
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	4608      	mov	r0, r1
 800adf2:	4639      	mov	r1, r7
 800adf4:	e881 000c 	stmia.w	r1, {r2, r3}
 800adf8:	4603      	mov	r3, r0
 800adfa:	72fb      	strb	r3, [r7, #11]
	ssd1306_DrawSign(ssd, level, Sign, color);
 800adfc:	7af9      	ldrb	r1, [r7, #11]
 800adfe:	7e3b      	ldrb	r3, [r7, #24]
 800ae00:	9300      	str	r3, [sp, #0]
 800ae02:	463b      	mov	r3, r7
 800ae04:	cb0c      	ldmia	r3, {r2, r3}
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f7ff ff22 	bl	800ac50 <ssd1306_DrawSign>
}
 800ae0c:	bf00      	nop
 800ae0e:	3710      	adds	r7, #16
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <ssd1306_DrawHLine>:

//draw a horizontal line
void ssd1306_DrawHLine(SSD1306_t *ssd, uint8_t x1, uint8_t x2, uint8_t y,SSD1306_COLOR color){
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	4608      	mov	r0, r1
 800ae1e:	4611      	mov	r1, r2
 800ae20:	461a      	mov	r2, r3
 800ae22:	4603      	mov	r3, r0
 800ae24:	70fb      	strb	r3, [r7, #3]
 800ae26:	460b      	mov	r3, r1
 800ae28:	70bb      	strb	r3, [r7, #2]
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	707b      	strb	r3, [r7, #1]
	uint8_t dx=abs(x2-x1);
 800ae2e:	78ba      	ldrb	r2, [r7, #2]
 800ae30:	78fb      	ldrb	r3, [r7, #3]
 800ae32:	1ad3      	subs	r3, r2, r3
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	bfb8      	it	lt
 800ae38:	425b      	neglt	r3, r3
 800ae3a:	72fb      	strb	r3, [r7, #11]
	for(int i=0;i<dx+1;i++){
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	60fb      	str	r3, [r7, #12]
 800ae40:	e01f      	b.n	800ae82 <ssd1306_DrawHLine+0x6e>
		if (x1<x2){
 800ae42:	78fa      	ldrb	r2, [r7, #3]
 800ae44:	78bb      	ldrb	r3, [r7, #2]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d20a      	bcs.n	800ae60 <ssd1306_DrawHLine+0x4c>
			ssd1306_DrawPixel(ssd,x1+i,y,color);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	b2da      	uxtb	r2, r3
 800ae4e:	78fb      	ldrb	r3, [r7, #3]
 800ae50:	4413      	add	r3, r2
 800ae52:	b2d9      	uxtb	r1, r3
 800ae54:	7e3b      	ldrb	r3, [r7, #24]
 800ae56:	787a      	ldrb	r2, [r7, #1]
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f7ff fe09 	bl	800aa70 <ssd1306_DrawPixel>
 800ae5e:	e00d      	b.n	800ae7c <ssd1306_DrawHLine+0x68>
		}else if(x1>x2){
 800ae60:	78fa      	ldrb	r2, [r7, #3]
 800ae62:	78bb      	ldrb	r3, [r7, #2]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d909      	bls.n	800ae7c <ssd1306_DrawHLine+0x68>
			ssd1306_DrawPixel(ssd,x2+i,y,color);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	b2da      	uxtb	r2, r3
 800ae6c:	78bb      	ldrb	r3, [r7, #2]
 800ae6e:	4413      	add	r3, r2
 800ae70:	b2d9      	uxtb	r1, r3
 800ae72:	7e3b      	ldrb	r3, [r7, #24]
 800ae74:	787a      	ldrb	r2, [r7, #1]
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f7ff fdfa 	bl	800aa70 <ssd1306_DrawPixel>
	for(int i=0;i<dx+1;i++){
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	60fb      	str	r3, [r7, #12]
 800ae82:	7afb      	ldrb	r3, [r7, #11]
 800ae84:	3301      	adds	r3, #1
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	dbda      	blt.n	800ae42 <ssd1306_DrawHLine+0x2e>
		}
	}
}
 800ae8c:	bf00      	nop
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <ssd1306_DrawVLine>:

//draw a vertical line
void ssd1306_DrawVLine(SSD1306_t *ssd, uint8_t x, uint8_t y1, uint8_t y2,SSD1306_COLOR color){
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	4608      	mov	r0, r1
 800ae9e:	4611      	mov	r1, r2
 800aea0:	461a      	mov	r2, r3
 800aea2:	4603      	mov	r3, r0
 800aea4:	70fb      	strb	r3, [r7, #3]
 800aea6:	460b      	mov	r3, r1
 800aea8:	70bb      	strb	r3, [r7, #2]
 800aeaa:	4613      	mov	r3, r2
 800aeac:	707b      	strb	r3, [r7, #1]
	uint8_t dy=abs(y2-y1);
 800aeae:	787a      	ldrb	r2, [r7, #1]
 800aeb0:	78bb      	ldrb	r3, [r7, #2]
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	bfb8      	it	lt
 800aeb8:	425b      	neglt	r3, r3
 800aeba:	72fb      	strb	r3, [r7, #11]
	for(int i=0;i<dy+1;i++){
 800aebc:	2300      	movs	r3, #0
 800aebe:	60fb      	str	r3, [r7, #12]
 800aec0:	e01f      	b.n	800af02 <ssd1306_DrawVLine+0x6e>
		if (y1<y2){
 800aec2:	78ba      	ldrb	r2, [r7, #2]
 800aec4:	787b      	ldrb	r3, [r7, #1]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d20a      	bcs.n	800aee0 <ssd1306_DrawVLine+0x4c>
			ssd1306_DrawPixel(ssd,x,y1+i,color);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	b2da      	uxtb	r2, r3
 800aece:	78bb      	ldrb	r3, [r7, #2]
 800aed0:	4413      	add	r3, r2
 800aed2:	b2da      	uxtb	r2, r3
 800aed4:	7e3b      	ldrb	r3, [r7, #24]
 800aed6:	78f9      	ldrb	r1, [r7, #3]
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f7ff fdc9 	bl	800aa70 <ssd1306_DrawPixel>
 800aede:	e00d      	b.n	800aefc <ssd1306_DrawVLine+0x68>
		}else if(y1>y2){
 800aee0:	78ba      	ldrb	r2, [r7, #2]
 800aee2:	787b      	ldrb	r3, [r7, #1]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d909      	bls.n	800aefc <ssd1306_DrawVLine+0x68>
			ssd1306_DrawPixel(ssd,x,y2+i,color);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	b2da      	uxtb	r2, r3
 800aeec:	787b      	ldrb	r3, [r7, #1]
 800aeee:	4413      	add	r3, r2
 800aef0:	b2da      	uxtb	r2, r3
 800aef2:	7e3b      	ldrb	r3, [r7, #24]
 800aef4:	78f9      	ldrb	r1, [r7, #3]
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f7ff fdba 	bl	800aa70 <ssd1306_DrawPixel>
	for(int i=0;i<dy+1;i++){
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	3301      	adds	r3, #1
 800af00:	60fb      	str	r3, [r7, #12]
 800af02:	7afb      	ldrb	r3, [r7, #11]
 800af04:	3301      	adds	r3, #1
 800af06:	68fa      	ldr	r2, [r7, #12]
 800af08:	429a      	cmp	r2, r3
 800af0a:	dbda      	blt.n	800aec2 <ssd1306_DrawVLine+0x2e>
		}
	}
}
 800af0c:	bf00      	nop
 800af0e:	3710      	adds	r7, #16
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800af1a:	2300      	movs	r3, #0
 800af1c:	607b      	str	r3, [r7, #4]
 800af1e:	4b10      	ldr	r3, [pc, #64]	; (800af60 <HAL_MspInit+0x4c>)
 800af20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af22:	4a0f      	ldr	r2, [pc, #60]	; (800af60 <HAL_MspInit+0x4c>)
 800af24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af28:	6453      	str	r3, [r2, #68]	; 0x44
 800af2a:	4b0d      	ldr	r3, [pc, #52]	; (800af60 <HAL_MspInit+0x4c>)
 800af2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af32:	607b      	str	r3, [r7, #4]
 800af34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800af36:	2300      	movs	r3, #0
 800af38:	603b      	str	r3, [r7, #0]
 800af3a:	4b09      	ldr	r3, [pc, #36]	; (800af60 <HAL_MspInit+0x4c>)
 800af3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af3e:	4a08      	ldr	r2, [pc, #32]	; (800af60 <HAL_MspInit+0x4c>)
 800af40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af44:	6413      	str	r3, [r2, #64]	; 0x40
 800af46:	4b06      	ldr	r3, [pc, #24]	; (800af60 <HAL_MspInit+0x4c>)
 800af48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af4e:	603b      	str	r3, [r7, #0]
 800af50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800af52:	bf00      	nop
 800af54:	370c      	adds	r7, #12
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr
 800af5e:	bf00      	nop
 800af60:	40023800 	.word	0x40023800

0800af64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b08a      	sub	sp, #40	; 0x28
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af6c:	f107 0314 	add.w	r3, r7, #20
 800af70:	2200      	movs	r2, #0
 800af72:	601a      	str	r2, [r3, #0]
 800af74:	605a      	str	r2, [r3, #4]
 800af76:	609a      	str	r2, [r3, #8]
 800af78:	60da      	str	r2, [r3, #12]
 800af7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a17      	ldr	r2, [pc, #92]	; (800afe0 <HAL_ADC_MspInit+0x7c>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d127      	bne.n	800afd6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800af86:	2300      	movs	r3, #0
 800af88:	613b      	str	r3, [r7, #16]
 800af8a:	4b16      	ldr	r3, [pc, #88]	; (800afe4 <HAL_ADC_MspInit+0x80>)
 800af8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af8e:	4a15      	ldr	r2, [pc, #84]	; (800afe4 <HAL_ADC_MspInit+0x80>)
 800af90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af94:	6453      	str	r3, [r2, #68]	; 0x44
 800af96:	4b13      	ldr	r3, [pc, #76]	; (800afe4 <HAL_ADC_MspInit+0x80>)
 800af98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af9e:	613b      	str	r3, [r7, #16]
 800afa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800afa2:	2300      	movs	r3, #0
 800afa4:	60fb      	str	r3, [r7, #12]
 800afa6:	4b0f      	ldr	r3, [pc, #60]	; (800afe4 <HAL_ADC_MspInit+0x80>)
 800afa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afaa:	4a0e      	ldr	r2, [pc, #56]	; (800afe4 <HAL_ADC_MspInit+0x80>)
 800afac:	f043 0302 	orr.w	r3, r3, #2
 800afb0:	6313      	str	r3, [r2, #48]	; 0x30
 800afb2:	4b0c      	ldr	r3, [pc, #48]	; (800afe4 <HAL_ADC_MspInit+0x80>)
 800afb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afb6:	f003 0302 	and.w	r3, r3, #2
 800afba:	60fb      	str	r3, [r7, #12]
 800afbc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_BAT_Pin;
 800afbe:	2302      	movs	r3, #2
 800afc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800afc2:	2303      	movs	r3, #3
 800afc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afc6:	2300      	movs	r3, #0
 800afc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_BAT_GPIO_Port, &GPIO_InitStruct);
 800afca:	f107 0314 	add.w	r3, r7, #20
 800afce:	4619      	mov	r1, r3
 800afd0:	4805      	ldr	r0, [pc, #20]	; (800afe8 <HAL_ADC_MspInit+0x84>)
 800afd2:	f7f6 fb9b 	bl	800170c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800afd6:	bf00      	nop
 800afd8:	3728      	adds	r7, #40	; 0x28
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	40012000 	.word	0x40012000
 800afe4:	40023800 	.word	0x40023800
 800afe8:	40020400 	.word	0x40020400

0800afec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b08c      	sub	sp, #48	; 0x30
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aff4:	f107 031c 	add.w	r3, r7, #28
 800aff8:	2200      	movs	r2, #0
 800affa:	601a      	str	r2, [r3, #0]
 800affc:	605a      	str	r2, [r3, #4]
 800affe:	609a      	str	r2, [r3, #8]
 800b000:	60da      	str	r2, [r3, #12]
 800b002:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a42      	ldr	r2, [pc, #264]	; (800b114 <HAL_I2C_MspInit+0x128>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d12d      	bne.n	800b06a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b00e:	2300      	movs	r3, #0
 800b010:	61bb      	str	r3, [r7, #24]
 800b012:	4b41      	ldr	r3, [pc, #260]	; (800b118 <HAL_I2C_MspInit+0x12c>)
 800b014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b016:	4a40      	ldr	r2, [pc, #256]	; (800b118 <HAL_I2C_MspInit+0x12c>)
 800b018:	f043 0302 	orr.w	r3, r3, #2
 800b01c:	6313      	str	r3, [r2, #48]	; 0x30
 800b01e:	4b3e      	ldr	r3, [pc, #248]	; (800b118 <HAL_I2C_MspInit+0x12c>)
 800b020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b022:	f003 0302 	and.w	r3, r3, #2
 800b026:	61bb      	str	r3, [r7, #24]
 800b028:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800b02a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b02e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b030:	2312      	movs	r3, #18
 800b032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b034:	2301      	movs	r3, #1
 800b036:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b038:	2303      	movs	r3, #3
 800b03a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b03c:	2304      	movs	r3, #4
 800b03e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b040:	f107 031c 	add.w	r3, r7, #28
 800b044:	4619      	mov	r1, r3
 800b046:	4835      	ldr	r0, [pc, #212]	; (800b11c <HAL_I2C_MspInit+0x130>)
 800b048:	f7f6 fb60 	bl	800170c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b04c:	2300      	movs	r3, #0
 800b04e:	617b      	str	r3, [r7, #20]
 800b050:	4b31      	ldr	r3, [pc, #196]	; (800b118 <HAL_I2C_MspInit+0x12c>)
 800b052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b054:	4a30      	ldr	r2, [pc, #192]	; (800b118 <HAL_I2C_MspInit+0x12c>)
 800b056:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b05a:	6413      	str	r3, [r2, #64]	; 0x40
 800b05c:	4b2e      	ldr	r3, [pc, #184]	; (800b118 <HAL_I2C_MspInit+0x12c>)
 800b05e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b064:	617b      	str	r3, [r7, #20]
 800b066:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800b068:	e050      	b.n	800b10c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a2c      	ldr	r2, [pc, #176]	; (800b120 <HAL_I2C_MspInit+0x134>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d14b      	bne.n	800b10c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b074:	2300      	movs	r3, #0
 800b076:	613b      	str	r3, [r7, #16]
 800b078:	4b27      	ldr	r3, [pc, #156]	; (800b118 <HAL_I2C_MspInit+0x12c>)
 800b07a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b07c:	4a26      	ldr	r2, [pc, #152]	; (800b118 <HAL_I2C_MspInit+0x12c>)
 800b07e:	f043 0304 	orr.w	r3, r3, #4
 800b082:	6313      	str	r3, [r2, #48]	; 0x30
 800b084:	4b24      	ldr	r3, [pc, #144]	; (800b118 <HAL_I2C_MspInit+0x12c>)
 800b086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b088:	f003 0304 	and.w	r3, r3, #4
 800b08c:	613b      	str	r3, [r7, #16]
 800b08e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b090:	2300      	movs	r3, #0
 800b092:	60fb      	str	r3, [r7, #12]
 800b094:	4b20      	ldr	r3, [pc, #128]	; (800b118 <HAL_I2C_MspInit+0x12c>)
 800b096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b098:	4a1f      	ldr	r2, [pc, #124]	; (800b118 <HAL_I2C_MspInit+0x12c>)
 800b09a:	f043 0301 	orr.w	r3, r3, #1
 800b09e:	6313      	str	r3, [r2, #48]	; 0x30
 800b0a0:	4b1d      	ldr	r3, [pc, #116]	; (800b118 <HAL_I2C_MspInit+0x12c>)
 800b0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a4:	f003 0301 	and.w	r3, r3, #1
 800b0a8:	60fb      	str	r3, [r7, #12]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b0ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b0b2:	2312      	movs	r3, #18
 800b0b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0ba:	2303      	movs	r3, #3
 800b0bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800b0be:	2304      	movs	r3, #4
 800b0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b0c2:	f107 031c 	add.w	r3, r7, #28
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	4816      	ldr	r0, [pc, #88]	; (800b124 <HAL_I2C_MspInit+0x138>)
 800b0ca:	f7f6 fb1f 	bl	800170c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800b0ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b0d4:	2312      	movs	r3, #18
 800b0d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0dc:	2303      	movs	r3, #3
 800b0de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800b0e0:	2304      	movs	r3, #4
 800b0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b0e4:	f107 031c 	add.w	r3, r7, #28
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	480f      	ldr	r0, [pc, #60]	; (800b128 <HAL_I2C_MspInit+0x13c>)
 800b0ec:	f7f6 fb0e 	bl	800170c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	60bb      	str	r3, [r7, #8]
 800b0f4:	4b08      	ldr	r3, [pc, #32]	; (800b118 <HAL_I2C_MspInit+0x12c>)
 800b0f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f8:	4a07      	ldr	r2, [pc, #28]	; (800b118 <HAL_I2C_MspInit+0x12c>)
 800b0fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b0fe:	6413      	str	r3, [r2, #64]	; 0x40
 800b100:	4b05      	ldr	r3, [pc, #20]	; (800b118 <HAL_I2C_MspInit+0x12c>)
 800b102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b104:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b108:	60bb      	str	r3, [r7, #8]
 800b10a:	68bb      	ldr	r3, [r7, #8]
}
 800b10c:	bf00      	nop
 800b10e:	3730      	adds	r7, #48	; 0x30
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	40005400 	.word	0x40005400
 800b118:	40023800 	.word	0x40023800
 800b11c:	40020400 	.word	0x40020400
 800b120:	40005c00 	.word	0x40005c00
 800b124:	40020800 	.word	0x40020800
 800b128:	40020000 	.word	0x40020000

0800b12c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b08a      	sub	sp, #40	; 0x28
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b134:	f107 0314 	add.w	r3, r7, #20
 800b138:	2200      	movs	r2, #0
 800b13a:	601a      	str	r2, [r3, #0]
 800b13c:	605a      	str	r2, [r3, #4]
 800b13e:	609a      	str	r2, [r3, #8]
 800b140:	60da      	str	r2, [r3, #12]
 800b142:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4a6b      	ldr	r2, [pc, #428]	; (800b2f8 <HAL_I2S_MspInit+0x1cc>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	f040 80d0 	bne.w	800b2f0 <HAL_I2S_MspInit+0x1c4>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b150:	2300      	movs	r3, #0
 800b152:	613b      	str	r3, [r7, #16]
 800b154:	4b69      	ldr	r3, [pc, #420]	; (800b2fc <HAL_I2S_MspInit+0x1d0>)
 800b156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b158:	4a68      	ldr	r2, [pc, #416]	; (800b2fc <HAL_I2S_MspInit+0x1d0>)
 800b15a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b15e:	6413      	str	r3, [r2, #64]	; 0x40
 800b160:	4b66      	ldr	r3, [pc, #408]	; (800b2fc <HAL_I2S_MspInit+0x1d0>)
 800b162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b168:	613b      	str	r3, [r7, #16]
 800b16a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b16c:	2300      	movs	r3, #0
 800b16e:	60fb      	str	r3, [r7, #12]
 800b170:	4b62      	ldr	r3, [pc, #392]	; (800b2fc <HAL_I2S_MspInit+0x1d0>)
 800b172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b174:	4a61      	ldr	r2, [pc, #388]	; (800b2fc <HAL_I2S_MspInit+0x1d0>)
 800b176:	f043 0304 	orr.w	r3, r3, #4
 800b17a:	6313      	str	r3, [r2, #48]	; 0x30
 800b17c:	4b5f      	ldr	r3, [pc, #380]	; (800b2fc <HAL_I2S_MspInit+0x1d0>)
 800b17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b180:	f003 0304 	and.w	r3, r3, #4
 800b184:	60fb      	str	r3, [r7, #12]
 800b186:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b188:	2300      	movs	r3, #0
 800b18a:	60bb      	str	r3, [r7, #8]
 800b18c:	4b5b      	ldr	r3, [pc, #364]	; (800b2fc <HAL_I2S_MspInit+0x1d0>)
 800b18e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b190:	4a5a      	ldr	r2, [pc, #360]	; (800b2fc <HAL_I2S_MspInit+0x1d0>)
 800b192:	f043 0302 	orr.w	r3, r3, #2
 800b196:	6313      	str	r3, [r2, #48]	; 0x30
 800b198:	4b58      	ldr	r3, [pc, #352]	; (800b2fc <HAL_I2S_MspInit+0x1d0>)
 800b19a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b19c:	f003 0302 	and.w	r3, r3, #2
 800b1a0:	60bb      	str	r3, [r7, #8]
 800b1a2:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = I2S2_DIN_Pin;
 800b1a4:	2304      	movs	r3, #4
 800b1a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1a8:	2302      	movs	r3, #2
 800b1aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 800b1b4:	2306      	movs	r3, #6
 800b1b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S2_DIN_GPIO_Port, &GPIO_InitStruct);
 800b1b8:	f107 0314 	add.w	r3, r7, #20
 800b1bc:	4619      	mov	r1, r3
 800b1be:	4850      	ldr	r0, [pc, #320]	; (800b300 <HAL_I2S_MspInit+0x1d4>)
 800b1c0:	f7f6 faa4 	bl	800170c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S2_DOUT_Pin;
 800b1c4:	2308      	movs	r3, #8
 800b1c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1c8:	2302      	movs	r3, #2
 800b1ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b1d4:	2305      	movs	r3, #5
 800b1d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S2_DOUT_GPIO_Port, &GPIO_InitStruct);
 800b1d8:	f107 0314 	add.w	r3, r7, #20
 800b1dc:	4619      	mov	r1, r3
 800b1de:	4848      	ldr	r0, [pc, #288]	; (800b300 <HAL_I2S_MspInit+0x1d4>)
 800b1e0:	f7f6 fa94 	bl	800170c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800b1e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800b1e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1ea:	2302      	movs	r3, #2
 800b1ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b1f6:	2305      	movs	r3, #5
 800b1f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b1fa:	f107 0314 	add.w	r3, r7, #20
 800b1fe:	4619      	mov	r1, r3
 800b200:	4840      	ldr	r0, [pc, #256]	; (800b304 <HAL_I2S_MspInit+0x1d8>)
 800b202:	f7f6 fa83 	bl	800170c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 800b206:	4b40      	ldr	r3, [pc, #256]	; (800b308 <HAL_I2S_MspInit+0x1dc>)
 800b208:	4a40      	ldr	r2, [pc, #256]	; (800b30c <HAL_I2S_MspInit+0x1e0>)
 800b20a:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 800b20c:	4b3e      	ldr	r3, [pc, #248]	; (800b308 <HAL_I2S_MspInit+0x1dc>)
 800b20e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800b212:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b214:	4b3c      	ldr	r3, [pc, #240]	; (800b308 <HAL_I2S_MspInit+0x1dc>)
 800b216:	2200      	movs	r2, #0
 800b218:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b21a:	4b3b      	ldr	r3, [pc, #236]	; (800b308 <HAL_I2S_MspInit+0x1dc>)
 800b21c:	2200      	movs	r2, #0
 800b21e:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b220:	4b39      	ldr	r3, [pc, #228]	; (800b308 <HAL_I2S_MspInit+0x1dc>)
 800b222:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b226:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800b228:	4b37      	ldr	r3, [pc, #220]	; (800b308 <HAL_I2S_MspInit+0x1dc>)
 800b22a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b22e:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800b230:	4b35      	ldr	r3, [pc, #212]	; (800b308 <HAL_I2S_MspInit+0x1dc>)
 800b232:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b236:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 800b238:	4b33      	ldr	r3, [pc, #204]	; (800b308 <HAL_I2S_MspInit+0x1dc>)
 800b23a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b23e:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800b240:	4b31      	ldr	r3, [pc, #196]	; (800b308 <HAL_I2S_MspInit+0x1dc>)
 800b242:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b246:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b248:	4b2f      	ldr	r3, [pc, #188]	; (800b308 <HAL_I2S_MspInit+0x1dc>)
 800b24a:	2204      	movs	r2, #4
 800b24c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2s2_ext_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800b24e:	4b2e      	ldr	r3, [pc, #184]	; (800b308 <HAL_I2S_MspInit+0x1dc>)
 800b250:	2201      	movs	r2, #1
 800b252:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2s2_ext_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800b254:	4b2c      	ldr	r3, [pc, #176]	; (800b308 <HAL_I2S_MspInit+0x1dc>)
 800b256:	2200      	movs	r2, #0
 800b258:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2s2_ext_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800b25a:	4b2b      	ldr	r3, [pc, #172]	; (800b308 <HAL_I2S_MspInit+0x1dc>)
 800b25c:	2200      	movs	r2, #0
 800b25e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 800b260:	4829      	ldr	r0, [pc, #164]	; (800b308 <HAL_I2S_MspInit+0x1dc>)
 800b262:	f7f5 fee5 	bl	8001030 <HAL_DMA_Init>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d001      	beq.n	800b270 <HAL_I2S_MspInit+0x144>
    {
      Error_Handler();
 800b26c:	f7ff fad6 	bl	800a81c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	4a25      	ldr	r2, [pc, #148]	; (800b308 <HAL_I2S_MspInit+0x1dc>)
 800b274:	63da      	str	r2, [r3, #60]	; 0x3c
 800b276:	4a24      	ldr	r2, [pc, #144]	; (800b308 <HAL_I2S_MspInit+0x1dc>)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800b27c:	4b24      	ldr	r3, [pc, #144]	; (800b310 <HAL_I2S_MspInit+0x1e4>)
 800b27e:	4a25      	ldr	r2, [pc, #148]	; (800b314 <HAL_I2S_MspInit+0x1e8>)
 800b280:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800b282:	4b23      	ldr	r3, [pc, #140]	; (800b310 <HAL_I2S_MspInit+0x1e4>)
 800b284:	2200      	movs	r2, #0
 800b286:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b288:	4b21      	ldr	r3, [pc, #132]	; (800b310 <HAL_I2S_MspInit+0x1e4>)
 800b28a:	2240      	movs	r2, #64	; 0x40
 800b28c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b28e:	4b20      	ldr	r3, [pc, #128]	; (800b310 <HAL_I2S_MspInit+0x1e4>)
 800b290:	2200      	movs	r2, #0
 800b292:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b294:	4b1e      	ldr	r3, [pc, #120]	; (800b310 <HAL_I2S_MspInit+0x1e4>)
 800b296:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b29a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800b29c:	4b1c      	ldr	r3, [pc, #112]	; (800b310 <HAL_I2S_MspInit+0x1e4>)
 800b29e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b2a2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800b2a4:	4b1a      	ldr	r3, [pc, #104]	; (800b310 <HAL_I2S_MspInit+0x1e4>)
 800b2a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b2aa:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800b2ac:	4b18      	ldr	r3, [pc, #96]	; (800b310 <HAL_I2S_MspInit+0x1e4>)
 800b2ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b2b2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800b2b4:	4b16      	ldr	r3, [pc, #88]	; (800b310 <HAL_I2S_MspInit+0x1e4>)
 800b2b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b2ba:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b2bc:	4b14      	ldr	r3, [pc, #80]	; (800b310 <HAL_I2S_MspInit+0x1e4>)
 800b2be:	2204      	movs	r2, #4
 800b2c0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800b2c2:	4b13      	ldr	r3, [pc, #76]	; (800b310 <HAL_I2S_MspInit+0x1e4>)
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800b2c8:	4b11      	ldr	r3, [pc, #68]	; (800b310 <HAL_I2S_MspInit+0x1e4>)
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800b2ce:	4b10      	ldr	r3, [pc, #64]	; (800b310 <HAL_I2S_MspInit+0x1e4>)
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800b2d4:	480e      	ldr	r0, [pc, #56]	; (800b310 <HAL_I2S_MspInit+0x1e4>)
 800b2d6:	f7f5 feab 	bl	8001030 <HAL_DMA_Init>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d001      	beq.n	800b2e4 <HAL_I2S_MspInit+0x1b8>
    {
      Error_Handler();
 800b2e0:	f7ff fa9c 	bl	800a81c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	4a0a      	ldr	r2, [pc, #40]	; (800b310 <HAL_I2S_MspInit+0x1e4>)
 800b2e8:	639a      	str	r2, [r3, #56]	; 0x38
 800b2ea:	4a09      	ldr	r2, [pc, #36]	; (800b310 <HAL_I2S_MspInit+0x1e4>)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800b2f0:	bf00      	nop
 800b2f2:	3728      	adds	r7, #40	; 0x28
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	40003800 	.word	0x40003800
 800b2fc:	40023800 	.word	0x40023800
 800b300:	40020800 	.word	0x40020800
 800b304:	40020400 	.word	0x40020400
 800b308:	20001990 	.word	0x20001990
 800b30c:	40026058 	.word	0x40026058
 800b310:	200019f0 	.word	0x200019f0
 800b314:	40026070 	.word	0x40026070

0800b318 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4a0e      	ldr	r2, [pc, #56]	; (800b360 <HAL_RNG_MspInit+0x48>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d115      	bne.n	800b356 <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800b32a:	2300      	movs	r3, #0
 800b32c:	60fb      	str	r3, [r7, #12]
 800b32e:	4b0d      	ldr	r3, [pc, #52]	; (800b364 <HAL_RNG_MspInit+0x4c>)
 800b330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b332:	4a0c      	ldr	r2, [pc, #48]	; (800b364 <HAL_RNG_MspInit+0x4c>)
 800b334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b338:	6353      	str	r3, [r2, #52]	; 0x34
 800b33a:	4b0a      	ldr	r3, [pc, #40]	; (800b364 <HAL_RNG_MspInit+0x4c>)
 800b33c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b33e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b342:	60fb      	str	r3, [r7, #12]
 800b344:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 0, 0);
 800b346:	2200      	movs	r2, #0
 800b348:	2100      	movs	r1, #0
 800b34a:	2050      	movs	r0, #80	; 0x50
 800b34c:	f7f5 fe39 	bl	8000fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 800b350:	2050      	movs	r0, #80	; 0x50
 800b352:	f7f5 fe52 	bl	8000ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800b356:	bf00      	nop
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	50060800 	.word	0x50060800
 800b364:	40023800 	.word	0x40023800

0800b368 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b08c      	sub	sp, #48	; 0x30
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b370:	f107 031c 	add.w	r3, r7, #28
 800b374:	2200      	movs	r2, #0
 800b376:	601a      	str	r2, [r3, #0]
 800b378:	605a      	str	r2, [r3, #4]
 800b37a:	609a      	str	r2, [r3, #8]
 800b37c:	60da      	str	r2, [r3, #12]
 800b37e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a32      	ldr	r2, [pc, #200]	; (800b450 <HAL_TIM_Encoder_MspInit+0xe8>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d12c      	bne.n	800b3e4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b38a:	2300      	movs	r3, #0
 800b38c:	61bb      	str	r3, [r7, #24]
 800b38e:	4b31      	ldr	r3, [pc, #196]	; (800b454 <HAL_TIM_Encoder_MspInit+0xec>)
 800b390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b392:	4a30      	ldr	r2, [pc, #192]	; (800b454 <HAL_TIM_Encoder_MspInit+0xec>)
 800b394:	f043 0302 	orr.w	r3, r3, #2
 800b398:	6413      	str	r3, [r2, #64]	; 0x40
 800b39a:	4b2e      	ldr	r3, [pc, #184]	; (800b454 <HAL_TIM_Encoder_MspInit+0xec>)
 800b39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b39e:	f003 0302 	and.w	r3, r3, #2
 800b3a2:	61bb      	str	r3, [r7, #24]
 800b3a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	617b      	str	r3, [r7, #20]
 800b3aa:	4b2a      	ldr	r3, [pc, #168]	; (800b454 <HAL_TIM_Encoder_MspInit+0xec>)
 800b3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ae:	4a29      	ldr	r2, [pc, #164]	; (800b454 <HAL_TIM_Encoder_MspInit+0xec>)
 800b3b0:	f043 0302 	orr.w	r3, r3, #2
 800b3b4:	6313      	str	r3, [r2, #48]	; 0x30
 800b3b6:	4b27      	ldr	r3, [pc, #156]	; (800b454 <HAL_TIM_Encoder_MspInit+0xec>)
 800b3b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ba:	f003 0302 	and.w	r3, r3, #2
 800b3be:	617b      	str	r3, [r7, #20]
 800b3c0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC2_B_Pin|ENC2_A_Pin;
 800b3c2:	2330      	movs	r3, #48	; 0x30
 800b3c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3c6:	2302      	movs	r3, #2
 800b3c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b3d2:	2302      	movs	r3, #2
 800b3d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b3d6:	f107 031c 	add.w	r3, r7, #28
 800b3da:	4619      	mov	r1, r3
 800b3dc:	481e      	ldr	r0, [pc, #120]	; (800b458 <HAL_TIM_Encoder_MspInit+0xf0>)
 800b3de:	f7f6 f995 	bl	800170c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800b3e2:	e030      	b.n	800b446 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4a1c      	ldr	r2, [pc, #112]	; (800b45c <HAL_TIM_Encoder_MspInit+0xf4>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d12b      	bne.n	800b446 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	613b      	str	r3, [r7, #16]
 800b3f2:	4b18      	ldr	r3, [pc, #96]	; (800b454 <HAL_TIM_Encoder_MspInit+0xec>)
 800b3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f6:	4a17      	ldr	r2, [pc, #92]	; (800b454 <HAL_TIM_Encoder_MspInit+0xec>)
 800b3f8:	f043 0304 	orr.w	r3, r3, #4
 800b3fc:	6413      	str	r3, [r2, #64]	; 0x40
 800b3fe:	4b15      	ldr	r3, [pc, #84]	; (800b454 <HAL_TIM_Encoder_MspInit+0xec>)
 800b400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b402:	f003 0304 	and.w	r3, r3, #4
 800b406:	613b      	str	r3, [r7, #16]
 800b408:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b40a:	2300      	movs	r3, #0
 800b40c:	60fb      	str	r3, [r7, #12]
 800b40e:	4b11      	ldr	r3, [pc, #68]	; (800b454 <HAL_TIM_Encoder_MspInit+0xec>)
 800b410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b412:	4a10      	ldr	r2, [pc, #64]	; (800b454 <HAL_TIM_Encoder_MspInit+0xec>)
 800b414:	f043 0302 	orr.w	r3, r3, #2
 800b418:	6313      	str	r3, [r2, #48]	; 0x30
 800b41a:	4b0e      	ldr	r3, [pc, #56]	; (800b454 <HAL_TIM_Encoder_MspInit+0xec>)
 800b41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b41e:	f003 0302 	and.w	r3, r3, #2
 800b422:	60fb      	str	r3, [r7, #12]
 800b424:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin;
 800b426:	23c0      	movs	r3, #192	; 0xc0
 800b428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b42a:	2302      	movs	r3, #2
 800b42c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b42e:	2300      	movs	r3, #0
 800b430:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b432:	2300      	movs	r3, #0
 800b434:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800b436:	2302      	movs	r3, #2
 800b438:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b43a:	f107 031c 	add.w	r3, r7, #28
 800b43e:	4619      	mov	r1, r3
 800b440:	4805      	ldr	r0, [pc, #20]	; (800b458 <HAL_TIM_Encoder_MspInit+0xf0>)
 800b442:	f7f6 f963 	bl	800170c <HAL_GPIO_Init>
}
 800b446:	bf00      	nop
 800b448:	3730      	adds	r7, #48	; 0x30
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	40000400 	.word	0x40000400
 800b454:	40023800 	.word	0x40023800
 800b458:	40020400 	.word	0x40020400
 800b45c:	40000800 	.word	0x40000800

0800b460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b08a      	sub	sp, #40	; 0x28
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b468:	f107 0314 	add.w	r3, r7, #20
 800b46c:	2200      	movs	r2, #0
 800b46e:	601a      	str	r2, [r3, #0]
 800b470:	605a      	str	r2, [r3, #4]
 800b472:	609a      	str	r2, [r3, #8]
 800b474:	60da      	str	r2, [r3, #12]
 800b476:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	4a19      	ldr	r2, [pc, #100]	; (800b4e4 <HAL_UART_MspInit+0x84>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d12c      	bne.n	800b4dc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b482:	2300      	movs	r3, #0
 800b484:	613b      	str	r3, [r7, #16]
 800b486:	4b18      	ldr	r3, [pc, #96]	; (800b4e8 <HAL_UART_MspInit+0x88>)
 800b488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b48a:	4a17      	ldr	r2, [pc, #92]	; (800b4e8 <HAL_UART_MspInit+0x88>)
 800b48c:	f043 0310 	orr.w	r3, r3, #16
 800b490:	6453      	str	r3, [r2, #68]	; 0x44
 800b492:	4b15      	ldr	r3, [pc, #84]	; (800b4e8 <HAL_UART_MspInit+0x88>)
 800b494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b496:	f003 0310 	and.w	r3, r3, #16
 800b49a:	613b      	str	r3, [r7, #16]
 800b49c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b49e:	2300      	movs	r3, #0
 800b4a0:	60fb      	str	r3, [r7, #12]
 800b4a2:	4b11      	ldr	r3, [pc, #68]	; (800b4e8 <HAL_UART_MspInit+0x88>)
 800b4a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a6:	4a10      	ldr	r2, [pc, #64]	; (800b4e8 <HAL_UART_MspInit+0x88>)
 800b4a8:	f043 0301 	orr.w	r3, r3, #1
 800b4ac:	6313      	str	r3, [r2, #48]	; 0x30
 800b4ae:	4b0e      	ldr	r3, [pc, #56]	; (800b4e8 <HAL_UART_MspInit+0x88>)
 800b4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b2:	f003 0301 	and.w	r3, r3, #1
 800b4b6:	60fb      	str	r3, [r7, #12]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800b4ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b4be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4c0:	2302      	movs	r3, #2
 800b4c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4c8:	2303      	movs	r3, #3
 800b4ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b4cc:	2307      	movs	r3, #7
 800b4ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b4d0:	f107 0314 	add.w	r3, r7, #20
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	4805      	ldr	r0, [pc, #20]	; (800b4ec <HAL_UART_MspInit+0x8c>)
 800b4d8:	f7f6 f918 	bl	800170c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b4dc:	bf00      	nop
 800b4de:	3728      	adds	r7, #40	; 0x28
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	40011000 	.word	0x40011000
 800b4e8:	40023800 	.word	0x40023800
 800b4ec:	40020000 	.word	0x40020000

0800b4f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b4f4:	bf00      	nop
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr

0800b4fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b4fe:	b480      	push	{r7}
 800b500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b502:	e7fe      	b.n	800b502 <HardFault_Handler+0x4>

0800b504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b504:	b480      	push	{r7}
 800b506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b508:	e7fe      	b.n	800b508 <MemManage_Handler+0x4>

0800b50a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b50a:	b480      	push	{r7}
 800b50c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b50e:	e7fe      	b.n	800b50e <BusFault_Handler+0x4>

0800b510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b510:	b480      	push	{r7}
 800b512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b514:	e7fe      	b.n	800b514 <UsageFault_Handler+0x4>

0800b516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b516:	b480      	push	{r7}
 800b518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b51a:	bf00      	nop
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b524:	b480      	push	{r7}
 800b526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b528:	bf00      	nop
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr

0800b532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b532:	b480      	push	{r7}
 800b534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b536:	bf00      	nop
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b544:	f7f5 f886 	bl	8000654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b548:	bf00      	nop
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	// SW1 = right PA0 EXTI0
	btnRightPressed++;
 800b550:	4b05      	ldr	r3, [pc, #20]	; (800b568 <EXTI0_IRQHandler+0x1c>)
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	b2db      	uxtb	r3, r3
 800b556:	3301      	adds	r3, #1
 800b558:	b2da      	uxtb	r2, r3
 800b55a:	4b03      	ldr	r3, [pc, #12]	; (800b568 <EXTI0_IRQHandler+0x1c>)
 800b55c:	701a      	strb	r2, [r3, #0]
	// @TODO positive negative edge event

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800b55e:	2001      	movs	r0, #1
 800b560:	f7f6 fa80 	bl	8001a64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800b564:	bf00      	nop
 800b566:	bd80      	pop	{r7, pc}
 800b568:	20000359 	.word	0x20000359

0800b56c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	// SW2 = left  PA1 EXTI1
	btnLeftPressed++;
 800b570:	4b05      	ldr	r3, [pc, #20]	; (800b588 <EXTI1_IRQHandler+0x1c>)
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	b2db      	uxtb	r3, r3
 800b576:	3301      	adds	r3, #1
 800b578:	b2da      	uxtb	r2, r3
 800b57a:	4b03      	ldr	r3, [pc, #12]	; (800b588 <EXTI1_IRQHandler+0x1c>)
 800b57c:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800b57e:	2002      	movs	r0, #2
 800b580:	f7f6 fa70 	bl	8001a64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800b584:	bf00      	nop
 800b586:	bd80      	pop	{r7, pc}
 800b588:	20000358 	.word	0x20000358

0800b58c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */
	/* DMA STREAM 3 is I2S2 RX complete */
	dmaTransferComplete++;
 800b590:	4b18      	ldr	r3, [pc, #96]	; (800b5f4 <DMA1_Stream3_IRQHandler+0x68>)
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	b2db      	uxtb	r3, r3
 800b596:	3301      	adds	r3, #1
 800b598:	b2da      	uxtb	r2, r3
 800b59a:	4b16      	ldr	r3, [pc, #88]	; (800b5f4 <DMA1_Stream3_IRQHandler+0x68>)
 800b59c:	701a      	strb	r2, [r3, #0]
	// HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 800b59e:	4816      	ldr	r0, [pc, #88]	; (800b5f8 <DMA1_Stream3_IRQHandler+0x6c>)
 800b5a0:	f7f5 fe4c 	bl	800123c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */
	// arm_fir_f32() is called in this function
	switch (*input_source) {
 800b5a4:	4b15      	ldr	r3, [pc, #84]	; (800b5fc <DMA1_Stream3_IRQHandler+0x70>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2b03      	cmp	r3, #3
 800b5ac:	d103      	bne.n	800b5b6 <DMA1_Stream3_IRQHandler+0x2a>
	case 3:
		pAUDIO_src = &USB_buffer[0];
 800b5ae:	4b14      	ldr	r3, [pc, #80]	; (800b600 <DMA1_Stream3_IRQHandler+0x74>)
 800b5b0:	4a14      	ldr	r2, [pc, #80]	; (800b604 <DMA1_Stream3_IRQHandler+0x78>)
 800b5b2:	601a      	str	r2, [r3, #0]
		break;
 800b5b4:	e007      	b.n	800b5c6 <DMA1_Stream3_IRQHandler+0x3a>
	default:
		pAUDIO_src = &pRxData[0] + buffer_offset;
 800b5b6:	4b14      	ldr	r3, [pc, #80]	; (800b608 <DMA1_Stream3_IRQHandler+0x7c>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	005b      	lsls	r3, r3, #1
 800b5bc:	4a13      	ldr	r2, [pc, #76]	; (800b60c <DMA1_Stream3_IRQHandler+0x80>)
 800b5be:	4413      	add	r3, r2
 800b5c0:	4a0f      	ldr	r2, [pc, #60]	; (800b600 <DMA1_Stream3_IRQHandler+0x74>)
 800b5c2:	6013      	str	r3, [r2, #0]
		break;
 800b5c4:	bf00      	nop
	}

	DSP_Process_Data(pAUDIO_src, (pTxData + buffer_offset));
 800b5c6:	4b0e      	ldr	r3, [pc, #56]	; (800b600 <DMA1_Stream3_IRQHandler+0x74>)
 800b5c8:	6818      	ldr	r0, [r3, #0]
 800b5ca:	4b0f      	ldr	r3, [pc, #60]	; (800b608 <DMA1_Stream3_IRQHandler+0x7c>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	005b      	lsls	r3, r3, #1
 800b5d0:	4a0f      	ldr	r2, [pc, #60]	; (800b610 <DMA1_Stream3_IRQHandler+0x84>)
 800b5d2:	4413      	add	r3, r2
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	f7fd fe9b 	bl	8009310 <DSP_Process_Data>
	if (!buffer_offset)
 800b5da:	4b0b      	ldr	r3, [pc, #44]	; (800b608 <DMA1_Stream3_IRQHandler+0x7c>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d103      	bne.n	800b5ea <DMA1_Stream3_IRQHandler+0x5e>
		buffer_offset = DSP_BUFFERSIZE;
 800b5e2:	4b09      	ldr	r3, [pc, #36]	; (800b608 <DMA1_Stream3_IRQHandler+0x7c>)
 800b5e4:	2260      	movs	r2, #96	; 0x60
 800b5e6:	601a      	str	r2, [r3, #0]
	else
		buffer_offset = 0;
	// HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800b5e8:	e002      	b.n	800b5f0 <DMA1_Stream3_IRQHandler+0x64>
		buffer_offset = 0;
 800b5ea:	4b07      	ldr	r3, [pc, #28]	; (800b608 <DMA1_Stream3_IRQHandler+0x7c>)
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	601a      	str	r2, [r3, #0]
}
 800b5f0:	bf00      	nop
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	2000035c 	.word	0x2000035c
 800b5f8:	20001990 	.word	0x20001990
 800b5fc:	20000788 	.word	0x20000788
 800b600:	20001c20 	.word	0x20001c20
 800b604:	20001c24 	.word	0x20001c24
 800b608:	20000774 	.word	0x20000774
 800b60c:	20001790 	.word	0x20001790
 800b610:	20001a50 	.word	0x20001a50

0800b614 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */
	/* DMA STREAM 4 is SPI2 TX complete */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800b618:	4802      	ldr	r0, [pc, #8]	; (800b624 <DMA1_Stream4_IRQHandler+0x10>)
 800b61a:	f7f5 fe0f 	bl	800123c <HAL_DMA_IRQHandler>

	/* DMA Buffer is HALF full */
	/* use first half for Processing */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800b61e:	bf00      	nop
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	200019f0 	.word	0x200019f0

0800b628 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	af00      	add	r7, sp, #0

	// ROT1 - right - PC12 - EXTI12
	// ROT2 - left  - PB13 - EXTI13
	// DTC_LIN - PC14 - EXTI14
	// DTC_MIC - PC15 - EXTI15
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_12)) {
 800b62c:	4b1b      	ldr	r3, [pc, #108]	; (800b69c <EXTI15_10_IRQHandler+0x74>)
 800b62e:	695b      	ldr	r3, [r3, #20]
 800b630:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b634:	2b00      	cmp	r3, #0
 800b636:	d00e      	beq.n	800b656 <EXTI15_10_IRQHandler+0x2e>
		/**
		 * @bug Turning the encoder (TIM4) also issues an EXTI_12 Interrupt
		 *      hacky fix: check if Button is actually pressed
		 */
		if (HAL_GPIO_ReadPin(BTN_ENC1_GPIO_Port, BTN_ENC1_Pin) == GPIO_PIN_SET)
 800b638:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b63c:	4818      	ldr	r0, [pc, #96]	; (800b6a0 <EXTI15_10_IRQHandler+0x78>)
 800b63e:	f7f6 f9df 	bl	8001a00 <HAL_GPIO_ReadPin>
 800b642:	4603      	mov	r3, r0
 800b644:	2b01      	cmp	r3, #1
 800b646:	d106      	bne.n	800b656 <EXTI15_10_IRQHandler+0x2e>
			encRightPressed++;
 800b648:	4b16      	ldr	r3, [pc, #88]	; (800b6a4 <EXTI15_10_IRQHandler+0x7c>)
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	3301      	adds	r3, #1
 800b650:	b2da      	uxtb	r2, r3
 800b652:	4b14      	ldr	r3, [pc, #80]	; (800b6a4 <EXTI15_10_IRQHandler+0x7c>)
 800b654:	701a      	strb	r2, [r3, #0]
	}
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)) {
 800b656:	4b11      	ldr	r3, [pc, #68]	; (800b69c <EXTI15_10_IRQHandler+0x74>)
 800b658:	695b      	ldr	r3, [r3, #20]
 800b65a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d006      	beq.n	800b670 <EXTI15_10_IRQHandler+0x48>
		encLeftPressed++;
 800b662:	4b11      	ldr	r3, [pc, #68]	; (800b6a8 <EXTI15_10_IRQHandler+0x80>)
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	b2db      	uxtb	r3, r3
 800b668:	3301      	adds	r3, #1
 800b66a:	b2da      	uxtb	r2, r3
 800b66c:	4b0e      	ldr	r3, [pc, #56]	; (800b6a8 <EXTI15_10_IRQHandler+0x80>)
 800b66e:	701a      	strb	r2, [r3, #0]
	}
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14)) {
 800b670:	4b0a      	ldr	r3, [pc, #40]	; (800b69c <EXTI15_10_IRQHandler+0x74>)
 800b672:	695b      	ldr	r3, [r3, #20]
		/* LINE IN Detect : rising/falling edge = connected/disconnected */
	}
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15)) {
 800b674:	4b09      	ldr	r3, [pc, #36]	; (800b69c <EXTI15_10_IRQHandler+0x74>)
 800b676:	695b      	ldr	r3, [r3, #20]
		/* MIC IN Detect : rising/falling edge = connected/disconnected */
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800b678:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b67c:	f7f6 f9f2 	bl	8001a64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800b680:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b684:	f7f6 f9ee 	bl	8001a64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800b688:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b68c:	f7f6 f9ea 	bl	8001a64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800b690:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b694:	f7f6 f9e6 	bl	8001a64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800b698:	bf00      	nop
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	40013c00 	.word	0x40013c00
 800b6a0:	40020800 	.word	0x40020800
 800b6a4:	2000035b 	.word	0x2000035b
 800b6a8:	2000035a 	.word	0x2000035a

0800b6ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b6b0:	4807      	ldr	r0, [pc, #28]	; (800b6d0 <OTG_FS_IRQHandler+0x24>)
 800b6b2:	f7f7 fed2 	bl	800345a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */
	HAL_PCD_EP_Receive(&hpcd_USB_OTG_FS, hpcd_USB_OTG_FS.OUT_ep[1].num,
 800b6b6:	4b06      	ldr	r3, [pc, #24]	; (800b6d0 <OTG_FS_IRQHandler+0x24>)
 800b6b8:	f893 1218 	ldrb.w	r1, [r3, #536]	; 0x218
 800b6bc:	4b04      	ldr	r3, [pc, #16]	; (800b6d0 <OTG_FS_IRQHandler+0x24>)
 800b6be:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800b6c2:	4a04      	ldr	r2, [pc, #16]	; (800b6d4 <OTG_FS_IRQHandler+0x28>)
 800b6c4:	4802      	ldr	r0, [pc, #8]	; (800b6d0 <OTG_FS_IRQHandler+0x24>)
 800b6c6:	f7f8 fb7e 	bl	8003dc6 <HAL_PCD_EP_Receive>
			&(USB_buffer[0]), hpcd_USB_OTG_FS.OUT_ep[1].xfer_len);
//	HAL_PCD_EP_Transmit(&hpcd_USB_OTG_FS, 1, USB_buffer,
//			hpcd_USB_OTG_FS.IN_ep[1].xfer_len);
  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b6ca:	bf00      	nop
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	20001fb8 	.word	0x20001fb8
 800b6d4:	20001c24 	.word	0x20001c24

0800b6d8 <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 800b6dc:	4802      	ldr	r0, [pc, #8]	; (800b6e8 <RNG_IRQHandler+0x10>)
 800b6de:	f7f9 ff73 	bl	80055c8 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 800b6e2:	bf00      	nop
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	20001910 	.word	0x20001910

0800b6ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b086      	sub	sp, #24
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	617b      	str	r3, [r7, #20]
 800b6fc:	e00a      	b.n	800b714 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b6fe:	f3af 8000 	nop.w
 800b702:	4601      	mov	r1, r0
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	1c5a      	adds	r2, r3, #1
 800b708:	60ba      	str	r2, [r7, #8]
 800b70a:	b2ca      	uxtb	r2, r1
 800b70c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	3301      	adds	r3, #1
 800b712:	617b      	str	r3, [r7, #20]
 800b714:	697a      	ldr	r2, [r7, #20]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	429a      	cmp	r2, r3
 800b71a:	dbf0      	blt.n	800b6fe <_read+0x12>
	}

return len;
 800b71c:	687b      	ldr	r3, [r7, #4]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3718      	adds	r7, #24
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}

0800b726 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b726:	b580      	push	{r7, lr}
 800b728:	b086      	sub	sp, #24
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	60f8      	str	r0, [r7, #12]
 800b72e:	60b9      	str	r1, [r7, #8]
 800b730:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b732:	2300      	movs	r3, #0
 800b734:	617b      	str	r3, [r7, #20]
 800b736:	e009      	b.n	800b74c <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	1c5a      	adds	r2, r3, #1
 800b73c:	60ba      	str	r2, [r7, #8]
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	4618      	mov	r0, r3
 800b742:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	3301      	adds	r3, #1
 800b74a:	617b      	str	r3, [r7, #20]
 800b74c:	697a      	ldr	r2, [r7, #20]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	429a      	cmp	r2, r3
 800b752:	dbf1      	blt.n	800b738 <_write+0x12>
	}
	return len;
 800b754:	687b      	ldr	r3, [r7, #4]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3718      	adds	r7, #24
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <_close>:

int _close(int file)
{
 800b75e:	b480      	push	{r7}
 800b760:	b083      	sub	sp, #12
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
	return -1;
 800b766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	370c      	adds	r7, #12
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr

0800b776 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b776:	b480      	push	{r7}
 800b778:	b083      	sub	sp, #12
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
 800b77e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b786:	605a      	str	r2, [r3, #4]
	return 0;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	370c      	adds	r7, #12
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr

0800b796 <_isatty>:

int _isatty(int file)
{
 800b796:	b480      	push	{r7}
 800b798:	b083      	sub	sp, #12
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
	return 1;
 800b79e:	2301      	movs	r3, #1
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	370c      	adds	r7, #12
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr

0800b7ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b085      	sub	sp, #20
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]
	return 0;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3714      	adds	r7, #20
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr
	...

0800b7c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b086      	sub	sp, #24
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b7d0:	4a14      	ldr	r2, [pc, #80]	; (800b824 <_sbrk+0x5c>)
 800b7d2:	4b15      	ldr	r3, [pc, #84]	; (800b828 <_sbrk+0x60>)
 800b7d4:	1ad3      	subs	r3, r2, r3
 800b7d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b7dc:	4b13      	ldr	r3, [pc, #76]	; (800b82c <_sbrk+0x64>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d102      	bne.n	800b7ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b7e4:	4b11      	ldr	r3, [pc, #68]	; (800b82c <_sbrk+0x64>)
 800b7e6:	4a12      	ldr	r2, [pc, #72]	; (800b830 <_sbrk+0x68>)
 800b7e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b7ea:	4b10      	ldr	r3, [pc, #64]	; (800b82c <_sbrk+0x64>)
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	693a      	ldr	r2, [r7, #16]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d207      	bcs.n	800b808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b7f8:	f000 fe2e 	bl	800c458 <__errno>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	230c      	movs	r3, #12
 800b800:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800b802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b806:	e009      	b.n	800b81c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b808:	4b08      	ldr	r3, [pc, #32]	; (800b82c <_sbrk+0x64>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b80e:	4b07      	ldr	r3, [pc, #28]	; (800b82c <_sbrk+0x64>)
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4413      	add	r3, r2
 800b816:	4a05      	ldr	r2, [pc, #20]	; (800b82c <_sbrk+0x64>)
 800b818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b81a:	68fb      	ldr	r3, [r7, #12]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3718      	adds	r7, #24
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	20040000 	.word	0x20040000
 800b828:	00000400 	.word	0x00000400
 800b82c:	20000778 	.word	0x20000778
 800b830:	200025c8 	.word	0x200025c8

0800b834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b834:	b480      	push	{r7}
 800b836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b838:	4b08      	ldr	r3, [pc, #32]	; (800b85c <SystemInit+0x28>)
 800b83a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b83e:	4a07      	ldr	r2, [pc, #28]	; (800b85c <SystemInit+0x28>)
 800b840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b848:	4b04      	ldr	r3, [pc, #16]	; (800b85c <SystemInit+0x28>)
 800b84a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b84e:	609a      	str	r2, [r3, #8]
#endif
}
 800b850:	bf00      	nop
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	e000ed00 	.word	0xe000ed00

0800b860 <_tlv320_write8>:
 * @param reg   is a register address, the makros defined in <em>tlv320aic.h</em> 
 *              should be used.
 * @param data  is a one byte value depending on the expected inputs of the register.
 */
void _tlv320_write8(uint8_t reg, uint16_t data)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b088      	sub	sp, #32
 800b864:	af04      	add	r7, sp, #16
 800b866:	4603      	mov	r3, r0
 800b868:	460a      	mov	r2, r1
 800b86a:	71fb      	strb	r3, [r7, #7]
 800b86c:	4613      	mov	r3, r2
 800b86e:	80bb      	strh	r3, [r7, #4]
    //  .   [ 7 6 5 4 3 2 1 0 ] [ 6 5 4 3 2 1 0 8 ] [ 7 6 5 4 3 2 1 0]
    // register address = 7 bit
    // register data    = 9 bits

    // stuff the output buffer
    reg = ((reg << 1)&0xFE) | ((data >> 8)&0x01);  // append data MSB to reg
 800b870:	79fb      	ldrb	r3, [r7, #7]
 800b872:	005b      	lsls	r3, r3, #1
 800b874:	b25a      	sxtb	r2, r3
 800b876:	88bb      	ldrh	r3, [r7, #4]
 800b878:	0a1b      	lsrs	r3, r3, #8
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	b25b      	sxtb	r3, r3
 800b87e:	f003 0301 	and.w	r3, r3, #1
 800b882:	b25b      	sxtb	r3, r3
 800b884:	4313      	orrs	r3, r2
 800b886:	b25b      	sxtb	r3, r3
 800b888:	71fb      	strb	r3, [r7, #7]
    uint8_t val = data % 0xFF;
 800b88a:	88ba      	ldrh	r2, [r7, #4]
 800b88c:	4b0e      	ldr	r3, [pc, #56]	; (800b8c8 <_tlv320_write8+0x68>)
 800b88e:	fba3 1302 	umull	r1, r3, r3, r2
 800b892:	09d9      	lsrs	r1, r3, #7
 800b894:	460b      	mov	r3, r1
 800b896:	021b      	lsls	r3, r3, #8
 800b898:	1a5b      	subs	r3, r3, r1
 800b89a:	1ad3      	subs	r3, r2, r3
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	73fb      	strb	r3, [r7, #15]

    // Send it
    // i2c_write(wdata, 3);
    HAL_I2C_Mem_Write(hi2cCODEC, TLV320_ADDR, reg, 1, &val, 1, 10);
 800b8a2:	4b0a      	ldr	r3, [pc, #40]	; (800b8cc <_tlv320_write8+0x6c>)
 800b8a4:	6818      	ldr	r0, [r3, #0]
 800b8a6:	79fb      	ldrb	r3, [r7, #7]
 800b8a8:	b29a      	uxth	r2, r3
 800b8aa:	230a      	movs	r3, #10
 800b8ac:	9302      	str	r3, [sp, #8]
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	9301      	str	r3, [sp, #4]
 800b8b2:	f107 030f 	add.w	r3, r7, #15
 800b8b6:	9300      	str	r3, [sp, #0]
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	2134      	movs	r1, #52	; 0x34
 800b8bc:	f7f6 fa22 	bl	8001d04 <HAL_I2C_Mem_Write>
}
 800b8c0:	bf00      	nop
 800b8c2:	3710      	adds	r7, #16
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}
 800b8c8:	80808081 	.word	0x80808081
 800b8cc:	20001ce4 	.word	0x20001ce4

0800b8d0 <TLV320_Init>:
/**************************************************************************
 * Initiation
 ***************************************************************************/

void TLV320_Init(I2C_HandleTypeDef *hi2c)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
	  hi2cCODEC = hi2c;
 800b8d8:	4a10      	ldr	r2, [pc, #64]	; (800b91c <TLV320_Init+0x4c>)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6013      	str	r3, [r2, #0]
    uint8_t i;
    // Reset
    TLV320_Reset();
 800b8de:	f000 f880 	bl	800b9e2 <TLV320_Reset>
    HAL_Delay(10);
 800b8e2:	200a      	movs	r0, #10
 800b8e4:	f7f4 fed6 	bl	8000694 <HAL_Delay>
    // Configure registers
    for (i = 0; i < TLV320_NUM_REGS; i++)
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	73fb      	strb	r3, [r7, #15]
 800b8ec:	e00b      	b.n	800b906 <TLV320_Init+0x36>
    {
        _tlv320_write8(i, TLV320_init_data[i]);
 800b8ee:	7bfb      	ldrb	r3, [r7, #15]
 800b8f0:	4a0b      	ldr	r2, [pc, #44]	; (800b920 <TLV320_Init+0x50>)
 800b8f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800b8f6:	7bfb      	ldrb	r3, [r7, #15]
 800b8f8:	4611      	mov	r1, r2
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7ff ffb0 	bl	800b860 <_tlv320_write8>
    for (i = 0; i < TLV320_NUM_REGS; i++)
 800b900:	7bfb      	ldrb	r3, [r7, #15]
 800b902:	3301      	adds	r3, #1
 800b904:	73fb      	strb	r3, [r7, #15]
 800b906:	7bfb      	ldrb	r3, [r7, #15]
 800b908:	2b09      	cmp	r3, #9
 800b90a:	d9f0      	bls.n	800b8ee <TLV320_Init+0x1e>
    }
    TLV320_SetInput(LINE);
 800b90c:	2000      	movs	r0, #0
 800b90e:	f000 f809 	bl	800b924 <TLV320_SetInput>
}
 800b912:	bf00      	nop
 800b914:	3710      	adds	r7, #16
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	20001ce4 	.word	0x20001ce4
 800b920:	0800ed54 	.word	0x0800ed54

0800b924 <TLV320_SetInput>:
    }

}

void TLV320_SetInput(input_t in)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	4603      	mov	r3, r0
 800b92c:	71fb      	strb	r3, [r7, #7]
    switch (in)
 800b92e:	79fb      	ldrb	r3, [r7, #7]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d104      	bne.n	800b93e <TLV320_SetInput+0x1a>
    {
    case LINE:
        // Reg 04: Analog Audio Path Control (DAC sel, Mute Mic)
        _tlv320_write8(TLV320_ANALOG_AUDIO_PATH_REG, 0x012);
 800b934:	2112      	movs	r1, #18
 800b936:	2004      	movs	r0, #4
 800b938:	f7ff ff92 	bl	800b860 <_tlv320_write8>
        break;
 800b93c:	e004      	b.n	800b948 <TLV320_SetInput+0x24>

    case MIC:
    default:
        // Reg 04: Analog Audio Path Control (DAC sel, Mic, 20dB boost)
        _tlv320_write8(TLV320_ANALOG_AUDIO_PATH_REG, 0x015);
 800b93e:	2115      	movs	r1, #21
 800b940:	2004      	movs	r0, #4
 800b942:	f7ff ff8d 	bl	800b860 <_tlv320_write8>
        break;
 800b946:	bf00      	nop
    }
}
 800b948:	bf00      	nop
 800b94a:	3708      	adds	r7, #8
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <TLV320_SetLineInVol>:
    // Reg 04: Analog Audio Path Control (DAC sel, Mic, 20dB boost)
    _tlv320_write8(TLV320_ANALOG_AUDIO_PATH_REG, value);
}

void TLV320_SetLineInVol(uint16_t vol)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	4603      	mov	r3, r0
 800b958:	80fb      	strh	r3, [r7, #6]
    if (vol > 0x01F)
 800b95a:	88fb      	ldrh	r3, [r7, #6]
 800b95c:	2b1f      	cmp	r3, #31
 800b95e:	d901      	bls.n	800b964 <TLV320_SetLineInVol+0x14>
        vol = 0x01F;
 800b960:	231f      	movs	r3, #31
 800b962:	80fb      	strh	r3, [r7, #6]
    _tlv320_write8(TLV320_LEFT_IN_VOL_REG, 0x100 | (vol & 0x01F));
 800b964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b968:	f003 031f 	and.w	r3, r3, #31
 800b96c:	b21b      	sxth	r3, r3
 800b96e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b972:	b21b      	sxth	r3, r3
 800b974:	b29b      	uxth	r3, r3
 800b976:	4619      	mov	r1, r3
 800b978:	2000      	movs	r0, #0
 800b97a:	f7ff ff71 	bl	800b860 <_tlv320_write8>
    _tlv320_write8(TLV320_RIGHT_IN_VOL_REG, 0x100 | (vol & 0x01F));
 800b97e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b982:	f003 031f 	and.w	r3, r3, #31
 800b986:	b21b      	sxth	r3, r3
 800b988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b98c:	b21b      	sxth	r3, r3
 800b98e:	b29b      	uxth	r3, r3
 800b990:	4619      	mov	r1, r3
 800b992:	2001      	movs	r0, #1
 800b994:	f7ff ff64 	bl	800b860 <_tlv320_write8>
}
 800b998:	bf00      	nop
 800b99a:	3708      	adds	r7, #8
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <TLV320_SetHeadphoneVol>:

void TLV320_SetHeadphoneVol(uint16_t vol)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	80fb      	strh	r3, [r7, #6]
    vol += 0x030;
 800b9aa:	88fb      	ldrh	r3, [r7, #6]
 800b9ac:	3330      	adds	r3, #48	; 0x30
 800b9ae:	80fb      	strh	r3, [r7, #6]
    if (vol > 0x07F)
 800b9b0:	88fb      	ldrh	r3, [r7, #6]
 800b9b2:	2b7f      	cmp	r3, #127	; 0x7f
 800b9b4:	d901      	bls.n	800b9ba <TLV320_SetHeadphoneVol+0x1a>
        vol = 0x07F;
 800b9b6:	237f      	movs	r3, #127	; 0x7f
 800b9b8:	80fb      	strh	r3, [r7, #6]
    _tlv320_write8(TLV320_LEFT_HP_VOL_REG, 0x100 | vol);
 800b9ba:	88fb      	ldrh	r3, [r7, #6]
 800b9bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9c0:	b29b      	uxth	r3, r3
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	2002      	movs	r0, #2
 800b9c6:	f7ff ff4b 	bl	800b860 <_tlv320_write8>
    _tlv320_write8(TLV320_RIGHT_HP_VOL_REG, 0x100 | vol);
 800b9ca:	88fb      	ldrh	r3, [r7, #6]
 800b9cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	2003      	movs	r0, #3
 800b9d6:	f7ff ff43 	bl	800b860 <_tlv320_write8>
}
 800b9da:	bf00      	nop
 800b9dc:	3708      	adds	r7, #8
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <TLV320_Reset>:

void TLV320_Reset(void)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	af00      	add	r7, sp, #0
    _tlv320_write8(TLV320_RESET_REG, 0);
 800b9e6:	2100      	movs	r1, #0
 800b9e8:	200f      	movs	r0, #15
 800b9ea:	f7ff ff39 	bl	800b860 <_tlv320_write8>
}
 800b9ee:	bf00      	nop
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <TLV320_PowerDown>:

void TLV320_PowerDown(void)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	af00      	add	r7, sp, #0
    // Turn off the TLV320
    _tlv320_write8(TLV320_POWER_DOWN_REG, 0x01FF);
 800b9f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b9fa:	2006      	movs	r0, #6
 800b9fc:	f7ff ff30 	bl	800b860 <_tlv320_write8>
}
 800ba00:	bf00      	nop
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ba08:	2200      	movs	r2, #0
 800ba0a:	4912      	ldr	r1, [pc, #72]	; (800ba54 <MX_USB_DEVICE_Init+0x50>)
 800ba0c:	4812      	ldr	r0, [pc, #72]	; (800ba58 <MX_USB_DEVICE_Init+0x54>)
 800ba0e:	f7fc fa07 	bl	8007e20 <USBD_Init>
 800ba12:	4603      	mov	r3, r0
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d001      	beq.n	800ba1c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ba18:	f7fe ff00 	bl	800a81c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800ba1c:	490f      	ldr	r1, [pc, #60]	; (800ba5c <MX_USB_DEVICE_Init+0x58>)
 800ba1e:	480e      	ldr	r0, [pc, #56]	; (800ba58 <MX_USB_DEVICE_Init+0x54>)
 800ba20:	f7fc fa42 	bl	8007ea8 <USBD_RegisterClass>
 800ba24:	4603      	mov	r3, r0
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d001      	beq.n	800ba2e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ba2a:	f7fe fef7 	bl	800a81c <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800ba2e:	490c      	ldr	r1, [pc, #48]	; (800ba60 <MX_USB_DEVICE_Init+0x5c>)
 800ba30:	4809      	ldr	r0, [pc, #36]	; (800ba58 <MX_USB_DEVICE_Init+0x54>)
 800ba32:	f7fc f9df 	bl	8007df4 <USBD_AUDIO_RegisterInterface>
 800ba36:	4603      	mov	r3, r0
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d001      	beq.n	800ba40 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ba3c:	f7fe feee 	bl	800a81c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ba40:	4805      	ldr	r0, [pc, #20]	; (800ba58 <MX_USB_DEVICE_Init+0x54>)
 800ba42:	f7fc fa5f 	bl	8007f04 <USBD_Start>
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d001      	beq.n	800ba50 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ba4c:	f7fe fee6 	bl	800a81c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ba50:	bf00      	nop
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	200000f4 	.word	0x200000f4
 800ba58:	20001ce8 	.word	0x20001ce8
 800ba5c:	20000008 	.word	0x20000008
 800ba60:	200000d8 	.word	0x200000d8

0800ba64 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b085      	sub	sp, #20
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	60b9      	str	r1, [r7, #8]
 800ba6e:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 800ba70:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3714      	adds	r7, #20
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr

0800ba7e <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800ba7e:	b480      	push	{r7}
 800ba80:	b083      	sub	sp, #12
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 800ba86:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	370c      	adds	r7, #12
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr

0800ba94 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b085      	sub	sp, #20
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	4613      	mov	r3, r2
 800baa0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800baa2:	79fb      	ldrb	r3, [r7, #7]
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d001      	beq.n	800baac <AUDIO_AudioCmd_FS+0x18>
 800baa8:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 800baaa:	e000      	b.n	800baae <AUDIO_AudioCmd_FS+0x1a>
    break;
 800baac:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800baae:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3714      	adds	r7, #20
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	4603      	mov	r3, r0
 800bac4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 800bac6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bac8:	4618      	mov	r0, r3
 800baca:	370c      	adds	r7, #12
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	4603      	mov	r3, r0
 800badc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 800bade:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 800baec:	b480      	push	{r7}
 800baee:	b085      	sub	sp, #20
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	4613      	mov	r3, r2
 800baf8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800bafa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3714      	adds	r7, #20
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr

0800bb08 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800bb0c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b08a      	sub	sp, #40	; 0x28
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb20:	f107 0314 	add.w	r3, r7, #20
 800bb24:	2200      	movs	r2, #0
 800bb26:	601a      	str	r2, [r3, #0]
 800bb28:	605a      	str	r2, [r3, #4]
 800bb2a:	609a      	str	r2, [r3, #8]
 800bb2c:	60da      	str	r2, [r3, #12]
 800bb2e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb38:	d13a      	bne.n	800bbb0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	613b      	str	r3, [r7, #16]
 800bb3e:	4b1e      	ldr	r3, [pc, #120]	; (800bbb8 <HAL_PCD_MspInit+0xa0>)
 800bb40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb42:	4a1d      	ldr	r2, [pc, #116]	; (800bbb8 <HAL_PCD_MspInit+0xa0>)
 800bb44:	f043 0301 	orr.w	r3, r3, #1
 800bb48:	6313      	str	r3, [r2, #48]	; 0x30
 800bb4a:	4b1b      	ldr	r3, [pc, #108]	; (800bbb8 <HAL_PCD_MspInit+0xa0>)
 800bb4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb4e:	f003 0301 	and.w	r3, r3, #1
 800bb52:	613b      	str	r3, [r7, #16]
 800bb54:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800bb56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bb5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb5c:	2302      	movs	r3, #2
 800bb5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb60:	2300      	movs	r3, #0
 800bb62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb64:	2303      	movs	r3, #3
 800bb66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bb68:	230a      	movs	r3, #10
 800bb6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb6c:	f107 0314 	add.w	r3, r7, #20
 800bb70:	4619      	mov	r1, r3
 800bb72:	4812      	ldr	r0, [pc, #72]	; (800bbbc <HAL_PCD_MspInit+0xa4>)
 800bb74:	f7f5 fdca 	bl	800170c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bb78:	4b0f      	ldr	r3, [pc, #60]	; (800bbb8 <HAL_PCD_MspInit+0xa0>)
 800bb7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb7c:	4a0e      	ldr	r2, [pc, #56]	; (800bbb8 <HAL_PCD_MspInit+0xa0>)
 800bb7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb82:	6353      	str	r3, [r2, #52]	; 0x34
 800bb84:	2300      	movs	r3, #0
 800bb86:	60fb      	str	r3, [r7, #12]
 800bb88:	4b0b      	ldr	r3, [pc, #44]	; (800bbb8 <HAL_PCD_MspInit+0xa0>)
 800bb8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb8c:	4a0a      	ldr	r2, [pc, #40]	; (800bbb8 <HAL_PCD_MspInit+0xa0>)
 800bb8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bb92:	6453      	str	r3, [r2, #68]	; 0x44
 800bb94:	4b08      	ldr	r3, [pc, #32]	; (800bbb8 <HAL_PCD_MspInit+0xa0>)
 800bb96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb9c:	60fb      	str	r3, [r7, #12]
 800bb9e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bba0:	2200      	movs	r2, #0
 800bba2:	2100      	movs	r1, #0
 800bba4:	2043      	movs	r0, #67	; 0x43
 800bba6:	f7f5 fa0c 	bl	8000fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bbaa:	2043      	movs	r0, #67	; 0x43
 800bbac:	f7f5 fa25 	bl	8000ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bbb0:	bf00      	nop
 800bbb2:	3728      	adds	r7, #40	; 0x28
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	40023800 	.word	0x40023800
 800bbbc:	40020000 	.word	0x40020000

0800bbc0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	4610      	mov	r0, r2
 800bbd8:	f7fc f9df 	bl	8007f9a <USBD_LL_SetupStage>
}
 800bbdc:	bf00      	nop
 800bbde:	3708      	adds	r7, #8
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	460b      	mov	r3, r1
 800bbee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bbf6:	78fa      	ldrb	r2, [r7, #3]
 800bbf8:	6879      	ldr	r1, [r7, #4]
 800bbfa:	4613      	mov	r3, r2
 800bbfc:	00db      	lsls	r3, r3, #3
 800bbfe:	1a9b      	subs	r3, r3, r2
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	440b      	add	r3, r1
 800bc04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	78fb      	ldrb	r3, [r7, #3]
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	f7fc fa17 	bl	8008040 <USBD_LL_DataOutStage>
}
 800bc12:	bf00      	nop
 800bc14:	3708      	adds	r7, #8
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b082      	sub	sp, #8
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
 800bc22:	460b      	mov	r3, r1
 800bc24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bc2c:	78fa      	ldrb	r2, [r7, #3]
 800bc2e:	6879      	ldr	r1, [r7, #4]
 800bc30:	4613      	mov	r3, r2
 800bc32:	00db      	lsls	r3, r3, #3
 800bc34:	1a9b      	subs	r3, r3, r2
 800bc36:	009b      	lsls	r3, r3, #2
 800bc38:	440b      	add	r3, r1
 800bc3a:	3348      	adds	r3, #72	; 0x48
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	78fb      	ldrb	r3, [r7, #3]
 800bc40:	4619      	mov	r1, r3
 800bc42:	f7fc fa60 	bl	8008106 <USBD_LL_DataInStage>
}
 800bc46:	bf00      	nop
 800bc48:	3708      	adds	r7, #8
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc4e:	b580      	push	{r7, lr}
 800bc50:	b082      	sub	sp, #8
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7fc fb64 	bl	800832a <USBD_LL_SOF>
}
 800bc62:	bf00      	nop
 800bc64:	3708      	adds	r7, #8
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc6a:	b580      	push	{r7, lr}
 800bc6c:	b084      	sub	sp, #16
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bc72:	2301      	movs	r3, #1
 800bc74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	68db      	ldr	r3, [r3, #12]
 800bc7a:	2b02      	cmp	r3, #2
 800bc7c:	d001      	beq.n	800bc82 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bc7e:	f7fe fdcd 	bl	800a81c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc88:	7bfa      	ldrb	r2, [r7, #15]
 800bc8a:	4611      	mov	r1, r2
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7fc fb11 	bl	80082b4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7fc faca 	bl	8008232 <USBD_LL_Reset>
}
 800bc9e:	bf00      	nop
 800bca0:	3710      	adds	r7, #16
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
	...

0800bca8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7fc fb0c 	bl	80082d4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	687a      	ldr	r2, [r7, #4]
 800bcc8:	6812      	ldr	r2, [r2, #0]
 800bcca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bcce:	f043 0301 	orr.w	r3, r3, #1
 800bcd2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a1b      	ldr	r3, [r3, #32]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d005      	beq.n	800bce8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bcdc:	4b04      	ldr	r3, [pc, #16]	; (800bcf0 <HAL_PCD_SuspendCallback+0x48>)
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	4a03      	ldr	r2, [pc, #12]	; (800bcf0 <HAL_PCD_SuspendCallback+0x48>)
 800bce2:	f043 0306 	orr.w	r3, r3, #6
 800bce6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bce8:	bf00      	nop
 800bcea:	3708      	adds	r7, #8
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	e000ed00 	.word	0xe000ed00

0800bcf4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7fc fafb 	bl	80082fe <USBD_LL_Resume>
}
 800bd08:	bf00      	nop
 800bd0a:	3708      	adds	r7, #8
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	460b      	mov	r3, r1
 800bd1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd22:	78fa      	ldrb	r2, [r7, #3]
 800bd24:	4611      	mov	r1, r2
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7fc fb26 	bl	8008378 <USBD_LL_IsoOUTIncomplete>
}
 800bd2c:	bf00      	nop
 800bd2e:	3708      	adds	r7, #8
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd46:	78fa      	ldrb	r2, [r7, #3]
 800bd48:	4611      	mov	r1, r2
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7fc fb07 	bl	800835e <USBD_LL_IsoINIncomplete>
}
 800bd50:	bf00      	nop
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b082      	sub	sp, #8
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7fc fb13 	bl	8008392 <USBD_LL_DevConnected>
}
 800bd6c:	bf00      	nop
 800bd6e:	3708      	adds	r7, #8
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}

0800bd74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b082      	sub	sp, #8
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7fc fb10 	bl	80083a8 <USBD_LL_DevDisconnected>
}
 800bd88:	bf00      	nop
 800bd8a:	3708      	adds	r7, #8
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d13f      	bne.n	800be20 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bda0:	4a22      	ldr	r2, [pc, #136]	; (800be2c <USBD_LL_Init+0x9c>)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	4a20      	ldr	r2, [pc, #128]	; (800be2c <USBD_LL_Init+0x9c>)
 800bdac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bdb0:	4b1e      	ldr	r3, [pc, #120]	; (800be2c <USBD_LL_Init+0x9c>)
 800bdb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bdb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800bdb8:	4b1c      	ldr	r3, [pc, #112]	; (800be2c <USBD_LL_Init+0x9c>)
 800bdba:	2206      	movs	r2, #6
 800bdbc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bdbe:	4b1b      	ldr	r3, [pc, #108]	; (800be2c <USBD_LL_Init+0x9c>)
 800bdc0:	2202      	movs	r2, #2
 800bdc2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bdc4:	4b19      	ldr	r3, [pc, #100]	; (800be2c <USBD_LL_Init+0x9c>)
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bdca:	4b18      	ldr	r3, [pc, #96]	; (800be2c <USBD_LL_Init+0x9c>)
 800bdcc:	2202      	movs	r2, #2
 800bdce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bdd0:	4b16      	ldr	r3, [pc, #88]	; (800be2c <USBD_LL_Init+0x9c>)
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bdd6:	4b15      	ldr	r3, [pc, #84]	; (800be2c <USBD_LL_Init+0x9c>)
 800bdd8:	2200      	movs	r2, #0
 800bdda:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bddc:	4b13      	ldr	r3, [pc, #76]	; (800be2c <USBD_LL_Init+0x9c>)
 800bdde:	2200      	movs	r2, #0
 800bde0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800bde2:	4b12      	ldr	r3, [pc, #72]	; (800be2c <USBD_LL_Init+0x9c>)
 800bde4:	2200      	movs	r2, #0
 800bde6:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bde8:	4b10      	ldr	r3, [pc, #64]	; (800be2c <USBD_LL_Init+0x9c>)
 800bdea:	2200      	movs	r2, #0
 800bdec:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bdee:	4b0f      	ldr	r3, [pc, #60]	; (800be2c <USBD_LL_Init+0x9c>)
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bdf4:	480d      	ldr	r0, [pc, #52]	; (800be2c <USBD_LL_Init+0x9c>)
 800bdf6:	f7f7 f9d9 	bl	80031ac <HAL_PCD_Init>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d001      	beq.n	800be04 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800be00:	f7fe fd0c 	bl	800a81c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800be04:	2180      	movs	r1, #128	; 0x80
 800be06:	4809      	ldr	r0, [pc, #36]	; (800be2c <USBD_LL_Init+0x9c>)
 800be08:	f7f8 fb6b 	bl	80044e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800be0c:	2240      	movs	r2, #64	; 0x40
 800be0e:	2100      	movs	r1, #0
 800be10:	4806      	ldr	r0, [pc, #24]	; (800be2c <USBD_LL_Init+0x9c>)
 800be12:	f7f8 fb1f 	bl	8004454 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800be16:	2280      	movs	r2, #128	; 0x80
 800be18:	2101      	movs	r1, #1
 800be1a:	4804      	ldr	r0, [pc, #16]	; (800be2c <USBD_LL_Init+0x9c>)
 800be1c:	f7f8 fb1a 	bl	8004454 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800be20:	2300      	movs	r3, #0
}
 800be22:	4618      	mov	r0, r3
 800be24:	3708      	adds	r7, #8
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
 800be2a:	bf00      	nop
 800be2c:	20001fb8 	.word	0x20001fb8

0800be30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be38:	2300      	movs	r3, #0
 800be3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be3c:	2300      	movs	r3, #0
 800be3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be46:	4618      	mov	r0, r3
 800be48:	f7f7 fad4 	bl	80033f4 <HAL_PCD_Start>
 800be4c:	4603      	mov	r3, r0
 800be4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be50:	7bfb      	ldrb	r3, [r7, #15]
 800be52:	4618      	mov	r0, r3
 800be54:	f000 f98a 	bl	800c16c <USBD_Get_USB_Status>
 800be58:	4603      	mov	r3, r0
 800be5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3710      	adds	r7, #16
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}

0800be66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800be66:	b580      	push	{r7, lr}
 800be68:	b084      	sub	sp, #16
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
 800be6e:	4608      	mov	r0, r1
 800be70:	4611      	mov	r1, r2
 800be72:	461a      	mov	r2, r3
 800be74:	4603      	mov	r3, r0
 800be76:	70fb      	strb	r3, [r7, #3]
 800be78:	460b      	mov	r3, r1
 800be7a:	70bb      	strb	r3, [r7, #2]
 800be7c:	4613      	mov	r3, r2
 800be7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be80:	2300      	movs	r3, #0
 800be82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be84:	2300      	movs	r3, #0
 800be86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800be8e:	78bb      	ldrb	r3, [r7, #2]
 800be90:	883a      	ldrh	r2, [r7, #0]
 800be92:	78f9      	ldrb	r1, [r7, #3]
 800be94:	f7f7 fee5 	bl	8003c62 <HAL_PCD_EP_Open>
 800be98:	4603      	mov	r3, r0
 800be9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be9c:	7bfb      	ldrb	r3, [r7, #15]
 800be9e:	4618      	mov	r0, r3
 800bea0:	f000 f964 	bl	800c16c <USBD_Get_USB_Status>
 800bea4:	4603      	mov	r3, r0
 800bea6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bea8:	7bbb      	ldrb	r3, [r7, #14]
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3710      	adds	r7, #16
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b084      	sub	sp, #16
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
 800beba:	460b      	mov	r3, r1
 800bebc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bebe:	2300      	movs	r3, #0
 800bec0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bec2:	2300      	movs	r3, #0
 800bec4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800becc:	78fa      	ldrb	r2, [r7, #3]
 800bece:	4611      	mov	r1, r2
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7f7 ff2e 	bl	8003d32 <HAL_PCD_EP_Close>
 800bed6:	4603      	mov	r3, r0
 800bed8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800beda:	7bfb      	ldrb	r3, [r7, #15]
 800bedc:	4618      	mov	r0, r3
 800bede:	f000 f945 	bl	800c16c <USBD_Get_USB_Status>
 800bee2:	4603      	mov	r3, r0
 800bee4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bee6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3710      	adds	r7, #16
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	460b      	mov	r3, r1
 800befa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf00:	2300      	movs	r3, #0
 800bf02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf0a:	78fa      	ldrb	r2, [r7, #3]
 800bf0c:	4611      	mov	r1, r2
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7f8 f806 	bl	8003f20 <HAL_PCD_EP_SetStall>
 800bf14:	4603      	mov	r3, r0
 800bf16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf18:	7bfb      	ldrb	r3, [r7, #15]
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f000 f926 	bl	800c16c <USBD_Get_USB_Status>
 800bf20:	4603      	mov	r3, r0
 800bf22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf24:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3710      	adds	r7, #16
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}

0800bf2e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf2e:	b580      	push	{r7, lr}
 800bf30:	b084      	sub	sp, #16
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
 800bf36:	460b      	mov	r3, r1
 800bf38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf48:	78fa      	ldrb	r2, [r7, #3]
 800bf4a:	4611      	mov	r1, r2
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7f8 f84b 	bl	8003fe8 <HAL_PCD_EP_ClrStall>
 800bf52:	4603      	mov	r3, r0
 800bf54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf56:	7bfb      	ldrb	r3, [r7, #15]
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f000 f907 	bl	800c16c <USBD_Get_USB_Status>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf62:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b085      	sub	sp, #20
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	460b      	mov	r3, r1
 800bf76:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf7e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bf80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	da0b      	bge.n	800bfa0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bf88:	78fb      	ldrb	r3, [r7, #3]
 800bf8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf8e:	68f9      	ldr	r1, [r7, #12]
 800bf90:	4613      	mov	r3, r2
 800bf92:	00db      	lsls	r3, r3, #3
 800bf94:	1a9b      	subs	r3, r3, r2
 800bf96:	009b      	lsls	r3, r3, #2
 800bf98:	440b      	add	r3, r1
 800bf9a:	333e      	adds	r3, #62	; 0x3e
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	e00b      	b.n	800bfb8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bfa0:	78fb      	ldrb	r3, [r7, #3]
 800bfa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bfa6:	68f9      	ldr	r1, [r7, #12]
 800bfa8:	4613      	mov	r3, r2
 800bfaa:	00db      	lsls	r3, r3, #3
 800bfac:	1a9b      	subs	r3, r3, r2
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	440b      	add	r3, r1
 800bfb2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bfb6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3714      	adds	r7, #20
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	460b      	mov	r3, r1
 800bfce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bfde:	78fa      	ldrb	r2, [r7, #3]
 800bfe0:	4611      	mov	r1, r2
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7f7 fe18 	bl	8003c18 <HAL_PCD_SetAddress>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfec:	7bfb      	ldrb	r3, [r7, #15]
 800bfee:	4618      	mov	r0, r3
 800bff0:	f000 f8bc 	bl	800c16c <USBD_Get_USB_Status>
 800bff4:	4603      	mov	r3, r0
 800bff6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bff8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c002:	b580      	push	{r7, lr}
 800c004:	b086      	sub	sp, #24
 800c006:	af00      	add	r7, sp, #0
 800c008:	60f8      	str	r0, [r7, #12]
 800c00a:	607a      	str	r2, [r7, #4]
 800c00c:	603b      	str	r3, [r7, #0]
 800c00e:	460b      	mov	r3, r1
 800c010:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c012:	2300      	movs	r3, #0
 800c014:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c016:	2300      	movs	r3, #0
 800c018:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c020:	7af9      	ldrb	r1, [r7, #11]
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	f7f7 ff31 	bl	8003e8c <HAL_PCD_EP_Transmit>
 800c02a:	4603      	mov	r3, r0
 800c02c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c02e:	7dfb      	ldrb	r3, [r7, #23]
 800c030:	4618      	mov	r0, r3
 800c032:	f000 f89b 	bl	800c16c <USBD_Get_USB_Status>
 800c036:	4603      	mov	r3, r0
 800c038:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c03a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3718      	adds	r7, #24
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b086      	sub	sp, #24
 800c048:	af00      	add	r7, sp, #0
 800c04a:	60f8      	str	r0, [r7, #12]
 800c04c:	607a      	str	r2, [r7, #4]
 800c04e:	603b      	str	r3, [r7, #0]
 800c050:	460b      	mov	r3, r1
 800c052:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c054:	2300      	movs	r3, #0
 800c056:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c058:	2300      	movs	r3, #0
 800c05a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c062:	7af9      	ldrb	r1, [r7, #11]
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	687a      	ldr	r2, [r7, #4]
 800c068:	f7f7 fead 	bl	8003dc6 <HAL_PCD_EP_Receive>
 800c06c:	4603      	mov	r3, r0
 800c06e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c070:	7dfb      	ldrb	r3, [r7, #23]
 800c072:	4618      	mov	r0, r3
 800c074:	f000 f87a 	bl	800c16c <USBD_Get_USB_Status>
 800c078:	4603      	mov	r3, r0
 800c07a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c07c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3718      	adds	r7, #24
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}

0800c086 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c086:	b580      	push	{r7, lr}
 800c088:	b082      	sub	sp, #8
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
 800c08e:	460b      	mov	r3, r1
 800c090:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c098:	78fa      	ldrb	r2, [r7, #3]
 800c09a:	4611      	mov	r1, r2
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7f7 fedd 	bl	8003e5c <HAL_PCD_EP_GetRxCount>
 800c0a2:	4603      	mov	r3, r0
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3708      	adds	r7, #8
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <HAL_GPIO_EXTI_Callback>:
  * @brief  Handle USB VBUS detection upon external interrupt
  * @param  GPIO_Pin
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_9)
 800c0b6:	88fb      	ldrh	r3, [r7, #6]
 800c0b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0bc:	d102      	bne.n	800c0c4 <HAL_GPIO_EXTI_Callback+0x18>
  {
    HAL_PCDEx_BCD_VBUSDetect(&hpcd_USB_OTG_FS);
 800c0be:	4803      	ldr	r0, [pc, #12]	; (800c0cc <HAL_GPIO_EXTI_Callback+0x20>)
 800c0c0:	f7f8 fa44 	bl	800454c <HAL_PCDEx_BCD_VBUSDetect>
  }
}
 800c0c4:	bf00      	nop
 800c0c6:	3708      	adds	r7, #8
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	20001fb8 	.word	0x20001fb8

0800c0d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	460b      	mov	r3, r1
 800c0da:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c0dc:	78fb      	ldrb	r3, [r7, #3]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d002      	beq.n	800c0e8 <HAL_PCDEx_LPM_Callback+0x18>
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d01f      	beq.n	800c126 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c0e6:	e03b      	b.n	800c160 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6a1b      	ldr	r3, [r3, #32]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d007      	beq.n	800c100 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800c0f0:	f7fd fd1c 	bl	8009b2c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0f4:	4b1c      	ldr	r3, [pc, #112]	; (800c168 <HAL_PCDEx_LPM_Callback+0x98>)
 800c0f6:	691b      	ldr	r3, [r3, #16]
 800c0f8:	4a1b      	ldr	r2, [pc, #108]	; (800c168 <HAL_PCDEx_LPM_Callback+0x98>)
 800c0fa:	f023 0306 	bic.w	r3, r3, #6
 800c0fe:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	6812      	ldr	r2, [r2, #0]
 800c10e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c112:	f023 0301 	bic.w	r3, r3, #1
 800c116:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c11e:	4618      	mov	r0, r3
 800c120:	f7fc f8ed 	bl	80082fe <USBD_LL_Resume>
    break;
 800c124:	e01c      	b.n	800c160 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	687a      	ldr	r2, [r7, #4]
 800c132:	6812      	ldr	r2, [r2, #0]
 800c134:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c138:	f043 0301 	orr.w	r3, r3, #1
 800c13c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c144:	4618      	mov	r0, r3
 800c146:	f7fc f8c5 	bl	80082d4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6a1b      	ldr	r3, [r3, #32]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d005      	beq.n	800c15e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c152:	4b05      	ldr	r3, [pc, #20]	; (800c168 <HAL_PCDEx_LPM_Callback+0x98>)
 800c154:	691b      	ldr	r3, [r3, #16]
 800c156:	4a04      	ldr	r2, [pc, #16]	; (800c168 <HAL_PCDEx_LPM_Callback+0x98>)
 800c158:	f043 0306 	orr.w	r3, r3, #6
 800c15c:	6113      	str	r3, [r2, #16]
    break;
 800c15e:	bf00      	nop
}
 800c160:	bf00      	nop
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	e000ed00 	.word	0xe000ed00

0800c16c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b085      	sub	sp, #20
 800c170:	af00      	add	r7, sp, #0
 800c172:	4603      	mov	r3, r0
 800c174:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c176:	2300      	movs	r3, #0
 800c178:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c17a:	79fb      	ldrb	r3, [r7, #7]
 800c17c:	2b03      	cmp	r3, #3
 800c17e:	d817      	bhi.n	800c1b0 <USBD_Get_USB_Status+0x44>
 800c180:	a201      	add	r2, pc, #4	; (adr r2, 800c188 <USBD_Get_USB_Status+0x1c>)
 800c182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c186:	bf00      	nop
 800c188:	0800c199 	.word	0x0800c199
 800c18c:	0800c19f 	.word	0x0800c19f
 800c190:	0800c1a5 	.word	0x0800c1a5
 800c194:	0800c1ab 	.word	0x0800c1ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c198:	2300      	movs	r3, #0
 800c19a:	73fb      	strb	r3, [r7, #15]
    break;
 800c19c:	e00b      	b.n	800c1b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c19e:	2303      	movs	r3, #3
 800c1a0:	73fb      	strb	r3, [r7, #15]
    break;
 800c1a2:	e008      	b.n	800c1b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c1a8:	e005      	b.n	800c1b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c1aa:	2303      	movs	r3, #3
 800c1ac:	73fb      	strb	r3, [r7, #15]
    break;
 800c1ae:	e002      	b.n	800c1b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c1b0:	2303      	movs	r3, #3
 800c1b2:	73fb      	strb	r3, [r7, #15]
    break;
 800c1b4:	bf00      	nop
  }
  return usb_status;
 800c1b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3714      	adds	r7, #20
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	6039      	str	r1, [r7, #0]
 800c1ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	2212      	movs	r2, #18
 800c1d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c1d6:	4b03      	ldr	r3, [pc, #12]	; (800c1e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	370c      	adds	r7, #12
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr
 800c1e4:	20000114 	.word	0x20000114

0800c1e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	6039      	str	r1, [r7, #0]
 800c1f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	2204      	movs	r2, #4
 800c1f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c1fa:	4b03      	ldr	r3, [pc, #12]	; (800c208 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	370c      	adds	r7, #12
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr
 800c208:	20000134 	.word	0x20000134

0800c20c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	4603      	mov	r3, r0
 800c214:	6039      	str	r1, [r7, #0]
 800c216:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c218:	79fb      	ldrb	r3, [r7, #7]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d105      	bne.n	800c22a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c21e:	683a      	ldr	r2, [r7, #0]
 800c220:	4907      	ldr	r1, [pc, #28]	; (800c240 <USBD_FS_ProductStrDescriptor+0x34>)
 800c222:	4808      	ldr	r0, [pc, #32]	; (800c244 <USBD_FS_ProductStrDescriptor+0x38>)
 800c224:	f7fc fe65 	bl	8008ef2 <USBD_GetString>
 800c228:	e004      	b.n	800c234 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c22a:	683a      	ldr	r2, [r7, #0]
 800c22c:	4904      	ldr	r1, [pc, #16]	; (800c240 <USBD_FS_ProductStrDescriptor+0x34>)
 800c22e:	4805      	ldr	r0, [pc, #20]	; (800c244 <USBD_FS_ProductStrDescriptor+0x38>)
 800c230:	f7fc fe5f 	bl	8008ef2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c234:	4b02      	ldr	r3, [pc, #8]	; (800c240 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c236:	4618      	mov	r0, r3
 800c238:	3708      	adds	r7, #8
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	200023c0 	.word	0x200023c0
 800c244:	0800d7c4 	.word	0x0800d7c4

0800c248 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	4603      	mov	r3, r0
 800c250:	6039      	str	r1, [r7, #0]
 800c252:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c254:	683a      	ldr	r2, [r7, #0]
 800c256:	4904      	ldr	r1, [pc, #16]	; (800c268 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c258:	4804      	ldr	r0, [pc, #16]	; (800c26c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c25a:	f7fc fe4a 	bl	8008ef2 <USBD_GetString>
  return USBD_StrDesc;
 800c25e:	4b02      	ldr	r3, [pc, #8]	; (800c268 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c260:	4618      	mov	r0, r3
 800c262:	3708      	adds	r7, #8
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}
 800c268:	200023c0 	.word	0x200023c0
 800c26c:	0800d7d0 	.word	0x0800d7d0

0800c270 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	4603      	mov	r3, r0
 800c278:	6039      	str	r1, [r7, #0]
 800c27a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	221a      	movs	r2, #26
 800c280:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c282:	f000 f855 	bl	800c330 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c286:	4b02      	ldr	r3, [pc, #8]	; (800c290 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	20000138 	.word	0x20000138

0800c294 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	4603      	mov	r3, r0
 800c29c:	6039      	str	r1, [r7, #0]
 800c29e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c2a0:	79fb      	ldrb	r3, [r7, #7]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d105      	bne.n	800c2b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c2a6:	683a      	ldr	r2, [r7, #0]
 800c2a8:	4907      	ldr	r1, [pc, #28]	; (800c2c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c2aa:	4808      	ldr	r0, [pc, #32]	; (800c2cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c2ac:	f7fc fe21 	bl	8008ef2 <USBD_GetString>
 800c2b0:	e004      	b.n	800c2bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c2b2:	683a      	ldr	r2, [r7, #0]
 800c2b4:	4904      	ldr	r1, [pc, #16]	; (800c2c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c2b6:	4805      	ldr	r0, [pc, #20]	; (800c2cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c2b8:	f7fc fe1b 	bl	8008ef2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2bc:	4b02      	ldr	r3, [pc, #8]	; (800c2c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3708      	adds	r7, #8
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	200023c0 	.word	0x200023c0
 800c2cc:	0800d7e0 	.word	0x0800d7e0

0800c2d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	6039      	str	r1, [r7, #0]
 800c2da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c2dc:	79fb      	ldrb	r3, [r7, #7]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d105      	bne.n	800c2ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c2e2:	683a      	ldr	r2, [r7, #0]
 800c2e4:	4907      	ldr	r1, [pc, #28]	; (800c304 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c2e6:	4808      	ldr	r0, [pc, #32]	; (800c308 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c2e8:	f7fc fe03 	bl	8008ef2 <USBD_GetString>
 800c2ec:	e004      	b.n	800c2f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c2ee:	683a      	ldr	r2, [r7, #0]
 800c2f0:	4904      	ldr	r1, [pc, #16]	; (800c304 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c2f2:	4805      	ldr	r0, [pc, #20]	; (800c308 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c2f4:	f7fc fdfd 	bl	8008ef2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2f8:	4b02      	ldr	r3, [pc, #8]	; (800c304 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3708      	adds	r7, #8
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	200023c0 	.word	0x200023c0
 800c308:	0800d7f0 	.word	0x0800d7f0

0800c30c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	4603      	mov	r3, r0
 800c314:	6039      	str	r1, [r7, #0]
 800c316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	220c      	movs	r2, #12
 800c31c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c31e:	4b03      	ldr	r3, [pc, #12]	; (800c32c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c320:	4618      	mov	r0, r3
 800c322:	370c      	adds	r7, #12
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr
 800c32c:	20000128 	.word	0x20000128

0800c330 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c336:	4b0f      	ldr	r3, [pc, #60]	; (800c374 <Get_SerialNum+0x44>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c33c:	4b0e      	ldr	r3, [pc, #56]	; (800c378 <Get_SerialNum+0x48>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c342:	4b0e      	ldr	r3, [pc, #56]	; (800c37c <Get_SerialNum+0x4c>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c348:	68fa      	ldr	r2, [r7, #12]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	4413      	add	r3, r2
 800c34e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d009      	beq.n	800c36a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c356:	2208      	movs	r2, #8
 800c358:	4909      	ldr	r1, [pc, #36]	; (800c380 <Get_SerialNum+0x50>)
 800c35a:	68f8      	ldr	r0, [r7, #12]
 800c35c:	f000 f814 	bl	800c388 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c360:	2204      	movs	r2, #4
 800c362:	4908      	ldr	r1, [pc, #32]	; (800c384 <Get_SerialNum+0x54>)
 800c364:	68b8      	ldr	r0, [r7, #8]
 800c366:	f000 f80f 	bl	800c388 <IntToUnicode>
  }
}
 800c36a:	bf00      	nop
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	1fff7a10 	.word	0x1fff7a10
 800c378:	1fff7a14 	.word	0x1fff7a14
 800c37c:	1fff7a18 	.word	0x1fff7a18
 800c380:	2000013a 	.word	0x2000013a
 800c384:	2000014a 	.word	0x2000014a

0800c388 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c388:	b480      	push	{r7}
 800c38a:	b087      	sub	sp, #28
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	4613      	mov	r3, r2
 800c394:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c396:	2300      	movs	r3, #0
 800c398:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c39a:	2300      	movs	r3, #0
 800c39c:	75fb      	strb	r3, [r7, #23]
 800c39e:	e027      	b.n	800c3f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	0f1b      	lsrs	r3, r3, #28
 800c3a4:	2b09      	cmp	r3, #9
 800c3a6:	d80b      	bhi.n	800c3c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	0f1b      	lsrs	r3, r3, #28
 800c3ac:	b2da      	uxtb	r2, r3
 800c3ae:	7dfb      	ldrb	r3, [r7, #23]
 800c3b0:	005b      	lsls	r3, r3, #1
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	440b      	add	r3, r1
 800c3b8:	3230      	adds	r2, #48	; 0x30
 800c3ba:	b2d2      	uxtb	r2, r2
 800c3bc:	701a      	strb	r2, [r3, #0]
 800c3be:	e00a      	b.n	800c3d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	0f1b      	lsrs	r3, r3, #28
 800c3c4:	b2da      	uxtb	r2, r3
 800c3c6:	7dfb      	ldrb	r3, [r7, #23]
 800c3c8:	005b      	lsls	r3, r3, #1
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	440b      	add	r3, r1
 800c3d0:	3237      	adds	r2, #55	; 0x37
 800c3d2:	b2d2      	uxtb	r2, r2
 800c3d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	011b      	lsls	r3, r3, #4
 800c3da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c3dc:	7dfb      	ldrb	r3, [r7, #23]
 800c3de:	005b      	lsls	r3, r3, #1
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	68ba      	ldr	r2, [r7, #8]
 800c3e4:	4413      	add	r3, r2
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c3ea:	7dfb      	ldrb	r3, [r7, #23]
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	75fb      	strb	r3, [r7, #23]
 800c3f0:	7dfa      	ldrb	r2, [r7, #23]
 800c3f2:	79fb      	ldrb	r3, [r7, #7]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d3d3      	bcc.n	800c3a0 <IntToUnicode+0x18>
  }
}
 800c3f8:	bf00      	nop
 800c3fa:	371c      	adds	r7, #28
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800c404:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c43c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800c408:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c40a:	e003      	b.n	800c414 <LoopCopyDataInit>

0800c40c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c40c:	4b0c      	ldr	r3, [pc, #48]	; (800c440 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c40e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c410:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c412:	3104      	adds	r1, #4

0800c414 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c414:	480b      	ldr	r0, [pc, #44]	; (800c444 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c416:	4b0c      	ldr	r3, [pc, #48]	; (800c448 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c418:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c41a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c41c:	d3f6      	bcc.n	800c40c <CopyDataInit>
  ldr  r2, =_sbss
 800c41e:	4a0b      	ldr	r2, [pc, #44]	; (800c44c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c420:	e002      	b.n	800c428 <LoopFillZerobss>

0800c422 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800c422:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c424:	f842 3b04 	str.w	r3, [r2], #4

0800c428 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c428:	4b09      	ldr	r3, [pc, #36]	; (800c450 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c42a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c42c:	d3f9      	bcc.n	800c422 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c42e:	f7ff fa01 	bl	800b834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c432:	f000 f817 	bl	800c464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c436:	f7fd f821 	bl	800947c <main>
  bx  lr    
 800c43a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800c43c:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 800c440:	0800ee10 	.word	0x0800ee10
  ldr  r0, =_sdata
 800c444:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c448:	200001b8 	.word	0x200001b8
  ldr  r2, =_sbss
 800c44c:	200001b8 	.word	0x200001b8
  ldr  r3, = _ebss
 800c450:	200025c4 	.word	0x200025c4

0800c454 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c454:	e7fe      	b.n	800c454 <ADC_IRQHandler>
	...

0800c458 <__errno>:
 800c458:	4b01      	ldr	r3, [pc, #4]	; (800c460 <__errno+0x8>)
 800c45a:	6818      	ldr	r0, [r3, #0]
 800c45c:	4770      	bx	lr
 800c45e:	bf00      	nop
 800c460:	20000154 	.word	0x20000154

0800c464 <__libc_init_array>:
 800c464:	b570      	push	{r4, r5, r6, lr}
 800c466:	4e0d      	ldr	r6, [pc, #52]	; (800c49c <__libc_init_array+0x38>)
 800c468:	4c0d      	ldr	r4, [pc, #52]	; (800c4a0 <__libc_init_array+0x3c>)
 800c46a:	1ba4      	subs	r4, r4, r6
 800c46c:	10a4      	asrs	r4, r4, #2
 800c46e:	2500      	movs	r5, #0
 800c470:	42a5      	cmp	r5, r4
 800c472:	d109      	bne.n	800c488 <__libc_init_array+0x24>
 800c474:	4e0b      	ldr	r6, [pc, #44]	; (800c4a4 <__libc_init_array+0x40>)
 800c476:	4c0c      	ldr	r4, [pc, #48]	; (800c4a8 <__libc_init_array+0x44>)
 800c478:	f001 f922 	bl	800d6c0 <_init>
 800c47c:	1ba4      	subs	r4, r4, r6
 800c47e:	10a4      	asrs	r4, r4, #2
 800c480:	2500      	movs	r5, #0
 800c482:	42a5      	cmp	r5, r4
 800c484:	d105      	bne.n	800c492 <__libc_init_array+0x2e>
 800c486:	bd70      	pop	{r4, r5, r6, pc}
 800c488:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c48c:	4798      	blx	r3
 800c48e:	3501      	adds	r5, #1
 800c490:	e7ee      	b.n	800c470 <__libc_init_array+0xc>
 800c492:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c496:	4798      	blx	r3
 800c498:	3501      	adds	r5, #1
 800c49a:	e7f2      	b.n	800c482 <__libc_init_array+0x1e>
 800c49c:	0800ee08 	.word	0x0800ee08
 800c4a0:	0800ee08 	.word	0x0800ee08
 800c4a4:	0800ee08 	.word	0x0800ee08
 800c4a8:	0800ee0c 	.word	0x0800ee0c

0800c4ac <malloc>:
 800c4ac:	4b02      	ldr	r3, [pc, #8]	; (800c4b8 <malloc+0xc>)
 800c4ae:	4601      	mov	r1, r0
 800c4b0:	6818      	ldr	r0, [r3, #0]
 800c4b2:	f000 b861 	b.w	800c578 <_malloc_r>
 800c4b6:	bf00      	nop
 800c4b8:	20000154 	.word	0x20000154

0800c4bc <free>:
 800c4bc:	4b02      	ldr	r3, [pc, #8]	; (800c4c8 <free+0xc>)
 800c4be:	4601      	mov	r1, r0
 800c4c0:	6818      	ldr	r0, [r3, #0]
 800c4c2:	f000 b80b 	b.w	800c4dc <_free_r>
 800c4c6:	bf00      	nop
 800c4c8:	20000154 	.word	0x20000154

0800c4cc <memset>:
 800c4cc:	4402      	add	r2, r0
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d100      	bne.n	800c4d6 <memset+0xa>
 800c4d4:	4770      	bx	lr
 800c4d6:	f803 1b01 	strb.w	r1, [r3], #1
 800c4da:	e7f9      	b.n	800c4d0 <memset+0x4>

0800c4dc <_free_r>:
 800c4dc:	b538      	push	{r3, r4, r5, lr}
 800c4de:	4605      	mov	r5, r0
 800c4e0:	2900      	cmp	r1, #0
 800c4e2:	d045      	beq.n	800c570 <_free_r+0x94>
 800c4e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4e8:	1f0c      	subs	r4, r1, #4
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	bfb8      	it	lt
 800c4ee:	18e4      	addlt	r4, r4, r3
 800c4f0:	f000 fb96 	bl	800cc20 <__malloc_lock>
 800c4f4:	4a1f      	ldr	r2, [pc, #124]	; (800c574 <_free_r+0x98>)
 800c4f6:	6813      	ldr	r3, [r2, #0]
 800c4f8:	4610      	mov	r0, r2
 800c4fa:	b933      	cbnz	r3, 800c50a <_free_r+0x2e>
 800c4fc:	6063      	str	r3, [r4, #4]
 800c4fe:	6014      	str	r4, [r2, #0]
 800c500:	4628      	mov	r0, r5
 800c502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c506:	f000 bb8c 	b.w	800cc22 <__malloc_unlock>
 800c50a:	42a3      	cmp	r3, r4
 800c50c:	d90c      	bls.n	800c528 <_free_r+0x4c>
 800c50e:	6821      	ldr	r1, [r4, #0]
 800c510:	1862      	adds	r2, r4, r1
 800c512:	4293      	cmp	r3, r2
 800c514:	bf04      	itt	eq
 800c516:	681a      	ldreq	r2, [r3, #0]
 800c518:	685b      	ldreq	r3, [r3, #4]
 800c51a:	6063      	str	r3, [r4, #4]
 800c51c:	bf04      	itt	eq
 800c51e:	1852      	addeq	r2, r2, r1
 800c520:	6022      	streq	r2, [r4, #0]
 800c522:	6004      	str	r4, [r0, #0]
 800c524:	e7ec      	b.n	800c500 <_free_r+0x24>
 800c526:	4613      	mov	r3, r2
 800c528:	685a      	ldr	r2, [r3, #4]
 800c52a:	b10a      	cbz	r2, 800c530 <_free_r+0x54>
 800c52c:	42a2      	cmp	r2, r4
 800c52e:	d9fa      	bls.n	800c526 <_free_r+0x4a>
 800c530:	6819      	ldr	r1, [r3, #0]
 800c532:	1858      	adds	r0, r3, r1
 800c534:	42a0      	cmp	r0, r4
 800c536:	d10b      	bne.n	800c550 <_free_r+0x74>
 800c538:	6820      	ldr	r0, [r4, #0]
 800c53a:	4401      	add	r1, r0
 800c53c:	1858      	adds	r0, r3, r1
 800c53e:	4282      	cmp	r2, r0
 800c540:	6019      	str	r1, [r3, #0]
 800c542:	d1dd      	bne.n	800c500 <_free_r+0x24>
 800c544:	6810      	ldr	r0, [r2, #0]
 800c546:	6852      	ldr	r2, [r2, #4]
 800c548:	605a      	str	r2, [r3, #4]
 800c54a:	4401      	add	r1, r0
 800c54c:	6019      	str	r1, [r3, #0]
 800c54e:	e7d7      	b.n	800c500 <_free_r+0x24>
 800c550:	d902      	bls.n	800c558 <_free_r+0x7c>
 800c552:	230c      	movs	r3, #12
 800c554:	602b      	str	r3, [r5, #0]
 800c556:	e7d3      	b.n	800c500 <_free_r+0x24>
 800c558:	6820      	ldr	r0, [r4, #0]
 800c55a:	1821      	adds	r1, r4, r0
 800c55c:	428a      	cmp	r2, r1
 800c55e:	bf04      	itt	eq
 800c560:	6811      	ldreq	r1, [r2, #0]
 800c562:	6852      	ldreq	r2, [r2, #4]
 800c564:	6062      	str	r2, [r4, #4]
 800c566:	bf04      	itt	eq
 800c568:	1809      	addeq	r1, r1, r0
 800c56a:	6021      	streq	r1, [r4, #0]
 800c56c:	605c      	str	r4, [r3, #4]
 800c56e:	e7c7      	b.n	800c500 <_free_r+0x24>
 800c570:	bd38      	pop	{r3, r4, r5, pc}
 800c572:	bf00      	nop
 800c574:	2000077c 	.word	0x2000077c

0800c578 <_malloc_r>:
 800c578:	b570      	push	{r4, r5, r6, lr}
 800c57a:	1ccd      	adds	r5, r1, #3
 800c57c:	f025 0503 	bic.w	r5, r5, #3
 800c580:	3508      	adds	r5, #8
 800c582:	2d0c      	cmp	r5, #12
 800c584:	bf38      	it	cc
 800c586:	250c      	movcc	r5, #12
 800c588:	2d00      	cmp	r5, #0
 800c58a:	4606      	mov	r6, r0
 800c58c:	db01      	blt.n	800c592 <_malloc_r+0x1a>
 800c58e:	42a9      	cmp	r1, r5
 800c590:	d903      	bls.n	800c59a <_malloc_r+0x22>
 800c592:	230c      	movs	r3, #12
 800c594:	6033      	str	r3, [r6, #0]
 800c596:	2000      	movs	r0, #0
 800c598:	bd70      	pop	{r4, r5, r6, pc}
 800c59a:	f000 fb41 	bl	800cc20 <__malloc_lock>
 800c59e:	4a21      	ldr	r2, [pc, #132]	; (800c624 <_malloc_r+0xac>)
 800c5a0:	6814      	ldr	r4, [r2, #0]
 800c5a2:	4621      	mov	r1, r4
 800c5a4:	b991      	cbnz	r1, 800c5cc <_malloc_r+0x54>
 800c5a6:	4c20      	ldr	r4, [pc, #128]	; (800c628 <_malloc_r+0xb0>)
 800c5a8:	6823      	ldr	r3, [r4, #0]
 800c5aa:	b91b      	cbnz	r3, 800c5b4 <_malloc_r+0x3c>
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	f000 f869 	bl	800c684 <_sbrk_r>
 800c5b2:	6020      	str	r0, [r4, #0]
 800c5b4:	4629      	mov	r1, r5
 800c5b6:	4630      	mov	r0, r6
 800c5b8:	f000 f864 	bl	800c684 <_sbrk_r>
 800c5bc:	1c43      	adds	r3, r0, #1
 800c5be:	d124      	bne.n	800c60a <_malloc_r+0x92>
 800c5c0:	230c      	movs	r3, #12
 800c5c2:	6033      	str	r3, [r6, #0]
 800c5c4:	4630      	mov	r0, r6
 800c5c6:	f000 fb2c 	bl	800cc22 <__malloc_unlock>
 800c5ca:	e7e4      	b.n	800c596 <_malloc_r+0x1e>
 800c5cc:	680b      	ldr	r3, [r1, #0]
 800c5ce:	1b5b      	subs	r3, r3, r5
 800c5d0:	d418      	bmi.n	800c604 <_malloc_r+0x8c>
 800c5d2:	2b0b      	cmp	r3, #11
 800c5d4:	d90f      	bls.n	800c5f6 <_malloc_r+0x7e>
 800c5d6:	600b      	str	r3, [r1, #0]
 800c5d8:	50cd      	str	r5, [r1, r3]
 800c5da:	18cc      	adds	r4, r1, r3
 800c5dc:	4630      	mov	r0, r6
 800c5de:	f000 fb20 	bl	800cc22 <__malloc_unlock>
 800c5e2:	f104 000b 	add.w	r0, r4, #11
 800c5e6:	1d23      	adds	r3, r4, #4
 800c5e8:	f020 0007 	bic.w	r0, r0, #7
 800c5ec:	1ac3      	subs	r3, r0, r3
 800c5ee:	d0d3      	beq.n	800c598 <_malloc_r+0x20>
 800c5f0:	425a      	negs	r2, r3
 800c5f2:	50e2      	str	r2, [r4, r3]
 800c5f4:	e7d0      	b.n	800c598 <_malloc_r+0x20>
 800c5f6:	428c      	cmp	r4, r1
 800c5f8:	684b      	ldr	r3, [r1, #4]
 800c5fa:	bf16      	itet	ne
 800c5fc:	6063      	strne	r3, [r4, #4]
 800c5fe:	6013      	streq	r3, [r2, #0]
 800c600:	460c      	movne	r4, r1
 800c602:	e7eb      	b.n	800c5dc <_malloc_r+0x64>
 800c604:	460c      	mov	r4, r1
 800c606:	6849      	ldr	r1, [r1, #4]
 800c608:	e7cc      	b.n	800c5a4 <_malloc_r+0x2c>
 800c60a:	1cc4      	adds	r4, r0, #3
 800c60c:	f024 0403 	bic.w	r4, r4, #3
 800c610:	42a0      	cmp	r0, r4
 800c612:	d005      	beq.n	800c620 <_malloc_r+0xa8>
 800c614:	1a21      	subs	r1, r4, r0
 800c616:	4630      	mov	r0, r6
 800c618:	f000 f834 	bl	800c684 <_sbrk_r>
 800c61c:	3001      	adds	r0, #1
 800c61e:	d0cf      	beq.n	800c5c0 <_malloc_r+0x48>
 800c620:	6025      	str	r5, [r4, #0]
 800c622:	e7db      	b.n	800c5dc <_malloc_r+0x64>
 800c624:	2000077c 	.word	0x2000077c
 800c628:	20000780 	.word	0x20000780

0800c62c <iprintf>:
 800c62c:	b40f      	push	{r0, r1, r2, r3}
 800c62e:	4b0a      	ldr	r3, [pc, #40]	; (800c658 <iprintf+0x2c>)
 800c630:	b513      	push	{r0, r1, r4, lr}
 800c632:	681c      	ldr	r4, [r3, #0]
 800c634:	b124      	cbz	r4, 800c640 <iprintf+0x14>
 800c636:	69a3      	ldr	r3, [r4, #24]
 800c638:	b913      	cbnz	r3, 800c640 <iprintf+0x14>
 800c63a:	4620      	mov	r0, r4
 800c63c:	f000 fa02 	bl	800ca44 <__sinit>
 800c640:	ab05      	add	r3, sp, #20
 800c642:	9a04      	ldr	r2, [sp, #16]
 800c644:	68a1      	ldr	r1, [r4, #8]
 800c646:	9301      	str	r3, [sp, #4]
 800c648:	4620      	mov	r0, r4
 800c64a:	f000 fc67 	bl	800cf1c <_vfiprintf_r>
 800c64e:	b002      	add	sp, #8
 800c650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c654:	b004      	add	sp, #16
 800c656:	4770      	bx	lr
 800c658:	20000154 	.word	0x20000154

0800c65c <putchar>:
 800c65c:	b538      	push	{r3, r4, r5, lr}
 800c65e:	4b08      	ldr	r3, [pc, #32]	; (800c680 <putchar+0x24>)
 800c660:	681c      	ldr	r4, [r3, #0]
 800c662:	4605      	mov	r5, r0
 800c664:	b124      	cbz	r4, 800c670 <putchar+0x14>
 800c666:	69a3      	ldr	r3, [r4, #24]
 800c668:	b913      	cbnz	r3, 800c670 <putchar+0x14>
 800c66a:	4620      	mov	r0, r4
 800c66c:	f000 f9ea 	bl	800ca44 <__sinit>
 800c670:	68a2      	ldr	r2, [r4, #8]
 800c672:	4629      	mov	r1, r5
 800c674:	4620      	mov	r0, r4
 800c676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c67a:	f000 beed 	b.w	800d458 <_putc_r>
 800c67e:	bf00      	nop
 800c680:	20000154 	.word	0x20000154

0800c684 <_sbrk_r>:
 800c684:	b538      	push	{r3, r4, r5, lr}
 800c686:	4c06      	ldr	r4, [pc, #24]	; (800c6a0 <_sbrk_r+0x1c>)
 800c688:	2300      	movs	r3, #0
 800c68a:	4605      	mov	r5, r0
 800c68c:	4608      	mov	r0, r1
 800c68e:	6023      	str	r3, [r4, #0]
 800c690:	f7ff f89a 	bl	800b7c8 <_sbrk>
 800c694:	1c43      	adds	r3, r0, #1
 800c696:	d102      	bne.n	800c69e <_sbrk_r+0x1a>
 800c698:	6823      	ldr	r3, [r4, #0]
 800c69a:	b103      	cbz	r3, 800c69e <_sbrk_r+0x1a>
 800c69c:	602b      	str	r3, [r5, #0]
 800c69e:	bd38      	pop	{r3, r4, r5, pc}
 800c6a0:	200025c0 	.word	0x200025c0

0800c6a4 <siprintf>:
 800c6a4:	b40e      	push	{r1, r2, r3}
 800c6a6:	b500      	push	{lr}
 800c6a8:	b09c      	sub	sp, #112	; 0x70
 800c6aa:	ab1d      	add	r3, sp, #116	; 0x74
 800c6ac:	9002      	str	r0, [sp, #8]
 800c6ae:	9006      	str	r0, [sp, #24]
 800c6b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c6b4:	4809      	ldr	r0, [pc, #36]	; (800c6dc <siprintf+0x38>)
 800c6b6:	9107      	str	r1, [sp, #28]
 800c6b8:	9104      	str	r1, [sp, #16]
 800c6ba:	4909      	ldr	r1, [pc, #36]	; (800c6e0 <siprintf+0x3c>)
 800c6bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6c0:	9105      	str	r1, [sp, #20]
 800c6c2:	6800      	ldr	r0, [r0, #0]
 800c6c4:	9301      	str	r3, [sp, #4]
 800c6c6:	a902      	add	r1, sp, #8
 800c6c8:	f000 fb06 	bl	800ccd8 <_svfiprintf_r>
 800c6cc:	9b02      	ldr	r3, [sp, #8]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	701a      	strb	r2, [r3, #0]
 800c6d2:	b01c      	add	sp, #112	; 0x70
 800c6d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6d8:	b003      	add	sp, #12
 800c6da:	4770      	bx	lr
 800c6dc:	20000154 	.word	0x20000154
 800c6e0:	ffff0208 	.word	0xffff0208

0800c6e4 <__swbuf_r>:
 800c6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6e6:	460e      	mov	r6, r1
 800c6e8:	4614      	mov	r4, r2
 800c6ea:	4605      	mov	r5, r0
 800c6ec:	b118      	cbz	r0, 800c6f6 <__swbuf_r+0x12>
 800c6ee:	6983      	ldr	r3, [r0, #24]
 800c6f0:	b90b      	cbnz	r3, 800c6f6 <__swbuf_r+0x12>
 800c6f2:	f000 f9a7 	bl	800ca44 <__sinit>
 800c6f6:	4b21      	ldr	r3, [pc, #132]	; (800c77c <__swbuf_r+0x98>)
 800c6f8:	429c      	cmp	r4, r3
 800c6fa:	d12a      	bne.n	800c752 <__swbuf_r+0x6e>
 800c6fc:	686c      	ldr	r4, [r5, #4]
 800c6fe:	69a3      	ldr	r3, [r4, #24]
 800c700:	60a3      	str	r3, [r4, #8]
 800c702:	89a3      	ldrh	r3, [r4, #12]
 800c704:	071a      	lsls	r2, r3, #28
 800c706:	d52e      	bpl.n	800c766 <__swbuf_r+0x82>
 800c708:	6923      	ldr	r3, [r4, #16]
 800c70a:	b363      	cbz	r3, 800c766 <__swbuf_r+0x82>
 800c70c:	6923      	ldr	r3, [r4, #16]
 800c70e:	6820      	ldr	r0, [r4, #0]
 800c710:	1ac0      	subs	r0, r0, r3
 800c712:	6963      	ldr	r3, [r4, #20]
 800c714:	b2f6      	uxtb	r6, r6
 800c716:	4283      	cmp	r3, r0
 800c718:	4637      	mov	r7, r6
 800c71a:	dc04      	bgt.n	800c726 <__swbuf_r+0x42>
 800c71c:	4621      	mov	r1, r4
 800c71e:	4628      	mov	r0, r5
 800c720:	f000 f926 	bl	800c970 <_fflush_r>
 800c724:	bb28      	cbnz	r0, 800c772 <__swbuf_r+0x8e>
 800c726:	68a3      	ldr	r3, [r4, #8]
 800c728:	3b01      	subs	r3, #1
 800c72a:	60a3      	str	r3, [r4, #8]
 800c72c:	6823      	ldr	r3, [r4, #0]
 800c72e:	1c5a      	adds	r2, r3, #1
 800c730:	6022      	str	r2, [r4, #0]
 800c732:	701e      	strb	r6, [r3, #0]
 800c734:	6963      	ldr	r3, [r4, #20]
 800c736:	3001      	adds	r0, #1
 800c738:	4283      	cmp	r3, r0
 800c73a:	d004      	beq.n	800c746 <__swbuf_r+0x62>
 800c73c:	89a3      	ldrh	r3, [r4, #12]
 800c73e:	07db      	lsls	r3, r3, #31
 800c740:	d519      	bpl.n	800c776 <__swbuf_r+0x92>
 800c742:	2e0a      	cmp	r6, #10
 800c744:	d117      	bne.n	800c776 <__swbuf_r+0x92>
 800c746:	4621      	mov	r1, r4
 800c748:	4628      	mov	r0, r5
 800c74a:	f000 f911 	bl	800c970 <_fflush_r>
 800c74e:	b190      	cbz	r0, 800c776 <__swbuf_r+0x92>
 800c750:	e00f      	b.n	800c772 <__swbuf_r+0x8e>
 800c752:	4b0b      	ldr	r3, [pc, #44]	; (800c780 <__swbuf_r+0x9c>)
 800c754:	429c      	cmp	r4, r3
 800c756:	d101      	bne.n	800c75c <__swbuf_r+0x78>
 800c758:	68ac      	ldr	r4, [r5, #8]
 800c75a:	e7d0      	b.n	800c6fe <__swbuf_r+0x1a>
 800c75c:	4b09      	ldr	r3, [pc, #36]	; (800c784 <__swbuf_r+0xa0>)
 800c75e:	429c      	cmp	r4, r3
 800c760:	bf08      	it	eq
 800c762:	68ec      	ldreq	r4, [r5, #12]
 800c764:	e7cb      	b.n	800c6fe <__swbuf_r+0x1a>
 800c766:	4621      	mov	r1, r4
 800c768:	4628      	mov	r0, r5
 800c76a:	f000 f80d 	bl	800c788 <__swsetup_r>
 800c76e:	2800      	cmp	r0, #0
 800c770:	d0cc      	beq.n	800c70c <__swbuf_r+0x28>
 800c772:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c776:	4638      	mov	r0, r7
 800c778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c77a:	bf00      	nop
 800c77c:	0800ed8c 	.word	0x0800ed8c
 800c780:	0800edac 	.word	0x0800edac
 800c784:	0800ed6c 	.word	0x0800ed6c

0800c788 <__swsetup_r>:
 800c788:	4b32      	ldr	r3, [pc, #200]	; (800c854 <__swsetup_r+0xcc>)
 800c78a:	b570      	push	{r4, r5, r6, lr}
 800c78c:	681d      	ldr	r5, [r3, #0]
 800c78e:	4606      	mov	r6, r0
 800c790:	460c      	mov	r4, r1
 800c792:	b125      	cbz	r5, 800c79e <__swsetup_r+0x16>
 800c794:	69ab      	ldr	r3, [r5, #24]
 800c796:	b913      	cbnz	r3, 800c79e <__swsetup_r+0x16>
 800c798:	4628      	mov	r0, r5
 800c79a:	f000 f953 	bl	800ca44 <__sinit>
 800c79e:	4b2e      	ldr	r3, [pc, #184]	; (800c858 <__swsetup_r+0xd0>)
 800c7a0:	429c      	cmp	r4, r3
 800c7a2:	d10f      	bne.n	800c7c4 <__swsetup_r+0x3c>
 800c7a4:	686c      	ldr	r4, [r5, #4]
 800c7a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7aa:	b29a      	uxth	r2, r3
 800c7ac:	0715      	lsls	r5, r2, #28
 800c7ae:	d42c      	bmi.n	800c80a <__swsetup_r+0x82>
 800c7b0:	06d0      	lsls	r0, r2, #27
 800c7b2:	d411      	bmi.n	800c7d8 <__swsetup_r+0x50>
 800c7b4:	2209      	movs	r2, #9
 800c7b6:	6032      	str	r2, [r6, #0]
 800c7b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7bc:	81a3      	strh	r3, [r4, #12]
 800c7be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7c2:	e03e      	b.n	800c842 <__swsetup_r+0xba>
 800c7c4:	4b25      	ldr	r3, [pc, #148]	; (800c85c <__swsetup_r+0xd4>)
 800c7c6:	429c      	cmp	r4, r3
 800c7c8:	d101      	bne.n	800c7ce <__swsetup_r+0x46>
 800c7ca:	68ac      	ldr	r4, [r5, #8]
 800c7cc:	e7eb      	b.n	800c7a6 <__swsetup_r+0x1e>
 800c7ce:	4b24      	ldr	r3, [pc, #144]	; (800c860 <__swsetup_r+0xd8>)
 800c7d0:	429c      	cmp	r4, r3
 800c7d2:	bf08      	it	eq
 800c7d4:	68ec      	ldreq	r4, [r5, #12]
 800c7d6:	e7e6      	b.n	800c7a6 <__swsetup_r+0x1e>
 800c7d8:	0751      	lsls	r1, r2, #29
 800c7da:	d512      	bpl.n	800c802 <__swsetup_r+0x7a>
 800c7dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7de:	b141      	cbz	r1, 800c7f2 <__swsetup_r+0x6a>
 800c7e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7e4:	4299      	cmp	r1, r3
 800c7e6:	d002      	beq.n	800c7ee <__swsetup_r+0x66>
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	f7ff fe77 	bl	800c4dc <_free_r>
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	6363      	str	r3, [r4, #52]	; 0x34
 800c7f2:	89a3      	ldrh	r3, [r4, #12]
 800c7f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c7f8:	81a3      	strh	r3, [r4, #12]
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	6063      	str	r3, [r4, #4]
 800c7fe:	6923      	ldr	r3, [r4, #16]
 800c800:	6023      	str	r3, [r4, #0]
 800c802:	89a3      	ldrh	r3, [r4, #12]
 800c804:	f043 0308 	orr.w	r3, r3, #8
 800c808:	81a3      	strh	r3, [r4, #12]
 800c80a:	6923      	ldr	r3, [r4, #16]
 800c80c:	b94b      	cbnz	r3, 800c822 <__swsetup_r+0x9a>
 800c80e:	89a3      	ldrh	r3, [r4, #12]
 800c810:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c818:	d003      	beq.n	800c822 <__swsetup_r+0x9a>
 800c81a:	4621      	mov	r1, r4
 800c81c:	4630      	mov	r0, r6
 800c81e:	f000 f9bf 	bl	800cba0 <__smakebuf_r>
 800c822:	89a2      	ldrh	r2, [r4, #12]
 800c824:	f012 0301 	ands.w	r3, r2, #1
 800c828:	d00c      	beq.n	800c844 <__swsetup_r+0xbc>
 800c82a:	2300      	movs	r3, #0
 800c82c:	60a3      	str	r3, [r4, #8]
 800c82e:	6963      	ldr	r3, [r4, #20]
 800c830:	425b      	negs	r3, r3
 800c832:	61a3      	str	r3, [r4, #24]
 800c834:	6923      	ldr	r3, [r4, #16]
 800c836:	b953      	cbnz	r3, 800c84e <__swsetup_r+0xc6>
 800c838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c83c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c840:	d1ba      	bne.n	800c7b8 <__swsetup_r+0x30>
 800c842:	bd70      	pop	{r4, r5, r6, pc}
 800c844:	0792      	lsls	r2, r2, #30
 800c846:	bf58      	it	pl
 800c848:	6963      	ldrpl	r3, [r4, #20]
 800c84a:	60a3      	str	r3, [r4, #8]
 800c84c:	e7f2      	b.n	800c834 <__swsetup_r+0xac>
 800c84e:	2000      	movs	r0, #0
 800c850:	e7f7      	b.n	800c842 <__swsetup_r+0xba>
 800c852:	bf00      	nop
 800c854:	20000154 	.word	0x20000154
 800c858:	0800ed8c 	.word	0x0800ed8c
 800c85c:	0800edac 	.word	0x0800edac
 800c860:	0800ed6c 	.word	0x0800ed6c

0800c864 <__sflush_r>:
 800c864:	898a      	ldrh	r2, [r1, #12]
 800c866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c86a:	4605      	mov	r5, r0
 800c86c:	0710      	lsls	r0, r2, #28
 800c86e:	460c      	mov	r4, r1
 800c870:	d458      	bmi.n	800c924 <__sflush_r+0xc0>
 800c872:	684b      	ldr	r3, [r1, #4]
 800c874:	2b00      	cmp	r3, #0
 800c876:	dc05      	bgt.n	800c884 <__sflush_r+0x20>
 800c878:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	dc02      	bgt.n	800c884 <__sflush_r+0x20>
 800c87e:	2000      	movs	r0, #0
 800c880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c884:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c886:	2e00      	cmp	r6, #0
 800c888:	d0f9      	beq.n	800c87e <__sflush_r+0x1a>
 800c88a:	2300      	movs	r3, #0
 800c88c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c890:	682f      	ldr	r7, [r5, #0]
 800c892:	6a21      	ldr	r1, [r4, #32]
 800c894:	602b      	str	r3, [r5, #0]
 800c896:	d032      	beq.n	800c8fe <__sflush_r+0x9a>
 800c898:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c89a:	89a3      	ldrh	r3, [r4, #12]
 800c89c:	075a      	lsls	r2, r3, #29
 800c89e:	d505      	bpl.n	800c8ac <__sflush_r+0x48>
 800c8a0:	6863      	ldr	r3, [r4, #4]
 800c8a2:	1ac0      	subs	r0, r0, r3
 800c8a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c8a6:	b10b      	cbz	r3, 800c8ac <__sflush_r+0x48>
 800c8a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c8aa:	1ac0      	subs	r0, r0, r3
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8b2:	6a21      	ldr	r1, [r4, #32]
 800c8b4:	4628      	mov	r0, r5
 800c8b6:	47b0      	blx	r6
 800c8b8:	1c43      	adds	r3, r0, #1
 800c8ba:	89a3      	ldrh	r3, [r4, #12]
 800c8bc:	d106      	bne.n	800c8cc <__sflush_r+0x68>
 800c8be:	6829      	ldr	r1, [r5, #0]
 800c8c0:	291d      	cmp	r1, #29
 800c8c2:	d848      	bhi.n	800c956 <__sflush_r+0xf2>
 800c8c4:	4a29      	ldr	r2, [pc, #164]	; (800c96c <__sflush_r+0x108>)
 800c8c6:	40ca      	lsrs	r2, r1
 800c8c8:	07d6      	lsls	r6, r2, #31
 800c8ca:	d544      	bpl.n	800c956 <__sflush_r+0xf2>
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	6062      	str	r2, [r4, #4]
 800c8d0:	04d9      	lsls	r1, r3, #19
 800c8d2:	6922      	ldr	r2, [r4, #16]
 800c8d4:	6022      	str	r2, [r4, #0]
 800c8d6:	d504      	bpl.n	800c8e2 <__sflush_r+0x7e>
 800c8d8:	1c42      	adds	r2, r0, #1
 800c8da:	d101      	bne.n	800c8e0 <__sflush_r+0x7c>
 800c8dc:	682b      	ldr	r3, [r5, #0]
 800c8de:	b903      	cbnz	r3, 800c8e2 <__sflush_r+0x7e>
 800c8e0:	6560      	str	r0, [r4, #84]	; 0x54
 800c8e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8e4:	602f      	str	r7, [r5, #0]
 800c8e6:	2900      	cmp	r1, #0
 800c8e8:	d0c9      	beq.n	800c87e <__sflush_r+0x1a>
 800c8ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8ee:	4299      	cmp	r1, r3
 800c8f0:	d002      	beq.n	800c8f8 <__sflush_r+0x94>
 800c8f2:	4628      	mov	r0, r5
 800c8f4:	f7ff fdf2 	bl	800c4dc <_free_r>
 800c8f8:	2000      	movs	r0, #0
 800c8fa:	6360      	str	r0, [r4, #52]	; 0x34
 800c8fc:	e7c0      	b.n	800c880 <__sflush_r+0x1c>
 800c8fe:	2301      	movs	r3, #1
 800c900:	4628      	mov	r0, r5
 800c902:	47b0      	blx	r6
 800c904:	1c41      	adds	r1, r0, #1
 800c906:	d1c8      	bne.n	800c89a <__sflush_r+0x36>
 800c908:	682b      	ldr	r3, [r5, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d0c5      	beq.n	800c89a <__sflush_r+0x36>
 800c90e:	2b1d      	cmp	r3, #29
 800c910:	d001      	beq.n	800c916 <__sflush_r+0xb2>
 800c912:	2b16      	cmp	r3, #22
 800c914:	d101      	bne.n	800c91a <__sflush_r+0xb6>
 800c916:	602f      	str	r7, [r5, #0]
 800c918:	e7b1      	b.n	800c87e <__sflush_r+0x1a>
 800c91a:	89a3      	ldrh	r3, [r4, #12]
 800c91c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c920:	81a3      	strh	r3, [r4, #12]
 800c922:	e7ad      	b.n	800c880 <__sflush_r+0x1c>
 800c924:	690f      	ldr	r7, [r1, #16]
 800c926:	2f00      	cmp	r7, #0
 800c928:	d0a9      	beq.n	800c87e <__sflush_r+0x1a>
 800c92a:	0793      	lsls	r3, r2, #30
 800c92c:	680e      	ldr	r6, [r1, #0]
 800c92e:	bf08      	it	eq
 800c930:	694b      	ldreq	r3, [r1, #20]
 800c932:	600f      	str	r7, [r1, #0]
 800c934:	bf18      	it	ne
 800c936:	2300      	movne	r3, #0
 800c938:	eba6 0807 	sub.w	r8, r6, r7
 800c93c:	608b      	str	r3, [r1, #8]
 800c93e:	f1b8 0f00 	cmp.w	r8, #0
 800c942:	dd9c      	ble.n	800c87e <__sflush_r+0x1a>
 800c944:	4643      	mov	r3, r8
 800c946:	463a      	mov	r2, r7
 800c948:	6a21      	ldr	r1, [r4, #32]
 800c94a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c94c:	4628      	mov	r0, r5
 800c94e:	47b0      	blx	r6
 800c950:	2800      	cmp	r0, #0
 800c952:	dc06      	bgt.n	800c962 <__sflush_r+0xfe>
 800c954:	89a3      	ldrh	r3, [r4, #12]
 800c956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c95a:	81a3      	strh	r3, [r4, #12]
 800c95c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c960:	e78e      	b.n	800c880 <__sflush_r+0x1c>
 800c962:	4407      	add	r7, r0
 800c964:	eba8 0800 	sub.w	r8, r8, r0
 800c968:	e7e9      	b.n	800c93e <__sflush_r+0xda>
 800c96a:	bf00      	nop
 800c96c:	20400001 	.word	0x20400001

0800c970 <_fflush_r>:
 800c970:	b538      	push	{r3, r4, r5, lr}
 800c972:	690b      	ldr	r3, [r1, #16]
 800c974:	4605      	mov	r5, r0
 800c976:	460c      	mov	r4, r1
 800c978:	b1db      	cbz	r3, 800c9b2 <_fflush_r+0x42>
 800c97a:	b118      	cbz	r0, 800c984 <_fflush_r+0x14>
 800c97c:	6983      	ldr	r3, [r0, #24]
 800c97e:	b90b      	cbnz	r3, 800c984 <_fflush_r+0x14>
 800c980:	f000 f860 	bl	800ca44 <__sinit>
 800c984:	4b0c      	ldr	r3, [pc, #48]	; (800c9b8 <_fflush_r+0x48>)
 800c986:	429c      	cmp	r4, r3
 800c988:	d109      	bne.n	800c99e <_fflush_r+0x2e>
 800c98a:	686c      	ldr	r4, [r5, #4]
 800c98c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c990:	b17b      	cbz	r3, 800c9b2 <_fflush_r+0x42>
 800c992:	4621      	mov	r1, r4
 800c994:	4628      	mov	r0, r5
 800c996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c99a:	f7ff bf63 	b.w	800c864 <__sflush_r>
 800c99e:	4b07      	ldr	r3, [pc, #28]	; (800c9bc <_fflush_r+0x4c>)
 800c9a0:	429c      	cmp	r4, r3
 800c9a2:	d101      	bne.n	800c9a8 <_fflush_r+0x38>
 800c9a4:	68ac      	ldr	r4, [r5, #8]
 800c9a6:	e7f1      	b.n	800c98c <_fflush_r+0x1c>
 800c9a8:	4b05      	ldr	r3, [pc, #20]	; (800c9c0 <_fflush_r+0x50>)
 800c9aa:	429c      	cmp	r4, r3
 800c9ac:	bf08      	it	eq
 800c9ae:	68ec      	ldreq	r4, [r5, #12]
 800c9b0:	e7ec      	b.n	800c98c <_fflush_r+0x1c>
 800c9b2:	2000      	movs	r0, #0
 800c9b4:	bd38      	pop	{r3, r4, r5, pc}
 800c9b6:	bf00      	nop
 800c9b8:	0800ed8c 	.word	0x0800ed8c
 800c9bc:	0800edac 	.word	0x0800edac
 800c9c0:	0800ed6c 	.word	0x0800ed6c

0800c9c4 <std>:
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	b510      	push	{r4, lr}
 800c9c8:	4604      	mov	r4, r0
 800c9ca:	e9c0 3300 	strd	r3, r3, [r0]
 800c9ce:	6083      	str	r3, [r0, #8]
 800c9d0:	8181      	strh	r1, [r0, #12]
 800c9d2:	6643      	str	r3, [r0, #100]	; 0x64
 800c9d4:	81c2      	strh	r2, [r0, #14]
 800c9d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c9da:	6183      	str	r3, [r0, #24]
 800c9dc:	4619      	mov	r1, r3
 800c9de:	2208      	movs	r2, #8
 800c9e0:	305c      	adds	r0, #92	; 0x5c
 800c9e2:	f7ff fd73 	bl	800c4cc <memset>
 800c9e6:	4b05      	ldr	r3, [pc, #20]	; (800c9fc <std+0x38>)
 800c9e8:	6263      	str	r3, [r4, #36]	; 0x24
 800c9ea:	4b05      	ldr	r3, [pc, #20]	; (800ca00 <std+0x3c>)
 800c9ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800c9ee:	4b05      	ldr	r3, [pc, #20]	; (800ca04 <std+0x40>)
 800c9f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c9f2:	4b05      	ldr	r3, [pc, #20]	; (800ca08 <std+0x44>)
 800c9f4:	6224      	str	r4, [r4, #32]
 800c9f6:	6323      	str	r3, [r4, #48]	; 0x30
 800c9f8:	bd10      	pop	{r4, pc}
 800c9fa:	bf00      	nop
 800c9fc:	0800d4c5 	.word	0x0800d4c5
 800ca00:	0800d4e7 	.word	0x0800d4e7
 800ca04:	0800d51f 	.word	0x0800d51f
 800ca08:	0800d543 	.word	0x0800d543

0800ca0c <_cleanup_r>:
 800ca0c:	4901      	ldr	r1, [pc, #4]	; (800ca14 <_cleanup_r+0x8>)
 800ca0e:	f000 b885 	b.w	800cb1c <_fwalk_reent>
 800ca12:	bf00      	nop
 800ca14:	0800c971 	.word	0x0800c971

0800ca18 <__sfmoreglue>:
 800ca18:	b570      	push	{r4, r5, r6, lr}
 800ca1a:	1e4a      	subs	r2, r1, #1
 800ca1c:	2568      	movs	r5, #104	; 0x68
 800ca1e:	4355      	muls	r5, r2
 800ca20:	460e      	mov	r6, r1
 800ca22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ca26:	f7ff fda7 	bl	800c578 <_malloc_r>
 800ca2a:	4604      	mov	r4, r0
 800ca2c:	b140      	cbz	r0, 800ca40 <__sfmoreglue+0x28>
 800ca2e:	2100      	movs	r1, #0
 800ca30:	e9c0 1600 	strd	r1, r6, [r0]
 800ca34:	300c      	adds	r0, #12
 800ca36:	60a0      	str	r0, [r4, #8]
 800ca38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ca3c:	f7ff fd46 	bl	800c4cc <memset>
 800ca40:	4620      	mov	r0, r4
 800ca42:	bd70      	pop	{r4, r5, r6, pc}

0800ca44 <__sinit>:
 800ca44:	6983      	ldr	r3, [r0, #24]
 800ca46:	b510      	push	{r4, lr}
 800ca48:	4604      	mov	r4, r0
 800ca4a:	bb33      	cbnz	r3, 800ca9a <__sinit+0x56>
 800ca4c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800ca50:	6503      	str	r3, [r0, #80]	; 0x50
 800ca52:	4b12      	ldr	r3, [pc, #72]	; (800ca9c <__sinit+0x58>)
 800ca54:	4a12      	ldr	r2, [pc, #72]	; (800caa0 <__sinit+0x5c>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	6282      	str	r2, [r0, #40]	; 0x28
 800ca5a:	4298      	cmp	r0, r3
 800ca5c:	bf04      	itt	eq
 800ca5e:	2301      	moveq	r3, #1
 800ca60:	6183      	streq	r3, [r0, #24]
 800ca62:	f000 f81f 	bl	800caa4 <__sfp>
 800ca66:	6060      	str	r0, [r4, #4]
 800ca68:	4620      	mov	r0, r4
 800ca6a:	f000 f81b 	bl	800caa4 <__sfp>
 800ca6e:	60a0      	str	r0, [r4, #8]
 800ca70:	4620      	mov	r0, r4
 800ca72:	f000 f817 	bl	800caa4 <__sfp>
 800ca76:	2200      	movs	r2, #0
 800ca78:	60e0      	str	r0, [r4, #12]
 800ca7a:	2104      	movs	r1, #4
 800ca7c:	6860      	ldr	r0, [r4, #4]
 800ca7e:	f7ff ffa1 	bl	800c9c4 <std>
 800ca82:	2201      	movs	r2, #1
 800ca84:	2109      	movs	r1, #9
 800ca86:	68a0      	ldr	r0, [r4, #8]
 800ca88:	f7ff ff9c 	bl	800c9c4 <std>
 800ca8c:	2202      	movs	r2, #2
 800ca8e:	2112      	movs	r1, #18
 800ca90:	68e0      	ldr	r0, [r4, #12]
 800ca92:	f7ff ff97 	bl	800c9c4 <std>
 800ca96:	2301      	movs	r3, #1
 800ca98:	61a3      	str	r3, [r4, #24]
 800ca9a:	bd10      	pop	{r4, pc}
 800ca9c:	0800ed68 	.word	0x0800ed68
 800caa0:	0800ca0d 	.word	0x0800ca0d

0800caa4 <__sfp>:
 800caa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caa6:	4b1b      	ldr	r3, [pc, #108]	; (800cb14 <__sfp+0x70>)
 800caa8:	681e      	ldr	r6, [r3, #0]
 800caaa:	69b3      	ldr	r3, [r6, #24]
 800caac:	4607      	mov	r7, r0
 800caae:	b913      	cbnz	r3, 800cab6 <__sfp+0x12>
 800cab0:	4630      	mov	r0, r6
 800cab2:	f7ff ffc7 	bl	800ca44 <__sinit>
 800cab6:	3648      	adds	r6, #72	; 0x48
 800cab8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cabc:	3b01      	subs	r3, #1
 800cabe:	d503      	bpl.n	800cac8 <__sfp+0x24>
 800cac0:	6833      	ldr	r3, [r6, #0]
 800cac2:	b133      	cbz	r3, 800cad2 <__sfp+0x2e>
 800cac4:	6836      	ldr	r6, [r6, #0]
 800cac6:	e7f7      	b.n	800cab8 <__sfp+0x14>
 800cac8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cacc:	b16d      	cbz	r5, 800caea <__sfp+0x46>
 800cace:	3468      	adds	r4, #104	; 0x68
 800cad0:	e7f4      	b.n	800cabc <__sfp+0x18>
 800cad2:	2104      	movs	r1, #4
 800cad4:	4638      	mov	r0, r7
 800cad6:	f7ff ff9f 	bl	800ca18 <__sfmoreglue>
 800cada:	6030      	str	r0, [r6, #0]
 800cadc:	2800      	cmp	r0, #0
 800cade:	d1f1      	bne.n	800cac4 <__sfp+0x20>
 800cae0:	230c      	movs	r3, #12
 800cae2:	603b      	str	r3, [r7, #0]
 800cae4:	4604      	mov	r4, r0
 800cae6:	4620      	mov	r0, r4
 800cae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caea:	4b0b      	ldr	r3, [pc, #44]	; (800cb18 <__sfp+0x74>)
 800caec:	6665      	str	r5, [r4, #100]	; 0x64
 800caee:	e9c4 5500 	strd	r5, r5, [r4]
 800caf2:	60a5      	str	r5, [r4, #8]
 800caf4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800caf8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800cafc:	2208      	movs	r2, #8
 800cafe:	4629      	mov	r1, r5
 800cb00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cb04:	f7ff fce2 	bl	800c4cc <memset>
 800cb08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cb0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cb10:	e7e9      	b.n	800cae6 <__sfp+0x42>
 800cb12:	bf00      	nop
 800cb14:	0800ed68 	.word	0x0800ed68
 800cb18:	ffff0001 	.word	0xffff0001

0800cb1c <_fwalk_reent>:
 800cb1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb20:	4680      	mov	r8, r0
 800cb22:	4689      	mov	r9, r1
 800cb24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cb28:	2600      	movs	r6, #0
 800cb2a:	b914      	cbnz	r4, 800cb32 <_fwalk_reent+0x16>
 800cb2c:	4630      	mov	r0, r6
 800cb2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb32:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800cb36:	3f01      	subs	r7, #1
 800cb38:	d501      	bpl.n	800cb3e <_fwalk_reent+0x22>
 800cb3a:	6824      	ldr	r4, [r4, #0]
 800cb3c:	e7f5      	b.n	800cb2a <_fwalk_reent+0xe>
 800cb3e:	89ab      	ldrh	r3, [r5, #12]
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d907      	bls.n	800cb54 <_fwalk_reent+0x38>
 800cb44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb48:	3301      	adds	r3, #1
 800cb4a:	d003      	beq.n	800cb54 <_fwalk_reent+0x38>
 800cb4c:	4629      	mov	r1, r5
 800cb4e:	4640      	mov	r0, r8
 800cb50:	47c8      	blx	r9
 800cb52:	4306      	orrs	r6, r0
 800cb54:	3568      	adds	r5, #104	; 0x68
 800cb56:	e7ee      	b.n	800cb36 <_fwalk_reent+0x1a>

0800cb58 <__swhatbuf_r>:
 800cb58:	b570      	push	{r4, r5, r6, lr}
 800cb5a:	460e      	mov	r6, r1
 800cb5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb60:	2900      	cmp	r1, #0
 800cb62:	b096      	sub	sp, #88	; 0x58
 800cb64:	4614      	mov	r4, r2
 800cb66:	461d      	mov	r5, r3
 800cb68:	da07      	bge.n	800cb7a <__swhatbuf_r+0x22>
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	602b      	str	r3, [r5, #0]
 800cb6e:	89b3      	ldrh	r3, [r6, #12]
 800cb70:	061a      	lsls	r2, r3, #24
 800cb72:	d410      	bmi.n	800cb96 <__swhatbuf_r+0x3e>
 800cb74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb78:	e00e      	b.n	800cb98 <__swhatbuf_r+0x40>
 800cb7a:	466a      	mov	r2, sp
 800cb7c:	f000 fd08 	bl	800d590 <_fstat_r>
 800cb80:	2800      	cmp	r0, #0
 800cb82:	dbf2      	blt.n	800cb6a <__swhatbuf_r+0x12>
 800cb84:	9a01      	ldr	r2, [sp, #4]
 800cb86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb8e:	425a      	negs	r2, r3
 800cb90:	415a      	adcs	r2, r3
 800cb92:	602a      	str	r2, [r5, #0]
 800cb94:	e7ee      	b.n	800cb74 <__swhatbuf_r+0x1c>
 800cb96:	2340      	movs	r3, #64	; 0x40
 800cb98:	2000      	movs	r0, #0
 800cb9a:	6023      	str	r3, [r4, #0]
 800cb9c:	b016      	add	sp, #88	; 0x58
 800cb9e:	bd70      	pop	{r4, r5, r6, pc}

0800cba0 <__smakebuf_r>:
 800cba0:	898b      	ldrh	r3, [r1, #12]
 800cba2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cba4:	079d      	lsls	r5, r3, #30
 800cba6:	4606      	mov	r6, r0
 800cba8:	460c      	mov	r4, r1
 800cbaa:	d507      	bpl.n	800cbbc <__smakebuf_r+0x1c>
 800cbac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cbb0:	6023      	str	r3, [r4, #0]
 800cbb2:	6123      	str	r3, [r4, #16]
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	6163      	str	r3, [r4, #20]
 800cbb8:	b002      	add	sp, #8
 800cbba:	bd70      	pop	{r4, r5, r6, pc}
 800cbbc:	ab01      	add	r3, sp, #4
 800cbbe:	466a      	mov	r2, sp
 800cbc0:	f7ff ffca 	bl	800cb58 <__swhatbuf_r>
 800cbc4:	9900      	ldr	r1, [sp, #0]
 800cbc6:	4605      	mov	r5, r0
 800cbc8:	4630      	mov	r0, r6
 800cbca:	f7ff fcd5 	bl	800c578 <_malloc_r>
 800cbce:	b948      	cbnz	r0, 800cbe4 <__smakebuf_r+0x44>
 800cbd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbd4:	059a      	lsls	r2, r3, #22
 800cbd6:	d4ef      	bmi.n	800cbb8 <__smakebuf_r+0x18>
 800cbd8:	f023 0303 	bic.w	r3, r3, #3
 800cbdc:	f043 0302 	orr.w	r3, r3, #2
 800cbe0:	81a3      	strh	r3, [r4, #12]
 800cbe2:	e7e3      	b.n	800cbac <__smakebuf_r+0xc>
 800cbe4:	4b0d      	ldr	r3, [pc, #52]	; (800cc1c <__smakebuf_r+0x7c>)
 800cbe6:	62b3      	str	r3, [r6, #40]	; 0x28
 800cbe8:	89a3      	ldrh	r3, [r4, #12]
 800cbea:	6020      	str	r0, [r4, #0]
 800cbec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbf0:	81a3      	strh	r3, [r4, #12]
 800cbf2:	9b00      	ldr	r3, [sp, #0]
 800cbf4:	6163      	str	r3, [r4, #20]
 800cbf6:	9b01      	ldr	r3, [sp, #4]
 800cbf8:	6120      	str	r0, [r4, #16]
 800cbfa:	b15b      	cbz	r3, 800cc14 <__smakebuf_r+0x74>
 800cbfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc00:	4630      	mov	r0, r6
 800cc02:	f000 fcd7 	bl	800d5b4 <_isatty_r>
 800cc06:	b128      	cbz	r0, 800cc14 <__smakebuf_r+0x74>
 800cc08:	89a3      	ldrh	r3, [r4, #12]
 800cc0a:	f023 0303 	bic.w	r3, r3, #3
 800cc0e:	f043 0301 	orr.w	r3, r3, #1
 800cc12:	81a3      	strh	r3, [r4, #12]
 800cc14:	89a3      	ldrh	r3, [r4, #12]
 800cc16:	431d      	orrs	r5, r3
 800cc18:	81a5      	strh	r5, [r4, #12]
 800cc1a:	e7cd      	b.n	800cbb8 <__smakebuf_r+0x18>
 800cc1c:	0800ca0d 	.word	0x0800ca0d

0800cc20 <__malloc_lock>:
 800cc20:	4770      	bx	lr

0800cc22 <__malloc_unlock>:
 800cc22:	4770      	bx	lr

0800cc24 <__ssputs_r>:
 800cc24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc28:	688e      	ldr	r6, [r1, #8]
 800cc2a:	429e      	cmp	r6, r3
 800cc2c:	4682      	mov	sl, r0
 800cc2e:	460c      	mov	r4, r1
 800cc30:	4690      	mov	r8, r2
 800cc32:	4699      	mov	r9, r3
 800cc34:	d837      	bhi.n	800cca6 <__ssputs_r+0x82>
 800cc36:	898a      	ldrh	r2, [r1, #12]
 800cc38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc3c:	d031      	beq.n	800cca2 <__ssputs_r+0x7e>
 800cc3e:	6825      	ldr	r5, [r4, #0]
 800cc40:	6909      	ldr	r1, [r1, #16]
 800cc42:	1a6f      	subs	r7, r5, r1
 800cc44:	6965      	ldr	r5, [r4, #20]
 800cc46:	2302      	movs	r3, #2
 800cc48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc4c:	fb95 f5f3 	sdiv	r5, r5, r3
 800cc50:	f109 0301 	add.w	r3, r9, #1
 800cc54:	443b      	add	r3, r7
 800cc56:	429d      	cmp	r5, r3
 800cc58:	bf38      	it	cc
 800cc5a:	461d      	movcc	r5, r3
 800cc5c:	0553      	lsls	r3, r2, #21
 800cc5e:	d530      	bpl.n	800ccc2 <__ssputs_r+0x9e>
 800cc60:	4629      	mov	r1, r5
 800cc62:	f7ff fc89 	bl	800c578 <_malloc_r>
 800cc66:	4606      	mov	r6, r0
 800cc68:	b950      	cbnz	r0, 800cc80 <__ssputs_r+0x5c>
 800cc6a:	230c      	movs	r3, #12
 800cc6c:	f8ca 3000 	str.w	r3, [sl]
 800cc70:	89a3      	ldrh	r3, [r4, #12]
 800cc72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc76:	81a3      	strh	r3, [r4, #12]
 800cc78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc80:	463a      	mov	r2, r7
 800cc82:	6921      	ldr	r1, [r4, #16]
 800cc84:	f000 fcb8 	bl	800d5f8 <memcpy>
 800cc88:	89a3      	ldrh	r3, [r4, #12]
 800cc8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc92:	81a3      	strh	r3, [r4, #12]
 800cc94:	6126      	str	r6, [r4, #16]
 800cc96:	6165      	str	r5, [r4, #20]
 800cc98:	443e      	add	r6, r7
 800cc9a:	1bed      	subs	r5, r5, r7
 800cc9c:	6026      	str	r6, [r4, #0]
 800cc9e:	60a5      	str	r5, [r4, #8]
 800cca0:	464e      	mov	r6, r9
 800cca2:	454e      	cmp	r6, r9
 800cca4:	d900      	bls.n	800cca8 <__ssputs_r+0x84>
 800cca6:	464e      	mov	r6, r9
 800cca8:	4632      	mov	r2, r6
 800ccaa:	4641      	mov	r1, r8
 800ccac:	6820      	ldr	r0, [r4, #0]
 800ccae:	f000 fcae 	bl	800d60e <memmove>
 800ccb2:	68a3      	ldr	r3, [r4, #8]
 800ccb4:	1b9b      	subs	r3, r3, r6
 800ccb6:	60a3      	str	r3, [r4, #8]
 800ccb8:	6823      	ldr	r3, [r4, #0]
 800ccba:	441e      	add	r6, r3
 800ccbc:	6026      	str	r6, [r4, #0]
 800ccbe:	2000      	movs	r0, #0
 800ccc0:	e7dc      	b.n	800cc7c <__ssputs_r+0x58>
 800ccc2:	462a      	mov	r2, r5
 800ccc4:	f000 fcbc 	bl	800d640 <_realloc_r>
 800ccc8:	4606      	mov	r6, r0
 800ccca:	2800      	cmp	r0, #0
 800cccc:	d1e2      	bne.n	800cc94 <__ssputs_r+0x70>
 800ccce:	6921      	ldr	r1, [r4, #16]
 800ccd0:	4650      	mov	r0, sl
 800ccd2:	f7ff fc03 	bl	800c4dc <_free_r>
 800ccd6:	e7c8      	b.n	800cc6a <__ssputs_r+0x46>

0800ccd8 <_svfiprintf_r>:
 800ccd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccdc:	461d      	mov	r5, r3
 800ccde:	898b      	ldrh	r3, [r1, #12]
 800cce0:	061f      	lsls	r7, r3, #24
 800cce2:	b09d      	sub	sp, #116	; 0x74
 800cce4:	4680      	mov	r8, r0
 800cce6:	460c      	mov	r4, r1
 800cce8:	4616      	mov	r6, r2
 800ccea:	d50f      	bpl.n	800cd0c <_svfiprintf_r+0x34>
 800ccec:	690b      	ldr	r3, [r1, #16]
 800ccee:	b96b      	cbnz	r3, 800cd0c <_svfiprintf_r+0x34>
 800ccf0:	2140      	movs	r1, #64	; 0x40
 800ccf2:	f7ff fc41 	bl	800c578 <_malloc_r>
 800ccf6:	6020      	str	r0, [r4, #0]
 800ccf8:	6120      	str	r0, [r4, #16]
 800ccfa:	b928      	cbnz	r0, 800cd08 <_svfiprintf_r+0x30>
 800ccfc:	230c      	movs	r3, #12
 800ccfe:	f8c8 3000 	str.w	r3, [r8]
 800cd02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd06:	e0c8      	b.n	800ce9a <_svfiprintf_r+0x1c2>
 800cd08:	2340      	movs	r3, #64	; 0x40
 800cd0a:	6163      	str	r3, [r4, #20]
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	9309      	str	r3, [sp, #36]	; 0x24
 800cd10:	2320      	movs	r3, #32
 800cd12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd16:	2330      	movs	r3, #48	; 0x30
 800cd18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd1c:	9503      	str	r5, [sp, #12]
 800cd1e:	f04f 0b01 	mov.w	fp, #1
 800cd22:	4637      	mov	r7, r6
 800cd24:	463d      	mov	r5, r7
 800cd26:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cd2a:	b10b      	cbz	r3, 800cd30 <_svfiprintf_r+0x58>
 800cd2c:	2b25      	cmp	r3, #37	; 0x25
 800cd2e:	d13e      	bne.n	800cdae <_svfiprintf_r+0xd6>
 800cd30:	ebb7 0a06 	subs.w	sl, r7, r6
 800cd34:	d00b      	beq.n	800cd4e <_svfiprintf_r+0x76>
 800cd36:	4653      	mov	r3, sl
 800cd38:	4632      	mov	r2, r6
 800cd3a:	4621      	mov	r1, r4
 800cd3c:	4640      	mov	r0, r8
 800cd3e:	f7ff ff71 	bl	800cc24 <__ssputs_r>
 800cd42:	3001      	adds	r0, #1
 800cd44:	f000 80a4 	beq.w	800ce90 <_svfiprintf_r+0x1b8>
 800cd48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd4a:	4453      	add	r3, sl
 800cd4c:	9309      	str	r3, [sp, #36]	; 0x24
 800cd4e:	783b      	ldrb	r3, [r7, #0]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	f000 809d 	beq.w	800ce90 <_svfiprintf_r+0x1b8>
 800cd56:	2300      	movs	r3, #0
 800cd58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd60:	9304      	str	r3, [sp, #16]
 800cd62:	9307      	str	r3, [sp, #28]
 800cd64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd68:	931a      	str	r3, [sp, #104]	; 0x68
 800cd6a:	462f      	mov	r7, r5
 800cd6c:	2205      	movs	r2, #5
 800cd6e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cd72:	4850      	ldr	r0, [pc, #320]	; (800ceb4 <_svfiprintf_r+0x1dc>)
 800cd74:	f7f3 fa4c 	bl	8000210 <memchr>
 800cd78:	9b04      	ldr	r3, [sp, #16]
 800cd7a:	b9d0      	cbnz	r0, 800cdb2 <_svfiprintf_r+0xda>
 800cd7c:	06d9      	lsls	r1, r3, #27
 800cd7e:	bf44      	itt	mi
 800cd80:	2220      	movmi	r2, #32
 800cd82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cd86:	071a      	lsls	r2, r3, #28
 800cd88:	bf44      	itt	mi
 800cd8a:	222b      	movmi	r2, #43	; 0x2b
 800cd8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cd90:	782a      	ldrb	r2, [r5, #0]
 800cd92:	2a2a      	cmp	r2, #42	; 0x2a
 800cd94:	d015      	beq.n	800cdc2 <_svfiprintf_r+0xea>
 800cd96:	9a07      	ldr	r2, [sp, #28]
 800cd98:	462f      	mov	r7, r5
 800cd9a:	2000      	movs	r0, #0
 800cd9c:	250a      	movs	r5, #10
 800cd9e:	4639      	mov	r1, r7
 800cda0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cda4:	3b30      	subs	r3, #48	; 0x30
 800cda6:	2b09      	cmp	r3, #9
 800cda8:	d94d      	bls.n	800ce46 <_svfiprintf_r+0x16e>
 800cdaa:	b1b8      	cbz	r0, 800cddc <_svfiprintf_r+0x104>
 800cdac:	e00f      	b.n	800cdce <_svfiprintf_r+0xf6>
 800cdae:	462f      	mov	r7, r5
 800cdb0:	e7b8      	b.n	800cd24 <_svfiprintf_r+0x4c>
 800cdb2:	4a40      	ldr	r2, [pc, #256]	; (800ceb4 <_svfiprintf_r+0x1dc>)
 800cdb4:	1a80      	subs	r0, r0, r2
 800cdb6:	fa0b f000 	lsl.w	r0, fp, r0
 800cdba:	4318      	orrs	r0, r3
 800cdbc:	9004      	str	r0, [sp, #16]
 800cdbe:	463d      	mov	r5, r7
 800cdc0:	e7d3      	b.n	800cd6a <_svfiprintf_r+0x92>
 800cdc2:	9a03      	ldr	r2, [sp, #12]
 800cdc4:	1d11      	adds	r1, r2, #4
 800cdc6:	6812      	ldr	r2, [r2, #0]
 800cdc8:	9103      	str	r1, [sp, #12]
 800cdca:	2a00      	cmp	r2, #0
 800cdcc:	db01      	blt.n	800cdd2 <_svfiprintf_r+0xfa>
 800cdce:	9207      	str	r2, [sp, #28]
 800cdd0:	e004      	b.n	800cddc <_svfiprintf_r+0x104>
 800cdd2:	4252      	negs	r2, r2
 800cdd4:	f043 0302 	orr.w	r3, r3, #2
 800cdd8:	9207      	str	r2, [sp, #28]
 800cdda:	9304      	str	r3, [sp, #16]
 800cddc:	783b      	ldrb	r3, [r7, #0]
 800cdde:	2b2e      	cmp	r3, #46	; 0x2e
 800cde0:	d10c      	bne.n	800cdfc <_svfiprintf_r+0x124>
 800cde2:	787b      	ldrb	r3, [r7, #1]
 800cde4:	2b2a      	cmp	r3, #42	; 0x2a
 800cde6:	d133      	bne.n	800ce50 <_svfiprintf_r+0x178>
 800cde8:	9b03      	ldr	r3, [sp, #12]
 800cdea:	1d1a      	adds	r2, r3, #4
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	9203      	str	r2, [sp, #12]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	bfb8      	it	lt
 800cdf4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cdf8:	3702      	adds	r7, #2
 800cdfa:	9305      	str	r3, [sp, #20]
 800cdfc:	4d2e      	ldr	r5, [pc, #184]	; (800ceb8 <_svfiprintf_r+0x1e0>)
 800cdfe:	7839      	ldrb	r1, [r7, #0]
 800ce00:	2203      	movs	r2, #3
 800ce02:	4628      	mov	r0, r5
 800ce04:	f7f3 fa04 	bl	8000210 <memchr>
 800ce08:	b138      	cbz	r0, 800ce1a <_svfiprintf_r+0x142>
 800ce0a:	2340      	movs	r3, #64	; 0x40
 800ce0c:	1b40      	subs	r0, r0, r5
 800ce0e:	fa03 f000 	lsl.w	r0, r3, r0
 800ce12:	9b04      	ldr	r3, [sp, #16]
 800ce14:	4303      	orrs	r3, r0
 800ce16:	3701      	adds	r7, #1
 800ce18:	9304      	str	r3, [sp, #16]
 800ce1a:	7839      	ldrb	r1, [r7, #0]
 800ce1c:	4827      	ldr	r0, [pc, #156]	; (800cebc <_svfiprintf_r+0x1e4>)
 800ce1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce22:	2206      	movs	r2, #6
 800ce24:	1c7e      	adds	r6, r7, #1
 800ce26:	f7f3 f9f3 	bl	8000210 <memchr>
 800ce2a:	2800      	cmp	r0, #0
 800ce2c:	d038      	beq.n	800cea0 <_svfiprintf_r+0x1c8>
 800ce2e:	4b24      	ldr	r3, [pc, #144]	; (800cec0 <_svfiprintf_r+0x1e8>)
 800ce30:	bb13      	cbnz	r3, 800ce78 <_svfiprintf_r+0x1a0>
 800ce32:	9b03      	ldr	r3, [sp, #12]
 800ce34:	3307      	adds	r3, #7
 800ce36:	f023 0307 	bic.w	r3, r3, #7
 800ce3a:	3308      	adds	r3, #8
 800ce3c:	9303      	str	r3, [sp, #12]
 800ce3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce40:	444b      	add	r3, r9
 800ce42:	9309      	str	r3, [sp, #36]	; 0x24
 800ce44:	e76d      	b.n	800cd22 <_svfiprintf_r+0x4a>
 800ce46:	fb05 3202 	mla	r2, r5, r2, r3
 800ce4a:	2001      	movs	r0, #1
 800ce4c:	460f      	mov	r7, r1
 800ce4e:	e7a6      	b.n	800cd9e <_svfiprintf_r+0xc6>
 800ce50:	2300      	movs	r3, #0
 800ce52:	3701      	adds	r7, #1
 800ce54:	9305      	str	r3, [sp, #20]
 800ce56:	4619      	mov	r1, r3
 800ce58:	250a      	movs	r5, #10
 800ce5a:	4638      	mov	r0, r7
 800ce5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce60:	3a30      	subs	r2, #48	; 0x30
 800ce62:	2a09      	cmp	r2, #9
 800ce64:	d903      	bls.n	800ce6e <_svfiprintf_r+0x196>
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d0c8      	beq.n	800cdfc <_svfiprintf_r+0x124>
 800ce6a:	9105      	str	r1, [sp, #20]
 800ce6c:	e7c6      	b.n	800cdfc <_svfiprintf_r+0x124>
 800ce6e:	fb05 2101 	mla	r1, r5, r1, r2
 800ce72:	2301      	movs	r3, #1
 800ce74:	4607      	mov	r7, r0
 800ce76:	e7f0      	b.n	800ce5a <_svfiprintf_r+0x182>
 800ce78:	ab03      	add	r3, sp, #12
 800ce7a:	9300      	str	r3, [sp, #0]
 800ce7c:	4622      	mov	r2, r4
 800ce7e:	4b11      	ldr	r3, [pc, #68]	; (800cec4 <_svfiprintf_r+0x1ec>)
 800ce80:	a904      	add	r1, sp, #16
 800ce82:	4640      	mov	r0, r8
 800ce84:	f3af 8000 	nop.w
 800ce88:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800ce8c:	4681      	mov	r9, r0
 800ce8e:	d1d6      	bne.n	800ce3e <_svfiprintf_r+0x166>
 800ce90:	89a3      	ldrh	r3, [r4, #12]
 800ce92:	065b      	lsls	r3, r3, #25
 800ce94:	f53f af35 	bmi.w	800cd02 <_svfiprintf_r+0x2a>
 800ce98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce9a:	b01d      	add	sp, #116	; 0x74
 800ce9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cea0:	ab03      	add	r3, sp, #12
 800cea2:	9300      	str	r3, [sp, #0]
 800cea4:	4622      	mov	r2, r4
 800cea6:	4b07      	ldr	r3, [pc, #28]	; (800cec4 <_svfiprintf_r+0x1ec>)
 800cea8:	a904      	add	r1, sp, #16
 800ceaa:	4640      	mov	r0, r8
 800ceac:	f000 f9c2 	bl	800d234 <_printf_i>
 800ceb0:	e7ea      	b.n	800ce88 <_svfiprintf_r+0x1b0>
 800ceb2:	bf00      	nop
 800ceb4:	0800edcc 	.word	0x0800edcc
 800ceb8:	0800edd2 	.word	0x0800edd2
 800cebc:	0800edd6 	.word	0x0800edd6
 800cec0:	00000000 	.word	0x00000000
 800cec4:	0800cc25 	.word	0x0800cc25

0800cec8 <__sfputc_r>:
 800cec8:	6893      	ldr	r3, [r2, #8]
 800ceca:	3b01      	subs	r3, #1
 800cecc:	2b00      	cmp	r3, #0
 800cece:	b410      	push	{r4}
 800ced0:	6093      	str	r3, [r2, #8]
 800ced2:	da08      	bge.n	800cee6 <__sfputc_r+0x1e>
 800ced4:	6994      	ldr	r4, [r2, #24]
 800ced6:	42a3      	cmp	r3, r4
 800ced8:	db01      	blt.n	800cede <__sfputc_r+0x16>
 800ceda:	290a      	cmp	r1, #10
 800cedc:	d103      	bne.n	800cee6 <__sfputc_r+0x1e>
 800cede:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cee2:	f7ff bbff 	b.w	800c6e4 <__swbuf_r>
 800cee6:	6813      	ldr	r3, [r2, #0]
 800cee8:	1c58      	adds	r0, r3, #1
 800ceea:	6010      	str	r0, [r2, #0]
 800ceec:	7019      	strb	r1, [r3, #0]
 800ceee:	4608      	mov	r0, r1
 800cef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cef4:	4770      	bx	lr

0800cef6 <__sfputs_r>:
 800cef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cef8:	4606      	mov	r6, r0
 800cefa:	460f      	mov	r7, r1
 800cefc:	4614      	mov	r4, r2
 800cefe:	18d5      	adds	r5, r2, r3
 800cf00:	42ac      	cmp	r4, r5
 800cf02:	d101      	bne.n	800cf08 <__sfputs_r+0x12>
 800cf04:	2000      	movs	r0, #0
 800cf06:	e007      	b.n	800cf18 <__sfputs_r+0x22>
 800cf08:	463a      	mov	r2, r7
 800cf0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf0e:	4630      	mov	r0, r6
 800cf10:	f7ff ffda 	bl	800cec8 <__sfputc_r>
 800cf14:	1c43      	adds	r3, r0, #1
 800cf16:	d1f3      	bne.n	800cf00 <__sfputs_r+0xa>
 800cf18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf1c <_vfiprintf_r>:
 800cf1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf20:	460c      	mov	r4, r1
 800cf22:	b09d      	sub	sp, #116	; 0x74
 800cf24:	4617      	mov	r7, r2
 800cf26:	461d      	mov	r5, r3
 800cf28:	4606      	mov	r6, r0
 800cf2a:	b118      	cbz	r0, 800cf34 <_vfiprintf_r+0x18>
 800cf2c:	6983      	ldr	r3, [r0, #24]
 800cf2e:	b90b      	cbnz	r3, 800cf34 <_vfiprintf_r+0x18>
 800cf30:	f7ff fd88 	bl	800ca44 <__sinit>
 800cf34:	4b7c      	ldr	r3, [pc, #496]	; (800d128 <_vfiprintf_r+0x20c>)
 800cf36:	429c      	cmp	r4, r3
 800cf38:	d158      	bne.n	800cfec <_vfiprintf_r+0xd0>
 800cf3a:	6874      	ldr	r4, [r6, #4]
 800cf3c:	89a3      	ldrh	r3, [r4, #12]
 800cf3e:	0718      	lsls	r0, r3, #28
 800cf40:	d55e      	bpl.n	800d000 <_vfiprintf_r+0xe4>
 800cf42:	6923      	ldr	r3, [r4, #16]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d05b      	beq.n	800d000 <_vfiprintf_r+0xe4>
 800cf48:	2300      	movs	r3, #0
 800cf4a:	9309      	str	r3, [sp, #36]	; 0x24
 800cf4c:	2320      	movs	r3, #32
 800cf4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf52:	2330      	movs	r3, #48	; 0x30
 800cf54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf58:	9503      	str	r5, [sp, #12]
 800cf5a:	f04f 0b01 	mov.w	fp, #1
 800cf5e:	46b8      	mov	r8, r7
 800cf60:	4645      	mov	r5, r8
 800cf62:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cf66:	b10b      	cbz	r3, 800cf6c <_vfiprintf_r+0x50>
 800cf68:	2b25      	cmp	r3, #37	; 0x25
 800cf6a:	d154      	bne.n	800d016 <_vfiprintf_r+0xfa>
 800cf6c:	ebb8 0a07 	subs.w	sl, r8, r7
 800cf70:	d00b      	beq.n	800cf8a <_vfiprintf_r+0x6e>
 800cf72:	4653      	mov	r3, sl
 800cf74:	463a      	mov	r2, r7
 800cf76:	4621      	mov	r1, r4
 800cf78:	4630      	mov	r0, r6
 800cf7a:	f7ff ffbc 	bl	800cef6 <__sfputs_r>
 800cf7e:	3001      	adds	r0, #1
 800cf80:	f000 80c2 	beq.w	800d108 <_vfiprintf_r+0x1ec>
 800cf84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf86:	4453      	add	r3, sl
 800cf88:	9309      	str	r3, [sp, #36]	; 0x24
 800cf8a:	f898 3000 	ldrb.w	r3, [r8]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	f000 80ba 	beq.w	800d108 <_vfiprintf_r+0x1ec>
 800cf94:	2300      	movs	r3, #0
 800cf96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf9e:	9304      	str	r3, [sp, #16]
 800cfa0:	9307      	str	r3, [sp, #28]
 800cfa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfa6:	931a      	str	r3, [sp, #104]	; 0x68
 800cfa8:	46a8      	mov	r8, r5
 800cfaa:	2205      	movs	r2, #5
 800cfac:	f818 1b01 	ldrb.w	r1, [r8], #1
 800cfb0:	485e      	ldr	r0, [pc, #376]	; (800d12c <_vfiprintf_r+0x210>)
 800cfb2:	f7f3 f92d 	bl	8000210 <memchr>
 800cfb6:	9b04      	ldr	r3, [sp, #16]
 800cfb8:	bb78      	cbnz	r0, 800d01a <_vfiprintf_r+0xfe>
 800cfba:	06d9      	lsls	r1, r3, #27
 800cfbc:	bf44      	itt	mi
 800cfbe:	2220      	movmi	r2, #32
 800cfc0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cfc4:	071a      	lsls	r2, r3, #28
 800cfc6:	bf44      	itt	mi
 800cfc8:	222b      	movmi	r2, #43	; 0x2b
 800cfca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cfce:	782a      	ldrb	r2, [r5, #0]
 800cfd0:	2a2a      	cmp	r2, #42	; 0x2a
 800cfd2:	d02a      	beq.n	800d02a <_vfiprintf_r+0x10e>
 800cfd4:	9a07      	ldr	r2, [sp, #28]
 800cfd6:	46a8      	mov	r8, r5
 800cfd8:	2000      	movs	r0, #0
 800cfda:	250a      	movs	r5, #10
 800cfdc:	4641      	mov	r1, r8
 800cfde:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfe2:	3b30      	subs	r3, #48	; 0x30
 800cfe4:	2b09      	cmp	r3, #9
 800cfe6:	d969      	bls.n	800d0bc <_vfiprintf_r+0x1a0>
 800cfe8:	b360      	cbz	r0, 800d044 <_vfiprintf_r+0x128>
 800cfea:	e024      	b.n	800d036 <_vfiprintf_r+0x11a>
 800cfec:	4b50      	ldr	r3, [pc, #320]	; (800d130 <_vfiprintf_r+0x214>)
 800cfee:	429c      	cmp	r4, r3
 800cff0:	d101      	bne.n	800cff6 <_vfiprintf_r+0xda>
 800cff2:	68b4      	ldr	r4, [r6, #8]
 800cff4:	e7a2      	b.n	800cf3c <_vfiprintf_r+0x20>
 800cff6:	4b4f      	ldr	r3, [pc, #316]	; (800d134 <_vfiprintf_r+0x218>)
 800cff8:	429c      	cmp	r4, r3
 800cffa:	bf08      	it	eq
 800cffc:	68f4      	ldreq	r4, [r6, #12]
 800cffe:	e79d      	b.n	800cf3c <_vfiprintf_r+0x20>
 800d000:	4621      	mov	r1, r4
 800d002:	4630      	mov	r0, r6
 800d004:	f7ff fbc0 	bl	800c788 <__swsetup_r>
 800d008:	2800      	cmp	r0, #0
 800d00a:	d09d      	beq.n	800cf48 <_vfiprintf_r+0x2c>
 800d00c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d010:	b01d      	add	sp, #116	; 0x74
 800d012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d016:	46a8      	mov	r8, r5
 800d018:	e7a2      	b.n	800cf60 <_vfiprintf_r+0x44>
 800d01a:	4a44      	ldr	r2, [pc, #272]	; (800d12c <_vfiprintf_r+0x210>)
 800d01c:	1a80      	subs	r0, r0, r2
 800d01e:	fa0b f000 	lsl.w	r0, fp, r0
 800d022:	4318      	orrs	r0, r3
 800d024:	9004      	str	r0, [sp, #16]
 800d026:	4645      	mov	r5, r8
 800d028:	e7be      	b.n	800cfa8 <_vfiprintf_r+0x8c>
 800d02a:	9a03      	ldr	r2, [sp, #12]
 800d02c:	1d11      	adds	r1, r2, #4
 800d02e:	6812      	ldr	r2, [r2, #0]
 800d030:	9103      	str	r1, [sp, #12]
 800d032:	2a00      	cmp	r2, #0
 800d034:	db01      	blt.n	800d03a <_vfiprintf_r+0x11e>
 800d036:	9207      	str	r2, [sp, #28]
 800d038:	e004      	b.n	800d044 <_vfiprintf_r+0x128>
 800d03a:	4252      	negs	r2, r2
 800d03c:	f043 0302 	orr.w	r3, r3, #2
 800d040:	9207      	str	r2, [sp, #28]
 800d042:	9304      	str	r3, [sp, #16]
 800d044:	f898 3000 	ldrb.w	r3, [r8]
 800d048:	2b2e      	cmp	r3, #46	; 0x2e
 800d04a:	d10e      	bne.n	800d06a <_vfiprintf_r+0x14e>
 800d04c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d050:	2b2a      	cmp	r3, #42	; 0x2a
 800d052:	d138      	bne.n	800d0c6 <_vfiprintf_r+0x1aa>
 800d054:	9b03      	ldr	r3, [sp, #12]
 800d056:	1d1a      	adds	r2, r3, #4
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	9203      	str	r2, [sp, #12]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	bfb8      	it	lt
 800d060:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d064:	f108 0802 	add.w	r8, r8, #2
 800d068:	9305      	str	r3, [sp, #20]
 800d06a:	4d33      	ldr	r5, [pc, #204]	; (800d138 <_vfiprintf_r+0x21c>)
 800d06c:	f898 1000 	ldrb.w	r1, [r8]
 800d070:	2203      	movs	r2, #3
 800d072:	4628      	mov	r0, r5
 800d074:	f7f3 f8cc 	bl	8000210 <memchr>
 800d078:	b140      	cbz	r0, 800d08c <_vfiprintf_r+0x170>
 800d07a:	2340      	movs	r3, #64	; 0x40
 800d07c:	1b40      	subs	r0, r0, r5
 800d07e:	fa03 f000 	lsl.w	r0, r3, r0
 800d082:	9b04      	ldr	r3, [sp, #16]
 800d084:	4303      	orrs	r3, r0
 800d086:	f108 0801 	add.w	r8, r8, #1
 800d08a:	9304      	str	r3, [sp, #16]
 800d08c:	f898 1000 	ldrb.w	r1, [r8]
 800d090:	482a      	ldr	r0, [pc, #168]	; (800d13c <_vfiprintf_r+0x220>)
 800d092:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d096:	2206      	movs	r2, #6
 800d098:	f108 0701 	add.w	r7, r8, #1
 800d09c:	f7f3 f8b8 	bl	8000210 <memchr>
 800d0a0:	2800      	cmp	r0, #0
 800d0a2:	d037      	beq.n	800d114 <_vfiprintf_r+0x1f8>
 800d0a4:	4b26      	ldr	r3, [pc, #152]	; (800d140 <_vfiprintf_r+0x224>)
 800d0a6:	bb1b      	cbnz	r3, 800d0f0 <_vfiprintf_r+0x1d4>
 800d0a8:	9b03      	ldr	r3, [sp, #12]
 800d0aa:	3307      	adds	r3, #7
 800d0ac:	f023 0307 	bic.w	r3, r3, #7
 800d0b0:	3308      	adds	r3, #8
 800d0b2:	9303      	str	r3, [sp, #12]
 800d0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0b6:	444b      	add	r3, r9
 800d0b8:	9309      	str	r3, [sp, #36]	; 0x24
 800d0ba:	e750      	b.n	800cf5e <_vfiprintf_r+0x42>
 800d0bc:	fb05 3202 	mla	r2, r5, r2, r3
 800d0c0:	2001      	movs	r0, #1
 800d0c2:	4688      	mov	r8, r1
 800d0c4:	e78a      	b.n	800cfdc <_vfiprintf_r+0xc0>
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	f108 0801 	add.w	r8, r8, #1
 800d0cc:	9305      	str	r3, [sp, #20]
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	250a      	movs	r5, #10
 800d0d2:	4640      	mov	r0, r8
 800d0d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0d8:	3a30      	subs	r2, #48	; 0x30
 800d0da:	2a09      	cmp	r2, #9
 800d0dc:	d903      	bls.n	800d0e6 <_vfiprintf_r+0x1ca>
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d0c3      	beq.n	800d06a <_vfiprintf_r+0x14e>
 800d0e2:	9105      	str	r1, [sp, #20]
 800d0e4:	e7c1      	b.n	800d06a <_vfiprintf_r+0x14e>
 800d0e6:	fb05 2101 	mla	r1, r5, r1, r2
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	4680      	mov	r8, r0
 800d0ee:	e7f0      	b.n	800d0d2 <_vfiprintf_r+0x1b6>
 800d0f0:	ab03      	add	r3, sp, #12
 800d0f2:	9300      	str	r3, [sp, #0]
 800d0f4:	4622      	mov	r2, r4
 800d0f6:	4b13      	ldr	r3, [pc, #76]	; (800d144 <_vfiprintf_r+0x228>)
 800d0f8:	a904      	add	r1, sp, #16
 800d0fa:	4630      	mov	r0, r6
 800d0fc:	f3af 8000 	nop.w
 800d100:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d104:	4681      	mov	r9, r0
 800d106:	d1d5      	bne.n	800d0b4 <_vfiprintf_r+0x198>
 800d108:	89a3      	ldrh	r3, [r4, #12]
 800d10a:	065b      	lsls	r3, r3, #25
 800d10c:	f53f af7e 	bmi.w	800d00c <_vfiprintf_r+0xf0>
 800d110:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d112:	e77d      	b.n	800d010 <_vfiprintf_r+0xf4>
 800d114:	ab03      	add	r3, sp, #12
 800d116:	9300      	str	r3, [sp, #0]
 800d118:	4622      	mov	r2, r4
 800d11a:	4b0a      	ldr	r3, [pc, #40]	; (800d144 <_vfiprintf_r+0x228>)
 800d11c:	a904      	add	r1, sp, #16
 800d11e:	4630      	mov	r0, r6
 800d120:	f000 f888 	bl	800d234 <_printf_i>
 800d124:	e7ec      	b.n	800d100 <_vfiprintf_r+0x1e4>
 800d126:	bf00      	nop
 800d128:	0800ed8c 	.word	0x0800ed8c
 800d12c:	0800edcc 	.word	0x0800edcc
 800d130:	0800edac 	.word	0x0800edac
 800d134:	0800ed6c 	.word	0x0800ed6c
 800d138:	0800edd2 	.word	0x0800edd2
 800d13c:	0800edd6 	.word	0x0800edd6
 800d140:	00000000 	.word	0x00000000
 800d144:	0800cef7 	.word	0x0800cef7

0800d148 <_printf_common>:
 800d148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d14c:	4691      	mov	r9, r2
 800d14e:	461f      	mov	r7, r3
 800d150:	688a      	ldr	r2, [r1, #8]
 800d152:	690b      	ldr	r3, [r1, #16]
 800d154:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d158:	4293      	cmp	r3, r2
 800d15a:	bfb8      	it	lt
 800d15c:	4613      	movlt	r3, r2
 800d15e:	f8c9 3000 	str.w	r3, [r9]
 800d162:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d166:	4606      	mov	r6, r0
 800d168:	460c      	mov	r4, r1
 800d16a:	b112      	cbz	r2, 800d172 <_printf_common+0x2a>
 800d16c:	3301      	adds	r3, #1
 800d16e:	f8c9 3000 	str.w	r3, [r9]
 800d172:	6823      	ldr	r3, [r4, #0]
 800d174:	0699      	lsls	r1, r3, #26
 800d176:	bf42      	ittt	mi
 800d178:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d17c:	3302      	addmi	r3, #2
 800d17e:	f8c9 3000 	strmi.w	r3, [r9]
 800d182:	6825      	ldr	r5, [r4, #0]
 800d184:	f015 0506 	ands.w	r5, r5, #6
 800d188:	d107      	bne.n	800d19a <_printf_common+0x52>
 800d18a:	f104 0a19 	add.w	sl, r4, #25
 800d18e:	68e3      	ldr	r3, [r4, #12]
 800d190:	f8d9 2000 	ldr.w	r2, [r9]
 800d194:	1a9b      	subs	r3, r3, r2
 800d196:	42ab      	cmp	r3, r5
 800d198:	dc28      	bgt.n	800d1ec <_printf_common+0xa4>
 800d19a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d19e:	6822      	ldr	r2, [r4, #0]
 800d1a0:	3300      	adds	r3, #0
 800d1a2:	bf18      	it	ne
 800d1a4:	2301      	movne	r3, #1
 800d1a6:	0692      	lsls	r2, r2, #26
 800d1a8:	d42d      	bmi.n	800d206 <_printf_common+0xbe>
 800d1aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d1ae:	4639      	mov	r1, r7
 800d1b0:	4630      	mov	r0, r6
 800d1b2:	47c0      	blx	r8
 800d1b4:	3001      	adds	r0, #1
 800d1b6:	d020      	beq.n	800d1fa <_printf_common+0xb2>
 800d1b8:	6823      	ldr	r3, [r4, #0]
 800d1ba:	68e5      	ldr	r5, [r4, #12]
 800d1bc:	f8d9 2000 	ldr.w	r2, [r9]
 800d1c0:	f003 0306 	and.w	r3, r3, #6
 800d1c4:	2b04      	cmp	r3, #4
 800d1c6:	bf08      	it	eq
 800d1c8:	1aad      	subeq	r5, r5, r2
 800d1ca:	68a3      	ldr	r3, [r4, #8]
 800d1cc:	6922      	ldr	r2, [r4, #16]
 800d1ce:	bf0c      	ite	eq
 800d1d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1d4:	2500      	movne	r5, #0
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	bfc4      	itt	gt
 800d1da:	1a9b      	subgt	r3, r3, r2
 800d1dc:	18ed      	addgt	r5, r5, r3
 800d1de:	f04f 0900 	mov.w	r9, #0
 800d1e2:	341a      	adds	r4, #26
 800d1e4:	454d      	cmp	r5, r9
 800d1e6:	d11a      	bne.n	800d21e <_printf_common+0xd6>
 800d1e8:	2000      	movs	r0, #0
 800d1ea:	e008      	b.n	800d1fe <_printf_common+0xb6>
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	4652      	mov	r2, sl
 800d1f0:	4639      	mov	r1, r7
 800d1f2:	4630      	mov	r0, r6
 800d1f4:	47c0      	blx	r8
 800d1f6:	3001      	adds	r0, #1
 800d1f8:	d103      	bne.n	800d202 <_printf_common+0xba>
 800d1fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d202:	3501      	adds	r5, #1
 800d204:	e7c3      	b.n	800d18e <_printf_common+0x46>
 800d206:	18e1      	adds	r1, r4, r3
 800d208:	1c5a      	adds	r2, r3, #1
 800d20a:	2030      	movs	r0, #48	; 0x30
 800d20c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d210:	4422      	add	r2, r4
 800d212:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d216:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d21a:	3302      	adds	r3, #2
 800d21c:	e7c5      	b.n	800d1aa <_printf_common+0x62>
 800d21e:	2301      	movs	r3, #1
 800d220:	4622      	mov	r2, r4
 800d222:	4639      	mov	r1, r7
 800d224:	4630      	mov	r0, r6
 800d226:	47c0      	blx	r8
 800d228:	3001      	adds	r0, #1
 800d22a:	d0e6      	beq.n	800d1fa <_printf_common+0xb2>
 800d22c:	f109 0901 	add.w	r9, r9, #1
 800d230:	e7d8      	b.n	800d1e4 <_printf_common+0x9c>
	...

0800d234 <_printf_i>:
 800d234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d238:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d23c:	460c      	mov	r4, r1
 800d23e:	7e09      	ldrb	r1, [r1, #24]
 800d240:	b085      	sub	sp, #20
 800d242:	296e      	cmp	r1, #110	; 0x6e
 800d244:	4617      	mov	r7, r2
 800d246:	4606      	mov	r6, r0
 800d248:	4698      	mov	r8, r3
 800d24a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d24c:	f000 80b3 	beq.w	800d3b6 <_printf_i+0x182>
 800d250:	d822      	bhi.n	800d298 <_printf_i+0x64>
 800d252:	2963      	cmp	r1, #99	; 0x63
 800d254:	d036      	beq.n	800d2c4 <_printf_i+0x90>
 800d256:	d80a      	bhi.n	800d26e <_printf_i+0x3a>
 800d258:	2900      	cmp	r1, #0
 800d25a:	f000 80b9 	beq.w	800d3d0 <_printf_i+0x19c>
 800d25e:	2958      	cmp	r1, #88	; 0x58
 800d260:	f000 8083 	beq.w	800d36a <_printf_i+0x136>
 800d264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d268:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d26c:	e032      	b.n	800d2d4 <_printf_i+0xa0>
 800d26e:	2964      	cmp	r1, #100	; 0x64
 800d270:	d001      	beq.n	800d276 <_printf_i+0x42>
 800d272:	2969      	cmp	r1, #105	; 0x69
 800d274:	d1f6      	bne.n	800d264 <_printf_i+0x30>
 800d276:	6820      	ldr	r0, [r4, #0]
 800d278:	6813      	ldr	r3, [r2, #0]
 800d27a:	0605      	lsls	r5, r0, #24
 800d27c:	f103 0104 	add.w	r1, r3, #4
 800d280:	d52a      	bpl.n	800d2d8 <_printf_i+0xa4>
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	6011      	str	r1, [r2, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	da03      	bge.n	800d292 <_printf_i+0x5e>
 800d28a:	222d      	movs	r2, #45	; 0x2d
 800d28c:	425b      	negs	r3, r3
 800d28e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d292:	486f      	ldr	r0, [pc, #444]	; (800d450 <_printf_i+0x21c>)
 800d294:	220a      	movs	r2, #10
 800d296:	e039      	b.n	800d30c <_printf_i+0xd8>
 800d298:	2973      	cmp	r1, #115	; 0x73
 800d29a:	f000 809d 	beq.w	800d3d8 <_printf_i+0x1a4>
 800d29e:	d808      	bhi.n	800d2b2 <_printf_i+0x7e>
 800d2a0:	296f      	cmp	r1, #111	; 0x6f
 800d2a2:	d020      	beq.n	800d2e6 <_printf_i+0xb2>
 800d2a4:	2970      	cmp	r1, #112	; 0x70
 800d2a6:	d1dd      	bne.n	800d264 <_printf_i+0x30>
 800d2a8:	6823      	ldr	r3, [r4, #0]
 800d2aa:	f043 0320 	orr.w	r3, r3, #32
 800d2ae:	6023      	str	r3, [r4, #0]
 800d2b0:	e003      	b.n	800d2ba <_printf_i+0x86>
 800d2b2:	2975      	cmp	r1, #117	; 0x75
 800d2b4:	d017      	beq.n	800d2e6 <_printf_i+0xb2>
 800d2b6:	2978      	cmp	r1, #120	; 0x78
 800d2b8:	d1d4      	bne.n	800d264 <_printf_i+0x30>
 800d2ba:	2378      	movs	r3, #120	; 0x78
 800d2bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2c0:	4864      	ldr	r0, [pc, #400]	; (800d454 <_printf_i+0x220>)
 800d2c2:	e055      	b.n	800d370 <_printf_i+0x13c>
 800d2c4:	6813      	ldr	r3, [r2, #0]
 800d2c6:	1d19      	adds	r1, r3, #4
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	6011      	str	r1, [r2, #0]
 800d2cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	e08c      	b.n	800d3f2 <_printf_i+0x1be>
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	6011      	str	r1, [r2, #0]
 800d2dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d2e0:	bf18      	it	ne
 800d2e2:	b21b      	sxthne	r3, r3
 800d2e4:	e7cf      	b.n	800d286 <_printf_i+0x52>
 800d2e6:	6813      	ldr	r3, [r2, #0]
 800d2e8:	6825      	ldr	r5, [r4, #0]
 800d2ea:	1d18      	adds	r0, r3, #4
 800d2ec:	6010      	str	r0, [r2, #0]
 800d2ee:	0628      	lsls	r0, r5, #24
 800d2f0:	d501      	bpl.n	800d2f6 <_printf_i+0xc2>
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	e002      	b.n	800d2fc <_printf_i+0xc8>
 800d2f6:	0668      	lsls	r0, r5, #25
 800d2f8:	d5fb      	bpl.n	800d2f2 <_printf_i+0xbe>
 800d2fa:	881b      	ldrh	r3, [r3, #0]
 800d2fc:	4854      	ldr	r0, [pc, #336]	; (800d450 <_printf_i+0x21c>)
 800d2fe:	296f      	cmp	r1, #111	; 0x6f
 800d300:	bf14      	ite	ne
 800d302:	220a      	movne	r2, #10
 800d304:	2208      	moveq	r2, #8
 800d306:	2100      	movs	r1, #0
 800d308:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d30c:	6865      	ldr	r5, [r4, #4]
 800d30e:	60a5      	str	r5, [r4, #8]
 800d310:	2d00      	cmp	r5, #0
 800d312:	f2c0 8095 	blt.w	800d440 <_printf_i+0x20c>
 800d316:	6821      	ldr	r1, [r4, #0]
 800d318:	f021 0104 	bic.w	r1, r1, #4
 800d31c:	6021      	str	r1, [r4, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d13d      	bne.n	800d39e <_printf_i+0x16a>
 800d322:	2d00      	cmp	r5, #0
 800d324:	f040 808e 	bne.w	800d444 <_printf_i+0x210>
 800d328:	4665      	mov	r5, ip
 800d32a:	2a08      	cmp	r2, #8
 800d32c:	d10b      	bne.n	800d346 <_printf_i+0x112>
 800d32e:	6823      	ldr	r3, [r4, #0]
 800d330:	07db      	lsls	r3, r3, #31
 800d332:	d508      	bpl.n	800d346 <_printf_i+0x112>
 800d334:	6923      	ldr	r3, [r4, #16]
 800d336:	6862      	ldr	r2, [r4, #4]
 800d338:	429a      	cmp	r2, r3
 800d33a:	bfde      	ittt	le
 800d33c:	2330      	movle	r3, #48	; 0x30
 800d33e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d342:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d346:	ebac 0305 	sub.w	r3, ip, r5
 800d34a:	6123      	str	r3, [r4, #16]
 800d34c:	f8cd 8000 	str.w	r8, [sp]
 800d350:	463b      	mov	r3, r7
 800d352:	aa03      	add	r2, sp, #12
 800d354:	4621      	mov	r1, r4
 800d356:	4630      	mov	r0, r6
 800d358:	f7ff fef6 	bl	800d148 <_printf_common>
 800d35c:	3001      	adds	r0, #1
 800d35e:	d14d      	bne.n	800d3fc <_printf_i+0x1c8>
 800d360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d364:	b005      	add	sp, #20
 800d366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d36a:	4839      	ldr	r0, [pc, #228]	; (800d450 <_printf_i+0x21c>)
 800d36c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d370:	6813      	ldr	r3, [r2, #0]
 800d372:	6821      	ldr	r1, [r4, #0]
 800d374:	1d1d      	adds	r5, r3, #4
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	6015      	str	r5, [r2, #0]
 800d37a:	060a      	lsls	r2, r1, #24
 800d37c:	d50b      	bpl.n	800d396 <_printf_i+0x162>
 800d37e:	07ca      	lsls	r2, r1, #31
 800d380:	bf44      	itt	mi
 800d382:	f041 0120 	orrmi.w	r1, r1, #32
 800d386:	6021      	strmi	r1, [r4, #0]
 800d388:	b91b      	cbnz	r3, 800d392 <_printf_i+0x15e>
 800d38a:	6822      	ldr	r2, [r4, #0]
 800d38c:	f022 0220 	bic.w	r2, r2, #32
 800d390:	6022      	str	r2, [r4, #0]
 800d392:	2210      	movs	r2, #16
 800d394:	e7b7      	b.n	800d306 <_printf_i+0xd2>
 800d396:	064d      	lsls	r5, r1, #25
 800d398:	bf48      	it	mi
 800d39a:	b29b      	uxthmi	r3, r3
 800d39c:	e7ef      	b.n	800d37e <_printf_i+0x14a>
 800d39e:	4665      	mov	r5, ip
 800d3a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d3a4:	fb02 3311 	mls	r3, r2, r1, r3
 800d3a8:	5cc3      	ldrb	r3, [r0, r3]
 800d3aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d3ae:	460b      	mov	r3, r1
 800d3b0:	2900      	cmp	r1, #0
 800d3b2:	d1f5      	bne.n	800d3a0 <_printf_i+0x16c>
 800d3b4:	e7b9      	b.n	800d32a <_printf_i+0xf6>
 800d3b6:	6813      	ldr	r3, [r2, #0]
 800d3b8:	6825      	ldr	r5, [r4, #0]
 800d3ba:	6961      	ldr	r1, [r4, #20]
 800d3bc:	1d18      	adds	r0, r3, #4
 800d3be:	6010      	str	r0, [r2, #0]
 800d3c0:	0628      	lsls	r0, r5, #24
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	d501      	bpl.n	800d3ca <_printf_i+0x196>
 800d3c6:	6019      	str	r1, [r3, #0]
 800d3c8:	e002      	b.n	800d3d0 <_printf_i+0x19c>
 800d3ca:	066a      	lsls	r2, r5, #25
 800d3cc:	d5fb      	bpl.n	800d3c6 <_printf_i+0x192>
 800d3ce:	8019      	strh	r1, [r3, #0]
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	6123      	str	r3, [r4, #16]
 800d3d4:	4665      	mov	r5, ip
 800d3d6:	e7b9      	b.n	800d34c <_printf_i+0x118>
 800d3d8:	6813      	ldr	r3, [r2, #0]
 800d3da:	1d19      	adds	r1, r3, #4
 800d3dc:	6011      	str	r1, [r2, #0]
 800d3de:	681d      	ldr	r5, [r3, #0]
 800d3e0:	6862      	ldr	r2, [r4, #4]
 800d3e2:	2100      	movs	r1, #0
 800d3e4:	4628      	mov	r0, r5
 800d3e6:	f7f2 ff13 	bl	8000210 <memchr>
 800d3ea:	b108      	cbz	r0, 800d3f0 <_printf_i+0x1bc>
 800d3ec:	1b40      	subs	r0, r0, r5
 800d3ee:	6060      	str	r0, [r4, #4]
 800d3f0:	6863      	ldr	r3, [r4, #4]
 800d3f2:	6123      	str	r3, [r4, #16]
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3fa:	e7a7      	b.n	800d34c <_printf_i+0x118>
 800d3fc:	6923      	ldr	r3, [r4, #16]
 800d3fe:	462a      	mov	r2, r5
 800d400:	4639      	mov	r1, r7
 800d402:	4630      	mov	r0, r6
 800d404:	47c0      	blx	r8
 800d406:	3001      	adds	r0, #1
 800d408:	d0aa      	beq.n	800d360 <_printf_i+0x12c>
 800d40a:	6823      	ldr	r3, [r4, #0]
 800d40c:	079b      	lsls	r3, r3, #30
 800d40e:	d413      	bmi.n	800d438 <_printf_i+0x204>
 800d410:	68e0      	ldr	r0, [r4, #12]
 800d412:	9b03      	ldr	r3, [sp, #12]
 800d414:	4298      	cmp	r0, r3
 800d416:	bfb8      	it	lt
 800d418:	4618      	movlt	r0, r3
 800d41a:	e7a3      	b.n	800d364 <_printf_i+0x130>
 800d41c:	2301      	movs	r3, #1
 800d41e:	464a      	mov	r2, r9
 800d420:	4639      	mov	r1, r7
 800d422:	4630      	mov	r0, r6
 800d424:	47c0      	blx	r8
 800d426:	3001      	adds	r0, #1
 800d428:	d09a      	beq.n	800d360 <_printf_i+0x12c>
 800d42a:	3501      	adds	r5, #1
 800d42c:	68e3      	ldr	r3, [r4, #12]
 800d42e:	9a03      	ldr	r2, [sp, #12]
 800d430:	1a9b      	subs	r3, r3, r2
 800d432:	42ab      	cmp	r3, r5
 800d434:	dcf2      	bgt.n	800d41c <_printf_i+0x1e8>
 800d436:	e7eb      	b.n	800d410 <_printf_i+0x1dc>
 800d438:	2500      	movs	r5, #0
 800d43a:	f104 0919 	add.w	r9, r4, #25
 800d43e:	e7f5      	b.n	800d42c <_printf_i+0x1f8>
 800d440:	2b00      	cmp	r3, #0
 800d442:	d1ac      	bne.n	800d39e <_printf_i+0x16a>
 800d444:	7803      	ldrb	r3, [r0, #0]
 800d446:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d44a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d44e:	e76c      	b.n	800d32a <_printf_i+0xf6>
 800d450:	0800eddd 	.word	0x0800eddd
 800d454:	0800edee 	.word	0x0800edee

0800d458 <_putc_r>:
 800d458:	b570      	push	{r4, r5, r6, lr}
 800d45a:	460d      	mov	r5, r1
 800d45c:	4614      	mov	r4, r2
 800d45e:	4606      	mov	r6, r0
 800d460:	b118      	cbz	r0, 800d46a <_putc_r+0x12>
 800d462:	6983      	ldr	r3, [r0, #24]
 800d464:	b90b      	cbnz	r3, 800d46a <_putc_r+0x12>
 800d466:	f7ff faed 	bl	800ca44 <__sinit>
 800d46a:	4b13      	ldr	r3, [pc, #76]	; (800d4b8 <_putc_r+0x60>)
 800d46c:	429c      	cmp	r4, r3
 800d46e:	d112      	bne.n	800d496 <_putc_r+0x3e>
 800d470:	6874      	ldr	r4, [r6, #4]
 800d472:	68a3      	ldr	r3, [r4, #8]
 800d474:	3b01      	subs	r3, #1
 800d476:	2b00      	cmp	r3, #0
 800d478:	60a3      	str	r3, [r4, #8]
 800d47a:	da16      	bge.n	800d4aa <_putc_r+0x52>
 800d47c:	69a2      	ldr	r2, [r4, #24]
 800d47e:	4293      	cmp	r3, r2
 800d480:	db02      	blt.n	800d488 <_putc_r+0x30>
 800d482:	b2eb      	uxtb	r3, r5
 800d484:	2b0a      	cmp	r3, #10
 800d486:	d110      	bne.n	800d4aa <_putc_r+0x52>
 800d488:	4622      	mov	r2, r4
 800d48a:	4629      	mov	r1, r5
 800d48c:	4630      	mov	r0, r6
 800d48e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d492:	f7ff b927 	b.w	800c6e4 <__swbuf_r>
 800d496:	4b09      	ldr	r3, [pc, #36]	; (800d4bc <_putc_r+0x64>)
 800d498:	429c      	cmp	r4, r3
 800d49a:	d101      	bne.n	800d4a0 <_putc_r+0x48>
 800d49c:	68b4      	ldr	r4, [r6, #8]
 800d49e:	e7e8      	b.n	800d472 <_putc_r+0x1a>
 800d4a0:	4b07      	ldr	r3, [pc, #28]	; (800d4c0 <_putc_r+0x68>)
 800d4a2:	429c      	cmp	r4, r3
 800d4a4:	bf08      	it	eq
 800d4a6:	68f4      	ldreq	r4, [r6, #12]
 800d4a8:	e7e3      	b.n	800d472 <_putc_r+0x1a>
 800d4aa:	6823      	ldr	r3, [r4, #0]
 800d4ac:	1c5a      	adds	r2, r3, #1
 800d4ae:	6022      	str	r2, [r4, #0]
 800d4b0:	701d      	strb	r5, [r3, #0]
 800d4b2:	b2e8      	uxtb	r0, r5
 800d4b4:	bd70      	pop	{r4, r5, r6, pc}
 800d4b6:	bf00      	nop
 800d4b8:	0800ed8c 	.word	0x0800ed8c
 800d4bc:	0800edac 	.word	0x0800edac
 800d4c0:	0800ed6c 	.word	0x0800ed6c

0800d4c4 <__sread>:
 800d4c4:	b510      	push	{r4, lr}
 800d4c6:	460c      	mov	r4, r1
 800d4c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4cc:	f000 f8de 	bl	800d68c <_read_r>
 800d4d0:	2800      	cmp	r0, #0
 800d4d2:	bfab      	itete	ge
 800d4d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d4d6:	89a3      	ldrhlt	r3, [r4, #12]
 800d4d8:	181b      	addge	r3, r3, r0
 800d4da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d4de:	bfac      	ite	ge
 800d4e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d4e2:	81a3      	strhlt	r3, [r4, #12]
 800d4e4:	bd10      	pop	{r4, pc}

0800d4e6 <__swrite>:
 800d4e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ea:	461f      	mov	r7, r3
 800d4ec:	898b      	ldrh	r3, [r1, #12]
 800d4ee:	05db      	lsls	r3, r3, #23
 800d4f0:	4605      	mov	r5, r0
 800d4f2:	460c      	mov	r4, r1
 800d4f4:	4616      	mov	r6, r2
 800d4f6:	d505      	bpl.n	800d504 <__swrite+0x1e>
 800d4f8:	2302      	movs	r3, #2
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d500:	f000 f868 	bl	800d5d4 <_lseek_r>
 800d504:	89a3      	ldrh	r3, [r4, #12]
 800d506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d50a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d50e:	81a3      	strh	r3, [r4, #12]
 800d510:	4632      	mov	r2, r6
 800d512:	463b      	mov	r3, r7
 800d514:	4628      	mov	r0, r5
 800d516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d51a:	f000 b817 	b.w	800d54c <_write_r>

0800d51e <__sseek>:
 800d51e:	b510      	push	{r4, lr}
 800d520:	460c      	mov	r4, r1
 800d522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d526:	f000 f855 	bl	800d5d4 <_lseek_r>
 800d52a:	1c43      	adds	r3, r0, #1
 800d52c:	89a3      	ldrh	r3, [r4, #12]
 800d52e:	bf15      	itete	ne
 800d530:	6560      	strne	r0, [r4, #84]	; 0x54
 800d532:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d536:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d53a:	81a3      	strheq	r3, [r4, #12]
 800d53c:	bf18      	it	ne
 800d53e:	81a3      	strhne	r3, [r4, #12]
 800d540:	bd10      	pop	{r4, pc}

0800d542 <__sclose>:
 800d542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d546:	f000 b813 	b.w	800d570 <_close_r>
	...

0800d54c <_write_r>:
 800d54c:	b538      	push	{r3, r4, r5, lr}
 800d54e:	4c07      	ldr	r4, [pc, #28]	; (800d56c <_write_r+0x20>)
 800d550:	4605      	mov	r5, r0
 800d552:	4608      	mov	r0, r1
 800d554:	4611      	mov	r1, r2
 800d556:	2200      	movs	r2, #0
 800d558:	6022      	str	r2, [r4, #0]
 800d55a:	461a      	mov	r2, r3
 800d55c:	f7fe f8e3 	bl	800b726 <_write>
 800d560:	1c43      	adds	r3, r0, #1
 800d562:	d102      	bne.n	800d56a <_write_r+0x1e>
 800d564:	6823      	ldr	r3, [r4, #0]
 800d566:	b103      	cbz	r3, 800d56a <_write_r+0x1e>
 800d568:	602b      	str	r3, [r5, #0]
 800d56a:	bd38      	pop	{r3, r4, r5, pc}
 800d56c:	200025c0 	.word	0x200025c0

0800d570 <_close_r>:
 800d570:	b538      	push	{r3, r4, r5, lr}
 800d572:	4c06      	ldr	r4, [pc, #24]	; (800d58c <_close_r+0x1c>)
 800d574:	2300      	movs	r3, #0
 800d576:	4605      	mov	r5, r0
 800d578:	4608      	mov	r0, r1
 800d57a:	6023      	str	r3, [r4, #0]
 800d57c:	f7fe f8ef 	bl	800b75e <_close>
 800d580:	1c43      	adds	r3, r0, #1
 800d582:	d102      	bne.n	800d58a <_close_r+0x1a>
 800d584:	6823      	ldr	r3, [r4, #0]
 800d586:	b103      	cbz	r3, 800d58a <_close_r+0x1a>
 800d588:	602b      	str	r3, [r5, #0]
 800d58a:	bd38      	pop	{r3, r4, r5, pc}
 800d58c:	200025c0 	.word	0x200025c0

0800d590 <_fstat_r>:
 800d590:	b538      	push	{r3, r4, r5, lr}
 800d592:	4c07      	ldr	r4, [pc, #28]	; (800d5b0 <_fstat_r+0x20>)
 800d594:	2300      	movs	r3, #0
 800d596:	4605      	mov	r5, r0
 800d598:	4608      	mov	r0, r1
 800d59a:	4611      	mov	r1, r2
 800d59c:	6023      	str	r3, [r4, #0]
 800d59e:	f7fe f8ea 	bl	800b776 <_fstat>
 800d5a2:	1c43      	adds	r3, r0, #1
 800d5a4:	d102      	bne.n	800d5ac <_fstat_r+0x1c>
 800d5a6:	6823      	ldr	r3, [r4, #0]
 800d5a8:	b103      	cbz	r3, 800d5ac <_fstat_r+0x1c>
 800d5aa:	602b      	str	r3, [r5, #0]
 800d5ac:	bd38      	pop	{r3, r4, r5, pc}
 800d5ae:	bf00      	nop
 800d5b0:	200025c0 	.word	0x200025c0

0800d5b4 <_isatty_r>:
 800d5b4:	b538      	push	{r3, r4, r5, lr}
 800d5b6:	4c06      	ldr	r4, [pc, #24]	; (800d5d0 <_isatty_r+0x1c>)
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	4605      	mov	r5, r0
 800d5bc:	4608      	mov	r0, r1
 800d5be:	6023      	str	r3, [r4, #0]
 800d5c0:	f7fe f8e9 	bl	800b796 <_isatty>
 800d5c4:	1c43      	adds	r3, r0, #1
 800d5c6:	d102      	bne.n	800d5ce <_isatty_r+0x1a>
 800d5c8:	6823      	ldr	r3, [r4, #0]
 800d5ca:	b103      	cbz	r3, 800d5ce <_isatty_r+0x1a>
 800d5cc:	602b      	str	r3, [r5, #0]
 800d5ce:	bd38      	pop	{r3, r4, r5, pc}
 800d5d0:	200025c0 	.word	0x200025c0

0800d5d4 <_lseek_r>:
 800d5d4:	b538      	push	{r3, r4, r5, lr}
 800d5d6:	4c07      	ldr	r4, [pc, #28]	; (800d5f4 <_lseek_r+0x20>)
 800d5d8:	4605      	mov	r5, r0
 800d5da:	4608      	mov	r0, r1
 800d5dc:	4611      	mov	r1, r2
 800d5de:	2200      	movs	r2, #0
 800d5e0:	6022      	str	r2, [r4, #0]
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	f7fe f8e2 	bl	800b7ac <_lseek>
 800d5e8:	1c43      	adds	r3, r0, #1
 800d5ea:	d102      	bne.n	800d5f2 <_lseek_r+0x1e>
 800d5ec:	6823      	ldr	r3, [r4, #0]
 800d5ee:	b103      	cbz	r3, 800d5f2 <_lseek_r+0x1e>
 800d5f0:	602b      	str	r3, [r5, #0]
 800d5f2:	bd38      	pop	{r3, r4, r5, pc}
 800d5f4:	200025c0 	.word	0x200025c0

0800d5f8 <memcpy>:
 800d5f8:	b510      	push	{r4, lr}
 800d5fa:	1e43      	subs	r3, r0, #1
 800d5fc:	440a      	add	r2, r1
 800d5fe:	4291      	cmp	r1, r2
 800d600:	d100      	bne.n	800d604 <memcpy+0xc>
 800d602:	bd10      	pop	{r4, pc}
 800d604:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d608:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d60c:	e7f7      	b.n	800d5fe <memcpy+0x6>

0800d60e <memmove>:
 800d60e:	4288      	cmp	r0, r1
 800d610:	b510      	push	{r4, lr}
 800d612:	eb01 0302 	add.w	r3, r1, r2
 800d616:	d807      	bhi.n	800d628 <memmove+0x1a>
 800d618:	1e42      	subs	r2, r0, #1
 800d61a:	4299      	cmp	r1, r3
 800d61c:	d00a      	beq.n	800d634 <memmove+0x26>
 800d61e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d622:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d626:	e7f8      	b.n	800d61a <memmove+0xc>
 800d628:	4283      	cmp	r3, r0
 800d62a:	d9f5      	bls.n	800d618 <memmove+0xa>
 800d62c:	1881      	adds	r1, r0, r2
 800d62e:	1ad2      	subs	r2, r2, r3
 800d630:	42d3      	cmn	r3, r2
 800d632:	d100      	bne.n	800d636 <memmove+0x28>
 800d634:	bd10      	pop	{r4, pc}
 800d636:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d63a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d63e:	e7f7      	b.n	800d630 <memmove+0x22>

0800d640 <_realloc_r>:
 800d640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d642:	4607      	mov	r7, r0
 800d644:	4614      	mov	r4, r2
 800d646:	460e      	mov	r6, r1
 800d648:	b921      	cbnz	r1, 800d654 <_realloc_r+0x14>
 800d64a:	4611      	mov	r1, r2
 800d64c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d650:	f7fe bf92 	b.w	800c578 <_malloc_r>
 800d654:	b922      	cbnz	r2, 800d660 <_realloc_r+0x20>
 800d656:	f7fe ff41 	bl	800c4dc <_free_r>
 800d65a:	4625      	mov	r5, r4
 800d65c:	4628      	mov	r0, r5
 800d65e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d660:	f000 f826 	bl	800d6b0 <_malloc_usable_size_r>
 800d664:	42a0      	cmp	r0, r4
 800d666:	d20f      	bcs.n	800d688 <_realloc_r+0x48>
 800d668:	4621      	mov	r1, r4
 800d66a:	4638      	mov	r0, r7
 800d66c:	f7fe ff84 	bl	800c578 <_malloc_r>
 800d670:	4605      	mov	r5, r0
 800d672:	2800      	cmp	r0, #0
 800d674:	d0f2      	beq.n	800d65c <_realloc_r+0x1c>
 800d676:	4631      	mov	r1, r6
 800d678:	4622      	mov	r2, r4
 800d67a:	f7ff ffbd 	bl	800d5f8 <memcpy>
 800d67e:	4631      	mov	r1, r6
 800d680:	4638      	mov	r0, r7
 800d682:	f7fe ff2b 	bl	800c4dc <_free_r>
 800d686:	e7e9      	b.n	800d65c <_realloc_r+0x1c>
 800d688:	4635      	mov	r5, r6
 800d68a:	e7e7      	b.n	800d65c <_realloc_r+0x1c>

0800d68c <_read_r>:
 800d68c:	b538      	push	{r3, r4, r5, lr}
 800d68e:	4c07      	ldr	r4, [pc, #28]	; (800d6ac <_read_r+0x20>)
 800d690:	4605      	mov	r5, r0
 800d692:	4608      	mov	r0, r1
 800d694:	4611      	mov	r1, r2
 800d696:	2200      	movs	r2, #0
 800d698:	6022      	str	r2, [r4, #0]
 800d69a:	461a      	mov	r2, r3
 800d69c:	f7fe f826 	bl	800b6ec <_read>
 800d6a0:	1c43      	adds	r3, r0, #1
 800d6a2:	d102      	bne.n	800d6aa <_read_r+0x1e>
 800d6a4:	6823      	ldr	r3, [r4, #0]
 800d6a6:	b103      	cbz	r3, 800d6aa <_read_r+0x1e>
 800d6a8:	602b      	str	r3, [r5, #0]
 800d6aa:	bd38      	pop	{r3, r4, r5, pc}
 800d6ac:	200025c0 	.word	0x200025c0

0800d6b0 <_malloc_usable_size_r>:
 800d6b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6b4:	1f18      	subs	r0, r3, #4
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	bfbc      	itt	lt
 800d6ba:	580b      	ldrlt	r3, [r1, r0]
 800d6bc:	18c0      	addlt	r0, r0, r3
 800d6be:	4770      	bx	lr

0800d6c0 <_init>:
 800d6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6c2:	bf00      	nop
 800d6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6c6:	bc08      	pop	{r3}
 800d6c8:	469e      	mov	lr, r3
 800d6ca:	4770      	bx	lr

0800d6cc <_fini>:
 800d6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ce:	bf00      	nop
 800d6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6d2:	bc08      	pop	{r3}
 800d6d4:	469e      	mov	lr, r3
 800d6d6:	4770      	bx	lr
