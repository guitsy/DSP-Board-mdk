
Midi_Audio-Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001728  0800d878  0800d878  0001d878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efa0  0800efa0  000201b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800efa0  0800efa0  0001efa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800efa8  0800efa8  000201b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800efa8  0800efa8  0001efa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800efac  0800efac  0001efac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b8  20000000  0800efb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002418  200001b8  0800f168  000201b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200025d0  0800f168  000225d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002912b  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005774  00000000  00000000  00049313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cb0  00000000  00000000  0004ea88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a60  00000000  00000000  00050738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002738a  00000000  00000000  00052198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024dce  00000000  00000000  00079522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1553  00000000  00000000  0009e2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016f843  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008168  00000000  00000000  0016f898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001b8 	.word	0x200001b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d860 	.word	0x0800d860

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001bc 	.word	0x200001bc
 800020c:	0800d860 	.word	0x0800d860

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ac:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <HAL_Init+0x40>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <HAL_Init+0x40>)
 80005b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005b8:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <HAL_Init+0x40>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <HAL_Init+0x40>)
 80005be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <HAL_Init+0x40>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <HAL_Init+0x40>)
 80005ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d0:	2003      	movs	r0, #3
 80005d2:	f000 fce9 	bl	8000fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f000 f808 	bl	80005ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005dc:	f00a fcd2 	bl	800af84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e0:	2300      	movs	r3, #0
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023c00 	.word	0x40023c00

080005ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_InitTick+0x54>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_InitTick+0x58>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	4619      	mov	r1, r3
 80005fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000602:	fbb3 f3f1 	udiv	r3, r3, r1
 8000606:	fbb2 f3f3 	udiv	r3, r2, r3
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fd01 	bl	8001012 <HAL_SYSTICK_Config>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000616:	2301      	movs	r3, #1
 8000618:	e00e      	b.n	8000638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2b0f      	cmp	r3, #15
 800061e:	d80a      	bhi.n	8000636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000620:	2200      	movs	r2, #0
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000628:	f000 fcc9 	bl	8000fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800062c:	4a06      	ldr	r2, [pc, #24]	; (8000648 <HAL_InitTick+0x5c>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000632:	2300      	movs	r3, #0
 8000634:	e000      	b.n	8000638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000636:	2301      	movs	r3, #1
}
 8000638:	4618      	mov	r0, r3
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200000d4 	.word	0x200000d4
 8000644:	20000004 	.word	0x20000004
 8000648:	20000000 	.word	0x20000000

0800064c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_IncTick+0x20>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <HAL_IncTick+0x24>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4413      	add	r3, r2
 800065c:	4a04      	ldr	r2, [pc, #16]	; (8000670 <HAL_IncTick+0x24>)
 800065e:	6013      	str	r3, [r2, #0]
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	20000004 	.word	0x20000004
 8000670:	20000784 	.word	0x20000784

08000674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return uwTick;
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <HAL_GetTick+0x14>)
 800067a:	681b      	ldr	r3, [r3, #0]
}
 800067c:	4618      	mov	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	20000784 	.word	0x20000784

0800068c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000694:	f7ff ffee 	bl	8000674 <HAL_GetTick>
 8000698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006a4:	d005      	beq.n	80006b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006a6:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <HAL_Delay+0x44>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	461a      	mov	r2, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4413      	add	r3, r2
 80006b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006b2:	bf00      	nop
 80006b4:	f7ff ffde 	bl	8000674 <HAL_GetTick>
 80006b8:	4602      	mov	r2, r0
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d8f7      	bhi.n	80006b4 <HAL_Delay+0x28>
  {
  }
}
 80006c4:	bf00      	nop
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000004 	.word	0x20000004

080006d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006dc:	2300      	movs	r3, #0
 80006de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d101      	bne.n	80006ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
 80006e8:	e033      	b.n	8000752 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d109      	bne.n	8000706 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f00a fc6e 	bl	800afd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2200      	movs	r2, #0
 80006fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2200      	movs	r2, #0
 8000702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	f003 0310 	and.w	r3, r3, #16
 800070e:	2b00      	cmp	r3, #0
 8000710:	d118      	bne.n	8000744 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000716:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800071a:	f023 0302 	bic.w	r3, r3, #2
 800071e:	f043 0202 	orr.w	r2, r3, #2
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f000 fa72 	bl	8000c10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2200      	movs	r2, #0
 8000730:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	f023 0303 	bic.w	r3, r3, #3
 800073a:	f043 0201 	orr.w	r2, r3, #1
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	641a      	str	r2, [r3, #64]	; 0x40
 8000742:	e001      	b.n	8000748 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000744:	2301      	movs	r3, #1
 8000746:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2200      	movs	r2, #0
 800074c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000750:	7bfb      	ldrb	r3, [r7, #15]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800076e:	2b01      	cmp	r3, #1
 8000770:	d101      	bne.n	8000776 <HAL_ADC_Start+0x1a>
 8000772:	2302      	movs	r3, #2
 8000774:	e08a      	b.n	800088c <HAL_ADC_Start+0x130>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2201      	movs	r2, #1
 800077a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	2b01      	cmp	r3, #1
 800078a:	d018      	beq.n	80007be <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	689a      	ldr	r2, [r3, #8]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f042 0201 	orr.w	r2, r2, #1
 800079a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800079c:	4b3e      	ldr	r3, [pc, #248]	; (8000898 <HAL_ADC_Start+0x13c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a3e      	ldr	r2, [pc, #248]	; (800089c <HAL_ADC_Start+0x140>)
 80007a2:	fba2 2303 	umull	r2, r3, r2, r3
 80007a6:	0c9a      	lsrs	r2, r3, #18
 80007a8:	4613      	mov	r3, r2
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	4413      	add	r3, r2
 80007ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80007b0:	e002      	b.n	80007b8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	3b01      	subs	r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d1f9      	bne.n	80007b2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	f003 0301 	and.w	r3, r3, #1
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d15e      	bne.n	800088a <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007d4:	f023 0301 	bic.w	r3, r3, #1
 80007d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d007      	beq.n	80007fe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800080a:	d106      	bne.n	800081a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000810:	f023 0206 	bic.w	r2, r3, #6
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	645a      	str	r2, [r3, #68]	; 0x44
 8000818:	e002      	b.n	8000820 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2200      	movs	r2, #0
 800081e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2200      	movs	r2, #0
 8000824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000828:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <HAL_ADC_Start+0x144>)
 800082a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000834:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	f003 031f 	and.w	r3, r3, #31
 800083e:	2b00      	cmp	r3, #0
 8000840:	d10f      	bne.n	8000862 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800084c:	2b00      	cmp	r3, #0
 800084e:	d11c      	bne.n	800088a <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	689a      	ldr	r2, [r3, #8]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	e013      	b.n	800088a <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <HAL_ADC_Start+0x148>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d10e      	bne.n	800088a <HAL_ADC_Start+0x12e>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000876:	2b00      	cmp	r3, #0
 8000878:	d107      	bne.n	800088a <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	689a      	ldr	r2, [r3, #8]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000888:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800088a:	2300      	movs	r3, #0
}
 800088c:	4618      	mov	r0, r3
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	200000d4 	.word	0x200000d4
 800089c:	431bde83 	.word	0x431bde83
 80008a0:	40012300 	.word	0x40012300
 80008a4:	40012000 	.word	0x40012000

080008a8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008c4:	d113      	bne.n	80008ee <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008d4:	d10b      	bne.n	80008ee <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	f043 0220 	orr.w	r2, r3, #32
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2200      	movs	r2, #0
 80008e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e05c      	b.n	80009a8 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80008ee:	f7ff fec1 	bl	8000674 <HAL_GetTick>
 80008f2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80008f4:	e01a      	b.n	800092c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008fc:	d016      	beq.n	800092c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d007      	beq.n	8000914 <HAL_ADC_PollForConversion+0x6c>
 8000904:	f7ff feb6 	bl	8000674 <HAL_GetTick>
 8000908:	4602      	mov	r2, r0
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	683a      	ldr	r2, [r7, #0]
 8000910:	429a      	cmp	r2, r3
 8000912:	d20b      	bcs.n	800092c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	f043 0204 	orr.w	r2, r3, #4
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2200      	movs	r2, #0
 8000924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8000928:	2303      	movs	r3, #3
 800092a:	e03d      	b.n	80009a8 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	2b02      	cmp	r3, #2
 8000938:	d1dd      	bne.n	80008f6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f06f 0212 	mvn.w	r2, #18
 8000942:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800095a:	2b00      	cmp	r3, #0
 800095c:	d123      	bne.n	80009a6 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000962:	2b00      	cmp	r3, #0
 8000964:	d11f      	bne.n	80009a6 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000970:	2b00      	cmp	r3, #0
 8000972:	d006      	beq.n	8000982 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800097e:	2b00      	cmp	r3, #0
 8000980:	d111      	bne.n	80009a6 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000996:	2b00      	cmp	r3, #0
 8000998:	d105      	bne.n	80009a6 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	f043 0201 	orr.w	r2, r3, #1
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
	...

080009cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d101      	bne.n	80009e8 <HAL_ADC_ConfigChannel+0x1c>
 80009e4:	2302      	movs	r3, #2
 80009e6:	e105      	b.n	8000bf4 <HAL_ADC_ConfigChannel+0x228>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2201      	movs	r2, #1
 80009ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b09      	cmp	r3, #9
 80009f6:	d925      	bls.n	8000a44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	68d9      	ldr	r1, [r3, #12]
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	461a      	mov	r2, r3
 8000a06:	4613      	mov	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	4413      	add	r3, r2
 8000a0c:	3b1e      	subs	r3, #30
 8000a0e:	2207      	movs	r2, #7
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	43da      	mvns	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	400a      	ands	r2, r1
 8000a1c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	68d9      	ldr	r1, [r3, #12]
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	689a      	ldr	r2, [r3, #8]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	4603      	mov	r3, r0
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4403      	add	r3, r0
 8000a36:	3b1e      	subs	r3, #30
 8000a38:	409a      	lsls	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	e022      	b.n	8000a8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	6919      	ldr	r1, [r3, #16]
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	461a      	mov	r2, r3
 8000a52:	4613      	mov	r3, r2
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	4413      	add	r3, r2
 8000a58:	2207      	movs	r2, #7
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43da      	mvns	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	400a      	ands	r2, r1
 8000a66:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	6919      	ldr	r1, [r3, #16]
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	689a      	ldr	r2, [r3, #8]
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	4618      	mov	r0, r3
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	4403      	add	r3, r0
 8000a80:	409a      	lsls	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	430a      	orrs	r2, r1
 8000a88:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	2b06      	cmp	r3, #6
 8000a90:	d824      	bhi.n	8000adc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685a      	ldr	r2, [r3, #4]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	4413      	add	r3, r2
 8000aa2:	3b05      	subs	r3, #5
 8000aa4:	221f      	movs	r2, #31
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	400a      	ands	r2, r1
 8000ab2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685a      	ldr	r2, [r3, #4]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	4413      	add	r3, r2
 8000acc:	3b05      	subs	r3, #5
 8000ace:	fa00 f203 	lsl.w	r2, r0, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	635a      	str	r2, [r3, #52]	; 0x34
 8000ada:	e04c      	b.n	8000b76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	2b0c      	cmp	r3, #12
 8000ae2:	d824      	bhi.n	8000b2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685a      	ldr	r2, [r3, #4]
 8000aee:	4613      	mov	r3, r2
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	4413      	add	r3, r2
 8000af4:	3b23      	subs	r3, #35	; 0x23
 8000af6:	221f      	movs	r2, #31
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	43da      	mvns	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	400a      	ands	r2, r1
 8000b04:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4413      	add	r3, r2
 8000b1e:	3b23      	subs	r3, #35	; 0x23
 8000b20:	fa00 f203 	lsl.w	r2, r0, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	631a      	str	r2, [r3, #48]	; 0x30
 8000b2c:	e023      	b.n	8000b76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	3b41      	subs	r3, #65	; 0x41
 8000b40:	221f      	movs	r2, #31
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43da      	mvns	r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	400a      	ands	r2, r1
 8000b4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685a      	ldr	r2, [r3, #4]
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	3b41      	subs	r3, #65	; 0x41
 8000b6a:	fa00 f203 	lsl.w	r2, r0, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	430a      	orrs	r2, r1
 8000b74:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b76:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <HAL_ADC_ConfigChannel+0x234>)
 8000b78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a21      	ldr	r2, [pc, #132]	; (8000c04 <HAL_ADC_ConfigChannel+0x238>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d109      	bne.n	8000b98 <HAL_ADC_ConfigChannel+0x1cc>
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b12      	cmp	r3, #18
 8000b8a:	d105      	bne.n	8000b98 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a19      	ldr	r2, [pc, #100]	; (8000c04 <HAL_ADC_ConfigChannel+0x238>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d123      	bne.n	8000bea <HAL_ADC_ConfigChannel+0x21e>
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b10      	cmp	r3, #16
 8000ba8:	d003      	beq.n	8000bb2 <HAL_ADC_ConfigChannel+0x1e6>
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b11      	cmp	r3, #17
 8000bb0:	d11b      	bne.n	8000bea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b10      	cmp	r3, #16
 8000bc4:	d111      	bne.n	8000bea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <HAL_ADC_ConfigChannel+0x23c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a10      	ldr	r2, [pc, #64]	; (8000c0c <HAL_ADC_ConfigChannel+0x240>)
 8000bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd0:	0c9a      	lsrs	r2, r3, #18
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4413      	add	r3, r2
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000bdc:	e002      	b.n	8000be4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	3b01      	subs	r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d1f9      	bne.n	8000bde <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	40012300 	.word	0x40012300
 8000c04:	40012000 	.word	0x40012000
 8000c08:	200000d4 	.word	0x200000d4
 8000c0c:	431bde83 	.word	0x431bde83

08000c10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c18:	4b79      	ldr	r3, [pc, #484]	; (8000e00 <ADC_Init+0x1f0>)
 8000c1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	431a      	orrs	r2, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6859      	ldr	r1, [r3, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	021a      	lsls	r2, r3, #8
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	430a      	orrs	r2, r1
 8000c58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000c68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6859      	ldr	r1, [r3, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	689a      	ldr	r2, [r3, #8]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	6899      	ldr	r1, [r3, #8]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	68da      	ldr	r2, [r3, #12]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca2:	4a58      	ldr	r2, [pc, #352]	; (8000e04 <ADC_Init+0x1f4>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d022      	beq.n	8000cee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000cb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6899      	ldr	r1, [r3, #8]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000cd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	6899      	ldr	r1, [r3, #8]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	e00f      	b.n	8000d0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000cfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	689a      	ldr	r2, [r3, #8]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f022 0202 	bic.w	r2, r2, #2
 8000d1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	6899      	ldr	r1, [r3, #8]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	7e1b      	ldrb	r3, [r3, #24]
 8000d28:	005a      	lsls	r2, r3, #1
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d01b      	beq.n	8000d74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000d5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	6859      	ldr	r1, [r3, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d66:	3b01      	subs	r3, #1
 8000d68:	035a      	lsls	r2, r3, #13
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	e007      	b.n	8000d84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	685a      	ldr	r2, [r3, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000d92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	051a      	lsls	r2, r3, #20
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	430a      	orrs	r2, r1
 8000da8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	689a      	ldr	r2, [r3, #8]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000db8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	6899      	ldr	r1, [r3, #8]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000dc6:	025a      	lsls	r2, r3, #9
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6899      	ldr	r1, [r3, #8]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	029a      	lsls	r2, r3, #10
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	430a      	orrs	r2, r1
 8000df2:	609a      	str	r2, [r3, #8]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	40012300 	.word	0x40012300
 8000e04:	0f000001 	.word	0x0f000001

08000e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e24:	4013      	ands	r3, r2
 8000e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3a:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	60d3      	str	r3, [r2, #12]
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <__NVIC_GetPriorityGrouping+0x18>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	f003 0307 	and.w	r3, r3, #7
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	db0b      	blt.n	8000e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	f003 021f 	and.w	r2, r3, #31
 8000e84:	4907      	ldr	r1, [pc, #28]	; (8000ea4 <__NVIC_EnableIRQ+0x38>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	095b      	lsrs	r3, r3, #5
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000e100 	.word	0xe000e100

08000ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	db0a      	blt.n	8000ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	490c      	ldr	r1, [pc, #48]	; (8000ef4 <__NVIC_SetPriority+0x4c>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	0112      	lsls	r2, r2, #4
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	440b      	add	r3, r1
 8000ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed0:	e00a      	b.n	8000ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4908      	ldr	r1, [pc, #32]	; (8000ef8 <__NVIC_SetPriority+0x50>)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	3b04      	subs	r3, #4
 8000ee0:	0112      	lsls	r2, r2, #4
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	761a      	strb	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	; 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	bf28      	it	cs
 8000f1a:	2304      	movcs	r3, #4
 8000f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3304      	adds	r3, #4
 8000f22:	2b06      	cmp	r3, #6
 8000f24:	d902      	bls.n	8000f2c <NVIC_EncodePriority+0x30>
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3b03      	subs	r3, #3
 8000f2a:	e000      	b.n	8000f2e <NVIC_EncodePriority+0x32>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	43d9      	mvns	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	4313      	orrs	r3, r2
         );
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3724      	adds	r7, #36	; 0x24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
	...

08000f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f74:	d301      	bcc.n	8000f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f76:	2301      	movs	r3, #1
 8000f78:	e00f      	b.n	8000f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <SysTick_Config+0x40>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f82:	210f      	movs	r1, #15
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f88:	f7ff ff8e 	bl	8000ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <SysTick_Config+0x40>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f92:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <SysTick_Config+0x40>)
 8000f94:	2207      	movs	r2, #7
 8000f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	e000e010 	.word	0xe000e010

08000fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff29 	bl	8000e08 <__NVIC_SetPriorityGrouping>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b086      	sub	sp, #24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd0:	f7ff ff3e 	bl	8000e50 <__NVIC_GetPriorityGrouping>
 8000fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68b9      	ldr	r1, [r7, #8]
 8000fda:	6978      	ldr	r0, [r7, #20]
 8000fdc:	f7ff ff8e 	bl	8000efc <NVIC_EncodePriority>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff5d 	bl	8000ea8 <__NVIC_SetPriority>
}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff31 	bl	8000e6c <__NVIC_EnableIRQ>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ffa2 	bl	8000f64 <SysTick_Config>
 8001020:	4603      	mov	r3, r0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001038:	f7ff fb1c 	bl	8000674 <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e099      	b.n	800117c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2202      	movs	r2, #2
 8001054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0201 	bic.w	r2, r2, #1
 8001066:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001068:	e00f      	b.n	800108a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800106a:	f7ff fb03 	bl	8000674 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b05      	cmp	r3, #5
 8001076:	d908      	bls.n	800108a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2220      	movs	r2, #32
 800107c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2203      	movs	r2, #3
 8001082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e078      	b.n	800117c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1e8      	bne.n	800106a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	4b38      	ldr	r3, [pc, #224]	; (8001184 <HAL_DMA_Init+0x158>)
 80010a4:	4013      	ands	r3, r2
 80010a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	4313      	orrs	r3, r2
 80010da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	2b04      	cmp	r3, #4
 80010e2:	d107      	bne.n	80010f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	4313      	orrs	r3, r2
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f023 0307 	bic.w	r3, r3, #7
 800110a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	4313      	orrs	r3, r2
 8001114:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	2b04      	cmp	r3, #4
 800111c:	d117      	bne.n	800114e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4313      	orrs	r3, r2
 8001126:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00e      	beq.n	800114e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 fa6f 	bl	8001614 <DMA_CheckFifoParam>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d008      	beq.n	800114e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2240      	movs	r2, #64	; 0x40
 8001140:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800114a:	2301      	movs	r3, #1
 800114c:	e016      	b.n	800117c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 fa26 	bl	80015a8 <DMA_CalcBaseAndBitshift>
 800115c:	4603      	mov	r3, r0
 800115e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001164:	223f      	movs	r2, #63	; 0x3f
 8001166:	409a      	lsls	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	f010803f 	.word	0xf010803f

08001188 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d101      	bne.n	80011ae <HAL_DMA_Start_IT+0x26>
 80011aa:	2302      	movs	r3, #2
 80011ac:	e040      	b.n	8001230 <HAL_DMA_Start_IT+0xa8>
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2201      	movs	r2, #1
 80011b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d12f      	bne.n	8001222 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2202      	movs	r2, #2
 80011c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2200      	movs	r2, #0
 80011ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f000 f9b8 	bl	800154c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e0:	223f      	movs	r2, #63	; 0x3f
 80011e2:	409a      	lsls	r2, r3
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f042 0216 	orr.w	r2, r2, #22
 80011f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d007      	beq.n	8001210 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 0208 	orr.w	r2, r2, #8
 800120e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0201 	orr.w	r2, r2, #1
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	e005      	b.n	800122e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800122a:	2302      	movs	r3, #2
 800122c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800122e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001244:	4b92      	ldr	r3, [pc, #584]	; (8001490 <HAL_DMA_IRQHandler+0x258>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a92      	ldr	r2, [pc, #584]	; (8001494 <HAL_DMA_IRQHandler+0x25c>)
 800124a:	fba2 2303 	umull	r2, r3, r2, r3
 800124e:	0a9b      	lsrs	r3, r3, #10
 8001250:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001256:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001262:	2208      	movs	r2, #8
 8001264:	409a      	lsls	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4013      	ands	r3, r2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d01a      	beq.n	80012a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	2b00      	cmp	r3, #0
 800127a:	d013      	beq.n	80012a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f022 0204 	bic.w	r2, r2, #4
 800128a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001290:	2208      	movs	r2, #8
 8001292:	409a      	lsls	r2, r3
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800129c:	f043 0201 	orr.w	r2, r3, #1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a8:	2201      	movs	r2, #1
 80012aa:	409a      	lsls	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d012      	beq.n	80012da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00b      	beq.n	80012da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c6:	2201      	movs	r2, #1
 80012c8:	409a      	lsls	r2, r3
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d2:	f043 0202 	orr.w	r2, r3, #2
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012de:	2204      	movs	r2, #4
 80012e0:	409a      	lsls	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4013      	ands	r3, r2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d012      	beq.n	8001310 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00b      	beq.n	8001310 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fc:	2204      	movs	r2, #4
 80012fe:	409a      	lsls	r2, r3
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001308:	f043 0204 	orr.w	r2, r3, #4
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001314:	2210      	movs	r2, #16
 8001316:	409a      	lsls	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4013      	ands	r3, r2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d043      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	2b00      	cmp	r3, #0
 800132c:	d03c      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001332:	2210      	movs	r2, #16
 8001334:	409a      	lsls	r2, r3
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d018      	beq.n	800137a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d108      	bne.n	8001368 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	2b00      	cmp	r3, #0
 800135c:	d024      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	4798      	blx	r3
 8001366:	e01f      	b.n	80013a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136c:	2b00      	cmp	r3, #0
 800136e:	d01b      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	4798      	blx	r3
 8001378:	e016      	b.n	80013a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001384:	2b00      	cmp	r3, #0
 8001386:	d107      	bne.n	8001398 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0208 	bic.w	r2, r2, #8
 8001396:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ac:	2220      	movs	r2, #32
 80013ae:	409a      	lsls	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 808e 	beq.w	80014d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0310 	and.w	r3, r3, #16
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 8086 	beq.w	80014d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ce:	2220      	movs	r2, #32
 80013d0:	409a      	lsls	r2, r3
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b05      	cmp	r3, #5
 80013e0:	d136      	bne.n	8001450 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0216 	bic.w	r2, r2, #22
 80013f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	695a      	ldr	r2, [r3, #20]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001400:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	2b00      	cmp	r3, #0
 8001408:	d103      	bne.n	8001412 <HAL_DMA_IRQHandler+0x1da>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140e:	2b00      	cmp	r3, #0
 8001410:	d007      	beq.n	8001422 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0208 	bic.w	r2, r2, #8
 8001420:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001426:	223f      	movs	r2, #63	; 0x3f
 8001428:	409a      	lsls	r2, r3
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001442:	2b00      	cmp	r3, #0
 8001444:	d07d      	beq.n	8001542 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	4798      	blx	r3
        }
        return;
 800144e:	e078      	b.n	8001542 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d01c      	beq.n	8001498 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d108      	bne.n	800147e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001470:	2b00      	cmp	r3, #0
 8001472:	d030      	beq.n	80014d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	4798      	blx	r3
 800147c:	e02b      	b.n	80014d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001482:	2b00      	cmp	r3, #0
 8001484:	d027      	beq.n	80014d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	4798      	blx	r3
 800148e:	e022      	b.n	80014d6 <HAL_DMA_IRQHandler+0x29e>
 8001490:	200000d4 	.word	0x200000d4
 8001494:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10f      	bne.n	80014c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 0210 	bic.w	r2, r2, #16
 80014b4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d032      	beq.n	8001544 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d022      	beq.n	8001530 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2205      	movs	r2, #5
 80014ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0201 	bic.w	r2, r2, #1
 8001500:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	3301      	adds	r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	429a      	cmp	r2, r3
 800150c:	d307      	bcc.n	800151e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1f2      	bne.n	8001502 <HAL_DMA_IRQHandler+0x2ca>
 800151c:	e000      	b.n	8001520 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800151e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	4798      	blx	r3
 8001540:	e000      	b.n	8001544 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001542:	bf00      	nop
    }
  }
}
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop

0800154c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001568:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b40      	cmp	r3, #64	; 0x40
 8001578:	d108      	bne.n	800158c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800158a:	e007      	b.n	800159c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	60da      	str	r2, [r3, #12]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	3b10      	subs	r3, #16
 80015b8:	4a14      	ldr	r2, [pc, #80]	; (800160c <DMA_CalcBaseAndBitshift+0x64>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015c2:	4a13      	ldr	r2, [pc, #76]	; (8001610 <DMA_CalcBaseAndBitshift+0x68>)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4413      	add	r3, r2
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	d909      	bls.n	80015ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015de:	f023 0303 	bic.w	r3, r3, #3
 80015e2:	1d1a      	adds	r2, r3, #4
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	659a      	str	r2, [r3, #88]	; 0x58
 80015e8:	e007      	b.n	80015fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015f2:	f023 0303 	bic.w	r3, r3, #3
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	aaaaaaab 	.word	0xaaaaaaab
 8001610:	0800d9a0 	.word	0x0800d9a0

08001614 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001624:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d11f      	bne.n	800166e <DMA_CheckFifoParam+0x5a>
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2b03      	cmp	r3, #3
 8001632:	d856      	bhi.n	80016e2 <DMA_CheckFifoParam+0xce>
 8001634:	a201      	add	r2, pc, #4	; (adr r2, 800163c <DMA_CheckFifoParam+0x28>)
 8001636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163a:	bf00      	nop
 800163c:	0800164d 	.word	0x0800164d
 8001640:	0800165f 	.word	0x0800165f
 8001644:	0800164d 	.word	0x0800164d
 8001648:	080016e3 	.word	0x080016e3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d046      	beq.n	80016e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800165c:	e043      	b.n	80016e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001666:	d140      	bne.n	80016ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800166c:	e03d      	b.n	80016ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001676:	d121      	bne.n	80016bc <DMA_CheckFifoParam+0xa8>
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b03      	cmp	r3, #3
 800167c:	d837      	bhi.n	80016ee <DMA_CheckFifoParam+0xda>
 800167e:	a201      	add	r2, pc, #4	; (adr r2, 8001684 <DMA_CheckFifoParam+0x70>)
 8001680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001684:	08001695 	.word	0x08001695
 8001688:	0800169b 	.word	0x0800169b
 800168c:	08001695 	.word	0x08001695
 8001690:	080016ad 	.word	0x080016ad
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
      break;
 8001698:	e030      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d025      	beq.n	80016f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016aa:	e022      	b.n	80016f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016b4:	d11f      	bne.n	80016f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016ba:	e01c      	b.n	80016f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d903      	bls.n	80016ca <DMA_CheckFifoParam+0xb6>
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	d003      	beq.n	80016d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016c8:	e018      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	73fb      	strb	r3, [r7, #15]
      break;
 80016ce:	e015      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00e      	beq.n	80016fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
      break;
 80016e0:	e00b      	b.n	80016fa <DMA_CheckFifoParam+0xe6>
      break;
 80016e2:	bf00      	nop
 80016e4:	e00a      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
      break;
 80016e6:	bf00      	nop
 80016e8:	e008      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
      break;
 80016ea:	bf00      	nop
 80016ec:	e006      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
      break;
 80016ee:	bf00      	nop
 80016f0:	e004      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
      break;
 80016f2:	bf00      	nop
 80016f4:	e002      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
      break;   
 80016f6:	bf00      	nop
 80016f8:	e000      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
      break;
 80016fa:	bf00      	nop
    }
  } 
  
  return status; 
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
 8001726:	e153      	b.n	80019d0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001728:	2201      	movs	r2, #1
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	429a      	cmp	r2, r3
 8001742:	f040 8142 	bne.w	80019ca <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d00b      	beq.n	8001766 <HAL_GPIO_Init+0x5a>
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d007      	beq.n	8001766 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800175a:	2b11      	cmp	r3, #17
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b12      	cmp	r3, #18
 8001764:	d130      	bne.n	80017c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	2203      	movs	r2, #3
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800179c:	2201      	movs	r2, #1
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	f003 0201 	and.w	r2, r3, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	2203      	movs	r2, #3
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0xfc>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b12      	cmp	r3, #18
 8001806:	d123      	bne.n	8001850 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	08da      	lsrs	r2, r3, #3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3208      	adds	r2, #8
 8001810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	220f      	movs	r2, #15
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	08da      	lsrs	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3208      	adds	r2, #8
 800184a:	69b9      	ldr	r1, [r7, #24]
 800184c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0203 	and.w	r2, r3, #3
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 809c 	beq.w	80019ca <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b54      	ldr	r3, [pc, #336]	; (80019e8 <HAL_GPIO_Init+0x2dc>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	4a53      	ldr	r2, [pc, #332]	; (80019e8 <HAL_GPIO_Init+0x2dc>)
 800189c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a0:	6453      	str	r3, [r2, #68]	; 0x44
 80018a2:	4b51      	ldr	r3, [pc, #324]	; (80019e8 <HAL_GPIO_Init+0x2dc>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ae:	4a4f      	ldr	r2, [pc, #316]	; (80019ec <HAL_GPIO_Init+0x2e0>)
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	089b      	lsrs	r3, r3, #2
 80018b4:	3302      	adds	r3, #2
 80018b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	220f      	movs	r2, #15
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a46      	ldr	r2, [pc, #280]	; (80019f0 <HAL_GPIO_Init+0x2e4>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d013      	beq.n	8001902 <HAL_GPIO_Init+0x1f6>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a45      	ldr	r2, [pc, #276]	; (80019f4 <HAL_GPIO_Init+0x2e8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00d      	beq.n	80018fe <HAL_GPIO_Init+0x1f2>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a44      	ldr	r2, [pc, #272]	; (80019f8 <HAL_GPIO_Init+0x2ec>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d007      	beq.n	80018fa <HAL_GPIO_Init+0x1ee>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a43      	ldr	r2, [pc, #268]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d101      	bne.n	80018f6 <HAL_GPIO_Init+0x1ea>
 80018f2:	2303      	movs	r3, #3
 80018f4:	e006      	b.n	8001904 <HAL_GPIO_Init+0x1f8>
 80018f6:	2307      	movs	r3, #7
 80018f8:	e004      	b.n	8001904 <HAL_GPIO_Init+0x1f8>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e002      	b.n	8001904 <HAL_GPIO_Init+0x1f8>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <HAL_GPIO_Init+0x1f8>
 8001902:	2300      	movs	r3, #0
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	f002 0203 	and.w	r2, r2, #3
 800190a:	0092      	lsls	r2, r2, #2
 800190c:	4093      	lsls	r3, r2
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001914:	4935      	ldr	r1, [pc, #212]	; (80019ec <HAL_GPIO_Init+0x2e0>)
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	3302      	adds	r3, #2
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001922:	4b37      	ldr	r3, [pc, #220]	; (8001a00 <HAL_GPIO_Init+0x2f4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001946:	4a2e      	ldr	r2, [pc, #184]	; (8001a00 <HAL_GPIO_Init+0x2f4>)
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800194c:	4b2c      	ldr	r3, [pc, #176]	; (8001a00 <HAL_GPIO_Init+0x2f4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001970:	4a23      	ldr	r2, [pc, #140]	; (8001a00 <HAL_GPIO_Init+0x2f4>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001976:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <HAL_GPIO_Init+0x2f4>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	43db      	mvns	r3, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800199a:	4a19      	ldr	r2, [pc, #100]	; (8001a00 <HAL_GPIO_Init+0x2f4>)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_GPIO_Init+0x2f4>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019c4:	4a0e      	ldr	r2, [pc, #56]	; (8001a00 <HAL_GPIO_Init+0x2f4>)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3301      	adds	r3, #1
 80019ce:	61fb      	str	r3, [r7, #28]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	2b0f      	cmp	r3, #15
 80019d4:	f67f aea8 	bls.w	8001728 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019d8:	bf00      	nop
 80019da:	bf00      	nop
 80019dc:	3724      	adds	r7, #36	; 0x24
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40013800 	.word	0x40013800
 80019f0:	40020000 	.word	0x40020000
 80019f4:	40020400 	.word	0x40020400
 80019f8:	40020800 	.word	0x40020800
 80019fc:	40020c00 	.word	0x40020c00
 8001a00:	40013c00 	.word	0x40013c00

08001a04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691a      	ldr	r2, [r3, #16]
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	e001      	b.n	8001a26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	807b      	strh	r3, [r7, #2]
 8001a40:	4613      	mov	r3, r2
 8001a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a44:	787b      	ldrb	r3, [r7, #1]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a4a:	887a      	ldrh	r2, [r7, #2]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a50:	e003      	b.n	8001a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a52:	887b      	ldrh	r3, [r7, #2]
 8001a54:	041a      	lsls	r2, r3, #16
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	619a      	str	r2, [r3, #24]
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a74:	695a      	ldr	r2, [r3, #20]
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d006      	beq.n	8001a8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a7e:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f00a fb4a 	bl	800c120 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40013c00 	.word	0x40013c00

08001a98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e12b      	b.n	8001d02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d106      	bne.n	8001ac4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f009 facc 	bl	800b05c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2224      	movs	r2, #36	; 0x24
 8001ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001afa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001afc:	f002 ffca 	bl	8004a94 <HAL_RCC_GetPCLK1Freq>
 8001b00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4a81      	ldr	r2, [pc, #516]	; (8001d0c <HAL_I2C_Init+0x274>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d807      	bhi.n	8001b1c <HAL_I2C_Init+0x84>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4a80      	ldr	r2, [pc, #512]	; (8001d10 <HAL_I2C_Init+0x278>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	bf94      	ite	ls
 8001b14:	2301      	movls	r3, #1
 8001b16:	2300      	movhi	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	e006      	b.n	8001b2a <HAL_I2C_Init+0x92>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4a7d      	ldr	r2, [pc, #500]	; (8001d14 <HAL_I2C_Init+0x27c>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	bf94      	ite	ls
 8001b24:	2301      	movls	r3, #1
 8001b26:	2300      	movhi	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e0e7      	b.n	8001d02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4a78      	ldr	r2, [pc, #480]	; (8001d18 <HAL_I2C_Init+0x280>)
 8001b36:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3a:	0c9b      	lsrs	r3, r3, #18
 8001b3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	4a6a      	ldr	r2, [pc, #424]	; (8001d0c <HAL_I2C_Init+0x274>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d802      	bhi.n	8001b6c <HAL_I2C_Init+0xd4>
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	e009      	b.n	8001b80 <HAL_I2C_Init+0xe8>
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	4a69      	ldr	r2, [pc, #420]	; (8001d1c <HAL_I2C_Init+0x284>)
 8001b78:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7c:	099b      	lsrs	r3, r3, #6
 8001b7e:	3301      	adds	r3, #1
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	430b      	orrs	r3, r1
 8001b86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	495c      	ldr	r1, [pc, #368]	; (8001d0c <HAL_I2C_Init+0x274>)
 8001b9c:	428b      	cmp	r3, r1
 8001b9e:	d819      	bhi.n	8001bd4 <HAL_I2C_Init+0x13c>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1e59      	subs	r1, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bae:	1c59      	adds	r1, r3, #1
 8001bb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001bb4:	400b      	ands	r3, r1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00a      	beq.n	8001bd0 <HAL_I2C_Init+0x138>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1e59      	subs	r1, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bc8:	3301      	adds	r3, #1
 8001bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bce:	e051      	b.n	8001c74 <HAL_I2C_Init+0x1dc>
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	e04f      	b.n	8001c74 <HAL_I2C_Init+0x1dc>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d111      	bne.n	8001c00 <HAL_I2C_Init+0x168>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	1e58      	subs	r0, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6859      	ldr	r1, [r3, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	440b      	add	r3, r1
 8001bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	bf0c      	ite	eq
 8001bf8:	2301      	moveq	r3, #1
 8001bfa:	2300      	movne	r3, #0
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	e012      	b.n	8001c26 <HAL_I2C_Init+0x18e>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	1e58      	subs	r0, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6859      	ldr	r1, [r3, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	0099      	lsls	r1, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c16:	3301      	adds	r3, #1
 8001c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bf0c      	ite	eq
 8001c20:	2301      	moveq	r3, #1
 8001c22:	2300      	movne	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_I2C_Init+0x196>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e022      	b.n	8001c74 <HAL_I2C_Init+0x1dc>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10e      	bne.n	8001c54 <HAL_I2C_Init+0x1bc>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1e58      	subs	r0, r3, #1
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6859      	ldr	r1, [r3, #4]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	440b      	add	r3, r1
 8001c44:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c48:	3301      	adds	r3, #1
 8001c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c52:	e00f      	b.n	8001c74 <HAL_I2C_Init+0x1dc>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	1e58      	subs	r0, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6859      	ldr	r1, [r3, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	0099      	lsls	r1, r3, #2
 8001c64:	440b      	add	r3, r1
 8001c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	6809      	ldr	r1, [r1, #0]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69da      	ldr	r2, [r3, #28]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ca2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6911      	ldr	r1, [r2, #16]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68d2      	ldr	r2, [r2, #12]
 8001cae:	4311      	orrs	r1, r2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	430b      	orrs	r3, r1
 8001cb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695a      	ldr	r2, [r3, #20]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0201 	orr.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2220      	movs	r2, #32
 8001cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	000186a0 	.word	0x000186a0
 8001d10:	001e847f 	.word	0x001e847f
 8001d14:	003d08ff 	.word	0x003d08ff
 8001d18:	431bde83 	.word	0x431bde83
 8001d1c:	10624dd3 	.word	0x10624dd3

08001d20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	4608      	mov	r0, r1
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4603      	mov	r3, r0
 8001d30:	817b      	strh	r3, [r7, #10]
 8001d32:	460b      	mov	r3, r1
 8001d34:	813b      	strh	r3, [r7, #8]
 8001d36:	4613      	mov	r3, r2
 8001d38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d3a:	f7fe fc9b 	bl	8000674 <HAL_GetTick>
 8001d3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b20      	cmp	r3, #32
 8001d4a:	f040 80d9 	bne.w	8001f00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2319      	movs	r3, #25
 8001d54:	2201      	movs	r2, #1
 8001d56:	496d      	ldr	r1, [pc, #436]	; (8001f0c <HAL_I2C_Mem_Write+0x1ec>)
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f000 f971 	bl	8002040 <I2C_WaitOnFlagUntilTimeout>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d64:	2302      	movs	r3, #2
 8001d66:	e0cc      	b.n	8001f02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d101      	bne.n	8001d76 <HAL_I2C_Mem_Write+0x56>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e0c5      	b.n	8001f02 <HAL_I2C_Mem_Write+0x1e2>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d007      	beq.n	8001d9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001daa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2221      	movs	r2, #33	; 0x21
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2240      	movs	r2, #64	; 0x40
 8001db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6a3a      	ldr	r2, [r7, #32]
 8001dc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4a4d      	ldr	r2, [pc, #308]	; (8001f10 <HAL_I2C_Mem_Write+0x1f0>)
 8001ddc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dde:	88f8      	ldrh	r0, [r7, #6]
 8001de0:	893a      	ldrh	r2, [r7, #8]
 8001de2:	8979      	ldrh	r1, [r7, #10]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	4603      	mov	r3, r0
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 f890 	bl	8001f14 <I2C_RequestMemoryWrite>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d052      	beq.n	8001ea0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e081      	b.n	8001f02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 f9f2 	bl	80021ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00d      	beq.n	8001e2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d107      	bne.n	8001e26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e06b      	b.n	8001f02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	781a      	ldrb	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d11b      	bne.n	8001ea0 <HAL_I2C_Mem_Write+0x180>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d017      	beq.n	8001ea0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	781a      	ldrb	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1aa      	bne.n	8001dfe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 f9de 	bl	800226e <I2C_WaitOnBTFFlagUntilTimeout>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00d      	beq.n	8001ed4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d107      	bne.n	8001ed0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ece:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e016      	b.n	8001f02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	e000      	b.n	8001f02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f00:	2302      	movs	r3, #2
  }
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	00100002 	.word	0x00100002
 8001f10:	ffff0000 	.word	0xffff0000

08001f14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	4608      	mov	r0, r1
 8001f1e:	4611      	mov	r1, r2
 8001f20:	461a      	mov	r2, r3
 8001f22:	4603      	mov	r3, r0
 8001f24:	817b      	strh	r3, [r7, #10]
 8001f26:	460b      	mov	r3, r1
 8001f28:	813b      	strh	r3, [r7, #8]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	6a3b      	ldr	r3, [r7, #32]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 f878 	bl	8002040 <I2C_WaitOnFlagUntilTimeout>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00d      	beq.n	8001f72 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f64:	d103      	bne.n	8001f6e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e05f      	b.n	8002032 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f72:	897b      	ldrh	r3, [r7, #10]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	461a      	mov	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	6a3a      	ldr	r2, [r7, #32]
 8001f86:	492d      	ldr	r1, [pc, #180]	; (800203c <I2C_RequestMemoryWrite+0x128>)
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 f8b0 	bl	80020ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e04c      	b.n	8002032 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb0:	6a39      	ldr	r1, [r7, #32]
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 f91a 	bl	80021ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00d      	beq.n	8001fda <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d107      	bne.n	8001fd6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e02b      	b.n	8002032 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d105      	bne.n	8001fec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fe0:	893b      	ldrh	r3, [r7, #8]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	611a      	str	r2, [r3, #16]
 8001fea:	e021      	b.n	8002030 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001fec:	893b      	ldrh	r3, [r7, #8]
 8001fee:	0a1b      	lsrs	r3, r3, #8
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffc:	6a39      	ldr	r1, [r7, #32]
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 f8f4 	bl	80021ec <I2C_WaitOnTXEFlagUntilTimeout>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00d      	beq.n	8002026 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	2b04      	cmp	r3, #4
 8002010:	d107      	bne.n	8002022 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002020:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e005      	b.n	8002032 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002026:	893b      	ldrh	r3, [r7, #8]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	00010002 	.word	0x00010002

08002040 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002050:	e025      	b.n	800209e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002058:	d021      	beq.n	800209e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800205a:	f7fe fb0b 	bl	8000674 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d302      	bcc.n	8002070 <I2C_WaitOnFlagUntilTimeout+0x30>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d116      	bne.n	800209e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2220      	movs	r2, #32
 800207a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f043 0220 	orr.w	r2, r3, #32
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e023      	b.n	80020e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	0c1b      	lsrs	r3, r3, #16
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d10d      	bne.n	80020c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	43da      	mvns	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	4013      	ands	r3, r2
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf0c      	ite	eq
 80020ba:	2301      	moveq	r3, #1
 80020bc:	2300      	movne	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	e00c      	b.n	80020de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	43da      	mvns	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4013      	ands	r3, r2
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	bf0c      	ite	eq
 80020d6:	2301      	moveq	r3, #1
 80020d8:	2300      	movne	r3, #0
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d0b6      	beq.n	8002052 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b084      	sub	sp, #16
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
 80020fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020fc:	e051      	b.n	80021a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800210c:	d123      	bne.n	8002156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800211c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002126:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2220      	movs	r2, #32
 8002132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f043 0204 	orr.w	r2, r3, #4
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e046      	b.n	80021e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800215c:	d021      	beq.n	80021a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800215e:	f7fe fa89 	bl	8000674 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	429a      	cmp	r2, r3
 800216c:	d302      	bcc.n	8002174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d116      	bne.n	80021a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2220      	movs	r2, #32
 800217e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f043 0220 	orr.w	r2, r3, #32
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e020      	b.n	80021e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	0c1b      	lsrs	r3, r3, #16
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d10c      	bne.n	80021c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	43da      	mvns	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	4013      	ands	r3, r2
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	bf14      	ite	ne
 80021be:	2301      	movne	r3, #1
 80021c0:	2300      	moveq	r3, #0
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	e00b      	b.n	80021de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	43da      	mvns	r2, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	4013      	ands	r3, r2
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	bf14      	ite	ne
 80021d8:	2301      	movne	r3, #1
 80021da:	2300      	moveq	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d18d      	bne.n	80020fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021f8:	e02d      	b.n	8002256 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 f878 	bl	80022f0 <I2C_IsAcknowledgeFailed>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e02d      	b.n	8002266 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002210:	d021      	beq.n	8002256 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002212:	f7fe fa2f 	bl	8000674 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	429a      	cmp	r2, r3
 8002220:	d302      	bcc.n	8002228 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d116      	bne.n	8002256 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2220      	movs	r2, #32
 8002232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f043 0220 	orr.w	r2, r3, #32
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e007      	b.n	8002266 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002260:	2b80      	cmp	r3, #128	; 0x80
 8002262:	d1ca      	bne.n	80021fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800227a:	e02d      	b.n	80022d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 f837 	bl	80022f0 <I2C_IsAcknowledgeFailed>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e02d      	b.n	80022e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002292:	d021      	beq.n	80022d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002294:	f7fe f9ee 	bl	8000674 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d302      	bcc.n	80022aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d116      	bne.n	80022d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	f043 0220 	orr.w	r2, r3, #32
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e007      	b.n	80022e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d1ca      	bne.n	800227c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002306:	d11b      	bne.n	8002340 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002310:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	f043 0204 	orr.w	r2, r3, #4
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e154      	b.n	800260c <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d109      	bne.n	8002382 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a98      	ldr	r2, [pc, #608]	; (80025dc <HAL_I2S_Init+0x28c>)
 800237a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f008 ff0d 	bl	800b19c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2202      	movs	r2, #2
 8002386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002398:	f023 030f 	bic.w	r3, r3, #15
 800239c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2202      	movs	r2, #2
 80023a4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d06f      	beq.n	800248e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d102      	bne.n	80023bc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80023b6:	2310      	movs	r3, #16
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	e001      	b.n	80023c0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80023bc:	2320      	movs	r3, #32
 80023be:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2b20      	cmp	r3, #32
 80023c6:	d802      	bhi.n	80023ce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a83      	ldr	r2, [pc, #524]	; (80025e0 <HAL_I2S_Init+0x290>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d004      	beq.n	80023e2 <HAL_I2S_Init+0x92>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a81      	ldr	r2, [pc, #516]	; (80025e4 <HAL_I2S_Init+0x294>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d104      	bne.n	80023ec <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80023e2:	2001      	movs	r0, #1
 80023e4:	f002 fd4c 	bl	8004e80 <HAL_RCCEx_GetPeriphCLKFreq>
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	e003      	b.n	80023f4 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80023ec:	2002      	movs	r0, #2
 80023ee:	f002 fd47 	bl	8004e80 <HAL_RCCEx_GetPeriphCLKFreq>
 80023f2:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023fc:	d125      	bne.n	800244a <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d010      	beq.n	8002428 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	461a      	mov	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002422:	3305      	adds	r3, #5
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	e01f      	b.n	8002468 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	461a      	mov	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	fbb2 f3f3 	udiv	r3, r2, r3
 8002444:	3305      	adds	r3, #5
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	e00e      	b.n	8002468 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	461a      	mov	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	fbb2 f3f3 	udiv	r3, r2, r3
 8002464:	3305      	adds	r3, #5
 8002466:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4a5f      	ldr	r2, [pc, #380]	; (80025e8 <HAL_I2S_Init+0x298>)
 800246c:	fba2 2303 	umull	r2, r3, r2, r3
 8002470:	08db      	lsrs	r3, r3, #3
 8002472:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	085b      	lsrs	r3, r3, #1
 8002484:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	61bb      	str	r3, [r7, #24]
 800248c:	e003      	b.n	8002496 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800248e:	2302      	movs	r3, #2
 8002490:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d902      	bls.n	80024a2 <HAL_I2S_Init+0x152>
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	2bff      	cmp	r3, #255	; 0xff
 80024a0:	d907      	bls.n	80024b2 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	f043 0210 	orr.w	r2, r3, #16
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e0ac      	b.n	800260c <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	ea42 0103 	orr.w	r1, r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	69fa      	ldr	r2, [r7, #28]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80024d0:	f023 030f 	bic.w	r3, r3, #15
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6851      	ldr	r1, [r2, #4]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6892      	ldr	r2, [r2, #8]
 80024dc:	4311      	orrs	r1, r2
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	68d2      	ldr	r2, [r2, #12]
 80024e2:	4311      	orrs	r1, r2
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6992      	ldr	r2, [r2, #24]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024f4:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2b30      	cmp	r3, #48	; 0x30
 80024fc:	d003      	beq.n	8002506 <HAL_I2S_Init+0x1b6>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2bb0      	cmp	r3, #176	; 0xb0
 8002504:	d107      	bne.n	8002516 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	69da      	ldr	r2, [r3, #28]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002514:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d16e      	bne.n	80025fc <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a32      	ldr	r2, [pc, #200]	; (80025ec <HAL_I2S_Init+0x29c>)
 8002522:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a2d      	ldr	r2, [pc, #180]	; (80025e0 <HAL_I2S_Init+0x290>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d101      	bne.n	8002532 <HAL_I2S_Init+0x1e2>
 800252e:	4b30      	ldr	r3, [pc, #192]	; (80025f0 <HAL_I2S_Init+0x2a0>)
 8002530:	e001      	b.n	8002536 <HAL_I2S_Init+0x1e6>
 8002532:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	4928      	ldr	r1, [pc, #160]	; (80025e0 <HAL_I2S_Init+0x290>)
 800253e:	428a      	cmp	r2, r1
 8002540:	d101      	bne.n	8002546 <HAL_I2S_Init+0x1f6>
 8002542:	4a2b      	ldr	r2, [pc, #172]	; (80025f0 <HAL_I2S_Init+0x2a0>)
 8002544:	e001      	b.n	800254a <HAL_I2S_Init+0x1fa>
 8002546:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800254a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800254e:	f023 030f 	bic.w	r3, r3, #15
 8002552:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a21      	ldr	r2, [pc, #132]	; (80025e0 <HAL_I2S_Init+0x290>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d101      	bne.n	8002562 <HAL_I2S_Init+0x212>
 800255e:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <HAL_I2S_Init+0x2a0>)
 8002560:	e001      	b.n	8002566 <HAL_I2S_Init+0x216>
 8002562:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002566:	2202      	movs	r2, #2
 8002568:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1c      	ldr	r2, [pc, #112]	; (80025e0 <HAL_I2S_Init+0x290>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d101      	bne.n	8002578 <HAL_I2S_Init+0x228>
 8002574:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <HAL_I2S_Init+0x2a0>)
 8002576:	e001      	b.n	800257c <HAL_I2S_Init+0x22c>
 8002578:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002588:	d003      	beq.n	8002592 <HAL_I2S_Init+0x242>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d103      	bne.n	800259a <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	e001      	b.n	800259e <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	b299      	uxth	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80025b4:	4303      	orrs	r3, r0
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	430b      	orrs	r3, r1
 80025ba:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80025bc:	4313      	orrs	r3, r2
 80025be:	b29a      	uxth	r2, r3
 80025c0:	897b      	ldrh	r3, [r7, #10]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025ca:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a03      	ldr	r2, [pc, #12]	; (80025e0 <HAL_I2S_Init+0x290>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d10e      	bne.n	80025f4 <HAL_I2S_Init+0x2a4>
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_I2S_Init+0x2a0>)
 80025d8:	e00e      	b.n	80025f8 <HAL_I2S_Init+0x2a8>
 80025da:	bf00      	nop
 80025dc:	0800270b 	.word	0x0800270b
 80025e0:	40003800 	.word	0x40003800
 80025e4:	40003c00 	.word	0x40003c00
 80025e8:	cccccccd 	.word	0xcccccccd
 80025ec:	08002b35 	.word	0x08002b35
 80025f0:	40003400 	.word	0x40003400
 80025f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025f8:	897a      	ldrh	r2, [r7, #10]
 80025fa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3720      	adds	r7, #32
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	881a      	ldrh	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	1c9a      	adds	r2, r3, #2
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10e      	bne.n	80026a4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002694:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff ffb8 	bl	8002614 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026be:	b292      	uxth	r2, r2
 80026c0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	1c9a      	adds	r2, r3, #2
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10e      	bne.n	8002702 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026f2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff93 	bl	8002628 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b04      	cmp	r3, #4
 8002724:	d13a      	bne.n	800279c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b01      	cmp	r3, #1
 800272e:	d109      	bne.n	8002744 <I2S_IRQHandler+0x3a>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273a:	2b40      	cmp	r3, #64	; 0x40
 800273c:	d102      	bne.n	8002744 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff ffb4 	bl	80026ac <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274a:	2b40      	cmp	r3, #64	; 0x40
 800274c:	d126      	bne.n	800279c <I2S_IRQHandler+0x92>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	2b20      	cmp	r3, #32
 800275a:	d11f      	bne.n	800279c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800276a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800276c:	2300      	movs	r3, #0
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	f043 0202 	orr.w	r2, r3, #2
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff ff50 	bl	800263c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d136      	bne.n	8002816 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d109      	bne.n	80027c6 <I2S_IRQHandler+0xbc>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027bc:	2b80      	cmp	r3, #128	; 0x80
 80027be:	d102      	bne.n	80027c6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ff45 	bl	8002650 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d122      	bne.n	8002816 <I2S_IRQHandler+0x10c>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 0320 	and.w	r3, r3, #32
 80027da:	2b20      	cmp	r3, #32
 80027dc:	d11b      	bne.n	8002816 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027ec:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002808:	f043 0204 	orr.w	r2, r3, #4
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff ff13 	bl	800263c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002816:	bf00      	nop
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 800282e:	2300      	movs	r3, #0
 8002830:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b01      	cmp	r3, #1
 8002844:	d002      	beq.n	800284c <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8002846:	2302      	movs	r3, #2
 8002848:	77fb      	strb	r3, [r7, #31]
    goto error;
 800284a:	e160      	b.n	8002b0e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d005      	beq.n	800285e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002858:	887b      	ldrh	r3, [r7, #2]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e15a      	b.n	8002b18 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d101      	bne.n	8002872 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 800286e:	2302      	movs	r3, #2
 8002870:	e152      	b.n	8002b18 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2b03      	cmp	r3, #3
 8002896:	d002      	beq.n	800289e <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2b05      	cmp	r3, #5
 800289c:	d114      	bne.n	80028c8 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 800289e:	887b      	ldrh	r3, [r7, #2]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80028a8:	887b      	ldrh	r3, [r7, #2]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 80028b2:	887b      	ldrh	r3, [r7, #2]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80028bc:	887b      	ldrh	r3, [r7, #2]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	865a      	strh	r2, [r3, #50]	; 0x32
 80028c6:	e00b      	b.n	80028e0 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	887a      	ldrh	r2, [r7, #2]
 80028cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	887a      	ldrh	r2, [r7, #2]
 80028d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	887a      	ldrh	r2, [r7, #2]
 80028d8:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	887a      	ldrh	r2, [r7, #2]
 80028de:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2205      	movs	r2, #5
 80028ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f2:	4a8b      	ldr	r2, [pc, #556]	; (8002b20 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fa:	4a8a      	ldr	r2, [pc, #552]	; (8002b24 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80028fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002902:	4a89      	ldr	r2, [pc, #548]	; (8002b28 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002904:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290a:	4a85      	ldr	r2, [pc, #532]	; (8002b20 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 800290c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002912:	4a84      	ldr	r2, [pc, #528]	; (8002b24 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002914:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291a:	4a83      	ldr	r2, [pc, #524]	; (8002b28 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 800291c:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002928:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002930:	d002      	beq.n	8002938 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d16b      	bne.n	8002a10 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002938:	1d3b      	adds	r3, r7, #4
 800293a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a79      	ldr	r2, [pc, #484]	; (8002b2c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d101      	bne.n	800294e <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 800294a:	4b79      	ldr	r3, [pc, #484]	; (8002b30 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800294c:	e001      	b.n	8002952 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 800294e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002952:	330c      	adds	r3, #12
 8002954:	4619      	mov	r1, r3
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800295e:	b29b      	uxth	r3, r3
 8002960:	f7fe fc12 	bl	8001188 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a70      	ldr	r2, [pc, #448]	; (8002b2c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d101      	bne.n	8002972 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 800296e:	4b70      	ldr	r3, [pc, #448]	; (8002b30 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002970:	e001      	b.n	8002976 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8002972:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	496b      	ldr	r1, [pc, #428]	; (8002b2c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800297e:	428b      	cmp	r3, r1
 8002980:	d101      	bne.n	8002986 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8002982:	4b6b      	ldr	r3, [pc, #428]	; (8002b30 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002984:	e001      	b.n	800298a <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8002986:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002990:	f107 0308 	add.w	r3, r7, #8
 8002994:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	6819      	ldr	r1, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	330c      	adds	r3, #12
 80029a4:	461a      	mov	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	f7fe fbec 	bl	8001188 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0202 	orr.w	r2, r2, #2
 80029be:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ce:	f000 809e 	beq.w	8002b0e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a55      	ldr	r2, [pc, #340]	; (8002b2c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d101      	bne.n	80029e0 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 80029dc:	4b54      	ldr	r3, [pc, #336]	; (8002b30 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80029de:	e001      	b.n	80029e4 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 80029e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029e4:	69da      	ldr	r2, [r3, #28]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4950      	ldr	r1, [pc, #320]	; (8002b2c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80029ec:	428b      	cmp	r3, r1
 80029ee:	d101      	bne.n	80029f4 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 80029f0:	4b4f      	ldr	r3, [pc, #316]	; (8002b30 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80029f2:	e001      	b.n	80029f8 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 80029f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029fc:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	69da      	ldr	r2, [r3, #28]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a0c:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002a0e:	e07e      	b.n	8002b0e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a1e:	d10a      	bne.n	8002a36 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a20:	2300      	movs	r3, #0
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002a36:	f107 0308 	add.w	r3, r7, #8
 8002a3a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	6819      	ldr	r1, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a38      	ldr	r2, [pc, #224]	; (8002b2c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d101      	bne.n	8002a52 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8002a4e:	4b38      	ldr	r3, [pc, #224]	; (8002b30 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002a50:	e001      	b.n	8002a56 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8002a52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a56:	330c      	adds	r3, #12
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	f7fe fb92 	bl	8001188 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a30      	ldr	r2, [pc, #192]	; (8002b2c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d101      	bne.n	8002a72 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8002a6e:	4b30      	ldr	r3, [pc, #192]	; (8002b30 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002a70:	e001      	b.n	8002a76 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8002a72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	492b      	ldr	r1, [pc, #172]	; (8002b2c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002a7e:	428b      	cmp	r3, r1
 8002a80:	d101      	bne.n	8002a86 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8002a82:	4b2b      	ldr	r3, [pc, #172]	; (8002b30 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002a84:	e001      	b.n	8002a8a <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8002a86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a8a:	f042 0202 	orr.w	r2, r2, #2
 8002a8e:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002a90:	1d3b      	adds	r3, r7, #4
 8002a92:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	330c      	adds	r3, #12
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	f7fe fb6d 	bl	8001188 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0201 	orr.w	r2, r2, #1
 8002abc:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002acc:	d01e      	beq.n	8002b0c <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a16      	ldr	r2, [pc, #88]	; (8002b2c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d101      	bne.n	8002adc <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8002ad8:	4b15      	ldr	r3, [pc, #84]	; (8002b30 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002ada:	e001      	b.n	8002ae0 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8002adc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ae0:	69da      	ldr	r2, [r3, #28]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4911      	ldr	r1, [pc, #68]	; (8002b2c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002ae8:	428b      	cmp	r3, r1
 8002aea:	d101      	bne.n	8002af0 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8002aec:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002aee:	e001      	b.n	8002af4 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8002af0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002af4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002af8:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	69da      	ldr	r2, [r3, #28]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b08:	61da      	str	r2, [r3, #28]
 8002b0a:	e000      	b.n	8002b0e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8002b0c:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8002b16:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3720      	adds	r7, #32
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	08002e05 	.word	0x08002e05
 8002b24:	08002e21 	.word	0x08002e21
 8002b28:	08002f51 	.word	0x08002f51
 8002b2c:	40003800 	.word	0x40003800
 8002b30:	40003400 	.word	0x40003400

08002b34 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4aa2      	ldr	r2, [pc, #648]	; (8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d101      	bne.n	8002b52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002b4e:	4ba2      	ldr	r3, [pc, #648]	; (8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b50:	e001      	b.n	8002b56 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002b52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a9b      	ldr	r2, [pc, #620]	; (8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d101      	bne.n	8002b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002b6c:	4b9a      	ldr	r3, [pc, #616]	; (8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b6e:	e001      	b.n	8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002b70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b80:	d004      	beq.n	8002b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f040 8099 	bne.w	8002cbe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d107      	bne.n	8002ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 fa15 	bl	8002fd0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d107      	bne.n	8002bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 fab8 	bl	8003130 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc6:	2b40      	cmp	r3, #64	; 0x40
 8002bc8:	d13a      	bne.n	8002c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d035      	beq.n	8002c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a7e      	ldr	r2, [pc, #504]	; (8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d101      	bne.n	8002be2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002bde:	4b7e      	ldr	r3, [pc, #504]	; (8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002be0:	e001      	b.n	8002be6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002be2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4979      	ldr	r1, [pc, #484]	; (8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bee:	428b      	cmp	r3, r1
 8002bf0:	d101      	bne.n	8002bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002bf2:	4b79      	ldr	r3, [pc, #484]	; (8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bf4:	e001      	b.n	8002bfa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002bf6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bfa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002bfe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c0e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c10:	2300      	movs	r3, #0
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	f043 0202 	orr.w	r2, r3, #2
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff fcfe 	bl	800263c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	f040 80be 	bne.w	8002dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 80b8 	beq.w	8002dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c66:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a59      	ldr	r2, [pc, #356]	; (8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d101      	bne.n	8002c76 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002c72:	4b59      	ldr	r3, [pc, #356]	; (8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c74:	e001      	b.n	8002c7a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002c76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4954      	ldr	r1, [pc, #336]	; (8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c82:	428b      	cmp	r3, r1
 8002c84:	d101      	bne.n	8002c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002c86:	4b54      	ldr	r3, [pc, #336]	; (8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c88:	e001      	b.n	8002c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002c8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c92:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002c94:	2300      	movs	r3, #0
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	f043 0204 	orr.w	r2, r3, #4
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff fcc0 	bl	800263c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cbc:	e084      	b.n	8002dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d107      	bne.n	8002cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f9ae 	bl	8003034 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d107      	bne.n	8002cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f9ed 	bl	80030cc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf8:	2b40      	cmp	r3, #64	; 0x40
 8002cfa:	d12f      	bne.n	8002d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f003 0320 	and.w	r3, r3, #32
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d02a      	beq.n	8002d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d14:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a2e      	ldr	r2, [pc, #184]	; (8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d101      	bne.n	8002d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002d20:	4b2d      	ldr	r3, [pc, #180]	; (8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d22:	e001      	b.n	8002d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002d24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4929      	ldr	r1, [pc, #164]	; (8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d30:	428b      	cmp	r3, r1
 8002d32:	d101      	bne.n	8002d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002d34:	4b28      	ldr	r3, [pc, #160]	; (8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d36:	e001      	b.n	8002d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002d38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d40:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	f043 0202 	orr.w	r2, r3, #2
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff fc70 	bl	800263c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d131      	bne.n	8002dca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d02c      	beq.n	8002dca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a17      	ldr	r2, [pc, #92]	; (8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d101      	bne.n	8002d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002d7a:	4b17      	ldr	r3, [pc, #92]	; (8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d7c:	e001      	b.n	8002d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002d7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4912      	ldr	r1, [pc, #72]	; (8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d8a:	428b      	cmp	r3, r1
 8002d8c:	d101      	bne.n	8002d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002d8e:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d90:	e001      	b.n	8002d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002d92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d9a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002daa:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db8:	f043 0204 	orr.w	r2, r3, #4
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff fc3b 	bl	800263c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002dc6:	e000      	b.n	8002dca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002dc8:	bf00      	nop
}
 8002dca:	bf00      	nop
 8002dcc:	3720      	adds	r7, #32
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40003800 	.word	0x40003800
 8002dd8:	40003400 	.word	0x40003400

08002ddc <HAL_I2SEx_TxRxHalfCpltCallback>:
  * @brief  Tx and Rx Transfer half completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxHalfCpltCallback could be implemented in the user file
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f7ff ffe2 	bl	8002ddc <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f040 8084 	bne.w	8002f40 <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d13c      	bne.n	8002ebc <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e50:	d006      	beq.n	8002e60 <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d116      	bne.n	8002e8e <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a38      	ldr	r2, [pc, #224]	; (8002f48 <I2SEx_TxRxDMACplt+0x128>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d101      	bne.n	8002e6e <I2SEx_TxRxDMACplt+0x4e>
 8002e6a:	4b38      	ldr	r3, [pc, #224]	; (8002f4c <I2SEx_TxRxDMACplt+0x12c>)
 8002e6c:	e001      	b.n	8002e72 <I2SEx_TxRxDMACplt+0x52>
 8002e6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4933      	ldr	r1, [pc, #204]	; (8002f48 <I2SEx_TxRxDMACplt+0x128>)
 8002e7a:	428b      	cmp	r3, r1
 8002e7c:	d101      	bne.n	8002e82 <I2SEx_TxRxDMACplt+0x62>
 8002e7e:	4b33      	ldr	r3, [pc, #204]	; (8002f4c <I2SEx_TxRxDMACplt+0x12c>)
 8002e80:	e001      	b.n	8002e86 <I2SEx_TxRxDMACplt+0x66>
 8002e82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e86:	f022 0201 	bic.w	r2, r2, #1
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	e007      	b.n	8002e9e <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0201 	bic.w	r2, r2, #1
 8002e9c:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f7ff ff9a 	bl	8002df0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d13c      	bne.n	8002f40 <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ed4:	d006      	beq.n	8002ee4 <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d108      	bne.n	8002ef6 <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0202 	bic.w	r2, r2, #2
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	e015      	b.n	8002f22 <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a13      	ldr	r2, [pc, #76]	; (8002f48 <I2SEx_TxRxDMACplt+0x128>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d101      	bne.n	8002f04 <I2SEx_TxRxDMACplt+0xe4>
 8002f00:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <I2SEx_TxRxDMACplt+0x12c>)
 8002f02:	e001      	b.n	8002f08 <I2SEx_TxRxDMACplt+0xe8>
 8002f04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	490e      	ldr	r1, [pc, #56]	; (8002f48 <I2SEx_TxRxDMACplt+0x128>)
 8002f10:	428b      	cmp	r3, r1
 8002f12:	d101      	bne.n	8002f18 <I2SEx_TxRxDMACplt+0xf8>
 8002f14:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <I2SEx_TxRxDMACplt+0x12c>)
 8002f16:	e001      	b.n	8002f1c <I2SEx_TxRxDMACplt+0xfc>
 8002f18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f1c:	f022 0202 	bic.w	r2, r2, #2
 8002f20:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d106      	bne.n	8002f40 <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f7ff ff58 	bl	8002df0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002f40:	bf00      	nop
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40003800 	.word	0x40003800
 8002f4c:	40003400 	.word	0x40003400

08002f50 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0203 	bic.w	r2, r2, #3
 8002f6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a15      	ldr	r2, [pc, #84]	; (8002fc8 <I2SEx_TxRxDMAError+0x78>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d101      	bne.n	8002f7c <I2SEx_TxRxDMAError+0x2c>
 8002f78:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <I2SEx_TxRxDMAError+0x7c>)
 8002f7a:	e001      	b.n	8002f80 <I2SEx_TxRxDMAError+0x30>
 8002f7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4910      	ldr	r1, [pc, #64]	; (8002fc8 <I2SEx_TxRxDMAError+0x78>)
 8002f88:	428b      	cmp	r3, r1
 8002f8a:	d101      	bne.n	8002f90 <I2SEx_TxRxDMAError+0x40>
 8002f8c:	4b0f      	ldr	r3, [pc, #60]	; (8002fcc <I2SEx_TxRxDMAError+0x7c>)
 8002f8e:	e001      	b.n	8002f94 <I2SEx_TxRxDMAError+0x44>
 8002f90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f94:	f022 0203 	bic.w	r2, r2, #3
 8002f98:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb2:	f043 0208 	orr.w	r2, r3, #8
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f7ff fb3e 	bl	800263c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002fc0:	bf00      	nop
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40003800 	.word	0x40003800
 8002fcc:	40003400 	.word	0x40003400

08002fd0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	1c99      	adds	r1, r3, #2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6251      	str	r1, [r2, #36]	; 0x24
 8002fe2:	881a      	ldrh	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d113      	bne.n	800302a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003010:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d106      	bne.n	800302a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff fee3 	bl	8002df0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	1c99      	adds	r1, r3, #2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6251      	str	r1, [r2, #36]	; 0x24
 8003046:	8819      	ldrh	r1, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1d      	ldr	r2, [pc, #116]	; (80030c4 <I2SEx_TxISR_I2SExt+0x90>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d101      	bne.n	8003056 <I2SEx_TxISR_I2SExt+0x22>
 8003052:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <I2SEx_TxISR_I2SExt+0x94>)
 8003054:	e001      	b.n	800305a <I2SEx_TxISR_I2SExt+0x26>
 8003056:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800305a:	460a      	mov	r2, r1
 800305c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d121      	bne.n	80030ba <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a12      	ldr	r2, [pc, #72]	; (80030c4 <I2SEx_TxISR_I2SExt+0x90>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d101      	bne.n	8003084 <I2SEx_TxISR_I2SExt+0x50>
 8003080:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <I2SEx_TxISR_I2SExt+0x94>)
 8003082:	e001      	b.n	8003088 <I2SEx_TxISR_I2SExt+0x54>
 8003084:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	490d      	ldr	r1, [pc, #52]	; (80030c4 <I2SEx_TxISR_I2SExt+0x90>)
 8003090:	428b      	cmp	r3, r1
 8003092:	d101      	bne.n	8003098 <I2SEx_TxISR_I2SExt+0x64>
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <I2SEx_TxISR_I2SExt+0x94>)
 8003096:	e001      	b.n	800309c <I2SEx_TxISR_I2SExt+0x68>
 8003098:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800309c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d106      	bne.n	80030ba <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff fe9b 	bl	8002df0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40003800 	.word	0x40003800
 80030c8:	40003400 	.word	0x40003400

080030cc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68d8      	ldr	r0, [r3, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	1c99      	adds	r1, r3, #2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80030e4:	b282      	uxth	r2, r0
 80030e6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d113      	bne.n	8003128 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800310e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff fe64 	bl	8002df0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a20      	ldr	r2, [pc, #128]	; (80031c0 <I2SEx_RxISR_I2SExt+0x90>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d101      	bne.n	8003146 <I2SEx_RxISR_I2SExt+0x16>
 8003142:	4b20      	ldr	r3, [pc, #128]	; (80031c4 <I2SEx_RxISR_I2SExt+0x94>)
 8003144:	e001      	b.n	800314a <I2SEx_RxISR_I2SExt+0x1a>
 8003146:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800314a:	68d8      	ldr	r0, [r3, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	1c99      	adds	r1, r3, #2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003156:	b282      	uxth	r2, r0
 8003158:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800316c:	b29b      	uxth	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d121      	bne.n	80031b6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a12      	ldr	r2, [pc, #72]	; (80031c0 <I2SEx_RxISR_I2SExt+0x90>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d101      	bne.n	8003180 <I2SEx_RxISR_I2SExt+0x50>
 800317c:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <I2SEx_RxISR_I2SExt+0x94>)
 800317e:	e001      	b.n	8003184 <I2SEx_RxISR_I2SExt+0x54>
 8003180:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	490d      	ldr	r1, [pc, #52]	; (80031c0 <I2SEx_RxISR_I2SExt+0x90>)
 800318c:	428b      	cmp	r3, r1
 800318e:	d101      	bne.n	8003194 <I2SEx_RxISR_I2SExt+0x64>
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <I2SEx_RxISR_I2SExt+0x94>)
 8003192:	e001      	b.n	8003198 <I2SEx_RxISR_I2SExt+0x68>
 8003194:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003198:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800319c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d106      	bne.n	80031b6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7ff fe1d 	bl	8002df0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031b6:	bf00      	nop
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40003800 	.word	0x40003800
 80031c4:	40003400 	.word	0x40003400

080031c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ca:	b08f      	sub	sp, #60	; 0x3c
 80031cc:	af0a      	add	r7, sp, #40	; 0x28
 80031ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e116      	b.n	8003408 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d106      	bne.n	80031fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f008 fcc9 	bl	800bb8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2203      	movs	r2, #3
 80031fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320a:	2b00      	cmp	r3, #0
 800320c:	d102      	bne.n	8003214 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f003 f978 	bl	800650e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	687e      	ldr	r6, [r7, #4]
 8003226:	466d      	mov	r5, sp
 8003228:	f106 0410 	add.w	r4, r6, #16
 800322c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800322e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003232:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003234:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003238:	e885 0003 	stmia.w	r5, {r0, r1}
 800323c:	1d33      	adds	r3, r6, #4
 800323e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003240:	6838      	ldr	r0, [r7, #0]
 8003242:	f003 f84f 	bl	80062e4 <USB_CoreInit>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0d7      	b.n	8003408 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2100      	movs	r1, #0
 800325e:	4618      	mov	r0, r3
 8003260:	f003 f966 	bl	8006530 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003264:	2300      	movs	r3, #0
 8003266:	73fb      	strb	r3, [r7, #15]
 8003268:	e04a      	b.n	8003300 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800326a:	7bfa      	ldrb	r2, [r7, #15]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	333d      	adds	r3, #61	; 0x3d
 800327a:	2201      	movs	r2, #1
 800327c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800327e:	7bfa      	ldrb	r2, [r7, #15]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	333c      	adds	r3, #60	; 0x3c
 800328e:	7bfa      	ldrb	r2, [r7, #15]
 8003290:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003292:	7bfa      	ldrb	r2, [r7, #15]
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	b298      	uxth	r0, r3
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	3342      	adds	r3, #66	; 0x42
 80032a6:	4602      	mov	r2, r0
 80032a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032aa:	7bfa      	ldrb	r2, [r7, #15]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	333f      	adds	r3, #63	; 0x3f
 80032ba:	2200      	movs	r2, #0
 80032bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032be:	7bfa      	ldrb	r2, [r7, #15]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	3344      	adds	r3, #68	; 0x44
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032d2:	7bfa      	ldrb	r2, [r7, #15]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	3348      	adds	r3, #72	; 0x48
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	3350      	adds	r3, #80	; 0x50
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
 80032fc:	3301      	adds	r3, #1
 80032fe:	73fb      	strb	r3, [r7, #15]
 8003300:	7bfa      	ldrb	r2, [r7, #15]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	429a      	cmp	r2, r3
 8003308:	d3af      	bcc.n	800326a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800330a:	2300      	movs	r3, #0
 800330c:	73fb      	strb	r3, [r7, #15]
 800330e:	e044      	b.n	800339a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003310:	7bfa      	ldrb	r2, [r7, #15]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003322:	2200      	movs	r2, #0
 8003324:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003326:	7bfa      	ldrb	r2, [r7, #15]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003338:	7bfa      	ldrb	r2, [r7, #15]
 800333a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800333c:	7bfa      	ldrb	r2, [r7, #15]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003352:	7bfa      	ldrb	r2, [r7, #15]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003368:	7bfa      	ldrb	r2, [r7, #15]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800337e:	7bfa      	ldrb	r2, [r7, #15]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	1a9b      	subs	r3, r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	3301      	adds	r3, #1
 8003398:	73fb      	strb	r3, [r7, #15]
 800339a:	7bfa      	ldrb	r2, [r7, #15]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d3b5      	bcc.n	8003310 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	603b      	str	r3, [r7, #0]
 80033aa:	687e      	ldr	r6, [r7, #4]
 80033ac:	466d      	mov	r5, sp
 80033ae:	f106 0410 	add.w	r4, r6, #16
 80033b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033be:	e885 0003 	stmia.w	r5, {r0, r1}
 80033c2:	1d33      	adds	r3, r6, #4
 80033c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033c6:	6838      	ldr	r0, [r7, #0]
 80033c8:	f003 f8dc 	bl	8006584 <USB_DevInit>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2202      	movs	r2, #2
 80033d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e014      	b.n	8003408 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d102      	bne.n	80033fc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f001 f892 	bl	8004520 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f004 f917 	bl	8007634 <USB_DevDisconnect>

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003410 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_PCD_Start+0x1c>
 8003428:	2302      	movs	r3, #2
 800342a:	e020      	b.n	800346e <HAL_PCD_Start+0x5e>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	2b01      	cmp	r3, #1
 800343a:	d109      	bne.n	8003450 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003440:	2b01      	cmp	r3, #1
 8003442:	d005      	beq.n	8003450 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003448:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f003 f849 	bl	80064ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f004 f8c7 	bl	80075f2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003476:	b590      	push	{r4, r7, lr}
 8003478:	b08d      	sub	sp, #52	; 0x34
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f004 f985 	bl	800779c <USB_GetMode>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	f040 83ca 	bne.w	8003c2e <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f004 f8e9 	bl	8007676 <USB_ReadInterrupts>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 83c0 	beq.w	8003c2c <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f004 f8e0 	bl	8007676 <USB_ReadInterrupts>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d107      	bne.n	80034d0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695a      	ldr	r2, [r3, #20]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f002 0202 	and.w	r2, r2, #2
 80034ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f004 f8ce 	bl	8007676 <USB_ReadInterrupts>
 80034da:	4603      	mov	r3, r0
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b10      	cmp	r3, #16
 80034e2:	d161      	bne.n	80035a8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0210 	bic.w	r2, r2, #16
 80034f2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	f003 020f 	and.w	r2, r3, #15
 8003500:	4613      	mov	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	4413      	add	r3, r2
 8003510:	3304      	adds	r3, #4
 8003512:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	0c5b      	lsrs	r3, r3, #17
 8003518:	f003 030f 	and.w	r3, r3, #15
 800351c:	2b02      	cmp	r3, #2
 800351e:	d124      	bne.n	800356a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d035      	beq.n	8003598 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	091b      	lsrs	r3, r3, #4
 8003534:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800353a:	b29b      	uxth	r3, r3
 800353c:	461a      	mov	r2, r3
 800353e:	6a38      	ldr	r0, [r7, #32]
 8003540:	f003 ff34 	bl	80073ac <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	091b      	lsrs	r3, r3, #4
 800354c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003550:	441a      	add	r2, r3
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	699a      	ldr	r2, [r3, #24]
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	091b      	lsrs	r3, r3, #4
 800355e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003562:	441a      	add	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	619a      	str	r2, [r3, #24]
 8003568:	e016      	b.n	8003598 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	0c5b      	lsrs	r3, r3, #17
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	2b06      	cmp	r3, #6
 8003574:	d110      	bne.n	8003598 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800357c:	2208      	movs	r2, #8
 800357e:	4619      	mov	r1, r3
 8003580:	6a38      	ldr	r0, [r7, #32]
 8003582:	f003 ff13 	bl	80073ac <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	699a      	ldr	r2, [r3, #24]
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	091b      	lsrs	r3, r3, #4
 800358e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003592:	441a      	add	r2, r3
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699a      	ldr	r2, [r3, #24]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0210 	orr.w	r2, r2, #16
 80035a6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f004 f862 	bl	8007676 <USB_ReadInterrupts>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035bc:	d16e      	bne.n	800369c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f004 f868 	bl	800769c <USB_ReadDevAllOutEpInterrupt>
 80035cc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80035ce:	e062      	b.n	8003696 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80035d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d057      	beq.n	800368a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	4611      	mov	r1, r2
 80035e4:	4618      	mov	r0, r3
 80035e6:	f004 f88d 	bl	8007704 <USB_ReadDevOutEPInterrupt>
 80035ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00c      	beq.n	8003610 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003602:	461a      	mov	r2, r3
 8003604:	2301      	movs	r3, #1
 8003606:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003608:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fdde 	bl	80041cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00c      	beq.n	8003634 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	4413      	add	r3, r2
 8003622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003626:	461a      	mov	r2, r3
 8003628:	2308      	movs	r3, #8
 800362a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800362c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fed8 	bl	80043e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f003 0310 	and.w	r3, r3, #16
 800363a:	2b00      	cmp	r3, #0
 800363c:	d008      	beq.n	8003650 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	4413      	add	r3, r2
 8003646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364a:	461a      	mov	r2, r3
 800364c:	2310      	movs	r3, #16
 800364e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f003 0320 	and.w	r3, r3, #32
 8003656:	2b00      	cmp	r3, #0
 8003658:	d008      	beq.n	800366c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003666:	461a      	mov	r2, r3
 8003668:	2320      	movs	r3, #32
 800366a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	015a      	lsls	r2, r3, #5
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	4413      	add	r3, r2
 800367e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003682:	461a      	mov	r2, r3
 8003684:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003688:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	3301      	adds	r3, #1
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003692:	085b      	lsrs	r3, r3, #1
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003698:	2b00      	cmp	r3, #0
 800369a:	d199      	bne.n	80035d0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f003 ffe8 	bl	8007676 <USB_ReadInterrupts>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036b0:	f040 80c0 	bne.w	8003834 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f004 f809 	bl	80076d0 <USB_ReadDevAllInEpInterrupt>
 80036be:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80036c4:	e0b2      	b.n	800382c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80036c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 80a7 	beq.w	8003820 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	4611      	mov	r1, r2
 80036dc:	4618      	mov	r0, r3
 80036de:	f004 f82f 	bl	8007740 <USB_ReadDevInEPInterrupt>
 80036e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d057      	beq.n	800379e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	f003 030f 	and.w	r3, r3, #15
 80036f4:	2201      	movs	r2, #1
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	43db      	mvns	r3, r3
 8003708:	69f9      	ldr	r1, [r7, #28]
 800370a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800370e:	4013      	ands	r3, r2
 8003710:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	4413      	add	r3, r2
 800371a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371e:	461a      	mov	r2, r3
 8003720:	2301      	movs	r3, #1
 8003722:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d132      	bne.n	8003792 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	3348      	adds	r3, #72	; 0x48
 800373c:	6819      	ldr	r1, [r3, #0]
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003742:	4613      	mov	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4403      	add	r3, r0
 800374c:	3344      	adds	r3, #68	; 0x44
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4419      	add	r1, r3
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003756:	4613      	mov	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4403      	add	r3, r0
 8003760:	3348      	adds	r3, #72	; 0x48
 8003762:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	2b00      	cmp	r3, #0
 8003768:	d113      	bne.n	8003792 <HAL_PCD_IRQHandler+0x31c>
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800376e:	4613      	mov	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	1a9b      	subs	r3, r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	3350      	adds	r3, #80	; 0x50
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d108      	bne.n	8003792 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6818      	ldr	r0, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800378a:	461a      	mov	r2, r3
 800378c:	2101      	movs	r1, #1
 800378e:	f004 f837 	bl	8007800 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	b2db      	uxtb	r3, r3
 8003796:	4619      	mov	r1, r3
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f008 fa78 	bl	800bc8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b4:	461a      	mov	r2, r3
 80037b6:	2308      	movs	r3, #8
 80037b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f003 0310 	and.w	r3, r3, #16
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d008      	beq.n	80037d6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d0:	461a      	mov	r2, r3
 80037d2:	2310      	movs	r3, #16
 80037d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ec:	461a      	mov	r2, r3
 80037ee:	2340      	movs	r3, #64	; 0x40
 80037f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003808:	461a      	mov	r2, r3
 800380a:	2302      	movs	r3, #2
 800380c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003818:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fc48 	bl	80040b0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	3301      	adds	r3, #1
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003828:	085b      	lsrs	r3, r3, #1
 800382a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800382c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382e:	2b00      	cmp	r3, #0
 8003830:	f47f af49 	bne.w	80036c6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f003 ff1c 	bl	8007676 <USB_ReadInterrupts>
 800383e:	4603      	mov	r3, r0
 8003840:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003844:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003848:	d122      	bne.n	8003890 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003858:	f023 0301 	bic.w	r3, r3, #1
 800385c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003864:	2b01      	cmp	r3, #1
 8003866:	d108      	bne.n	800387a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003870:	2100      	movs	r1, #0
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f008 fc66 	bl	800c144 <HAL_PCDEx_LPM_Callback>
 8003878:	e002      	b.n	8003880 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f008 fa74 	bl	800bd68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695a      	ldr	r2, [r3, #20]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800388e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f003 feee 	bl	8007676 <USB_ReadInterrupts>
 800389a:	4603      	mov	r3, r0
 800389c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a4:	d112      	bne.n	80038cc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d102      	bne.n	80038bc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f008 fa30 	bl	800bd1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80038ca:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f003 fed0 	bl	8007676 <USB_ReadInterrupts>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038e0:	d121      	bne.n	8003926 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80038f0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d111      	bne.n	8003920 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390a:	089b      	lsrs	r3, r3, #2
 800390c:	f003 020f 	and.w	r2, r3, #15
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003916:	2101      	movs	r1, #1
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f008 fc13 	bl	800c144 <HAL_PCDEx_LPM_Callback>
 800391e:	e002      	b.n	8003926 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f008 f9fb 	bl	800bd1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f003 fea3 	bl	8007676 <USB_ReadInterrupts>
 8003930:	4603      	mov	r3, r0
 8003932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800393a:	f040 80c7 	bne.w	8003acc <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	69fa      	ldr	r2, [r7, #28]
 8003948:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800394c:	f023 0301 	bic.w	r3, r3, #1
 8003950:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2110      	movs	r1, #16
 8003958:	4618      	mov	r0, r3
 800395a:	f002 ff71 	bl	8006840 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800395e:	2300      	movs	r3, #0
 8003960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003962:	e056      	b.n	8003a12 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003970:	461a      	mov	r2, r3
 8003972:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003976:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003988:	0151      	lsls	r1, r2, #5
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	440a      	add	r2, r1
 800398e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003992:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003996:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039a8:	0151      	lsls	r1, r2, #5
 80039aa:	69fa      	ldr	r2, [r7, #28]
 80039ac:	440a      	add	r2, r1
 80039ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80039b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c4:	461a      	mov	r2, r3
 80039c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039ca:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80039cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039dc:	0151      	lsls	r1, r2, #5
 80039de:	69fa      	ldr	r2, [r7, #28]
 80039e0:	440a      	add	r2, r1
 80039e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80039ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039fc:	0151      	lsls	r1, r2, #5
 80039fe:	69fa      	ldr	r2, [r7, #28]
 8003a00:	440a      	add	r2, r1
 8003a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a0a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0e:	3301      	adds	r3, #1
 8003a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d3a3      	bcc.n	8003964 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	69fa      	ldr	r2, [r7, #28]
 8003a26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a2a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003a2e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d016      	beq.n	8003a66 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a48:	f043 030b 	orr.w	r3, r3, #11
 8003a4c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a58:	69fa      	ldr	r2, [r7, #28]
 8003a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a5e:	f043 030b 	orr.w	r3, r3, #11
 8003a62:	6453      	str	r3, [r2, #68]	; 0x44
 8003a64:	e015      	b.n	8003a92 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	69fa      	ldr	r2, [r7, #28]
 8003a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a78:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003a7c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a8c:	f043 030b 	orr.w	r3, r3, #11
 8003a90:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69fa      	ldr	r2, [r7, #28]
 8003a9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aa0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003aa4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f003 fea2 	bl	8007800 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003aca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f003 fdd0 	bl	8007676 <USB_ReadInterrupts>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae0:	d124      	bne.n	8003b2c <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f003 fe66 	bl	80077b8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f002 ff06 	bl	8006902 <USB_GetDevSpeed>
 8003af6:	4603      	mov	r3, r0
 8003af8:	461a      	mov	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681c      	ldr	r4, [r3, #0]
 8003b02:	f000 ffbb 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 8003b06:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	461a      	mov	r2, r3
 8003b10:	4620      	mov	r0, r4
 8003b12:	f002 fc49 	bl	80063a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f008 f8e1 	bl	800bcde <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695a      	ldr	r2, [r3, #20]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003b2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f003 fda0 	bl	8007676 <USB_ReadInterrupts>
 8003b36:	4603      	mov	r3, r0
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d10a      	bne.n	8003b56 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f008 f8be 	bl	800bcc2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	695a      	ldr	r2, [r3, #20]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f002 0208 	and.w	r2, r2, #8
 8003b54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f003 fd8b 	bl	8007676 <USB_ReadInterrupts>
 8003b60:	4603      	mov	r3, r0
 8003b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b6a:	d10f      	bne.n	8003b8c <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	4619      	mov	r1, r3
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f008 f916 	bl	800bda8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003b8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f003 fd70 	bl	8007676 <USB_ReadInterrupts>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ba0:	d10f      	bne.n	8003bc2 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	4619      	mov	r1, r3
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f008 f8e9 	bl	800bd84 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695a      	ldr	r2, [r3, #20]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003bc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f003 fd55 	bl	8007676 <USB_ReadInterrupts>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd6:	d10a      	bne.n	8003bee <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f008 f8f7 	bl	800bdcc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695a      	ldr	r2, [r3, #20]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003bec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f003 fd3f 	bl	8007676 <USB_ReadInterrupts>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d115      	bne.n	8003c2e <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f008 f8e7 	bl	800bde8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6859      	ldr	r1, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	e000      	b.n	8003c2e <HAL_PCD_IRQHandler+0x7b8>
      return;
 8003c2c:	bf00      	nop
    }
  }
}
 8003c2e:	3734      	adds	r7, #52	; 0x34
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd90      	pop	{r4, r7, pc}

08003c34 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HAL_PCD_SetAddress+0x1a>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e013      	b.n	8003c76 <HAL_PCD_SetAddress+0x42>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	78fa      	ldrb	r2, [r7, #3]
 8003c5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	4611      	mov	r1, r2
 8003c66:	4618      	mov	r0, r3
 8003c68:	f003 fc9d 	bl	80075a6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	4608      	mov	r0, r1
 8003c88:	4611      	mov	r1, r2
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	70fb      	strb	r3, [r7, #3]
 8003c90:	460b      	mov	r3, r1
 8003c92:	803b      	strh	r3, [r7, #0]
 8003c94:	4613      	mov	r3, r2
 8003c96:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	da0f      	bge.n	8003cc4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	f003 020f 	and.w	r2, r3, #15
 8003caa:	4613      	mov	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	3338      	adds	r3, #56	; 0x38
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	3304      	adds	r3, #4
 8003cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	705a      	strb	r2, [r3, #1]
 8003cc2:	e00f      	b.n	8003ce4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	f003 020f 	and.w	r2, r3, #15
 8003cca:	4613      	mov	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	1a9b      	subs	r3, r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	4413      	add	r3, r2
 8003cda:	3304      	adds	r3, #4
 8003cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ce4:	78fb      	ldrb	r3, [r7, #3]
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003cf0:	883a      	ldrh	r2, [r7, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	78ba      	ldrb	r2, [r7, #2]
 8003cfa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	785b      	ldrb	r3, [r3, #1]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d004      	beq.n	8003d0e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d0e:	78bb      	ldrb	r3, [r7, #2]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d102      	bne.n	8003d1a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <HAL_PCD_EP_Open+0xaa>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e00e      	b.n	8003d46 <HAL_PCD_EP_Open+0xc8>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68f9      	ldr	r1, [r7, #12]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f002 fe08 	bl	800694c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003d44:	7afb      	ldrb	r3, [r7, #11]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	460b      	mov	r3, r1
 8003d58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	da0f      	bge.n	8003d82 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d62:	78fb      	ldrb	r3, [r7, #3]
 8003d64:	f003 020f 	and.w	r2, r3, #15
 8003d68:	4613      	mov	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	3338      	adds	r3, #56	; 0x38
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	4413      	add	r3, r2
 8003d76:	3304      	adds	r3, #4
 8003d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	705a      	strb	r2, [r3, #1]
 8003d80:	e00f      	b.n	8003da2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	f003 020f 	and.w	r2, r3, #15
 8003d88:	4613      	mov	r3, r2
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	1a9b      	subs	r3, r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	4413      	add	r3, r2
 8003d98:	3304      	adds	r3, #4
 8003d9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003da2:	78fb      	ldrb	r3, [r7, #3]
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_PCD_EP_Close+0x6e>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e00e      	b.n	8003dda <HAL_PCD_EP_Close+0x8c>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68f9      	ldr	r1, [r7, #12]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f002 fe46 	bl	8006a5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b086      	sub	sp, #24
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
 8003dee:	460b      	mov	r3, r1
 8003df0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003df2:	7afb      	ldrb	r3, [r7, #11]
 8003df4:	f003 020f 	and.w	r2, r3, #15
 8003df8:	4613      	mov	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4413      	add	r3, r2
 8003e08:	3304      	adds	r3, #4
 8003e0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2200      	movs	r2, #0
 8003e22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e24:	7afb      	ldrb	r3, [r7, #11]
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d102      	bne.n	8003e3e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e3e:	7afb      	ldrb	r3, [r7, #11]
 8003e40:	f003 030f 	and.w	r3, r3, #15
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d109      	bne.n	8003e5c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	6979      	ldr	r1, [r7, #20]
 8003e56:	f003 f921 	bl	800709c <USB_EP0StartXfer>
 8003e5a:	e008      	b.n	8003e6e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	461a      	mov	r2, r3
 8003e68:	6979      	ldr	r1, [r7, #20]
 8003e6a:	f002 fed3 	bl	8006c14 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	f003 020f 	and.w	r2, r3, #15
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	1a9b      	subs	r3, r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003e9a:	681b      	ldr	r3, [r3, #0]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	607a      	str	r2, [r7, #4]
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eb8:	7afb      	ldrb	r3, [r7, #11]
 8003eba:	f003 020f 	and.w	r2, r3, #15
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	3338      	adds	r3, #56	; 0x38
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	3304      	adds	r3, #4
 8003ece:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ee8:	7afb      	ldrb	r3, [r7, #11]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d102      	bne.n	8003f02 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f02:	7afb      	ldrb	r3, [r7, #11]
 8003f04:	f003 030f 	and.w	r3, r3, #15
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d109      	bne.n	8003f20 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	6979      	ldr	r1, [r7, #20]
 8003f1a:	f003 f8bf 	bl	800709c <USB_EP0StartXfer>
 8003f1e:	e008      	b.n	8003f32 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	6979      	ldr	r1, [r7, #20]
 8003f2e:	f002 fe71 	bl	8006c14 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f48:	78fb      	ldrb	r3, [r7, #3]
 8003f4a:	f003 020f 	and.w	r2, r3, #15
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d901      	bls.n	8003f5a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e050      	b.n	8003ffc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	da0f      	bge.n	8003f82 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f62:	78fb      	ldrb	r3, [r7, #3]
 8003f64:	f003 020f 	and.w	r2, r3, #15
 8003f68:	4613      	mov	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	1a9b      	subs	r3, r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	3338      	adds	r3, #56	; 0x38
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	4413      	add	r3, r2
 8003f76:	3304      	adds	r3, #4
 8003f78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	705a      	strb	r2, [r3, #1]
 8003f80:	e00d      	b.n	8003f9e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f82:	78fa      	ldrb	r2, [r7, #3]
 8003f84:	4613      	mov	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	1a9b      	subs	r3, r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	4413      	add	r3, r2
 8003f94:	3304      	adds	r3, #4
 8003f96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_PCD_EP_SetStall+0x82>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e01e      	b.n	8003ffc <HAL_PCD_EP_SetStall+0xc0>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68f9      	ldr	r1, [r7, #12]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f003 fa16 	bl	80073fe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fd2:	78fb      	ldrb	r3, [r7, #3]
 8003fd4:	f003 030f 	and.w	r3, r3, #15
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10a      	bne.n	8003ff2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6818      	ldr	r0, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	b2d9      	uxtb	r1, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fec:	461a      	mov	r2, r3
 8003fee:	f003 fc07 	bl	8007800 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	f003 020f 	and.w	r2, r3, #15
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	429a      	cmp	r2, r3
 800401c:	d901      	bls.n	8004022 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e042      	b.n	80040a8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004022:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004026:	2b00      	cmp	r3, #0
 8004028:	da0f      	bge.n	800404a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	f003 020f 	and.w	r2, r3, #15
 8004030:	4613      	mov	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	1a9b      	subs	r3, r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	3338      	adds	r3, #56	; 0x38
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	4413      	add	r3, r2
 800403e:	3304      	adds	r3, #4
 8004040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	705a      	strb	r2, [r3, #1]
 8004048:	e00f      	b.n	800406a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800404a:	78fb      	ldrb	r3, [r7, #3]
 800404c:	f003 020f 	and.w	r2, r3, #15
 8004050:	4613      	mov	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	1a9b      	subs	r3, r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	4413      	add	r3, r2
 8004060:	3304      	adds	r3, #4
 8004062:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004070:	78fb      	ldrb	r3, [r7, #3]
 8004072:	f003 030f 	and.w	r3, r3, #15
 8004076:	b2da      	uxtb	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_PCD_EP_ClrStall+0x86>
 8004086:	2302      	movs	r3, #2
 8004088:	e00e      	b.n	80040a8 <HAL_PCD_EP_ClrStall+0xa4>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68f9      	ldr	r1, [r7, #12]
 8004098:	4618      	mov	r0, r3
 800409a:	f003 fa1e 	bl	80074da <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08a      	sub	sp, #40	; 0x28
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	4613      	mov	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	1a9b      	subs	r3, r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	3338      	adds	r3, #56	; 0x38
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	4413      	add	r3, r2
 80040d4:	3304      	adds	r3, #4
 80040d6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	699a      	ldr	r2, [r3, #24]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d901      	bls.n	80040e8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e06c      	b.n	80041c2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	695a      	ldr	r2, [r3, #20]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	69fa      	ldr	r2, [r7, #28]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d902      	bls.n	8004104 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	3303      	adds	r3, #3
 8004108:	089b      	lsrs	r3, r3, #2
 800410a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800410c:	e02b      	b.n	8004166 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	429a      	cmp	r2, r3
 8004122:	d902      	bls.n	800412a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	3303      	adds	r3, #3
 800412e:	089b      	lsrs	r3, r3, #2
 8004130:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	68d9      	ldr	r1, [r3, #12]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	b2da      	uxtb	r2, r3
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004142:	b2db      	uxtb	r3, r3
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	4603      	mov	r3, r0
 8004148:	6978      	ldr	r0, [r7, #20]
 800414a:	f003 f8fa 	bl	8007342 <USB_WritePacket>

    ep->xfer_buff  += len;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	441a      	add	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	699a      	ldr	r2, [r3, #24]
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	441a      	add	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4413      	add	r3, r2
 800416e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	b29b      	uxth	r3, r3
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	429a      	cmp	r2, r3
 800417a:	d809      	bhi.n	8004190 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	699a      	ldr	r2, [r3, #24]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004184:	429a      	cmp	r2, r3
 8004186:	d203      	bcs.n	8004190 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1be      	bne.n	800410e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	695a      	ldr	r2, [r3, #20]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	429a      	cmp	r2, r3
 800419a:	d811      	bhi.n	80041c0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	2201      	movs	r2, #1
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	43db      	mvns	r3, r3
 80041b6:	6939      	ldr	r1, [r7, #16]
 80041b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041bc:	4013      	ands	r3, r2
 80041be:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3720      	adds	r7, #32
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
	...

080041cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	333c      	adds	r3, #60	; 0x3c
 80041e4:	3304      	adds	r3, #4
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	f040 80a0 	bne.w	8004344 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d015      	beq.n	800423a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4a72      	ldr	r2, [pc, #456]	; (80043dc <PCD_EP_OutXfrComplete_int+0x210>)
 8004212:	4293      	cmp	r3, r2
 8004214:	f240 80dd 	bls.w	80043d2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 80d7 	beq.w	80043d2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004230:	461a      	mov	r2, r3
 8004232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004236:	6093      	str	r3, [r2, #8]
 8004238:	e0cb      	b.n	80043d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	2b00      	cmp	r3, #0
 8004242:	d009      	beq.n	8004258 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004250:	461a      	mov	r2, r3
 8004252:	2320      	movs	r3, #32
 8004254:	6093      	str	r3, [r2, #8]
 8004256:	e0bc      	b.n	80043d2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800425e:	2b00      	cmp	r3, #0
 8004260:	f040 80b7 	bne.w	80043d2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4a5d      	ldr	r2, [pc, #372]	; (80043dc <PCD_EP_OutXfrComplete_int+0x210>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d90f      	bls.n	800428c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4413      	add	r3, r2
 800427e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004282:	461a      	mov	r2, r3
 8004284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004288:	6093      	str	r3, [r2, #8]
 800428a:	e0a2      	b.n	80043d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	4613      	mov	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800429e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	0159      	lsls	r1, r3, #5
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	440b      	add	r3, r1
 80042a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80042b2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	4613      	mov	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	1a9b      	subs	r3, r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4403      	add	r3, r0
 80042c2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80042c6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	4613      	mov	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80042da:	6819      	ldr	r1, [r3, #0]
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	4613      	mov	r3, r2
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4403      	add	r3, r0
 80042ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4419      	add	r1, r3
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	4613      	mov	r3, r2
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	1a9b      	subs	r3, r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4403      	add	r3, r0
 8004300:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004304:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d114      	bne.n	8004336 <PCD_EP_OutXfrComplete_int+0x16a>
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	4613      	mov	r3, r2
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d108      	bne.n	8004336 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6818      	ldr	r0, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800432e:	461a      	mov	r2, r3
 8004330:	2101      	movs	r1, #1
 8004332:	f003 fa65 	bl	8007800 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	4619      	mov	r1, r3
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f007 fc8b 	bl	800bc58 <HAL_PCD_DataOutStageCallback>
 8004342:	e046      	b.n	80043d2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4a26      	ldr	r2, [pc, #152]	; (80043e0 <PCD_EP_OutXfrComplete_int+0x214>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d124      	bne.n	8004396 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004362:	461a      	mov	r2, r3
 8004364:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004368:	6093      	str	r3, [r2, #8]
 800436a:	e032      	b.n	80043d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b00      	cmp	r3, #0
 8004374:	d008      	beq.n	8004388 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004382:	461a      	mov	r2, r3
 8004384:	2320      	movs	r3, #32
 8004386:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	b2db      	uxtb	r3, r3
 800438c:	4619      	mov	r1, r3
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f007 fc62 	bl	800bc58 <HAL_PCD_DataOutStageCallback>
 8004394:	e01d      	b.n	80043d2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d114      	bne.n	80043c6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	4613      	mov	r3, r2
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	1a9b      	subs	r3, r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d108      	bne.n	80043c6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6818      	ldr	r0, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80043be:	461a      	mov	r2, r3
 80043c0:	2100      	movs	r1, #0
 80043c2:	f003 fa1d 	bl	8007800 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	4619      	mov	r1, r3
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f007 fc43 	bl	800bc58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	4f54300a 	.word	0x4f54300a
 80043e0:	4f54310a 	.word	0x4f54310a

080043e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	333c      	adds	r3, #60	; 0x3c
 80043fc:	3304      	adds	r3, #4
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4413      	add	r3, r2
 800440a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4a15      	ldr	r2, [pc, #84]	; (800446c <PCD_EP_OutSetupPacket_int+0x88>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d90e      	bls.n	8004438 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004420:	2b00      	cmp	r3, #0
 8004422:	d009      	beq.n	8004438 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004430:	461a      	mov	r2, r3
 8004432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004436:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f007 fbfb 	bl	800bc34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4a0a      	ldr	r2, [pc, #40]	; (800446c <PCD_EP_OutSetupPacket_int+0x88>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d90c      	bls.n	8004460 <PCD_EP_OutSetupPacket_int+0x7c>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d108      	bne.n	8004460 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004458:	461a      	mov	r2, r3
 800445a:	2101      	movs	r1, #1
 800445c:	f003 f9d0 	bl	8007800 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	4f54300a 	.word	0x4f54300a

08004470 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	70fb      	strb	r3, [r7, #3]
 800447c:	4613      	mov	r3, r2
 800447e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d107      	bne.n	800449e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800448e:	883b      	ldrh	r3, [r7, #0]
 8004490:	0419      	lsls	r1, r3, #16
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	430a      	orrs	r2, r1
 800449a:	629a      	str	r2, [r3, #40]	; 0x28
 800449c:	e028      	b.n	80044f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a4:	0c1b      	lsrs	r3, r3, #16
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	4413      	add	r3, r2
 80044aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044ac:	2300      	movs	r3, #0
 80044ae:	73fb      	strb	r3, [r7, #15]
 80044b0:	e00d      	b.n	80044ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	3340      	adds	r3, #64	; 0x40
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	0c1b      	lsrs	r3, r3, #16
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	4413      	add	r3, r2
 80044c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
 80044ca:	3301      	adds	r3, #1
 80044cc:	73fb      	strb	r3, [r7, #15]
 80044ce:	7bfa      	ldrb	r2, [r7, #15]
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d3ec      	bcc.n	80044b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80044d8:	883b      	ldrh	r3, [r7, #0]
 80044da:	0418      	lsls	r0, r3, #16
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6819      	ldr	r1, [r3, #0]
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	4302      	orrs	r2, r0
 80044e8:	3340      	adds	r3, #64	; 0x40
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	460b      	mov	r3, r1
 8004508:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	887a      	ldrh	r2, [r7, #2]
 8004510:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004552:	f043 0303 	orr.w	r3, r3, #3
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_PCDEx_BCD_VBUSDetect>:
  * @brief  Handle BatteryCharging Process.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCDEx_BCD_VBUSDetect(PCD_HandleTypeDef *hpcd)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = HAL_GetTick();
 8004576:	f7fc f87d 	bl	8000674 <HAL_GetTick>
 800457a:	60b8      	str	r0, [r7, #8]

  /* Enable DCD : Data Contact Detect */
  USBx->GCCFG |= USB_OTG_GCCFG_DCDEN;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	639a      	str	r2, [r3, #56]	; 0x38

  /* Wait Detect flag or a timeout is happen*/
  while ((USBx->GCCFG & USB_OTG_GCCFG_DCDET) == 0U)
 8004588:	e00c      	b.n	80045a4 <HAL_PCDEx_BCD_VBUSDetect+0x3c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > 1000U)
 800458a:	f7fc f873 	bl	8000674 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004598:	d904      	bls.n	80045a4 <HAL_PCDEx_BCD_VBUSDetect+0x3c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->BCDCallback(hpcd, PCD_BCD_ERROR);
#else
      HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_ERROR);
 800459a:	21ff      	movs	r1, #255	; 0xff
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f880 	bl	80046a2 <HAL_PCDEx_BCD_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      return;
 80045a2:	e057      	b.n	8004654 <HAL_PCDEx_BCD_VBUSDetect+0xec>
  while ((USBx->GCCFG & USB_OTG_GCCFG_DCDET) == 0U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0ec      	beq.n	800458a <HAL_PCDEx_BCD_VBUSDetect+0x22>
    }
  }

  /* Right response got */
  HAL_Delay(200U);
 80045b0:	20c8      	movs	r0, #200	; 0xc8
 80045b2:	f7fc f86b 	bl	800068c <HAL_Delay>

  /* Check Detect flag*/
  if ((USBx->GCCFG & USB_OTG_GCCFG_DCDET) == USB_OTG_GCCFG_DCDET)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d103      	bne.n	80045ca <HAL_PCDEx_BCD_VBUSDetect+0x62>
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_CONTACT_DETECTION);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_CONTACT_DETECTION);
 80045c2:	21fe      	movs	r1, #254	; 0xfe
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f86c 	bl	80046a2 <HAL_PCDEx_BCD_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /*Primary detection: checks if connected to Standard Downstream Port
  (without charging capability) */
  USBx->GCCFG &= ~ USB_OTG_GCCFG_DCDEN;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ce:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(50U);
 80045d6:	2032      	movs	r0, #50	; 0x32
 80045d8:	f7fc f858 	bl	800068c <HAL_Delay>
  USBx->GCCFG |=  USB_OTG_GCCFG_PDEN;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(50U);
 80045e8:	2032      	movs	r0, #50	; 0x32
 80045ea:	f7fc f84f 	bl	800068c <HAL_Delay>

  if ((USBx->GCCFG & USB_OTG_GCCFG_PDET) == 0U)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d104      	bne.n	8004604 <HAL_PCDEx_BCD_VBUSDetect+0x9c>
  {
    /* Case of Standard Downstream Port */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_STD_DOWNSTREAM_PORT);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_STD_DOWNSTREAM_PORT);
 80045fa:	21fd      	movs	r1, #253	; 0xfd
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f850 	bl	80046a2 <HAL_PCDEx_BCD_Callback>
 8004602:	e020      	b.n	8004646 <HAL_PCDEx_BCD_VBUSDetect+0xde>
  }
  else
  {
    /* start secondary detection to check connection to Charging Downstream
    Port or Dedicated Charging Port */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_PDEN;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004608:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(50U);
 8004610:	2032      	movs	r0, #50	; 0x32
 8004612:	f7fc f83b 	bl	800068c <HAL_Delay>
    USBx->GCCFG |=  USB_OTG_GCCFG_SDEN;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(50U);
 8004622:	2032      	movs	r0, #50	; 0x32
 8004624:	f7fc f832 	bl	800068c <HAL_Delay>

    if ((USBx->GCCFG & USB_OTG_GCCFG_SDET) == USB_OTG_GCCFG_SDET)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b04      	cmp	r3, #4
 8004632:	d104      	bne.n	800463e <HAL_PCDEx_BCD_VBUSDetect+0xd6>
    {
      /* case Dedicated Charging Port  */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->BCDCallback(hpcd, PCD_BCD_DEDICATED_CHARGING_PORT);
#else
      HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DEDICATED_CHARGING_PORT);
 8004634:	21fb      	movs	r1, #251	; 0xfb
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f833 	bl	80046a2 <HAL_PCDEx_BCD_Callback>
 800463c:	e003      	b.n	8004646 <HAL_PCDEx_BCD_VBUSDetect+0xde>
    {
      /* case Charging Downstream Port  */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->BCDCallback(hpcd, PCD_BCD_CHARGING_DOWNSTREAM_PORT);
#else
      HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_CHARGING_DOWNSTREAM_PORT);
 800463e:	21fc      	movs	r1, #252	; 0xfc
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f82e 	bl	80046a2 <HAL_PCDEx_BCD_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Battery Charging capability discovery finished */
  (void)HAL_PCDEx_DeActivateBCD(hpcd);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f807 	bl	800465a <HAL_PCDEx_DeActivateBCD>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->BCDCallback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
#else
  HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
 800464c:	2100      	movs	r1, #0
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f827 	bl	80046a2 <HAL_PCDEx_BCD_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
}
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_PCDEx_DeActivateBCD>:
  * @brief  Deactivate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_DeActivateBCD(PCD_HandleTypeDef *hpcd)
{
 800465a:	b480      	push	{r7}
 800465c:	b085      	sub	sp, #20
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60fb      	str	r3, [r7, #12]

  USBx->GCCFG &= ~(USB_OTG_GCCFG_SDEN);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_PDEN);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery charging */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004684:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	639a      	str	r2, [r3, #56]	; 0x38

  hpcd->battery_charging_active = 0U;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <HAL_PCDEx_BCD_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_BCD_Callback(PCD_HandleTypeDef *hpcd, PCD_BCD_MsgTypeDef msg)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	460b      	mov	r3, r1
 80046ac:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_BCD_Callback could be implemented in the user file
   */
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
	...

080046bc <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80046c0:	4b08      	ldr	r3, [pc, #32]	; (80046e4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a07      	ldr	r2, [pc, #28]	; (80046e4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80046c6:	f043 0302 	orr.w	r3, r3, #2
 80046ca:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80046cc:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	4a05      	ldr	r2, [pc, #20]	; (80046e8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80046d2:	f043 0304 	orr.w	r3, r3, #4
 80046d6:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80046d8:	bf30      	wfi
}
 80046da:	bf00      	nop
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	40007000 	.word	0x40007000
 80046e8:	e000ed00 	.word	0xe000ed00

080046ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0cc      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004700:	4b68      	ldr	r3, [pc, #416]	; (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 030f 	and.w	r3, r3, #15
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d90c      	bls.n	8004728 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470e:	4b65      	ldr	r3, [pc, #404]	; (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004716:	4b63      	ldr	r3, [pc, #396]	; (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d001      	beq.n	8004728 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0b8      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d020      	beq.n	8004776 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004740:	4b59      	ldr	r3, [pc, #356]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	4a58      	ldr	r2, [pc, #352]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800474a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004758:	4b53      	ldr	r3, [pc, #332]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	4a52      	ldr	r2, [pc, #328]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004762:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004764:	4b50      	ldr	r3, [pc, #320]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	494d      	ldr	r1, [pc, #308]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d044      	beq.n	800480c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d107      	bne.n	800479a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478a:	4b47      	ldr	r3, [pc, #284]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d119      	bne.n	80047ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e07f      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d003      	beq.n	80047aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047a6:	2b03      	cmp	r3, #3
 80047a8:	d107      	bne.n	80047ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047aa:	4b3f      	ldr	r3, [pc, #252]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e06f      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ba:	4b3b      	ldr	r3, [pc, #236]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e067      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ca:	4b37      	ldr	r3, [pc, #220]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f023 0203 	bic.w	r2, r3, #3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	4934      	ldr	r1, [pc, #208]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047dc:	f7fb ff4a 	bl	8000674 <HAL_GetTick>
 80047e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e2:	e00a      	b.n	80047fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e4:	f7fb ff46 	bl	8000674 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e04f      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fa:	4b2b      	ldr	r3, [pc, #172]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 020c 	and.w	r2, r3, #12
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	429a      	cmp	r2, r3
 800480a:	d1eb      	bne.n	80047e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800480c:	4b25      	ldr	r3, [pc, #148]	; (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 030f 	and.w	r3, r3, #15
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d20c      	bcs.n	8004834 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481a:	4b22      	ldr	r3, [pc, #136]	; (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004822:	4b20      	ldr	r3, [pc, #128]	; (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d001      	beq.n	8004834 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e032      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004840:	4b19      	ldr	r3, [pc, #100]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	4916      	ldr	r1, [pc, #88]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	4313      	orrs	r3, r2
 8004850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800485e:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	490e      	ldr	r1, [pc, #56]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	4313      	orrs	r3, r2
 8004870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004872:	f000 f821 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8004876:	4602      	mov	r2, r0
 8004878:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	091b      	lsrs	r3, r3, #4
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	490a      	ldr	r1, [pc, #40]	; (80048ac <HAL_RCC_ClockConfig+0x1c0>)
 8004884:	5ccb      	ldrb	r3, [r1, r3]
 8004886:	fa22 f303 	lsr.w	r3, r2, r3
 800488a:	4a09      	ldr	r2, [pc, #36]	; (80048b0 <HAL_RCC_ClockConfig+0x1c4>)
 800488c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800488e:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7fb feaa 	bl	80005ec <HAL_InitTick>

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40023c00 	.word	0x40023c00
 80048a8:	40023800 	.word	0x40023800
 80048ac:	0800eedc 	.word	0x0800eedc
 80048b0:	200000d4 	.word	0x200000d4
 80048b4:	20000000 	.word	0x20000000

080048b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80048bc:	b084      	sub	sp, #16
 80048be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	607b      	str	r3, [r7, #4]
 80048c4:	2300      	movs	r3, #0
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	2300      	movs	r3, #0
 80048ca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048d0:	4b67      	ldr	r3, [pc, #412]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 030c 	and.w	r3, r3, #12
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d00d      	beq.n	80048f8 <HAL_RCC_GetSysClockFreq+0x40>
 80048dc:	2b08      	cmp	r3, #8
 80048de:	f200 80bd 	bhi.w	8004a5c <HAL_RCC_GetSysClockFreq+0x1a4>
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0x34>
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d003      	beq.n	80048f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80048ea:	e0b7      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048ec:	4b61      	ldr	r3, [pc, #388]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80048ee:	60bb      	str	r3, [r7, #8]
       break;
 80048f0:	e0b7      	b.n	8004a62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048f2:	4b61      	ldr	r3, [pc, #388]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80048f4:	60bb      	str	r3, [r7, #8]
      break;
 80048f6:	e0b4      	b.n	8004a62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048f8:	4b5d      	ldr	r3, [pc, #372]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004900:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004902:	4b5b      	ldr	r3, [pc, #364]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d04d      	beq.n	80049aa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800490e:	4b58      	ldr	r3, [pc, #352]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	099b      	lsrs	r3, r3, #6
 8004914:	461a      	mov	r2, r3
 8004916:	f04f 0300 	mov.w	r3, #0
 800491a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800491e:	f04f 0100 	mov.w	r1, #0
 8004922:	ea02 0800 	and.w	r8, r2, r0
 8004926:	ea03 0901 	and.w	r9, r3, r1
 800492a:	4640      	mov	r0, r8
 800492c:	4649      	mov	r1, r9
 800492e:	f04f 0200 	mov.w	r2, #0
 8004932:	f04f 0300 	mov.w	r3, #0
 8004936:	014b      	lsls	r3, r1, #5
 8004938:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800493c:	0142      	lsls	r2, r0, #5
 800493e:	4610      	mov	r0, r2
 8004940:	4619      	mov	r1, r3
 8004942:	ebb0 0008 	subs.w	r0, r0, r8
 8004946:	eb61 0109 	sbc.w	r1, r1, r9
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	018b      	lsls	r3, r1, #6
 8004954:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004958:	0182      	lsls	r2, r0, #6
 800495a:	1a12      	subs	r2, r2, r0
 800495c:	eb63 0301 	sbc.w	r3, r3, r1
 8004960:	f04f 0000 	mov.w	r0, #0
 8004964:	f04f 0100 	mov.w	r1, #0
 8004968:	00d9      	lsls	r1, r3, #3
 800496a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800496e:	00d0      	lsls	r0, r2, #3
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	eb12 0208 	adds.w	r2, r2, r8
 8004978:	eb43 0309 	adc.w	r3, r3, r9
 800497c:	f04f 0000 	mov.w	r0, #0
 8004980:	f04f 0100 	mov.w	r1, #0
 8004984:	0259      	lsls	r1, r3, #9
 8004986:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800498a:	0250      	lsls	r0, r2, #9
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	4610      	mov	r0, r2
 8004992:	4619      	mov	r1, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	461a      	mov	r2, r3
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	f7fb fc88 	bl	80002b0 <__aeabi_uldivmod>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4613      	mov	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	e04a      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049aa:	4b31      	ldr	r3, [pc, #196]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	099b      	lsrs	r3, r3, #6
 80049b0:	461a      	mov	r2, r3
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049ba:	f04f 0100 	mov.w	r1, #0
 80049be:	ea02 0400 	and.w	r4, r2, r0
 80049c2:	ea03 0501 	and.w	r5, r3, r1
 80049c6:	4620      	mov	r0, r4
 80049c8:	4629      	mov	r1, r5
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	014b      	lsls	r3, r1, #5
 80049d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049d8:	0142      	lsls	r2, r0, #5
 80049da:	4610      	mov	r0, r2
 80049dc:	4619      	mov	r1, r3
 80049de:	1b00      	subs	r0, r0, r4
 80049e0:	eb61 0105 	sbc.w	r1, r1, r5
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	018b      	lsls	r3, r1, #6
 80049ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80049f2:	0182      	lsls	r2, r0, #6
 80049f4:	1a12      	subs	r2, r2, r0
 80049f6:	eb63 0301 	sbc.w	r3, r3, r1
 80049fa:	f04f 0000 	mov.w	r0, #0
 80049fe:	f04f 0100 	mov.w	r1, #0
 8004a02:	00d9      	lsls	r1, r3, #3
 8004a04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a08:	00d0      	lsls	r0, r2, #3
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	1912      	adds	r2, r2, r4
 8004a10:	eb45 0303 	adc.w	r3, r5, r3
 8004a14:	f04f 0000 	mov.w	r0, #0
 8004a18:	f04f 0100 	mov.w	r1, #0
 8004a1c:	0299      	lsls	r1, r3, #10
 8004a1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a22:	0290      	lsls	r0, r2, #10
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4610      	mov	r0, r2
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	f7fb fc3c 	bl	80002b0 <__aeabi_uldivmod>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a40:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	0c1b      	lsrs	r3, r3, #16
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a58:	60bb      	str	r3, [r7, #8]
      break;
 8004a5a:	e002      	b.n	8004a62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a5c:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a5e:	60bb      	str	r3, [r7, #8]
      break;
 8004a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a62:	68bb      	ldr	r3, [r7, #8]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004a6e:	bf00      	nop
 8004a70:	40023800 	.word	0x40023800
 8004a74:	00f42400 	.word	0x00f42400
 8004a78:	007a1200 	.word	0x007a1200

08004a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a80:	4b03      	ldr	r3, [pc, #12]	; (8004a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a82:	681b      	ldr	r3, [r3, #0]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	200000d4 	.word	0x200000d4

08004a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a98:	f7ff fff0 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	0a9b      	lsrs	r3, r3, #10
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	4903      	ldr	r1, [pc, #12]	; (8004ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aaa:	5ccb      	ldrb	r3, [r1, r3]
 8004aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	0800eeec 	.word	0x0800eeec

08004abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ac0:	f7ff ffdc 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	4b05      	ldr	r3, [pc, #20]	; (8004adc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	0b5b      	lsrs	r3, r3, #13
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	4903      	ldr	r1, [pc, #12]	; (8004ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ad2:	5ccb      	ldrb	r3, [r1, r3]
 8004ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	0800eeec 	.word	0x0800eeec

08004ae4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d010      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004b04:	4b87      	ldr	r3, [pc, #540]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b0a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	4984      	ldr	r1, [pc, #528]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8004b22:	2301      	movs	r3, #1
 8004b24:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d010      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004b32:	4b7c      	ldr	r3, [pc, #496]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b38:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	4978      	ldr	r1, [pc, #480]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8004b50:	2301      	movs	r3, #1
 8004b52:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 8083 	beq.w	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b62:	2300      	movs	r3, #0
 8004b64:	60bb      	str	r3, [r7, #8]
 8004b66:	4b6f      	ldr	r3, [pc, #444]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	4a6e      	ldr	r2, [pc, #440]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b70:	6413      	str	r3, [r2, #64]	; 0x40
 8004b72:	4b6c      	ldr	r3, [pc, #432]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7a:	60bb      	str	r3, [r7, #8]
 8004b7c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b7e:	4b6a      	ldr	r3, [pc, #424]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a69      	ldr	r2, [pc, #420]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b88:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b8a:	f7fb fd73 	bl	8000674 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b92:	f7fb fd6f 	bl	8000674 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e162      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ba4:	4b60      	ldr	r3, [pc, #384]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0f0      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bb0:	4b5c      	ldr	r3, [pc, #368]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb8:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d02f      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d028      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bce:	4b55      	ldr	r3, [pc, #340]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bd8:	4b54      	ldr	r3, [pc, #336]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004bda:	2201      	movs	r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bde:	4b53      	ldr	r3, [pc, #332]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004be4:	4a4f      	ldr	r2, [pc, #316]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bea:	4b4e      	ldr	r3, [pc, #312]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d114      	bne.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004bf6:	f7fb fd3d 	bl	8000674 <HAL_GetTick>
 8004bfa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfc:	e00a      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bfe:	f7fb fd39 	bl	8000674 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e12a      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c14:	4b43      	ldr	r3, [pc, #268]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0ee      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c2c:	d10d      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004c2e:	4b3d      	ldr	r3, [pc, #244]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c42:	4938      	ldr	r1, [pc, #224]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	608b      	str	r3, [r1, #8]
 8004c48:	e005      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004c4a:	4b36      	ldr	r3, [pc, #216]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	4a35      	ldr	r2, [pc, #212]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c50:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c54:	6093      	str	r3, [r2, #8]
 8004c56:	4b33      	ldr	r3, [pc, #204]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c62:	4930      	ldr	r1, [pc, #192]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d004      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8004c7a:	4b2d      	ldr	r3, [pc, #180]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004c7c:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0310 	and.w	r3, r3, #16
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004c8a:	4b26      	ldr	r3, [pc, #152]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	4922      	ldr	r1, [pc, #136]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0320 	and.w	r3, r3, #32
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d011      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004cac:	4b1d      	ldr	r3, [pc, #116]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cb2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	491a      	ldr	r1, [pc, #104]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cca:	d101      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004cdc:	4b11      	ldr	r3, [pc, #68]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ce2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	490e      	ldr	r1, [pc, #56]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d004      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b80      	cmp	r3, #128	; 0x80
 8004cfe:	f040 8091 	bne.w	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d02:	4b0c      	ldr	r3, [pc, #48]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d08:	f7fb fcb4 	bl	8000674 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d0e:	e013      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d10:	f7fb fcb0 	bl	8000674 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d90c      	bls.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e0a3      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004d22:	bf00      	nop
 8004d24:	40023800 	.word	0x40023800
 8004d28:	40007000 	.word	0x40007000
 8004d2c:	42470e40 	.word	0x42470e40
 8004d30:	424711e0 	.word	0x424711e0
 8004d34:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d38:	4b4e      	ldr	r3, [pc, #312]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1e5      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004d44:	4a4c      	ldr	r2, [pc, #304]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d023      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d019      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d004      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d88:	d00e      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d019      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d115      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004da6:	d110      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	019b      	lsls	r3, r3, #6
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	061b      	lsls	r3, r3, #24
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	071b      	lsls	r3, r3, #28
 8004dc2:	492c      	ldr	r1, [pc, #176]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d010      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	019b      	lsls	r3, r3, #6
 8004de0:	431a      	orrs	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	061b      	lsls	r3, r3, #24
 8004de8:	431a      	orrs	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	071b      	lsls	r3, r3, #28
 8004df0:	4920      	ldr	r1, [pc, #128]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004df8:	4b20      	ldr	r3, [pc, #128]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004dfe:	f7fb fc39 	bl	8000674 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e04:	e008      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e06:	f7fb fc35 	bl	8000674 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e028      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e18:	4b16      	ldr	r3, [pc, #88]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0f0      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00a      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e30:	4b10      	ldr	r3, [pc, #64]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3e:	490d      	ldr	r1, [pc, #52]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e52:	4b08      	ldr	r3, [pc, #32]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e58:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e60:	4904      	ldr	r1, [pc, #16]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40023800 	.word	0x40023800
 8004e78:	424710d8 	.word	0x424710d8
 8004e7c:	42470068 	.word	0x42470068

08004e80 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d004      	beq.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	f000 80a1 	beq.w	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8004ea6:	e13f      	b.n	8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8004ea8:	4ba3      	ldr	r3, [pc, #652]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eae:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004eba:	f000 8084 	beq.w	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004ec4:	f200 808c 	bhi.w	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ece:	d04f      	beq.n	8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ed6:	f200 8083 	bhi.w	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d006      	beq.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ee6:	d17b      	bne.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ee8:	4b94      	ldr	r3, [pc, #592]	; (800513c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004eea:	617b      	str	r3, [r7, #20]
          break;
 8004eec:	e07b      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8004eee:	4b92      	ldr	r3, [pc, #584]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004efc:	d109      	bne.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004efe:	4b8e      	ldr	r3, [pc, #568]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f08:	4a8c      	ldr	r2, [pc, #560]	; (800513c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0e:	613b      	str	r3, [r7, #16]
 8004f10:	e019      	b.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004f12:	4b89      	ldr	r3, [pc, #548]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f1e:	d109      	bne.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004f20:	4b85      	ldr	r3, [pc, #532]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f2a:	4a85      	ldr	r2, [pc, #532]	; (8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f30:	613b      	str	r3, [r7, #16]
 8004f32:	e008      	b.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004f34:	4b80      	ldr	r3, [pc, #512]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f3e:	4a81      	ldr	r2, [pc, #516]	; (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f44:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004f46:	4b7c      	ldr	r3, [pc, #496]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f4c:	099b      	lsrs	r3, r3, #6
 8004f4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	fb02 f303 	mul.w	r3, r2, r3
 8004f58:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004f5a:	4b77      	ldr	r3, [pc, #476]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f60:	0f1b      	lsrs	r3, r3, #28
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6c:	617b      	str	r3, [r7, #20]
          break;
 8004f6e:	e03a      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004f70:	4b71      	ldr	r3, [pc, #452]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f7c:	d108      	bne.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f7e:	4b6e      	ldr	r3, [pc, #440]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f86:	4a6e      	ldr	r2, [pc, #440]	; (8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	e007      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f90:	4b69      	ldr	r3, [pc, #420]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f98:	4a6a      	ldr	r2, [pc, #424]	; (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9e:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004fa0:	4b65      	ldr	r3, [pc, #404]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	099b      	lsrs	r3, r3, #6
 8004fa6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	fb02 f303 	mul.w	r3, r2, r3
 8004fb0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004fb2:	4b61      	ldr	r3, [pc, #388]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	0f1b      	lsrs	r3, r3, #28
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc2:	617b      	str	r3, [r7, #20]
          break;
 8004fc4:	e00f      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004fc6:	4b5c      	ldr	r3, [pc, #368]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fd2:	d102      	bne.n	8004fda <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          {
            frequency = HSE_VALUE;
 8004fd4:	4b5a      	ldr	r3, [pc, #360]	; (8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004fd6:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004fd8:	e005      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
            frequency = HSI_VALUE;
 8004fda:	4b5a      	ldr	r3, [pc, #360]	; (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004fdc:	617b      	str	r3, [r7, #20]
          break;
 8004fde:	e002      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	617b      	str	r3, [r7, #20]
          break;
 8004fe4:	bf00      	nop
        }
      }
      break;
 8004fe6:	e09f      	b.n	8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8004fe8:	4b53      	ldr	r3, [pc, #332]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fee:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004ffa:	f000 8084 	beq.w	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005004:	f200 808c 	bhi.w	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800500e:	d04f      	beq.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005016:	f200 8083 	bhi.w	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d006      	beq.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005026:	d17b      	bne.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005028:	4b44      	ldr	r3, [pc, #272]	; (800513c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800502a:	617b      	str	r3, [r7, #20]
          break;
 800502c:	e07b      	b.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 800502e:	4b42      	ldr	r3, [pc, #264]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005034:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005038:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800503c:	d109      	bne.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800503e:	4b3e      	ldr	r3, [pc, #248]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005048:	4a3c      	ldr	r2, [pc, #240]	; (800513c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800504a:	fbb2 f3f3 	udiv	r3, r2, r3
 800504e:	613b      	str	r3, [r7, #16]
 8005050:	e019      	b.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005052:	4b39      	ldr	r3, [pc, #228]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800505a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800505e:	d109      	bne.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005060:	4b35      	ldr	r3, [pc, #212]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005066:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800506a:	4a35      	ldr	r2, [pc, #212]	; (8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800506c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005070:	613b      	str	r3, [r7, #16]
 8005072:	e008      	b.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005074:	4b30      	ldr	r3, [pc, #192]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800507a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800507e:	4a31      	ldr	r2, [pc, #196]	; (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005080:	fbb2 f3f3 	udiv	r3, r2, r3
 8005084:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005086:	4b2c      	ldr	r3, [pc, #176]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800508c:	099b      	lsrs	r3, r3, #6
 800508e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	fb02 f303 	mul.w	r3, r2, r3
 8005098:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800509a:	4b27      	ldr	r3, [pc, #156]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800509c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050a0:	0f1b      	lsrs	r3, r3, #28
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ac:	617b      	str	r3, [r7, #20]
          break;
 80050ae:	e03a      	b.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80050b0:	4b21      	ldr	r3, [pc, #132]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050bc:	d108      	bne.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80050be:	4b1e      	ldr	r3, [pc, #120]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050c6:	4a1e      	ldr	r2, [pc, #120]	; (8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80050c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050cc:	613b      	str	r3, [r7, #16]
 80050ce:	e007      	b.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80050d0:	4b19      	ldr	r3, [pc, #100]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050d8:	4a1a      	ldr	r2, [pc, #104]	; (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80050da:	fbb2 f3f3 	udiv	r3, r2, r3
 80050de:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80050e0:	4b15      	ldr	r3, [pc, #84]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	099b      	lsrs	r3, r3, #6
 80050e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	fb02 f303 	mul.w	r3, r2, r3
 80050f0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80050f2:	4b11      	ldr	r3, [pc, #68]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	0f1b      	lsrs	r3, r3, #28
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005102:	617b      	str	r3, [r7, #20]
          break;
 8005104:	e00f      	b.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005106:	4b0c      	ldr	r3, [pc, #48]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800510e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005112:	d102      	bne.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          {
            frequency = HSE_VALUE;
 8005114:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005116:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005118:	e005      	b.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
            frequency = HSI_VALUE;
 800511a:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800511c:	617b      	str	r3, [r7, #20]
          break;
 800511e:	e002      	b.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	617b      	str	r3, [r7, #20]
          break;
 8005124:	bf00      	nop
        }
      }
      break;
 8005126:	bf00      	nop
    }
  }
  return frequency;
 8005128:	697b      	ldr	r3, [r7, #20]
}
 800512a:	4618      	mov	r0, r3
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40023800 	.word	0x40023800
 800513c:	00bb8000 	.word	0x00bb8000
 8005140:	007a1200 	.word	0x007a1200
 8005144:	00f42400 	.word	0x00f42400

08005148 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	d075      	beq.n	800524c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005160:	4ba2      	ldr	r3, [pc, #648]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 030c 	and.w	r3, r3, #12
 8005168:	2b04      	cmp	r3, #4
 800516a:	d00c      	beq.n	8005186 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800516c:	4b9f      	ldr	r3, [pc, #636]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005174:	2b08      	cmp	r3, #8
 8005176:	d112      	bne.n	800519e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005178:	4b9c      	ldr	r3, [pc, #624]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005184:	d10b      	bne.n	800519e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005186:	4b99      	ldr	r3, [pc, #612]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d05b      	beq.n	800524a <HAL_RCC_OscConfig+0x102>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d157      	bne.n	800524a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e20b      	b.n	80055b6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a6:	d106      	bne.n	80051b6 <HAL_RCC_OscConfig+0x6e>
 80051a8:	4b90      	ldr	r3, [pc, #576]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a8f      	ldr	r2, [pc, #572]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 80051ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	e01d      	b.n	80051f2 <HAL_RCC_OscConfig+0xaa>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051be:	d10c      	bne.n	80051da <HAL_RCC_OscConfig+0x92>
 80051c0:	4b8a      	ldr	r3, [pc, #552]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a89      	ldr	r2, [pc, #548]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 80051c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051ca:	6013      	str	r3, [r2, #0]
 80051cc:	4b87      	ldr	r3, [pc, #540]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a86      	ldr	r2, [pc, #536]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 80051d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d6:	6013      	str	r3, [r2, #0]
 80051d8:	e00b      	b.n	80051f2 <HAL_RCC_OscConfig+0xaa>
 80051da:	4b84      	ldr	r3, [pc, #528]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a83      	ldr	r2, [pc, #524]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 80051e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	4b81      	ldr	r3, [pc, #516]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a80      	ldr	r2, [pc, #512]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 80051ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d013      	beq.n	8005222 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fa:	f7fb fa3b 	bl	8000674 <HAL_GetTick>
 80051fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005200:	e008      	b.n	8005214 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005202:	f7fb fa37 	bl	8000674 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b64      	cmp	r3, #100	; 0x64
 800520e:	d901      	bls.n	8005214 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e1d0      	b.n	80055b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005214:	4b75      	ldr	r3, [pc, #468]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d0f0      	beq.n	8005202 <HAL_RCC_OscConfig+0xba>
 8005220:	e014      	b.n	800524c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005222:	f7fb fa27 	bl	8000674 <HAL_GetTick>
 8005226:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005228:	e008      	b.n	800523c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800522a:	f7fb fa23 	bl	8000674 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b64      	cmp	r3, #100	; 0x64
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e1bc      	b.n	80055b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800523c:	4b6b      	ldr	r3, [pc, #428]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1f0      	bne.n	800522a <HAL_RCC_OscConfig+0xe2>
 8005248:	e000      	b.n	800524c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800524a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d063      	beq.n	8005320 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005258:	4b64      	ldr	r3, [pc, #400]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 030c 	and.w	r3, r3, #12
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00b      	beq.n	800527c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005264:	4b61      	ldr	r3, [pc, #388]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800526c:	2b08      	cmp	r3, #8
 800526e:	d11c      	bne.n	80052aa <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005270:	4b5e      	ldr	r3, [pc, #376]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d116      	bne.n	80052aa <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800527c:	4b5b      	ldr	r3, [pc, #364]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <HAL_RCC_OscConfig+0x14c>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d001      	beq.n	8005294 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e190      	b.n	80055b6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005294:	4b55      	ldr	r3, [pc, #340]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	4952      	ldr	r1, [pc, #328]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052a8:	e03a      	b.n	8005320 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d020      	beq.n	80052f4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052b2:	4b4f      	ldr	r3, [pc, #316]	; (80053f0 <HAL_RCC_OscConfig+0x2a8>)
 80052b4:	2201      	movs	r2, #1
 80052b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b8:	f7fb f9dc 	bl	8000674 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052c0:	f7fb f9d8 	bl	8000674 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e171      	b.n	80055b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052d2:	4b46      	ldr	r3, [pc, #280]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0f0      	beq.n	80052c0 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052de:	4b43      	ldr	r3, [pc, #268]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	493f      	ldr	r1, [pc, #252]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	600b      	str	r3, [r1, #0]
 80052f2:	e015      	b.n	8005320 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052f4:	4b3e      	ldr	r3, [pc, #248]	; (80053f0 <HAL_RCC_OscConfig+0x2a8>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fa:	f7fb f9bb 	bl	8000674 <HAL_GetTick>
 80052fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005300:	e008      	b.n	8005314 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005302:	f7fb f9b7 	bl	8000674 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d901      	bls.n	8005314 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e150      	b.n	80055b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005314:	4b35      	ldr	r3, [pc, #212]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1f0      	bne.n	8005302 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0308 	and.w	r3, r3, #8
 8005328:	2b00      	cmp	r3, #0
 800532a:	d030      	beq.n	800538e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d016      	beq.n	8005362 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005334:	4b2f      	ldr	r3, [pc, #188]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 8005336:	2201      	movs	r2, #1
 8005338:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800533a:	f7fb f99b 	bl	8000674 <HAL_GetTick>
 800533e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005340:	e008      	b.n	8005354 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005342:	f7fb f997 	bl	8000674 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d901      	bls.n	8005354 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e130      	b.n	80055b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005354:	4b25      	ldr	r3, [pc, #148]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 8005356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0f0      	beq.n	8005342 <HAL_RCC_OscConfig+0x1fa>
 8005360:	e015      	b.n	800538e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005362:	4b24      	ldr	r3, [pc, #144]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005368:	f7fb f984 	bl	8000674 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005370:	f7fb f980 	bl	8000674 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e119      	b.n	80055b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005382:	4b1a      	ldr	r3, [pc, #104]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 8005384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1f0      	bne.n	8005370 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0304 	and.w	r3, r3, #4
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 809f 	beq.w	80054da <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800539c:	2300      	movs	r3, #0
 800539e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053a0:	4b12      	ldr	r3, [pc, #72]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 80053a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10f      	bne.n	80053cc <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ac:	2300      	movs	r3, #0
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	4b0e      	ldr	r3, [pc, #56]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 80053b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b4:	4a0d      	ldr	r2, [pc, #52]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 80053b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ba:	6413      	str	r3, [r2, #64]	; 0x40
 80053bc:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <HAL_RCC_OscConfig+0x2a4>)
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80053c8:	2301      	movs	r3, #1
 80053ca:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053cc:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <HAL_RCC_OscConfig+0x2b0>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d120      	bne.n	800541a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053d8:	4b07      	ldr	r3, [pc, #28]	; (80053f8 <HAL_RCC_OscConfig+0x2b0>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a06      	ldr	r2, [pc, #24]	; (80053f8 <HAL_RCC_OscConfig+0x2b0>)
 80053de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053e4:	f7fb f946 	bl	8000674 <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ea:	e010      	b.n	800540e <HAL_RCC_OscConfig+0x2c6>
 80053ec:	40023800 	.word	0x40023800
 80053f0:	42470000 	.word	0x42470000
 80053f4:	42470e80 	.word	0x42470e80
 80053f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053fc:	f7fb f93a 	bl	8000674 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e0d3      	b.n	80055b6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800540e:	4b6c      	ldr	r3, [pc, #432]	; (80055c0 <HAL_RCC_OscConfig+0x478>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0f0      	beq.n	80053fc <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d106      	bne.n	8005430 <HAL_RCC_OscConfig+0x2e8>
 8005422:	4b68      	ldr	r3, [pc, #416]	; (80055c4 <HAL_RCC_OscConfig+0x47c>)
 8005424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005426:	4a67      	ldr	r2, [pc, #412]	; (80055c4 <HAL_RCC_OscConfig+0x47c>)
 8005428:	f043 0301 	orr.w	r3, r3, #1
 800542c:	6713      	str	r3, [r2, #112]	; 0x70
 800542e:	e01c      	b.n	800546a <HAL_RCC_OscConfig+0x322>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	2b05      	cmp	r3, #5
 8005436:	d10c      	bne.n	8005452 <HAL_RCC_OscConfig+0x30a>
 8005438:	4b62      	ldr	r3, [pc, #392]	; (80055c4 <HAL_RCC_OscConfig+0x47c>)
 800543a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543c:	4a61      	ldr	r2, [pc, #388]	; (80055c4 <HAL_RCC_OscConfig+0x47c>)
 800543e:	f043 0304 	orr.w	r3, r3, #4
 8005442:	6713      	str	r3, [r2, #112]	; 0x70
 8005444:	4b5f      	ldr	r3, [pc, #380]	; (80055c4 <HAL_RCC_OscConfig+0x47c>)
 8005446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005448:	4a5e      	ldr	r2, [pc, #376]	; (80055c4 <HAL_RCC_OscConfig+0x47c>)
 800544a:	f043 0301 	orr.w	r3, r3, #1
 800544e:	6713      	str	r3, [r2, #112]	; 0x70
 8005450:	e00b      	b.n	800546a <HAL_RCC_OscConfig+0x322>
 8005452:	4b5c      	ldr	r3, [pc, #368]	; (80055c4 <HAL_RCC_OscConfig+0x47c>)
 8005454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005456:	4a5b      	ldr	r2, [pc, #364]	; (80055c4 <HAL_RCC_OscConfig+0x47c>)
 8005458:	f023 0301 	bic.w	r3, r3, #1
 800545c:	6713      	str	r3, [r2, #112]	; 0x70
 800545e:	4b59      	ldr	r3, [pc, #356]	; (80055c4 <HAL_RCC_OscConfig+0x47c>)
 8005460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005462:	4a58      	ldr	r2, [pc, #352]	; (80055c4 <HAL_RCC_OscConfig+0x47c>)
 8005464:	f023 0304 	bic.w	r3, r3, #4
 8005468:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d015      	beq.n	800549e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005472:	f7fb f8ff 	bl	8000674 <HAL_GetTick>
 8005476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005478:	e00a      	b.n	8005490 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800547a:	f7fb f8fb 	bl	8000674 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	f241 3288 	movw	r2, #5000	; 0x1388
 8005488:	4293      	cmp	r3, r2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e092      	b.n	80055b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005490:	4b4c      	ldr	r3, [pc, #304]	; (80055c4 <HAL_RCC_OscConfig+0x47c>)
 8005492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0ee      	beq.n	800547a <HAL_RCC_OscConfig+0x332>
 800549c:	e014      	b.n	80054c8 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800549e:	f7fb f8e9 	bl	8000674 <HAL_GetTick>
 80054a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054a4:	e00a      	b.n	80054bc <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054a6:	f7fb f8e5 	bl	8000674 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d901      	bls.n	80054bc <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e07c      	b.n	80055b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054bc:	4b41      	ldr	r3, [pc, #260]	; (80055c4 <HAL_RCC_OscConfig+0x47c>)
 80054be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1ee      	bne.n	80054a6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054c8:	7dfb      	ldrb	r3, [r7, #23]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d105      	bne.n	80054da <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ce:	4b3d      	ldr	r3, [pc, #244]	; (80055c4 <HAL_RCC_OscConfig+0x47c>)
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	4a3c      	ldr	r2, [pc, #240]	; (80055c4 <HAL_RCC_OscConfig+0x47c>)
 80054d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d068      	beq.n	80055b4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054e2:	4b38      	ldr	r3, [pc, #224]	; (80055c4 <HAL_RCC_OscConfig+0x47c>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 030c 	and.w	r3, r3, #12
 80054ea:	2b08      	cmp	r3, #8
 80054ec:	d060      	beq.n	80055b0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d145      	bne.n	8005582 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f6:	4b34      	ldr	r3, [pc, #208]	; (80055c8 <HAL_RCC_OscConfig+0x480>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fc:	f7fb f8ba 	bl	8000674 <HAL_GetTick>
 8005500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005504:	f7fb f8b6 	bl	8000674 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e04f      	b.n	80055b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005516:	4b2b      	ldr	r3, [pc, #172]	; (80055c4 <HAL_RCC_OscConfig+0x47c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1f0      	bne.n	8005504 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	69da      	ldr	r2, [r3, #28]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	019b      	lsls	r3, r3, #6
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005538:	085b      	lsrs	r3, r3, #1
 800553a:	3b01      	subs	r3, #1
 800553c:	041b      	lsls	r3, r3, #16
 800553e:	431a      	orrs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	061b      	lsls	r3, r3, #24
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554c:	071b      	lsls	r3, r3, #28
 800554e:	491d      	ldr	r1, [pc, #116]	; (80055c4 <HAL_RCC_OscConfig+0x47c>)
 8005550:	4313      	orrs	r3, r2
 8005552:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005554:	4b1c      	ldr	r3, [pc, #112]	; (80055c8 <HAL_RCC_OscConfig+0x480>)
 8005556:	2201      	movs	r2, #1
 8005558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555a:	f7fb f88b 	bl	8000674 <HAL_GetTick>
 800555e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005560:	e008      	b.n	8005574 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005562:	f7fb f887 	bl	8000674 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d901      	bls.n	8005574 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e020      	b.n	80055b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005574:	4b13      	ldr	r3, [pc, #76]	; (80055c4 <HAL_RCC_OscConfig+0x47c>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0f0      	beq.n	8005562 <HAL_RCC_OscConfig+0x41a>
 8005580:	e018      	b.n	80055b4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005582:	4b11      	ldr	r3, [pc, #68]	; (80055c8 <HAL_RCC_OscConfig+0x480>)
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005588:	f7fb f874 	bl	8000674 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005590:	f7fb f870 	bl	8000674 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e009      	b.n	80055b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055a2:	4b08      	ldr	r3, [pc, #32]	; (80055c4 <HAL_RCC_OscConfig+0x47c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1f0      	bne.n	8005590 <HAL_RCC_OscConfig+0x448>
 80055ae:	e001      	b.n	80055b4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e000      	b.n	80055b6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3718      	adds	r7, #24
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	40007000 	.word	0x40007000
 80055c4:	40023800 	.word	0x40023800
 80055c8:	42470060 	.word	0x42470060

080055cc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e01c      	b.n	8005618 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	795b      	ldrb	r3, [r3, #5]
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d105      	bne.n	80055f4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f005 feca 	bl	800b388 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f042 0204 	orr.w	r2, r2, #4
 8005608:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f003 0320 	and.w	r3, r3, #32
 8005636:	2b20      	cmp	r3, #32
 8005638:	d105      	bne.n	8005646 <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2210      	movs	r2, #16
 800563e:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8005640:	2301      	movs	r3, #1
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	e00b      	b.n	800565e <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005650:	2b40      	cmp	r3, #64	; 0x40
 8005652:	d104      	bne.n	800565e <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2208      	movs	r2, #8
 8005658:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 800565a:	2301      	movs	r3, #1
 800565c:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d10a      	bne.n	800567a <HAL_RNG_IRQHandler+0x5a>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2204      	movs	r2, #4
 8005668:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f839 	bl	80056e2 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8005678:	605a      	str	r2, [r3, #4]
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b01      	cmp	r3, #1
 8005686:	d11d      	bne.n	80056c4 <HAL_RNG_IRQHandler+0xa4>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0208 	bic.w	r2, r2, #8
 8005696:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689a      	ldr	r2, [r3, #8]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	795b      	ldrb	r3, [r3, #5]
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d00b      	beq.n	80056c4 <HAL_RNG_IRQHandler+0xa4>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	4619      	mov	r1, r3
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f804 	bl	80056cc <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 80056c4:	bf00      	nop
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 80056d6:	bf00      	nop
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 80056ea:	bf00      	nop
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b086      	sub	sp, #24
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e083      	b.n	8005812 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f005 fe5a 	bl	800b3d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6812      	ldr	r2, [r2, #0]
 8005736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800573a:	f023 0307 	bic.w	r3, r3, #7
 800573e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3304      	adds	r3, #4
 8005748:	4619      	mov	r1, r3
 800574a:	4610      	mov	r0, r2
 800574c:	f000 f89e 	bl	800588c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	4313      	orrs	r3, r2
 8005770:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005778:	f023 0303 	bic.w	r3, r3, #3
 800577c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	689a      	ldr	r2, [r3, #8]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	021b      	lsls	r3, r3, #8
 8005788:	4313      	orrs	r3, r2
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	4313      	orrs	r3, r2
 800578e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005796:	f023 030c 	bic.w	r3, r3, #12
 800579a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	68da      	ldr	r2, [r3, #12]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	69db      	ldr	r3, [r3, #28]
 80057b0:	021b      	lsls	r3, r3, #8
 80057b2:	4313      	orrs	r3, r2
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	011a      	lsls	r2, r3, #4
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	031b      	lsls	r3, r3, #12
 80057c6:	4313      	orrs	r3, r2
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80057d4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80057dc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	4313      	orrs	r3, r2
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b082      	sub	sp, #8
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_TIM_Encoder_Start+0x18>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b04      	cmp	r3, #4
 800582e:	d008      	beq.n	8005842 <HAL_TIM_Encoder_Start+0x28>
 8005830:	e00f      	b.n	8005852 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2201      	movs	r2, #1
 8005838:	2100      	movs	r1, #0
 800583a:	4618      	mov	r0, r3
 800583c:	f000 f8c6 	bl	80059cc <TIM_CCxChannelCmd>
      break;
 8005840:	e016      	b.n	8005870 <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2201      	movs	r2, #1
 8005848:	2104      	movs	r1, #4
 800584a:	4618      	mov	r0, r3
 800584c:	f000 f8be 	bl	80059cc <TIM_CCxChannelCmd>
      break;
 8005850:	e00e      	b.n	8005870 <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2201      	movs	r2, #1
 8005858:	2100      	movs	r1, #0
 800585a:	4618      	mov	r0, r3
 800585c:	f000 f8b6 	bl	80059cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2201      	movs	r2, #1
 8005866:	2104      	movs	r1, #4
 8005868:	4618      	mov	r0, r3
 800586a:	f000 f8af 	bl	80059cc <TIM_CCxChannelCmd>
      break;
 800586e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0201 	orr.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a40      	ldr	r2, [pc, #256]	; (80059a0 <TIM_Base_SetConfig+0x114>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d013      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058aa:	d00f      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a3d      	ldr	r2, [pc, #244]	; (80059a4 <TIM_Base_SetConfig+0x118>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d00b      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a3c      	ldr	r2, [pc, #240]	; (80059a8 <TIM_Base_SetConfig+0x11c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d007      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a3b      	ldr	r2, [pc, #236]	; (80059ac <TIM_Base_SetConfig+0x120>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d003      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a3a      	ldr	r2, [pc, #232]	; (80059b0 <TIM_Base_SetConfig+0x124>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d108      	bne.n	80058de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a2f      	ldr	r2, [pc, #188]	; (80059a0 <TIM_Base_SetConfig+0x114>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d02b      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ec:	d027      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a2c      	ldr	r2, [pc, #176]	; (80059a4 <TIM_Base_SetConfig+0x118>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d023      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a2b      	ldr	r2, [pc, #172]	; (80059a8 <TIM_Base_SetConfig+0x11c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d01f      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a2a      	ldr	r2, [pc, #168]	; (80059ac <TIM_Base_SetConfig+0x120>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d01b      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a29      	ldr	r2, [pc, #164]	; (80059b0 <TIM_Base_SetConfig+0x124>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d017      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a28      	ldr	r2, [pc, #160]	; (80059b4 <TIM_Base_SetConfig+0x128>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d013      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a27      	ldr	r2, [pc, #156]	; (80059b8 <TIM_Base_SetConfig+0x12c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00f      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a26      	ldr	r2, [pc, #152]	; (80059bc <TIM_Base_SetConfig+0x130>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00b      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a25      	ldr	r2, [pc, #148]	; (80059c0 <TIM_Base_SetConfig+0x134>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d007      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a24      	ldr	r2, [pc, #144]	; (80059c4 <TIM_Base_SetConfig+0x138>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d003      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a23      	ldr	r2, [pc, #140]	; (80059c8 <TIM_Base_SetConfig+0x13c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d108      	bne.n	8005950 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	4313      	orrs	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a0a      	ldr	r2, [pc, #40]	; (80059a0 <TIM_Base_SetConfig+0x114>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d003      	beq.n	8005984 <TIM_Base_SetConfig+0xf8>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a0c      	ldr	r2, [pc, #48]	; (80059b0 <TIM_Base_SetConfig+0x124>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d103      	bne.n	800598c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	615a      	str	r2, [r3, #20]
}
 8005992:	bf00      	nop
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40010000 	.word	0x40010000
 80059a4:	40000400 	.word	0x40000400
 80059a8:	40000800 	.word	0x40000800
 80059ac:	40000c00 	.word	0x40000c00
 80059b0:	40010400 	.word	0x40010400
 80059b4:	40014000 	.word	0x40014000
 80059b8:	40014400 	.word	0x40014400
 80059bc:	40014800 	.word	0x40014800
 80059c0:	40001800 	.word	0x40001800
 80059c4:	40001c00 	.word	0x40001c00
 80059c8:	40002000 	.word	0x40002000

080059cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f003 031f 	and.w	r3, r3, #31
 80059de:	2201      	movs	r2, #1
 80059e0:	fa02 f303 	lsl.w	r3, r2, r3
 80059e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6a1a      	ldr	r2, [r3, #32]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	43db      	mvns	r3, r3
 80059ee:	401a      	ands	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6a1a      	ldr	r2, [r3, #32]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f003 031f 	and.w	r3, r3, #31
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	fa01 f303 	lsl.w	r3, r1, r3
 8005a04:	431a      	orrs	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	621a      	str	r2, [r3, #32]
}
 8005a0a:	bf00      	nop
 8005a0c:	371c      	adds	r7, #28
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
	...

08005a18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d101      	bne.n	8005a30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	e05a      	b.n	8005ae6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a21      	ldr	r2, [pc, #132]	; (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d022      	beq.n	8005aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a7c:	d01d      	beq.n	8005aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a1d      	ldr	r2, [pc, #116]	; (8005af8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d018      	beq.n	8005aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a1b      	ldr	r2, [pc, #108]	; (8005afc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d013      	beq.n	8005aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a1a      	ldr	r2, [pc, #104]	; (8005b00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d00e      	beq.n	8005aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a18      	ldr	r2, [pc, #96]	; (8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d009      	beq.n	8005aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a17      	ldr	r2, [pc, #92]	; (8005b08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d004      	beq.n	8005aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a15      	ldr	r2, [pc, #84]	; (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d10c      	bne.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ac0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	40010000 	.word	0x40010000
 8005af8:	40000400 	.word	0x40000400
 8005afc:	40000800 	.word	0x40000800
 8005b00:	40000c00 	.word	0x40000c00
 8005b04:	40010400 	.word	0x40010400
 8005b08:	40014000 	.word	0x40014000
 8005b0c:	40001800 	.word	0x40001800

08005b10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e03f      	b.n	8005ba2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f005 fcca 	bl	800b4d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2224      	movs	r2, #36	; 0x24
 8005b40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f829 	bl	8005bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	691a      	ldr	r2, [r3, #16]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	695a      	ldr	r2, [r3, #20]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb0:	b0bd      	sub	sp, #244	; 0xf4
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc8:	68d9      	ldr	r1, [r3, #12]
 8005bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	ea40 0301 	orr.w	r3, r0, r1
 8005bd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	431a      	orrs	r2, r3
 8005be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	431a      	orrs	r2, r3
 8005bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8005bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c04:	f021 010c 	bic.w	r1, r1, #12
 8005c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005c12:	430b      	orrs	r3, r1
 8005c14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c26:	6999      	ldr	r1, [r3, #24]
 8005c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	ea40 0301 	orr.w	r3, r0, r1
 8005c32:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c3e:	f040 81a5 	bne.w	8005f8c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	4bcd      	ldr	r3, [pc, #820]	; (8005f80 <UART_SetConfig+0x3d4>)
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d006      	beq.n	8005c5c <UART_SetConfig+0xb0>
 8005c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	4bcb      	ldr	r3, [pc, #812]	; (8005f84 <UART_SetConfig+0x3d8>)
 8005c56:	429a      	cmp	r2, r3
 8005c58:	f040 80cb 	bne.w	8005df2 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c5c:	f7fe ff2e 	bl	8004abc <HAL_RCC_GetPCLK2Freq>
 8005c60:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c68:	461c      	mov	r4, r3
 8005c6a:	f04f 0500 	mov.w	r5, #0
 8005c6e:	4622      	mov	r2, r4
 8005c70:	462b      	mov	r3, r5
 8005c72:	1891      	adds	r1, r2, r2
 8005c74:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005c78:	415b      	adcs	r3, r3
 8005c7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005c7e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005c82:	1912      	adds	r2, r2, r4
 8005c84:	eb45 0303 	adc.w	r3, r5, r3
 8005c88:	f04f 0000 	mov.w	r0, #0
 8005c8c:	f04f 0100 	mov.w	r1, #0
 8005c90:	00d9      	lsls	r1, r3, #3
 8005c92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c96:	00d0      	lsls	r0, r2, #3
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	1911      	adds	r1, r2, r4
 8005c9e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8005ca2:	416b      	adcs	r3, r5
 8005ca4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	f04f 0300 	mov.w	r3, #0
 8005cb4:	1891      	adds	r1, r2, r2
 8005cb6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8005cba:	415b      	adcs	r3, r3
 8005cbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005cc0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005cc4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005cc8:	f7fa faf2 	bl	80002b0 <__aeabi_uldivmod>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4bad      	ldr	r3, [pc, #692]	; (8005f88 <UART_SetConfig+0x3dc>)
 8005cd2:	fba3 2302 	umull	r2, r3, r3, r2
 8005cd6:	095b      	lsrs	r3, r3, #5
 8005cd8:	011e      	lsls	r6, r3, #4
 8005cda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cde:	461c      	mov	r4, r3
 8005ce0:	f04f 0500 	mov.w	r5, #0
 8005ce4:	4622      	mov	r2, r4
 8005ce6:	462b      	mov	r3, r5
 8005ce8:	1891      	adds	r1, r2, r2
 8005cea:	67b9      	str	r1, [r7, #120]	; 0x78
 8005cec:	415b      	adcs	r3, r3
 8005cee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005cf0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005cf4:	1912      	adds	r2, r2, r4
 8005cf6:	eb45 0303 	adc.w	r3, r5, r3
 8005cfa:	f04f 0000 	mov.w	r0, #0
 8005cfe:	f04f 0100 	mov.w	r1, #0
 8005d02:	00d9      	lsls	r1, r3, #3
 8005d04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d08:	00d0      	lsls	r0, r2, #3
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	1911      	adds	r1, r2, r4
 8005d10:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8005d14:	416b      	adcs	r3, r5
 8005d16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	461a      	mov	r2, r3
 8005d22:	f04f 0300 	mov.w	r3, #0
 8005d26:	1891      	adds	r1, r2, r2
 8005d28:	6739      	str	r1, [r7, #112]	; 0x70
 8005d2a:	415b      	adcs	r3, r3
 8005d2c:	677b      	str	r3, [r7, #116]	; 0x74
 8005d2e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005d32:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005d36:	f7fa fabb 	bl	80002b0 <__aeabi_uldivmod>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4b92      	ldr	r3, [pc, #584]	; (8005f88 <UART_SetConfig+0x3dc>)
 8005d40:	fba3 1302 	umull	r1, r3, r3, r2
 8005d44:	095b      	lsrs	r3, r3, #5
 8005d46:	2164      	movs	r1, #100	; 0x64
 8005d48:	fb01 f303 	mul.w	r3, r1, r3
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	3332      	adds	r3, #50	; 0x32
 8005d52:	4a8d      	ldr	r2, [pc, #564]	; (8005f88 <UART_SetConfig+0x3dc>)
 8005d54:	fba2 2303 	umull	r2, r3, r2, r3
 8005d58:	095b      	lsrs	r3, r3, #5
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d60:	441e      	add	r6, r3
 8005d62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d66:	4618      	mov	r0, r3
 8005d68:	f04f 0100 	mov.w	r1, #0
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	1894      	adds	r4, r2, r2
 8005d72:	66bc      	str	r4, [r7, #104]	; 0x68
 8005d74:	415b      	adcs	r3, r3
 8005d76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d78:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005d7c:	1812      	adds	r2, r2, r0
 8005d7e:	eb41 0303 	adc.w	r3, r1, r3
 8005d82:	f04f 0400 	mov.w	r4, #0
 8005d86:	f04f 0500 	mov.w	r5, #0
 8005d8a:	00dd      	lsls	r5, r3, #3
 8005d8c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d90:	00d4      	lsls	r4, r2, #3
 8005d92:	4622      	mov	r2, r4
 8005d94:	462b      	mov	r3, r5
 8005d96:	1814      	adds	r4, r2, r0
 8005d98:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8005d9c:	414b      	adcs	r3, r1
 8005d9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	461a      	mov	r2, r3
 8005daa:	f04f 0300 	mov.w	r3, #0
 8005dae:	1891      	adds	r1, r2, r2
 8005db0:	6639      	str	r1, [r7, #96]	; 0x60
 8005db2:	415b      	adcs	r3, r3
 8005db4:	667b      	str	r3, [r7, #100]	; 0x64
 8005db6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005dba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005dbe:	f7fa fa77 	bl	80002b0 <__aeabi_uldivmod>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	4b70      	ldr	r3, [pc, #448]	; (8005f88 <UART_SetConfig+0x3dc>)
 8005dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8005dcc:	095b      	lsrs	r3, r3, #5
 8005dce:	2164      	movs	r1, #100	; 0x64
 8005dd0:	fb01 f303 	mul.w	r3, r1, r3
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	3332      	adds	r3, #50	; 0x32
 8005dda:	4a6b      	ldr	r2, [pc, #428]	; (8005f88 <UART_SetConfig+0x3dc>)
 8005ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8005de0:	095b      	lsrs	r3, r3, #5
 8005de2:	f003 0207 	and.w	r2, r3, #7
 8005de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4432      	add	r2, r6
 8005dee:	609a      	str	r2, [r3, #8]
 8005df0:	e26d      	b.n	80062ce <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005df2:	f7fe fe4f 	bl	8004a94 <HAL_RCC_GetPCLK1Freq>
 8005df6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dfa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005dfe:	461c      	mov	r4, r3
 8005e00:	f04f 0500 	mov.w	r5, #0
 8005e04:	4622      	mov	r2, r4
 8005e06:	462b      	mov	r3, r5
 8005e08:	1891      	adds	r1, r2, r2
 8005e0a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e0c:	415b      	adcs	r3, r3
 8005e0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e14:	1912      	adds	r2, r2, r4
 8005e16:	eb45 0303 	adc.w	r3, r5, r3
 8005e1a:	f04f 0000 	mov.w	r0, #0
 8005e1e:	f04f 0100 	mov.w	r1, #0
 8005e22:	00d9      	lsls	r1, r3, #3
 8005e24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e28:	00d0      	lsls	r0, r2, #3
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	1911      	adds	r1, r2, r4
 8005e30:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8005e34:	416b      	adcs	r3, r5
 8005e36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	461a      	mov	r2, r3
 8005e42:	f04f 0300 	mov.w	r3, #0
 8005e46:	1891      	adds	r1, r2, r2
 8005e48:	6539      	str	r1, [r7, #80]	; 0x50
 8005e4a:	415b      	adcs	r3, r3
 8005e4c:	657b      	str	r3, [r7, #84]	; 0x54
 8005e4e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e52:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8005e56:	f7fa fa2b 	bl	80002b0 <__aeabi_uldivmod>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	4b4a      	ldr	r3, [pc, #296]	; (8005f88 <UART_SetConfig+0x3dc>)
 8005e60:	fba3 2302 	umull	r2, r3, r3, r2
 8005e64:	095b      	lsrs	r3, r3, #5
 8005e66:	011e      	lsls	r6, r3, #4
 8005e68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e6c:	461c      	mov	r4, r3
 8005e6e:	f04f 0500 	mov.w	r5, #0
 8005e72:	4622      	mov	r2, r4
 8005e74:	462b      	mov	r3, r5
 8005e76:	1891      	adds	r1, r2, r2
 8005e78:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e7a:	415b      	adcs	r3, r3
 8005e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e7e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e82:	1912      	adds	r2, r2, r4
 8005e84:	eb45 0303 	adc.w	r3, r5, r3
 8005e88:	f04f 0000 	mov.w	r0, #0
 8005e8c:	f04f 0100 	mov.w	r1, #0
 8005e90:	00d9      	lsls	r1, r3, #3
 8005e92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e96:	00d0      	lsls	r0, r2, #3
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	1911      	adds	r1, r2, r4
 8005e9e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8005ea2:	416b      	adcs	r3, r5
 8005ea4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f04f 0300 	mov.w	r3, #0
 8005eb4:	1891      	adds	r1, r2, r2
 8005eb6:	6439      	str	r1, [r7, #64]	; 0x40
 8005eb8:	415b      	adcs	r3, r3
 8005eba:	647b      	str	r3, [r7, #68]	; 0x44
 8005ebc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ec0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005ec4:	f7fa f9f4 	bl	80002b0 <__aeabi_uldivmod>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	4b2e      	ldr	r3, [pc, #184]	; (8005f88 <UART_SetConfig+0x3dc>)
 8005ece:	fba3 1302 	umull	r1, r3, r3, r2
 8005ed2:	095b      	lsrs	r3, r3, #5
 8005ed4:	2164      	movs	r1, #100	; 0x64
 8005ed6:	fb01 f303 	mul.w	r3, r1, r3
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	00db      	lsls	r3, r3, #3
 8005ede:	3332      	adds	r3, #50	; 0x32
 8005ee0:	4a29      	ldr	r2, [pc, #164]	; (8005f88 <UART_SetConfig+0x3dc>)
 8005ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee6:	095b      	lsrs	r3, r3, #5
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005eee:	441e      	add	r6, r3
 8005ef0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f04f 0100 	mov.w	r1, #0
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	1894      	adds	r4, r2, r2
 8005f00:	63bc      	str	r4, [r7, #56]	; 0x38
 8005f02:	415b      	adcs	r3, r3
 8005f04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f06:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f0a:	1812      	adds	r2, r2, r0
 8005f0c:	eb41 0303 	adc.w	r3, r1, r3
 8005f10:	f04f 0400 	mov.w	r4, #0
 8005f14:	f04f 0500 	mov.w	r5, #0
 8005f18:	00dd      	lsls	r5, r3, #3
 8005f1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f1e:	00d4      	lsls	r4, r2, #3
 8005f20:	4622      	mov	r2, r4
 8005f22:	462b      	mov	r3, r5
 8005f24:	1814      	adds	r4, r2, r0
 8005f26:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8005f2a:	414b      	adcs	r3, r1
 8005f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	461a      	mov	r2, r3
 8005f38:	f04f 0300 	mov.w	r3, #0
 8005f3c:	1891      	adds	r1, r2, r2
 8005f3e:	6339      	str	r1, [r7, #48]	; 0x30
 8005f40:	415b      	adcs	r3, r3
 8005f42:	637b      	str	r3, [r7, #52]	; 0x34
 8005f44:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005f48:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005f4c:	f7fa f9b0 	bl	80002b0 <__aeabi_uldivmod>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	4b0c      	ldr	r3, [pc, #48]	; (8005f88 <UART_SetConfig+0x3dc>)
 8005f56:	fba3 1302 	umull	r1, r3, r3, r2
 8005f5a:	095b      	lsrs	r3, r3, #5
 8005f5c:	2164      	movs	r1, #100	; 0x64
 8005f5e:	fb01 f303 	mul.w	r3, r1, r3
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	00db      	lsls	r3, r3, #3
 8005f66:	3332      	adds	r3, #50	; 0x32
 8005f68:	4a07      	ldr	r2, [pc, #28]	; (8005f88 <UART_SetConfig+0x3dc>)
 8005f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6e:	095b      	lsrs	r3, r3, #5
 8005f70:	f003 0207 	and.w	r2, r3, #7
 8005f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4432      	add	r2, r6
 8005f7c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005f7e:	e1a6      	b.n	80062ce <UART_SetConfig+0x722>
 8005f80:	40011000 	.word	0x40011000
 8005f84:	40011400 	.word	0x40011400
 8005f88:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	4bd1      	ldr	r3, [pc, #836]	; (80062d8 <UART_SetConfig+0x72c>)
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d006      	beq.n	8005fa6 <UART_SetConfig+0x3fa>
 8005f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	4bcf      	ldr	r3, [pc, #828]	; (80062dc <UART_SetConfig+0x730>)
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	f040 80ca 	bne.w	800613a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fa6:	f7fe fd89 	bl	8004abc <HAL_RCC_GetPCLK2Freq>
 8005faa:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fb2:	461c      	mov	r4, r3
 8005fb4:	f04f 0500 	mov.w	r5, #0
 8005fb8:	4622      	mov	r2, r4
 8005fba:	462b      	mov	r3, r5
 8005fbc:	1891      	adds	r1, r2, r2
 8005fbe:	62b9      	str	r1, [r7, #40]	; 0x28
 8005fc0:	415b      	adcs	r3, r3
 8005fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005fc8:	1912      	adds	r2, r2, r4
 8005fca:	eb45 0303 	adc.w	r3, r5, r3
 8005fce:	f04f 0000 	mov.w	r0, #0
 8005fd2:	f04f 0100 	mov.w	r1, #0
 8005fd6:	00d9      	lsls	r1, r3, #3
 8005fd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fdc:	00d0      	lsls	r0, r2, #3
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	eb12 0a04 	adds.w	sl, r2, r4
 8005fe6:	eb43 0b05 	adc.w	fp, r3, r5
 8005fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f04f 0100 	mov.w	r1, #0
 8005ff6:	f04f 0200 	mov.w	r2, #0
 8005ffa:	f04f 0300 	mov.w	r3, #0
 8005ffe:	008b      	lsls	r3, r1, #2
 8006000:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006004:	0082      	lsls	r2, r0, #2
 8006006:	4650      	mov	r0, sl
 8006008:	4659      	mov	r1, fp
 800600a:	f7fa f951 	bl	80002b0 <__aeabi_uldivmod>
 800600e:	4602      	mov	r2, r0
 8006010:	460b      	mov	r3, r1
 8006012:	4bb3      	ldr	r3, [pc, #716]	; (80062e0 <UART_SetConfig+0x734>)
 8006014:	fba3 2302 	umull	r2, r3, r3, r2
 8006018:	095b      	lsrs	r3, r3, #5
 800601a:	011e      	lsls	r6, r3, #4
 800601c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006020:	4618      	mov	r0, r3
 8006022:	f04f 0100 	mov.w	r1, #0
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	1894      	adds	r4, r2, r2
 800602c:	623c      	str	r4, [r7, #32]
 800602e:	415b      	adcs	r3, r3
 8006030:	627b      	str	r3, [r7, #36]	; 0x24
 8006032:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006036:	1812      	adds	r2, r2, r0
 8006038:	eb41 0303 	adc.w	r3, r1, r3
 800603c:	f04f 0400 	mov.w	r4, #0
 8006040:	f04f 0500 	mov.w	r5, #0
 8006044:	00dd      	lsls	r5, r3, #3
 8006046:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800604a:	00d4      	lsls	r4, r2, #3
 800604c:	4622      	mov	r2, r4
 800604e:	462b      	mov	r3, r5
 8006050:	1814      	adds	r4, r2, r0
 8006052:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8006056:	414b      	adcs	r3, r1
 8006058:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800605c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	4618      	mov	r0, r3
 8006064:	f04f 0100 	mov.w	r1, #0
 8006068:	f04f 0200 	mov.w	r2, #0
 800606c:	f04f 0300 	mov.w	r3, #0
 8006070:	008b      	lsls	r3, r1, #2
 8006072:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006076:	0082      	lsls	r2, r0, #2
 8006078:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800607c:	f7fa f918 	bl	80002b0 <__aeabi_uldivmod>
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	4b96      	ldr	r3, [pc, #600]	; (80062e0 <UART_SetConfig+0x734>)
 8006086:	fba3 1302 	umull	r1, r3, r3, r2
 800608a:	095b      	lsrs	r3, r3, #5
 800608c:	2164      	movs	r1, #100	; 0x64
 800608e:	fb01 f303 	mul.w	r3, r1, r3
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	011b      	lsls	r3, r3, #4
 8006096:	3332      	adds	r3, #50	; 0x32
 8006098:	4a91      	ldr	r2, [pc, #580]	; (80062e0 <UART_SetConfig+0x734>)
 800609a:	fba2 2303 	umull	r2, r3, r2, r3
 800609e:	095b      	lsrs	r3, r3, #5
 80060a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060a4:	441e      	add	r6, r3
 80060a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060aa:	4618      	mov	r0, r3
 80060ac:	f04f 0100 	mov.w	r1, #0
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	1894      	adds	r4, r2, r2
 80060b6:	61bc      	str	r4, [r7, #24]
 80060b8:	415b      	adcs	r3, r3
 80060ba:	61fb      	str	r3, [r7, #28]
 80060bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060c0:	1812      	adds	r2, r2, r0
 80060c2:	eb41 0303 	adc.w	r3, r1, r3
 80060c6:	f04f 0400 	mov.w	r4, #0
 80060ca:	f04f 0500 	mov.w	r5, #0
 80060ce:	00dd      	lsls	r5, r3, #3
 80060d0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060d4:	00d4      	lsls	r4, r2, #3
 80060d6:	4622      	mov	r2, r4
 80060d8:	462b      	mov	r3, r5
 80060da:	1814      	adds	r4, r2, r0
 80060dc:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80060e0:	414b      	adcs	r3, r1
 80060e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80060e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f04f 0100 	mov.w	r1, #0
 80060f2:	f04f 0200 	mov.w	r2, #0
 80060f6:	f04f 0300 	mov.w	r3, #0
 80060fa:	008b      	lsls	r3, r1, #2
 80060fc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006100:	0082      	lsls	r2, r0, #2
 8006102:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006106:	f7fa f8d3 	bl	80002b0 <__aeabi_uldivmod>
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4b74      	ldr	r3, [pc, #464]	; (80062e0 <UART_SetConfig+0x734>)
 8006110:	fba3 1302 	umull	r1, r3, r3, r2
 8006114:	095b      	lsrs	r3, r3, #5
 8006116:	2164      	movs	r1, #100	; 0x64
 8006118:	fb01 f303 	mul.w	r3, r1, r3
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	3332      	adds	r3, #50	; 0x32
 8006122:	4a6f      	ldr	r2, [pc, #444]	; (80062e0 <UART_SetConfig+0x734>)
 8006124:	fba2 2303 	umull	r2, r3, r2, r3
 8006128:	095b      	lsrs	r3, r3, #5
 800612a:	f003 020f 	and.w	r2, r3, #15
 800612e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4432      	add	r2, r6
 8006136:	609a      	str	r2, [r3, #8]
 8006138:	e0c9      	b.n	80062ce <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800613a:	f7fe fcab 	bl	8004a94 <HAL_RCC_GetPCLK1Freq>
 800613e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006142:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006146:	461c      	mov	r4, r3
 8006148:	f04f 0500 	mov.w	r5, #0
 800614c:	4622      	mov	r2, r4
 800614e:	462b      	mov	r3, r5
 8006150:	1891      	adds	r1, r2, r2
 8006152:	6139      	str	r1, [r7, #16]
 8006154:	415b      	adcs	r3, r3
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800615c:	1912      	adds	r2, r2, r4
 800615e:	eb45 0303 	adc.w	r3, r5, r3
 8006162:	f04f 0000 	mov.w	r0, #0
 8006166:	f04f 0100 	mov.w	r1, #0
 800616a:	00d9      	lsls	r1, r3, #3
 800616c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006170:	00d0      	lsls	r0, r2, #3
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	eb12 0804 	adds.w	r8, r2, r4
 800617a:	eb43 0905 	adc.w	r9, r3, r5
 800617e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	4618      	mov	r0, r3
 8006186:	f04f 0100 	mov.w	r1, #0
 800618a:	f04f 0200 	mov.w	r2, #0
 800618e:	f04f 0300 	mov.w	r3, #0
 8006192:	008b      	lsls	r3, r1, #2
 8006194:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006198:	0082      	lsls	r2, r0, #2
 800619a:	4640      	mov	r0, r8
 800619c:	4649      	mov	r1, r9
 800619e:	f7fa f887 	bl	80002b0 <__aeabi_uldivmod>
 80061a2:	4602      	mov	r2, r0
 80061a4:	460b      	mov	r3, r1
 80061a6:	4b4e      	ldr	r3, [pc, #312]	; (80062e0 <UART_SetConfig+0x734>)
 80061a8:	fba3 2302 	umull	r2, r3, r3, r2
 80061ac:	095b      	lsrs	r3, r3, #5
 80061ae:	011e      	lsls	r6, r3, #4
 80061b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061b4:	4618      	mov	r0, r3
 80061b6:	f04f 0100 	mov.w	r1, #0
 80061ba:	4602      	mov	r2, r0
 80061bc:	460b      	mov	r3, r1
 80061be:	1894      	adds	r4, r2, r2
 80061c0:	60bc      	str	r4, [r7, #8]
 80061c2:	415b      	adcs	r3, r3
 80061c4:	60fb      	str	r3, [r7, #12]
 80061c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061ca:	1812      	adds	r2, r2, r0
 80061cc:	eb41 0303 	adc.w	r3, r1, r3
 80061d0:	f04f 0400 	mov.w	r4, #0
 80061d4:	f04f 0500 	mov.w	r5, #0
 80061d8:	00dd      	lsls	r5, r3, #3
 80061da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80061de:	00d4      	lsls	r4, r2, #3
 80061e0:	4622      	mov	r2, r4
 80061e2:	462b      	mov	r3, r5
 80061e4:	1814      	adds	r4, r2, r0
 80061e6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80061ea:	414b      	adcs	r3, r1
 80061ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f04f 0100 	mov.w	r1, #0
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	008b      	lsls	r3, r1, #2
 8006206:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800620a:	0082      	lsls	r2, r0, #2
 800620c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006210:	f7fa f84e 	bl	80002b0 <__aeabi_uldivmod>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	4b31      	ldr	r3, [pc, #196]	; (80062e0 <UART_SetConfig+0x734>)
 800621a:	fba3 1302 	umull	r1, r3, r3, r2
 800621e:	095b      	lsrs	r3, r3, #5
 8006220:	2164      	movs	r1, #100	; 0x64
 8006222:	fb01 f303 	mul.w	r3, r1, r3
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	011b      	lsls	r3, r3, #4
 800622a:	3332      	adds	r3, #50	; 0x32
 800622c:	4a2c      	ldr	r2, [pc, #176]	; (80062e0 <UART_SetConfig+0x734>)
 800622e:	fba2 2303 	umull	r2, r3, r2, r3
 8006232:	095b      	lsrs	r3, r3, #5
 8006234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006238:	441e      	add	r6, r3
 800623a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800623e:	4618      	mov	r0, r3
 8006240:	f04f 0100 	mov.w	r1, #0
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	1894      	adds	r4, r2, r2
 800624a:	603c      	str	r4, [r7, #0]
 800624c:	415b      	adcs	r3, r3
 800624e:	607b      	str	r3, [r7, #4]
 8006250:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006254:	1812      	adds	r2, r2, r0
 8006256:	eb41 0303 	adc.w	r3, r1, r3
 800625a:	f04f 0400 	mov.w	r4, #0
 800625e:	f04f 0500 	mov.w	r5, #0
 8006262:	00dd      	lsls	r5, r3, #3
 8006264:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006268:	00d4      	lsls	r4, r2, #3
 800626a:	4622      	mov	r2, r4
 800626c:	462b      	mov	r3, r5
 800626e:	1814      	adds	r4, r2, r0
 8006270:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8006274:	414b      	adcs	r3, r1
 8006276:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800627a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	4618      	mov	r0, r3
 8006282:	f04f 0100 	mov.w	r1, #0
 8006286:	f04f 0200 	mov.w	r2, #0
 800628a:	f04f 0300 	mov.w	r3, #0
 800628e:	008b      	lsls	r3, r1, #2
 8006290:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006294:	0082      	lsls	r2, r0, #2
 8006296:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800629a:	f7fa f809 	bl	80002b0 <__aeabi_uldivmod>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	4b0f      	ldr	r3, [pc, #60]	; (80062e0 <UART_SetConfig+0x734>)
 80062a4:	fba3 1302 	umull	r1, r3, r3, r2
 80062a8:	095b      	lsrs	r3, r3, #5
 80062aa:	2164      	movs	r1, #100	; 0x64
 80062ac:	fb01 f303 	mul.w	r3, r1, r3
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	011b      	lsls	r3, r3, #4
 80062b4:	3332      	adds	r3, #50	; 0x32
 80062b6:	4a0a      	ldr	r2, [pc, #40]	; (80062e0 <UART_SetConfig+0x734>)
 80062b8:	fba2 2303 	umull	r2, r3, r2, r3
 80062bc:	095b      	lsrs	r3, r3, #5
 80062be:	f003 020f 	and.w	r2, r3, #15
 80062c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4432      	add	r2, r6
 80062ca:	609a      	str	r2, [r3, #8]
}
 80062cc:	e7ff      	b.n	80062ce <UART_SetConfig+0x722>
 80062ce:	bf00      	nop
 80062d0:	37f4      	adds	r7, #244	; 0xf4
 80062d2:	46bd      	mov	sp, r7
 80062d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d8:	40011000 	.word	0x40011000
 80062dc:	40011400 	.word	0x40011400
 80062e0:	51eb851f 	.word	0x51eb851f

080062e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062e4:	b084      	sub	sp, #16
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b084      	sub	sp, #16
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	f107 001c 	add.w	r0, r7, #28
 80062f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d122      	bne.n	8006342 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006300:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006326:	2b01      	cmp	r3, #1
 8006328:	d105      	bne.n	8006336 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f001 fac0 	bl	80078bc <USB_CoreReset>
 800633c:	4603      	mov	r3, r0
 800633e:	73fb      	strb	r3, [r7, #15]
 8006340:	e01a      	b.n	8006378 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f001 fab4 	bl	80078bc <USB_CoreReset>
 8006354:	4603      	mov	r3, r0
 8006356:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800635a:	2b00      	cmp	r3, #0
 800635c:	d106      	bne.n	800636c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006362:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	639a      	str	r2, [r3, #56]	; 0x38
 800636a:	e005      	b.n	8006378 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006370:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	2b01      	cmp	r3, #1
 800637c:	d10b      	bne.n	8006396 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f043 0206 	orr.w	r2, r3, #6
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f043 0220 	orr.w	r2, r3, #32
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006396:	7bfb      	ldrb	r3, [r7, #15]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063a2:	b004      	add	sp, #16
 80063a4:	4770      	bx	lr
	...

080063a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	4613      	mov	r3, r2
 80063b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80063b6:	79fb      	ldrb	r3, [r7, #7]
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d165      	bne.n	8006488 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	4a41      	ldr	r2, [pc, #260]	; (80064c4 <USB_SetTurnaroundTime+0x11c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d906      	bls.n	80063d2 <USB_SetTurnaroundTime+0x2a>
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	4a40      	ldr	r2, [pc, #256]	; (80064c8 <USB_SetTurnaroundTime+0x120>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d202      	bcs.n	80063d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80063cc:	230f      	movs	r3, #15
 80063ce:	617b      	str	r3, [r7, #20]
 80063d0:	e062      	b.n	8006498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	4a3c      	ldr	r2, [pc, #240]	; (80064c8 <USB_SetTurnaroundTime+0x120>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d306      	bcc.n	80063e8 <USB_SetTurnaroundTime+0x40>
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	4a3b      	ldr	r2, [pc, #236]	; (80064cc <USB_SetTurnaroundTime+0x124>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d202      	bcs.n	80063e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80063e2:	230e      	movs	r3, #14
 80063e4:	617b      	str	r3, [r7, #20]
 80063e6:	e057      	b.n	8006498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	4a38      	ldr	r2, [pc, #224]	; (80064cc <USB_SetTurnaroundTime+0x124>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d306      	bcc.n	80063fe <USB_SetTurnaroundTime+0x56>
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	4a37      	ldr	r2, [pc, #220]	; (80064d0 <USB_SetTurnaroundTime+0x128>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d202      	bcs.n	80063fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80063f8:	230d      	movs	r3, #13
 80063fa:	617b      	str	r3, [r7, #20]
 80063fc:	e04c      	b.n	8006498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	4a33      	ldr	r2, [pc, #204]	; (80064d0 <USB_SetTurnaroundTime+0x128>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d306      	bcc.n	8006414 <USB_SetTurnaroundTime+0x6c>
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	4a32      	ldr	r2, [pc, #200]	; (80064d4 <USB_SetTurnaroundTime+0x12c>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d802      	bhi.n	8006414 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800640e:	230c      	movs	r3, #12
 8006410:	617b      	str	r3, [r7, #20]
 8006412:	e041      	b.n	8006498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	4a2f      	ldr	r2, [pc, #188]	; (80064d4 <USB_SetTurnaroundTime+0x12c>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d906      	bls.n	800642a <USB_SetTurnaroundTime+0x82>
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	4a2e      	ldr	r2, [pc, #184]	; (80064d8 <USB_SetTurnaroundTime+0x130>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d802      	bhi.n	800642a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006424:	230b      	movs	r3, #11
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	e036      	b.n	8006498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	4a2a      	ldr	r2, [pc, #168]	; (80064d8 <USB_SetTurnaroundTime+0x130>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d906      	bls.n	8006440 <USB_SetTurnaroundTime+0x98>
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	4a29      	ldr	r2, [pc, #164]	; (80064dc <USB_SetTurnaroundTime+0x134>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d802      	bhi.n	8006440 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800643a:	230a      	movs	r3, #10
 800643c:	617b      	str	r3, [r7, #20]
 800643e:	e02b      	b.n	8006498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	4a26      	ldr	r2, [pc, #152]	; (80064dc <USB_SetTurnaroundTime+0x134>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d906      	bls.n	8006456 <USB_SetTurnaroundTime+0xae>
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	4a25      	ldr	r2, [pc, #148]	; (80064e0 <USB_SetTurnaroundTime+0x138>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d202      	bcs.n	8006456 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006450:	2309      	movs	r3, #9
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	e020      	b.n	8006498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	4a21      	ldr	r2, [pc, #132]	; (80064e0 <USB_SetTurnaroundTime+0x138>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d306      	bcc.n	800646c <USB_SetTurnaroundTime+0xc4>
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	4a20      	ldr	r2, [pc, #128]	; (80064e4 <USB_SetTurnaroundTime+0x13c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d802      	bhi.n	800646c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006466:	2308      	movs	r3, #8
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	e015      	b.n	8006498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	4a1d      	ldr	r2, [pc, #116]	; (80064e4 <USB_SetTurnaroundTime+0x13c>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d906      	bls.n	8006482 <USB_SetTurnaroundTime+0xda>
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	4a1c      	ldr	r2, [pc, #112]	; (80064e8 <USB_SetTurnaroundTime+0x140>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d202      	bcs.n	8006482 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800647c:	2307      	movs	r3, #7
 800647e:	617b      	str	r3, [r7, #20]
 8006480:	e00a      	b.n	8006498 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006482:	2306      	movs	r3, #6
 8006484:	617b      	str	r3, [r7, #20]
 8006486:	e007      	b.n	8006498 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006488:	79fb      	ldrb	r3, [r7, #7]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d102      	bne.n	8006494 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800648e:	2309      	movs	r3, #9
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	e001      	b.n	8006498 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006494:	2309      	movs	r3, #9
 8006496:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	68da      	ldr	r2, [r3, #12]
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	029b      	lsls	r3, r3, #10
 80064ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80064b0:	431a      	orrs	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	371c      	adds	r7, #28
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	00d8acbf 	.word	0x00d8acbf
 80064c8:	00e4e1c0 	.word	0x00e4e1c0
 80064cc:	00f42400 	.word	0x00f42400
 80064d0:	01067380 	.word	0x01067380
 80064d4:	011a499f 	.word	0x011a499f
 80064d8:	01312cff 	.word	0x01312cff
 80064dc:	014ca43f 	.word	0x014ca43f
 80064e0:	016e3600 	.word	0x016e3600
 80064e4:	01a6ab1f 	.word	0x01a6ab1f
 80064e8:	01e84800 	.word	0x01e84800

080064ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f043 0201 	orr.w	r2, r3, #1
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800650e:	b480      	push	{r7}
 8006510:	b083      	sub	sp, #12
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f023 0201 	bic.w	r2, r3, #1
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	460b      	mov	r3, r1
 800653a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d106      	bne.n	800655c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	60da      	str	r2, [r3, #12]
 800655a:	e00b      	b.n	8006574 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d106      	bne.n	8006570 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	60da      	str	r2, [r3, #12]
 800656e:	e001      	b.n	8006574 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e003      	b.n	800657c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006574:	2032      	movs	r0, #50	; 0x32
 8006576:	f7fa f889 	bl	800068c <HAL_Delay>

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006584:	b084      	sub	sp, #16
 8006586:	b580      	push	{r7, lr}
 8006588:	b086      	sub	sp, #24
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800659e:	2300      	movs	r3, #0
 80065a0:	613b      	str	r3, [r7, #16]
 80065a2:	e009      	b.n	80065b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	3340      	adds	r3, #64	; 0x40
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	2200      	movs	r2, #0
 80065b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	3301      	adds	r3, #1
 80065b6:	613b      	str	r3, [r7, #16]
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	2b0e      	cmp	r3, #14
 80065bc:	d9f2      	bls.n	80065a4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d11c      	bne.n	80065fe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065d2:	f043 0302 	orr.w	r3, r3, #2
 80065d6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065dc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	e005      	b.n	800660a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006602:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006610:	461a      	mov	r2, r3
 8006612:	2300      	movs	r3, #0
 8006614:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661c:	4619      	mov	r1, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006624:	461a      	mov	r2, r3
 8006626:	680b      	ldr	r3, [r1, #0]
 8006628:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800662a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662c:	2b01      	cmp	r3, #1
 800662e:	d10c      	bne.n	800664a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006632:	2b00      	cmp	r3, #0
 8006634:	d104      	bne.n	8006640 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006636:	2100      	movs	r1, #0
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f949 	bl	80068d0 <USB_SetDevSpeed>
 800663e:	e008      	b.n	8006652 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006640:	2101      	movs	r1, #1
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f944 	bl	80068d0 <USB_SetDevSpeed>
 8006648:	e003      	b.n	8006652 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800664a:	2103      	movs	r1, #3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f93f 	bl	80068d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006652:	2110      	movs	r1, #16
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f8f3 	bl	8006840 <USB_FlushTxFifo>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f911 	bl	800688c <USB_FlushRxFifo>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667a:	461a      	mov	r2, r3
 800667c:	2300      	movs	r3, #0
 800667e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006686:	461a      	mov	r2, r3
 8006688:	2300      	movs	r3, #0
 800668a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006692:	461a      	mov	r2, r3
 8006694:	2300      	movs	r3, #0
 8006696:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006698:	2300      	movs	r3, #0
 800669a:	613b      	str	r3, [r7, #16]
 800669c:	e043      	b.n	8006726 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066b4:	d118      	bne.n	80066e8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10a      	bne.n	80066d2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c8:	461a      	mov	r2, r3
 80066ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066ce:	6013      	str	r3, [r2, #0]
 80066d0:	e013      	b.n	80066fa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066de:	461a      	mov	r2, r3
 80066e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066e4:	6013      	str	r3, [r2, #0]
 80066e6:	e008      	b.n	80066fa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f4:	461a      	mov	r2, r3
 80066f6:	2300      	movs	r3, #0
 80066f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	4413      	add	r3, r2
 8006702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006706:	461a      	mov	r2, r3
 8006708:	2300      	movs	r3, #0
 800670a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006718:	461a      	mov	r2, r3
 800671a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800671e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	3301      	adds	r3, #1
 8006724:	613b      	str	r3, [r7, #16]
 8006726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	429a      	cmp	r2, r3
 800672c:	d3b7      	bcc.n	800669e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800672e:	2300      	movs	r3, #0
 8006730:	613b      	str	r3, [r7, #16]
 8006732:	e043      	b.n	80067bc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006746:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800674a:	d118      	bne.n	800677e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10a      	bne.n	8006768 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675e:	461a      	mov	r2, r3
 8006760:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006764:	6013      	str	r3, [r2, #0]
 8006766:	e013      	b.n	8006790 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006774:	461a      	mov	r2, r3
 8006776:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	e008      	b.n	8006790 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4413      	add	r3, r2
 8006786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678a:	461a      	mov	r2, r3
 800678c:	2300      	movs	r3, #0
 800678e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679c:	461a      	mov	r2, r3
 800679e:	2300      	movs	r3, #0
 80067a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ae:	461a      	mov	r2, r3
 80067b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	3301      	adds	r3, #1
 80067ba:	613b      	str	r3, [r7, #16]
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d3b7      	bcc.n	8006734 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80067e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80067e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d105      	bne.n	80067f8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	f043 0210 	orr.w	r2, r3, #16
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	699a      	ldr	r2, [r3, #24]
 80067fc:	4b0f      	ldr	r3, [pc, #60]	; (800683c <USB_DevInit+0x2b8>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006806:	2b00      	cmp	r3, #0
 8006808:	d005      	beq.n	8006816 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	f043 0208 	orr.w	r2, r3, #8
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006818:	2b01      	cmp	r3, #1
 800681a:	d107      	bne.n	800682c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006824:	f043 0304 	orr.w	r3, r3, #4
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800682c:	7dfb      	ldrb	r3, [r7, #23]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006838:	b004      	add	sp, #16
 800683a:	4770      	bx	lr
 800683c:	803c3800 	.word	0x803c3800

08006840 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	019b      	lsls	r3, r3, #6
 8006852:	f043 0220 	orr.w	r2, r3, #32
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3301      	adds	r3, #1
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4a09      	ldr	r2, [pc, #36]	; (8006888 <USB_FlushTxFifo+0x48>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d901      	bls.n	800686c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e006      	b.n	800687a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	f003 0320 	and.w	r3, r3, #32
 8006874:	2b20      	cmp	r3, #32
 8006876:	d0f0      	beq.n	800685a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	00030d40 	.word	0x00030d40

0800688c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006894:	2300      	movs	r3, #0
 8006896:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2210      	movs	r2, #16
 800689c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	3301      	adds	r3, #1
 80068a2:	60fb      	str	r3, [r7, #12]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4a09      	ldr	r2, [pc, #36]	; (80068cc <USB_FlushRxFifo+0x40>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d901      	bls.n	80068b0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e006      	b.n	80068be <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	f003 0310 	and.w	r3, r3, #16
 80068b8:	2b10      	cmp	r3, #16
 80068ba:	d0f0      	beq.n	800689e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	00030d40 	.word	0x00030d40

080068d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	460b      	mov	r3, r1
 80068da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	78fb      	ldrb	r3, [r7, #3]
 80068ea:	68f9      	ldr	r1, [r7, #12]
 80068ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068f0:	4313      	orrs	r3, r2
 80068f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006902:	b480      	push	{r7}
 8006904:	b087      	sub	sp, #28
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f003 0306 	and.w	r3, r3, #6
 800691a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d102      	bne.n	8006928 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006922:	2300      	movs	r3, #0
 8006924:	75fb      	strb	r3, [r7, #23]
 8006926:	e00a      	b.n	800693e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b02      	cmp	r3, #2
 800692c:	d002      	beq.n	8006934 <USB_GetDevSpeed+0x32>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2b06      	cmp	r3, #6
 8006932:	d102      	bne.n	800693a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006934:	2302      	movs	r3, #2
 8006936:	75fb      	strb	r3, [r7, #23]
 8006938:	e001      	b.n	800693e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800693a:	230f      	movs	r3, #15
 800693c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800693e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006940:	4618      	mov	r0, r3
 8006942:	371c      	adds	r7, #28
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	785b      	ldrb	r3, [r3, #1]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d13a      	bne.n	80069de <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696e:	69da      	ldr	r2, [r3, #28]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	f003 030f 	and.w	r3, r3, #15
 8006978:	2101      	movs	r1, #1
 800697a:	fa01 f303 	lsl.w	r3, r1, r3
 800697e:	b29b      	uxth	r3, r3
 8006980:	68f9      	ldr	r1, [r7, #12]
 8006982:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006986:	4313      	orrs	r3, r2
 8006988:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4413      	add	r3, r2
 8006992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d155      	bne.n	8006a4c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	78db      	ldrb	r3, [r3, #3]
 80069ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	059b      	lsls	r3, r3, #22
 80069c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069c4:	4313      	orrs	r3, r2
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	0151      	lsls	r1, r2, #5
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	440a      	add	r2, r1
 80069ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	e036      	b.n	8006a4c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e4:	69da      	ldr	r2, [r3, #28]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	f003 030f 	and.w	r3, r3, #15
 80069ee:	2101      	movs	r1, #1
 80069f0:	fa01 f303 	lsl.w	r3, r1, r3
 80069f4:	041b      	lsls	r3, r3, #16
 80069f6:	68f9      	ldr	r1, [r7, #12]
 80069f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069fc:	4313      	orrs	r3, r2
 80069fe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d11a      	bne.n	8006a4c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	015a      	lsls	r2, r3, #5
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	78db      	ldrb	r3, [r3, #3]
 8006a30:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a32:	430b      	orrs	r3, r1
 8006a34:	4313      	orrs	r3, r2
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	0151      	lsls	r1, r2, #5
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	440a      	add	r2, r1
 8006a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a4a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
	...

08006a5c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	785b      	ldrb	r3, [r3, #1]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d161      	bne.n	8006b3c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a8e:	d11f      	bne.n	8006ad0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	0151      	lsls	r1, r2, #5
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	440a      	add	r2, r1
 8006aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aaa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006aae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	0151      	lsls	r1, r2, #5
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	440a      	add	r2, r1
 8006ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ace:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	f003 030f 	and.w	r3, r3, #15
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	43db      	mvns	r3, r3
 8006aea:	68f9      	ldr	r1, [r7, #12]
 8006aec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006af0:	4013      	ands	r3, r2
 8006af2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006afa:	69da      	ldr	r2, [r3, #28]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	f003 030f 	and.w	r3, r3, #15
 8006b04:	2101      	movs	r1, #1
 8006b06:	fa01 f303 	lsl.w	r3, r1, r3
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	43db      	mvns	r3, r3
 8006b0e:	68f9      	ldr	r1, [r7, #12]
 8006b10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b14:	4013      	ands	r3, r2
 8006b16:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	015a      	lsls	r2, r3, #5
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	0159      	lsls	r1, r3, #5
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	440b      	add	r3, r1
 8006b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b32:	4619      	mov	r1, r3
 8006b34:	4b35      	ldr	r3, [pc, #212]	; (8006c0c <USB_DeactivateEndpoint+0x1b0>)
 8006b36:	4013      	ands	r3, r2
 8006b38:	600b      	str	r3, [r1, #0]
 8006b3a:	e060      	b.n	8006bfe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	015a      	lsls	r2, r3, #5
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b52:	d11f      	bne.n	8006b94 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	015a      	lsls	r2, r3, #5
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	0151      	lsls	r1, r2, #5
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	440a      	add	r2, r1
 8006b6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b72:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	0151      	lsls	r1, r2, #5
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	440a      	add	r2, r1
 8006b8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	f003 030f 	and.w	r3, r3, #15
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8006baa:	041b      	lsls	r3, r3, #16
 8006bac:	43db      	mvns	r3, r3
 8006bae:	68f9      	ldr	r1, [r7, #12]
 8006bb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bbe:	69da      	ldr	r2, [r3, #28]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	f003 030f 	and.w	r3, r3, #15
 8006bc8:	2101      	movs	r1, #1
 8006bca:	fa01 f303 	lsl.w	r3, r1, r3
 8006bce:	041b      	lsls	r3, r3, #16
 8006bd0:	43db      	mvns	r3, r3
 8006bd2:	68f9      	ldr	r1, [r7, #12]
 8006bd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bd8:	4013      	ands	r3, r2
 8006bda:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	0159      	lsls	r1, r3, #5
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	440b      	add	r3, r1
 8006bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <USB_DeactivateEndpoint+0x1b4>)
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	ec337800 	.word	0xec337800
 8006c10:	eff37800 	.word	0xeff37800

08006c14 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b08a      	sub	sp, #40	; 0x28
 8006c18:	af02      	add	r7, sp, #8
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	785b      	ldrb	r3, [r3, #1]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	f040 815c 	bne.w	8006eee <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d132      	bne.n	8006ca4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	0151      	lsls	r1, r2, #5
 8006c50:	69fa      	ldr	r2, [r7, #28]
 8006c52:	440a      	add	r2, r1
 8006c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	015a      	lsls	r2, r3, #5
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	0151      	lsls	r1, r2, #5
 8006c74:	69fa      	ldr	r2, [r7, #28]
 8006c76:	440a      	add	r2, r1
 8006c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	0151      	lsls	r1, r2, #5
 8006c94:	69fa      	ldr	r2, [r7, #28]
 8006c96:	440a      	add	r2, r1
 8006c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c9c:	0cdb      	lsrs	r3, r3, #19
 8006c9e:	04db      	lsls	r3, r3, #19
 8006ca0:	6113      	str	r3, [r2, #16]
 8006ca2:	e074      	b.n	8006d8e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	0151      	lsls	r1, r2, #5
 8006cb6:	69fa      	ldr	r2, [r7, #28]
 8006cb8:	440a      	add	r2, r1
 8006cba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cbe:	0cdb      	lsrs	r3, r3, #19
 8006cc0:	04db      	lsls	r3, r3, #19
 8006cc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	69ba      	ldr	r2, [r7, #24]
 8006cd4:	0151      	lsls	r1, r2, #5
 8006cd6:	69fa      	ldr	r2, [r7, #28]
 8006cd8:	440a      	add	r2, r1
 8006cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cde:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ce2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ce6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	015a      	lsls	r2, r3, #5
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf4:	691a      	ldr	r2, [r3, #16]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	6959      	ldr	r1, [r3, #20]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	440b      	add	r3, r1
 8006d00:	1e59      	subs	r1, r3, #1
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d0a:	04d9      	lsls	r1, r3, #19
 8006d0c:	4b9d      	ldr	r3, [pc, #628]	; (8006f84 <USB_EPStartXfer+0x370>)
 8006d0e:	400b      	ands	r3, r1
 8006d10:	69b9      	ldr	r1, [r7, #24]
 8006d12:	0148      	lsls	r0, r1, #5
 8006d14:	69f9      	ldr	r1, [r7, #28]
 8006d16:	4401      	add	r1, r0
 8006d18:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d2c:	691a      	ldr	r2, [r3, #16]
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d36:	69b9      	ldr	r1, [r7, #24]
 8006d38:	0148      	lsls	r0, r1, #5
 8006d3a:	69f9      	ldr	r1, [r7, #28]
 8006d3c:	4401      	add	r1, r0
 8006d3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d42:	4313      	orrs	r3, r2
 8006d44:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	78db      	ldrb	r3, [r3, #3]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d11f      	bne.n	8006d8e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	0151      	lsls	r1, r2, #5
 8006d60:	69fa      	ldr	r2, [r7, #28]
 8006d62:	440a      	add	r2, r1
 8006d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d68:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006d6c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	0151      	lsls	r1, r2, #5
 8006d80:	69fa      	ldr	r2, [r7, #28]
 8006d82:	440a      	add	r2, r1
 8006d84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d8c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006d8e:	79fb      	ldrb	r3, [r7, #7]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d14b      	bne.n	8006e2c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d009      	beq.n	8006db0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da8:	461a      	mov	r2, r3
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	78db      	ldrb	r3, [r3, #3]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d128      	bne.n	8006e0a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d110      	bne.n	8006dea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	0151      	lsls	r1, r2, #5
 8006dda:	69fa      	ldr	r2, [r7, #28]
 8006ddc:	440a      	add	r2, r1
 8006dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006de2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006de6:	6013      	str	r3, [r2, #0]
 8006de8:	e00f      	b.n	8006e0a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	015a      	lsls	r2, r3, #5
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	4413      	add	r3, r2
 8006df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	69ba      	ldr	r2, [r7, #24]
 8006dfa:	0151      	lsls	r1, r2, #5
 8006dfc:	69fa      	ldr	r2, [r7, #28]
 8006dfe:	440a      	add	r2, r1
 8006e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e08:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	015a      	lsls	r2, r3, #5
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	4413      	add	r3, r2
 8006e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	0151      	lsls	r1, r2, #5
 8006e1c:	69fa      	ldr	r2, [r7, #28]
 8006e1e:	440a      	add	r2, r1
 8006e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e28:	6013      	str	r3, [r2, #0]
 8006e2a:	e12f      	b.n	800708c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	0151      	lsls	r1, r2, #5
 8006e3e:	69fa      	ldr	r2, [r7, #28]
 8006e40:	440a      	add	r2, r1
 8006e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e4a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	78db      	ldrb	r3, [r3, #3]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d015      	beq.n	8006e80 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 8117 	beq.w	800708c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	f003 030f 	and.w	r3, r3, #15
 8006e6e:	2101      	movs	r1, #1
 8006e70:	fa01 f303 	lsl.w	r3, r1, r3
 8006e74:	69f9      	ldr	r1, [r7, #28]
 8006e76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	634b      	str	r3, [r1, #52]	; 0x34
 8006e7e:	e105      	b.n	800708c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d110      	bne.n	8006eb2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	0151      	lsls	r1, r2, #5
 8006ea2:	69fa      	ldr	r2, [r7, #28]
 8006ea4:	440a      	add	r2, r1
 8006ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eaa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006eae:	6013      	str	r3, [r2, #0]
 8006eb0:	e00f      	b.n	8006ed2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	0151      	lsls	r1, r2, #5
 8006ec4:	69fa      	ldr	r2, [r7, #28]
 8006ec6:	440a      	add	r2, r1
 8006ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ed0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	68d9      	ldr	r1, [r3, #12]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	781a      	ldrb	r2, [r3, #0]
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	b298      	uxth	r0, r3
 8006ee0:	79fb      	ldrb	r3, [r7, #7]
 8006ee2:	9300      	str	r3, [sp, #0]
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f000 fa2b 	bl	8007342 <USB_WritePacket>
 8006eec:	e0ce      	b.n	800708c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	69ba      	ldr	r2, [r7, #24]
 8006efe:	0151      	lsls	r1, r2, #5
 8006f00:	69fa      	ldr	r2, [r7, #28]
 8006f02:	440a      	add	r2, r1
 8006f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f08:	0cdb      	lsrs	r3, r3, #19
 8006f0a:	04db      	lsls	r3, r3, #19
 8006f0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	69ba      	ldr	r2, [r7, #24]
 8006f1e:	0151      	lsls	r1, r2, #5
 8006f20:	69fa      	ldr	r2, [r7, #28]
 8006f22:	440a      	add	r2, r1
 8006f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f30:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d126      	bne.n	8006f88 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f46:	691a      	ldr	r2, [r3, #16]
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f50:	69b9      	ldr	r1, [r7, #24]
 8006f52:	0148      	lsls	r0, r1, #5
 8006f54:	69f9      	ldr	r1, [r7, #28]
 8006f56:	4401      	add	r1, r0
 8006f58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	69ba      	ldr	r2, [r7, #24]
 8006f70:	0151      	lsls	r1, r2, #5
 8006f72:	69fa      	ldr	r2, [r7, #28]
 8006f74:	440a      	add	r2, r1
 8006f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f7e:	6113      	str	r3, [r2, #16]
 8006f80:	e036      	b.n	8006ff0 <USB_EPStartXfer+0x3dc>
 8006f82:	bf00      	nop
 8006f84:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	695a      	ldr	r2, [r3, #20]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	4413      	add	r3, r2
 8006f92:	1e5a      	subs	r2, r3, #1
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f9c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	015a      	lsls	r2, r3, #5
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006faa:	691a      	ldr	r2, [r3, #16]
 8006fac:	8afb      	ldrh	r3, [r7, #22]
 8006fae:	04d9      	lsls	r1, r3, #19
 8006fb0:	4b39      	ldr	r3, [pc, #228]	; (8007098 <USB_EPStartXfer+0x484>)
 8006fb2:	400b      	ands	r3, r1
 8006fb4:	69b9      	ldr	r1, [r7, #24]
 8006fb6:	0148      	lsls	r0, r1, #5
 8006fb8:	69f9      	ldr	r1, [r7, #28]
 8006fba:	4401      	add	r1, r0
 8006fbc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd0:	691a      	ldr	r2, [r3, #16]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	8af9      	ldrh	r1, [r7, #22]
 8006fd8:	fb01 f303 	mul.w	r3, r1, r3
 8006fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fe0:	69b9      	ldr	r1, [r7, #24]
 8006fe2:	0148      	lsls	r0, r1, #5
 8006fe4:	69f9      	ldr	r1, [r7, #28]
 8006fe6:	4401      	add	r1, r0
 8006fe8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006fec:	4313      	orrs	r3, r2
 8006fee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ff0:	79fb      	ldrb	r3, [r7, #7]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d10d      	bne.n	8007012 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d009      	beq.n	8007012 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	68d9      	ldr	r1, [r3, #12]
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	4413      	add	r3, r2
 800700a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800700e:	460a      	mov	r2, r1
 8007010:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	78db      	ldrb	r3, [r3, #3]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d128      	bne.n	800706c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007026:	2b00      	cmp	r3, #0
 8007028:	d110      	bne.n	800704c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	4413      	add	r3, r2
 8007032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	0151      	lsls	r1, r2, #5
 800703c:	69fa      	ldr	r2, [r7, #28]
 800703e:	440a      	add	r2, r1
 8007040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007044:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007048:	6013      	str	r3, [r2, #0]
 800704a:	e00f      	b.n	800706c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	69ba      	ldr	r2, [r7, #24]
 800705c:	0151      	lsls	r1, r2, #5
 800705e:	69fa      	ldr	r2, [r7, #28]
 8007060:	440a      	add	r2, r1
 8007062:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800706a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	4413      	add	r3, r2
 8007074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	69ba      	ldr	r2, [r7, #24]
 800707c:	0151      	lsls	r1, r2, #5
 800707e:	69fa      	ldr	r2, [r7, #28]
 8007080:	440a      	add	r2, r1
 8007082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007086:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800708a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3720      	adds	r7, #32
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	1ff80000 	.word	0x1ff80000

0800709c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800709c:	b480      	push	{r7}
 800709e:	b087      	sub	sp, #28
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	4613      	mov	r3, r2
 80070a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	785b      	ldrb	r3, [r3, #1]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	f040 80cd 	bne.w	8007258 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d132      	bne.n	800712c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	015a      	lsls	r2, r3, #5
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	0151      	lsls	r1, r2, #5
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	440a      	add	r2, r1
 80070dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	015a      	lsls	r2, r3, #5
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	0151      	lsls	r1, r2, #5
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	440a      	add	r2, r1
 8007100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007104:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007108:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	0151      	lsls	r1, r2, #5
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	440a      	add	r2, r1
 8007120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007124:	0cdb      	lsrs	r3, r3, #19
 8007126:	04db      	lsls	r3, r3, #19
 8007128:	6113      	str	r3, [r2, #16]
 800712a:	e04e      	b.n	80071ca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	0151      	lsls	r1, r2, #5
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	440a      	add	r2, r1
 8007142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007146:	0cdb      	lsrs	r3, r3, #19
 8007148:	04db      	lsls	r3, r3, #19
 800714a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	0151      	lsls	r1, r2, #5
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	440a      	add	r2, r1
 8007162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007166:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800716a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800716e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	695a      	ldr	r2, [r3, #20]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	429a      	cmp	r2, r3
 800717a:	d903      	bls.n	8007184 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	689a      	ldr	r2, [r3, #8]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	4413      	add	r3, r2
 800718c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	0151      	lsls	r1, r2, #5
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	440a      	add	r2, r1
 800719a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800719e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b0:	691a      	ldr	r2, [r3, #16]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071ba:	6939      	ldr	r1, [r7, #16]
 80071bc:	0148      	lsls	r0, r1, #5
 80071be:	6979      	ldr	r1, [r7, #20]
 80071c0:	4401      	add	r1, r0
 80071c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80071c6:	4313      	orrs	r3, r2
 80071c8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80071ca:	79fb      	ldrb	r3, [r7, #7]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d11e      	bne.n	800720e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d009      	beq.n	80071ec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e4:	461a      	mov	r2, r3
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	0151      	lsls	r1, r2, #5
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	440a      	add	r2, r1
 8007202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007206:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800720a:	6013      	str	r3, [r2, #0]
 800720c:	e092      	b.n	8007334 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	015a      	lsls	r2, r3, #5
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	4413      	add	r3, r2
 8007216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	0151      	lsls	r1, r2, #5
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	440a      	add	r2, r1
 8007224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007228:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800722c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d07e      	beq.n	8007334 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800723c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	f003 030f 	and.w	r3, r3, #15
 8007246:	2101      	movs	r1, #1
 8007248:	fa01 f303 	lsl.w	r3, r1, r3
 800724c:	6979      	ldr	r1, [r7, #20]
 800724e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007252:	4313      	orrs	r3, r2
 8007254:	634b      	str	r3, [r1, #52]	; 0x34
 8007256:	e06d      	b.n	8007334 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	015a      	lsls	r2, r3, #5
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	4413      	add	r3, r2
 8007260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	0151      	lsls	r1, r2, #5
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	440a      	add	r2, r1
 800726e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007272:	0cdb      	lsrs	r3, r3, #19
 8007274:	04db      	lsls	r3, r3, #19
 8007276:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	015a      	lsls	r2, r3, #5
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	4413      	add	r3, r2
 8007280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	0151      	lsls	r1, r2, #5
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	440a      	add	r2, r1
 800728e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007292:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007296:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800729a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d003      	beq.n	80072ac <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	0151      	lsls	r1, r2, #5
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	440a      	add	r2, r1
 80072c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	015a      	lsls	r2, r3, #5
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	4413      	add	r3, r2
 80072d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d8:	691a      	ldr	r2, [r3, #16]
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072e2:	6939      	ldr	r1, [r7, #16]
 80072e4:	0148      	lsls	r0, r1, #5
 80072e6:	6979      	ldr	r1, [r7, #20]
 80072e8:	4401      	add	r1, r0
 80072ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80072ee:	4313      	orrs	r3, r2
 80072f0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80072f2:	79fb      	ldrb	r3, [r7, #7]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d10d      	bne.n	8007314 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d009      	beq.n	8007314 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	68d9      	ldr	r1, [r3, #12]
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007310:	460a      	mov	r2, r1
 8007312:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	0151      	lsls	r1, r2, #5
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	440a      	add	r2, r1
 800732a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800732e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007332:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	371c      	adds	r7, #28
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007342:	b480      	push	{r7}
 8007344:	b089      	sub	sp, #36	; 0x24
 8007346:	af00      	add	r7, sp, #0
 8007348:	60f8      	str	r0, [r7, #12]
 800734a:	60b9      	str	r1, [r7, #8]
 800734c:	4611      	mov	r1, r2
 800734e:	461a      	mov	r2, r3
 8007350:	460b      	mov	r3, r1
 8007352:	71fb      	strb	r3, [r7, #7]
 8007354:	4613      	mov	r3, r2
 8007356:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007360:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007364:	2b00      	cmp	r3, #0
 8007366:	d11a      	bne.n	800739e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007368:	88bb      	ldrh	r3, [r7, #4]
 800736a:	3303      	adds	r3, #3
 800736c:	089b      	lsrs	r3, r3, #2
 800736e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007370:	2300      	movs	r3, #0
 8007372:	61bb      	str	r3, [r7, #24]
 8007374:	e00f      	b.n	8007396 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007376:	79fb      	ldrb	r3, [r7, #7]
 8007378:	031a      	lsls	r2, r3, #12
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	4413      	add	r3, r2
 800737e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007382:	461a      	mov	r2, r3
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6013      	str	r3, [r2, #0]
      pSrc++;
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	3304      	adds	r3, #4
 800738e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	3301      	adds	r3, #1
 8007394:	61bb      	str	r3, [r7, #24]
 8007396:	69ba      	ldr	r2, [r7, #24]
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	429a      	cmp	r2, r3
 800739c:	d3eb      	bcc.n	8007376 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3724      	adds	r7, #36	; 0x24
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b089      	sub	sp, #36	; 0x24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	4613      	mov	r3, r2
 80073b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80073c2:	88fb      	ldrh	r3, [r7, #6]
 80073c4:	3303      	adds	r3, #3
 80073c6:	089b      	lsrs	r3, r3, #2
 80073c8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80073ca:	2300      	movs	r3, #0
 80073cc:	61bb      	str	r3, [r7, #24]
 80073ce:	e00b      	b.n	80073e8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	601a      	str	r2, [r3, #0]
    pDest++;
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	3304      	adds	r3, #4
 80073e0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	3301      	adds	r3, #1
 80073e6:	61bb      	str	r3, [r7, #24]
 80073e8:	69ba      	ldr	r2, [r7, #24]
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d3ef      	bcc.n	80073d0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80073f0:	69fb      	ldr	r3, [r7, #28]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3724      	adds	r7, #36	; 0x24
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073fe:	b480      	push	{r7}
 8007400:	b085      	sub	sp, #20
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	785b      	ldrb	r3, [r3, #1]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d12c      	bne.n	8007474 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	4413      	add	r3, r2
 8007422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	db12      	blt.n	8007452 <USB_EPSetStall+0x54>
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00f      	beq.n	8007452 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	015a      	lsls	r2, r3, #5
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	4413      	add	r3, r2
 800743a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	0151      	lsls	r1, r2, #5
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	440a      	add	r2, r1
 8007448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800744c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007450:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	4413      	add	r3, r2
 800745a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	0151      	lsls	r1, r2, #5
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	440a      	add	r2, r1
 8007468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800746c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007470:	6013      	str	r3, [r2, #0]
 8007472:	e02b      	b.n	80074cc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4413      	add	r3, r2
 800747c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	db12      	blt.n	80074ac <USB_EPSetStall+0xae>
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00f      	beq.n	80074ac <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	015a      	lsls	r2, r3, #5
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4413      	add	r3, r2
 8007494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	0151      	lsls	r1, r2, #5
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	440a      	add	r2, r1
 80074a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80074aa:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	0151      	lsls	r1, r2, #5
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	440a      	add	r2, r1
 80074c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80074ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80074da:	b480      	push	{r7}
 80074dc:	b085      	sub	sp, #20
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	785b      	ldrb	r3, [r3, #1]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d128      	bne.n	8007548 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	0151      	lsls	r1, r2, #5
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	440a      	add	r2, r1
 800750c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007510:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007514:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	78db      	ldrb	r3, [r3, #3]
 800751a:	2b03      	cmp	r3, #3
 800751c:	d003      	beq.n	8007526 <USB_EPClearStall+0x4c>
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	78db      	ldrb	r3, [r3, #3]
 8007522:	2b02      	cmp	r3, #2
 8007524:	d138      	bne.n	8007598 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	015a      	lsls	r2, r3, #5
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	4413      	add	r3, r2
 800752e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	0151      	lsls	r1, r2, #5
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	440a      	add	r2, r1
 800753c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007544:	6013      	str	r3, [r2, #0]
 8007546:	e027      	b.n	8007598 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	015a      	lsls	r2, r3, #5
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	4413      	add	r3, r2
 8007550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	0151      	lsls	r1, r2, #5
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	440a      	add	r2, r1
 800755e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007562:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007566:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	78db      	ldrb	r3, [r3, #3]
 800756c:	2b03      	cmp	r3, #3
 800756e:	d003      	beq.n	8007578 <USB_EPClearStall+0x9e>
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	78db      	ldrb	r3, [r3, #3]
 8007574:	2b02      	cmp	r3, #2
 8007576:	d10f      	bne.n	8007598 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	015a      	lsls	r2, r3, #5
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4413      	add	r3, r2
 8007580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	0151      	lsls	r1, r2, #5
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	440a      	add	r2, r1
 800758e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007596:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b085      	sub	sp, #20
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	460b      	mov	r3, r1
 80075b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075c4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80075c8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	78fb      	ldrb	r3, [r7, #3]
 80075d4:	011b      	lsls	r3, r3, #4
 80075d6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80075da:	68f9      	ldr	r1, [r7, #12]
 80075dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075e0:	4313      	orrs	r3, r2
 80075e2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b085      	sub	sp, #20
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800760c:	f023 0303 	bic.w	r3, r3, #3
 8007610:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007620:	f023 0302 	bic.w	r3, r3, #2
 8007624:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3714      	adds	r7, #20
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800764e:	f023 0303 	bic.w	r3, r3, #3
 8007652:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007662:	f043 0302 	orr.w	r3, r3, #2
 8007666:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3714      	adds	r7, #20
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007676:	b480      	push	{r7}
 8007678:	b085      	sub	sp, #20
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	4013      	ands	r3, r2
 800768c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800768e:	68fb      	ldr	r3, [r7, #12]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b8:	69db      	ldr	r3, [r3, #28]
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	4013      	ands	r3, r2
 80076be:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	0c1b      	lsrs	r3, r3, #16
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	4013      	ands	r3, r2
 80076f2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	b29b      	uxth	r3, r3
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	460b      	mov	r3, r1
 800770e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007714:	78fb      	ldrb	r3, [r7, #3]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	4013      	ands	r3, r2
 8007730:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007732:	68bb      	ldr	r3, [r7, #8]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007762:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007764:	78fb      	ldrb	r3, [r7, #3]
 8007766:	f003 030f 	and.w	r3, r3, #15
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	fa22 f303 	lsr.w	r3, r2, r3
 8007770:	01db      	lsls	r3, r3, #7
 8007772:	b2db      	uxtb	r3, r3
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	4313      	orrs	r3, r2
 8007778:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800777a:	78fb      	ldrb	r3, [r7, #3]
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	4413      	add	r3, r2
 8007782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	4013      	ands	r3, r2
 800778c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800778e:	68bb      	ldr	r3, [r7, #8]
}
 8007790:	4618      	mov	r0, r3
 8007792:	371c      	adds	r7, #28
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	695b      	ldr	r3, [r3, #20]
 80077a8:	f003 0301 	and.w	r3, r3, #1
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80077d6:	f023 0307 	bic.w	r3, r3, #7
 80077da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3714      	adds	r7, #20
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
	...

08007800 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007800:	b480      	push	{r7}
 8007802:	b087      	sub	sp, #28
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	460b      	mov	r3, r1
 800780a:	607a      	str	r2, [r7, #4]
 800780c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	333c      	adds	r3, #60	; 0x3c
 8007816:	3304      	adds	r3, #4
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	4a26      	ldr	r2, [pc, #152]	; (80078b8 <USB_EP0_OutStart+0xb8>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d90a      	bls.n	800783a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007830:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007834:	d101      	bne.n	800783a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	e037      	b.n	80078aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007840:	461a      	mov	r2, r3
 8007842:	2300      	movs	r3, #0
 8007844:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007854:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007858:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007868:	f043 0318 	orr.w	r3, r3, #24
 800786c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800787c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007880:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007882:	7afb      	ldrb	r3, [r7, #11]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d10f      	bne.n	80078a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800788e:	461a      	mov	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078a2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80078a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	371c      	adds	r7, #28
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	4f54300a 	.word	0x4f54300a

080078bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80078c4:	2300      	movs	r3, #0
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3301      	adds	r3, #1
 80078cc:	60fb      	str	r3, [r7, #12]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	4a13      	ldr	r2, [pc, #76]	; (8007920 <USB_CoreReset+0x64>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d901      	bls.n	80078da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e01b      	b.n	8007912 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	daf2      	bge.n	80078c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	f043 0201 	orr.w	r2, r3, #1
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	3301      	adds	r3, #1
 80078f6:	60fb      	str	r3, [r7, #12]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	4a09      	ldr	r2, [pc, #36]	; (8007920 <USB_CoreReset+0x64>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d901      	bls.n	8007904 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007900:	2303      	movs	r3, #3
 8007902:	e006      	b.n	8007912 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	2b01      	cmp	r3, #1
 800790e:	d0f0      	beq.n	80078f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	00030d40 	.word	0x00030d40

08007924 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	460b      	mov	r3, r1
 800792e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

    /* Allocate Audio structure */
  haudio = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8007930:	f643 4050 	movw	r0, #15440	; 0x3c50
 8007934:	f004 fdf6 	bl	800c524 <malloc>
 8007938:	4603      	mov	r3, r0
 800793a:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d105      	bne.n	800794e <USBD_AUDIO_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800794a:	2302      	movs	r3, #2
 800794c:	e04b      	b.n	80079e6 <USBD_AUDIO_Init+0xc2>
  }

  pdev->pClassData = (void *)haudio;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	7c1b      	ldrb	r3, [r3, #16]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d104      	bne.n	8007968 <USBD_AUDIO_Init+0x44>
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8007966:	e003      	b.n	8007970 <USBD_AUDIO_Init+0x4c>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 8007970:	23c0      	movs	r3, #192	; 0xc0
 8007972:	2201      	movs	r2, #1
 8007974:	2101      	movs	r1, #1
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f004 faaf 	bl	800beda <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  haudio->alt_setting = 0U;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007990:	3304      	adds	r3, #4
 8007992:	2203      	movs	r2, #3
 8007994:	701a      	strb	r2, [r3, #0]
  haudio->wr_ptr = 0U;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800799c:	3308      	adds	r3, #8
 800799e:	2200      	movs	r2, #0
 80079a0:	801a      	strh	r2, [r3, #0]
  haudio->rd_ptr = 0U;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80079a8:	3306      	adds	r3, #6
 80079aa:	2200      	movs	r2, #0
 80079ac:	801a      	strh	r2, [r3, #0]
  haudio->rd_enable = 0U;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80079b4:	3305      	adds	r3, #5
 80079b6:	2200      	movs	r2, #0
 80079b8:	701a      	strb	r2, [r3, #0]

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2200      	movs	r2, #0
 80079c4:	2146      	movs	r1, #70	; 0x46
 80079c6:	f64b 3080 	movw	r0, #48000	; 0xbb80
 80079ca:	4798      	blx	r3
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d001      	beq.n	80079d6 <USBD_AUDIO_Init+0xb2>
                                                       AUDIO_DEFAULT_VOLUME,
                                                       0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e007      	b.n	80079e6 <USBD_AUDIO_Init+0xc2>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	1d1a      	adds	r2, r3, #4
 80079da:	23c0      	movs	r3, #192	; 0xc0
 80079dc:	2101      	movs	r1, #1
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f004 fb6a 	bl	800c0b8 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	460b      	mov	r3, r1
 80079f8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 80079fa:	2101      	movs	r1, #1
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f004 fa92 	bl	800bf26 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = 0U;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00f      	beq.n	8007a3c <USBD_AUDIO_DeInit+0x4e>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	2000      	movs	r0, #0
 8007a26:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f004 fd80 	bl	800c534 <free>
    pdev->pClassData = NULL;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
	...

08007a48 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a60:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d01a      	beq.n	8007aa4 <USBD_AUDIO_Setup+0x5c>
 8007a6e:	2b20      	cmp	r3, #32
 8007a70:	f040 809e 	bne.w	8007bb0 <USBD_AUDIO_Setup+0x168>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	785b      	ldrb	r3, [r3, #1]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d006      	beq.n	8007a8a <USBD_AUDIO_Setup+0x42>
 8007a7c:	2b81      	cmp	r3, #129	; 0x81
 8007a7e:	d109      	bne.n	8007a94 <USBD_AUDIO_Setup+0x4c>
    {
    case AUDIO_REQ_GET_CUR:
      AUDIO_REQ_GetCurrent(pdev, req);
 8007a80:	6839      	ldr	r1, [r7, #0]
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f9a0 	bl	8007dc8 <AUDIO_REQ_GetCurrent>
      break;
 8007a88:	e00b      	b.n	8007aa2 <USBD_AUDIO_Setup+0x5a>

    case AUDIO_REQ_SET_CUR:
      AUDIO_REQ_SetCurrent(pdev, req);
 8007a8a:	6839      	ldr	r1, [r7, #0]
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f9bb 	bl	8007e08 <AUDIO_REQ_SetCurrent>
      break;
 8007a92:	e006      	b.n	8007aa2 <USBD_AUDIO_Setup+0x5a>

    default:
      USBD_CtlError(pdev, req);
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f001 fa77 	bl	8008f8a <USBD_CtlError>
      ret = USBD_FAIL;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007aa0:	bf00      	nop
    }
    break;
 8007aa2:	e08c      	b.n	8007bbe <USBD_AUDIO_Setup+0x176>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	785b      	ldrb	r3, [r3, #1]
 8007aa8:	2b0b      	cmp	r3, #11
 8007aaa:	d876      	bhi.n	8007b9a <USBD_AUDIO_Setup+0x152>
 8007aac:	a201      	add	r2, pc, #4	; (adr r2, 8007ab4 <USBD_AUDIO_Setup+0x6c>)
 8007aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab2:	bf00      	nop
 8007ab4:	08007ae5 	.word	0x08007ae5
 8007ab8:	08007ba9 	.word	0x08007ba9
 8007abc:	08007b9b 	.word	0x08007b9b
 8007ac0:	08007b9b 	.word	0x08007b9b
 8007ac4:	08007b9b 	.word	0x08007b9b
 8007ac8:	08007b9b 	.word	0x08007b9b
 8007acc:	08007b0d 	.word	0x08007b0d
 8007ad0:	08007b9b 	.word	0x08007b9b
 8007ad4:	08007b9b 	.word	0x08007b9b
 8007ad8:	08007b9b 	.word	0x08007b9b
 8007adc:	08007b37 	.word	0x08007b37
 8007ae0:	08007b5d 	.word	0x08007b5d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aea:	2b03      	cmp	r3, #3
 8007aec:	d107      	bne.n	8007afe <USBD_AUDIO_Setup+0xb6>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007aee:	f107 0308 	add.w	r3, r7, #8
 8007af2:	2202      	movs	r2, #2
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f001 fab8 	bl	800906c <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007afc:	e057      	b.n	8007bae <USBD_AUDIO_Setup+0x166>
        USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f001 fa42 	bl	8008f8a <USBD_CtlError>
        ret = USBD_FAIL;
 8007b06:	2303      	movs	r3, #3
 8007b08:	75fb      	strb	r3, [r7, #23]
      break;
 8007b0a:	e050      	b.n	8007bae <USBD_AUDIO_Setup+0x166>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	885b      	ldrh	r3, [r3, #2]
 8007b10:	0a1b      	lsrs	r3, r3, #8
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	2b21      	cmp	r3, #33	; 0x21
 8007b16:	d149      	bne.n	8007bac <USBD_AUDIO_Setup+0x164>
      {
        pbuf = USBD_AUDIO_CfgDesc + 18;
 8007b18:	4b2b      	ldr	r3, [pc, #172]	; (8007bc8 <USBD_AUDIO_Setup+0x180>)
 8007b1a:	60fb      	str	r3, [r7, #12]
        len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	88db      	ldrh	r3, [r3, #6]
 8007b20:	2b09      	cmp	r3, #9
 8007b22:	bf28      	it	cs
 8007b24:	2309      	movcs	r3, #9
 8007b26:	817b      	strh	r3, [r7, #10]

        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b28:	897b      	ldrh	r3, [r7, #10]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	68f9      	ldr	r1, [r7, #12]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f001 fa9c 	bl	800906c <USBD_CtlSendData>
      }
      break;
 8007b34:	e03a      	b.n	8007bac <USBD_AUDIO_Setup+0x164>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b3c:	2b03      	cmp	r3, #3
 8007b3e:	d106      	bne.n	8007b4e <USBD_AUDIO_Setup+0x106>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	2201      	movs	r2, #1
 8007b44:	4619      	mov	r1, r3
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f001 fa90 	bl	800906c <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007b4c:	e02f      	b.n	8007bae <USBD_AUDIO_Setup+0x166>
        USBD_CtlError(pdev, req);
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f001 fa1a 	bl	8008f8a <USBD_CtlError>
        ret = USBD_FAIL;
 8007b56:	2303      	movs	r3, #3
 8007b58:	75fb      	strb	r3, [r7, #23]
      break;
 8007b5a:	e028      	b.n	8007bae <USBD_AUDIO_Setup+0x166>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b62:	2b03      	cmp	r3, #3
 8007b64:	d112      	bne.n	8007b8c <USBD_AUDIO_Setup+0x144>
      {
        if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	885b      	ldrh	r3, [r3, #2]
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b08      	cmp	r3, #8
 8007b6e:	d806      	bhi.n	8007b7e <USBD_AUDIO_Setup+0x136>
        {
          haudio->alt_setting = (uint8_t)(req->wValue);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	885b      	ldrh	r3, [r3, #2]
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	461a      	mov	r2, r3
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	601a      	str	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007b7c:	e017      	b.n	8007bae <USBD_AUDIO_Setup+0x166>
          USBD_CtlError(pdev, req);
 8007b7e:	6839      	ldr	r1, [r7, #0]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f001 fa02 	bl	8008f8a <USBD_CtlError>
          ret = USBD_FAIL;
 8007b86:	2303      	movs	r3, #3
 8007b88:	75fb      	strb	r3, [r7, #23]
      break;
 8007b8a:	e010      	b.n	8007bae <USBD_AUDIO_Setup+0x166>
        USBD_CtlError(pdev, req);
 8007b8c:	6839      	ldr	r1, [r7, #0]
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f001 f9fb 	bl	8008f8a <USBD_CtlError>
        ret = USBD_FAIL;
 8007b94:	2303      	movs	r3, #3
 8007b96:	75fb      	strb	r3, [r7, #23]
      break;
 8007b98:	e009      	b.n	8007bae <USBD_AUDIO_Setup+0x166>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007b9a:	6839      	ldr	r1, [r7, #0]
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f001 f9f4 	bl	8008f8a <USBD_CtlError>
      ret = USBD_FAIL;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ba6:	e002      	b.n	8007bae <USBD_AUDIO_Setup+0x166>
      break;
 8007ba8:	bf00      	nop
 8007baa:	e008      	b.n	8007bbe <USBD_AUDIO_Setup+0x176>
      break;
 8007bac:	bf00      	nop
    }
    break;
 8007bae:	e006      	b.n	8007bbe <USBD_AUDIO_Setup+0x176>
  default:
    USBD_CtlError(pdev, req);
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f001 f9e9 	bl	8008f8a <USBD_CtlError>
    ret = USBD_FAIL;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	75fb      	strb	r3, [r7, #23]
    break;
 8007bbc:	bf00      	nop
  }

  return (uint8_t)ret;
 8007bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3718      	adds	r7, #24
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	20000052 	.word	0x20000052

08007bcc <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	226d      	movs	r2, #109	; 0x6d
 8007bd8:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 8007bda:	4b03      	ldr	r3, [pc, #12]	; (8007be8 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	20000040 	.word	0x20000040

08007bec <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	370c      	adds	r7, #12
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b084      	sub	sp, #16
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c14:	60fb      	str	r3, [r7, #12]

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007c1c:	330a      	adds	r3, #10
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d11d      	bne.n	8007c60 <USBD_AUDIO_EP0_RxReady+0x5a>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 8007c2a:	330c      	adds	r3, #12
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d116      	bne.n	8007c60 <USBD_AUDIO_EP0_RxReady+0x5a>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c38:	691a      	ldr	r2, [r3, #16]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007c40:	330b      	adds	r3, #11
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	4618      	mov	r0, r3
 8007c46:	4790      	blx	r2
      haudio->control.cmd = 0U;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007c4e:	330a      	adds	r3, #10
 8007c50:	2200      	movs	r2, #0
 8007c52:	701a      	strb	r2, [r3, #0]
      haudio->control.len = 0U;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 8007c5a:	330b      	adds	r3, #11
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	701a      	strb	r2, [r3, #0]
    }
  }

  return (uint8_t)USBD_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b083      	sub	sp, #12
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b083      	sub	sp, #12
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	460b      	mov	r3, r1
 8007cba:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cca:	b590      	push	{r4, r7, lr}
 8007ccc:	b085      	sub	sp, #20
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	70fb      	strb	r3, [r7, #3]
  uint16_t PacketSize;
  USBD_AUDIO_HandleTypeDef *haudio;

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cdc:	60fb      	str	r3, [r7, #12]

  if (epnum == AUDIO_OUT_EP)
 8007cde:	78fb      	ldrb	r3, [r7, #3]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d16c      	bne.n	8007dbe <USBD_AUDIO_DataOut+0xf4>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8007ce4:	78fb      	ldrb	r3, [r7, #3]
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f004 fa06 	bl	800c0fa <USBD_LL_GetRxDataSize>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cf8:	695c      	ldr	r4, [r3, #20]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007d00:	3308      	adds	r3, #8
 8007d02:	881b      	ldrh	r3, [r3, #0]
 8007d04:	461a      	mov	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	4413      	add	r3, r2
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	8979      	ldrh	r1, [r7, #10]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	4618      	mov	r0, r3
 8007d12:	47a0      	blx	r4
                                                           PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007d1a:	3308      	adds	r3, #8
 8007d1c:	881a      	ldrh	r2, [r3, #0]
 8007d1e:	897b      	ldrh	r3, [r7, #10]
 8007d20:	4413      	add	r3, r2
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007d2a:	3308      	adds	r3, #8
 8007d2c:	801a      	strh	r2, [r3, #0]

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007d34:	3308      	adds	r3, #8
 8007d36:	881b      	ldrh	r3, [r3, #0]
 8007d38:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8007d3c:	d11c      	bne.n	8007d78 <USBD_AUDIO_DataOut+0xae>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007d44:	3308      	adds	r3, #8
 8007d46:	2200      	movs	r2, #0
 8007d48:	801a      	strh	r2, [r3, #0]

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007d50:	3304      	adds	r3, #4
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	2b03      	cmp	r3, #3
 8007d56:	d10f      	bne.n	8007d78 <USBD_AUDIO_DataOut+0xae>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	1d10      	adds	r0, r2, #4
 8007d64:	2201      	movs	r2, #1
 8007d66:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8007d6a:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007d72:	3304      	adds	r3, #4
 8007d74:	2200      	movs	r2, #0
 8007d76:	701a      	strb	r2, [r3, #0]
      }
    }

    if (haudio->rd_enable == 0U)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007d7e:	3305      	adds	r3, #5
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10d      	bne.n	8007da2 <USBD_AUDIO_DataOut+0xd8>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	881b      	ldrh	r3, [r3, #0]
 8007d90:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8007d94:	d105      	bne.n	8007da2 <USBD_AUDIO_DataOut+0xd8>
      {
        haudio->rd_enable = 1U;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007d9c:	3305      	adds	r3, #5
 8007d9e:	2201      	movs	r2, #1
 8007da0:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
                                 &haudio->buffer[haudio->wr_ptr],
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007da8:	3308      	adds	r3, #8
 8007daa:	881b      	ldrh	r3, [r3, #0]
 8007dac:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	4413      	add	r3, r2
 8007db2:	1d1a      	adds	r2, r3, #4
 8007db4:	23c0      	movs	r3, #192	; 0xc0
 8007db6:	2101      	movs	r1, #1
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f004 f97d 	bl	800c0b8 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3714      	adds	r7, #20
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd90      	pop	{r4, r7, pc}

08007dc8 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dd8:	60fb      	str	r3, [r7, #12]

  (void)USBD_memset(haudio->control.data, 0, 64U);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007de0:	330b      	adds	r3, #11
 8007de2:	2240      	movs	r2, #64	; 0x40
 8007de4:	2100      	movs	r1, #0
 8007de6:	4618      	mov	r0, r3
 8007de8:	f004 fbac 	bl	800c544 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007df2:	330b      	adds	r3, #11
 8007df4:	683a      	ldr	r2, [r7, #0]
 8007df6:	88d2      	ldrh	r2, [r2, #6]
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f001 f936 	bl	800906c <USBD_CtlSendData>
}
 8007e00:	bf00      	nop
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e18:	60fb      	str	r3, [r7, #12]

  if (req->wLength != 0U)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	88db      	ldrh	r3, [r3, #6]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d021      	beq.n	8007e66 <AUDIO_REQ_SetCurrent+0x5e>
  {
    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007e28:	330b      	adds	r3, #11
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	88d2      	ldrh	r2, [r2, #6]
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f001 f947 	bl	80090c4 <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007e3c:	330a      	adds	r3, #10
 8007e3e:	2201      	movs	r2, #1
 8007e40:	701a      	strb	r2, [r3, #0]
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	88db      	ldrh	r3, [r3, #6]
 8007e46:	b2da      	uxtb	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 8007e4e:	330b      	adds	r3, #11
 8007e50:	701a      	strb	r2, [r3, #0]
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	889b      	ldrh	r3, [r3, #4]
 8007e56:	0a1b      	lsrs	r3, r3, #8
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	b2da      	uxtb	r2, r3
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 8007e62:	330c      	adds	r3, #12
 8007e64:	701a      	strb	r2, [r3, #0]
  }
}
 8007e66:	bf00      	nop
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
	...

08007e70 <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	220a      	movs	r2, #10
 8007e7c:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 8007e7e:	4b03      	ldr	r3, [pc, #12]	; (8007e8c <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	200000b0 	.word	0x200000b0

08007e90 <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e004      	b.n	8007eae <USBD_AUDIO_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
	...

08007ebc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10a      	bne.n	8007ee6 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8007ed0:	481a      	ldr	r0, [pc, #104]	; (8007f3c <USBD_Init+0x80>)
 8007ed2:	f004 fbe9 	bl	800c6a8 <iprintf>
 8007ed6:	481a      	ldr	r0, [pc, #104]	; (8007f40 <USBD_Init+0x84>)
 8007ed8:	f004 fbe6 	bl	800c6a8 <iprintf>
 8007edc:	200a      	movs	r0, #10
 8007ede:	f004 fbfb 	bl	800c6d8 <putchar>
#endif
    return USBD_FAIL;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	e025      	b.n	8007f32 <USBD_Init+0x76>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d003      	beq.n	8007ef8 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d003      	beq.n	8007f0a <USBD_Init+0x4e>
  {
    pdev->pConfDesc = NULL;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d003      	beq.n	8007f18 <USBD_Init+0x5c>
  {
    pdev->pDesc = pdesc;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	79fa      	ldrb	r2, [r7, #7]
 8007f24:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f003 ff6c 	bl	800be04 <USBD_LL_Init>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3718      	adds	r7, #24
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	0800d878 	.word	0x0800d878
 8007f40:	0800d880 	.word	0x0800d880

08007f44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10a      	bne.n	8007f6e <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8007f58:	480f      	ldr	r0, [pc, #60]	; (8007f98 <USBD_RegisterClass+0x54>)
 8007f5a:	f004 fba5 	bl	800c6a8 <iprintf>
 8007f5e:	480f      	ldr	r0, [pc, #60]	; (8007f9c <USBD_RegisterClass+0x58>)
 8007f60:	f004 fba2 	bl	800c6a8 <iprintf>
 8007f64:	200a      	movs	r0, #10
 8007f66:	f004 fbb7 	bl	800c6d8 <putchar>
#endif
    return USBD_FAIL;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e010      	b.n	8007f90 <USBD_RegisterClass+0x4c>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	683a      	ldr	r2, [r7, #0]
 8007f72:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7e:	f107 020e 	add.w	r2, r7, #14
 8007f82:	4610      	mov	r0, r2
 8007f84:	4798      	blx	r3
 8007f86:	4602      	mov	r2, r0
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	0800d878 	.word	0x0800d878
 8007f9c:	0800d898 	.word	0x0800d898

08007fa0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f003 ff7b 	bl	800bea4 <USBD_LL_Start>
 8007fae:	4603      	mov	r3, r0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	370c      	adds	r7, #12
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b084      	sub	sp, #16
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d009      	beq.n	8007ffc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	78fa      	ldrb	r2, [r7, #3]
 8007ff2:	4611      	mov	r1, r2
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	4798      	blx	r3
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b082      	sub	sp, #8
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
 800800e:	460b      	mov	r3, r1
 8008010:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008018:	2b00      	cmp	r3, #0
 800801a:	d007      	beq.n	800802c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	78fa      	ldrb	r2, [r7, #3]
 8008026:	4611      	mov	r1, r2
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	4798      	blx	r3
  }

  return USBD_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b084      	sub	sp, #16
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	4618      	mov	r0, r3
 800804a:	f000 ff64 	bl	8008f16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800805c:	461a      	mov	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800806a:	f003 031f 	and.w	r3, r3, #31
 800806e:	2b02      	cmp	r3, #2
 8008070:	d01a      	beq.n	80080a8 <USBD_LL_SetupStage+0x72>
 8008072:	2b02      	cmp	r3, #2
 8008074:	d822      	bhi.n	80080bc <USBD_LL_SetupStage+0x86>
 8008076:	2b00      	cmp	r3, #0
 8008078:	d002      	beq.n	8008080 <USBD_LL_SetupStage+0x4a>
 800807a:	2b01      	cmp	r3, #1
 800807c:	d00a      	beq.n	8008094 <USBD_LL_SetupStage+0x5e>
 800807e:	e01d      	b.n	80080bc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008086:	4619      	mov	r1, r3
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fa17 	bl	80084bc <USBD_StdDevReq>
 800808e:	4603      	mov	r3, r0
 8008090:	73fb      	strb	r3, [r7, #15]
      break;
 8008092:	e020      	b.n	80080d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 fa7b 	bl	8008598 <USBD_StdItfReq>
 80080a2:	4603      	mov	r3, r0
 80080a4:	73fb      	strb	r3, [r7, #15]
      break;
 80080a6:	e016      	b.n	80080d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080ae:	4619      	mov	r1, r3
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fab9 	bl	8008628 <USBD_StdEPReq>
 80080b6:	4603      	mov	r3, r0
 80080b8:	73fb      	strb	r3, [r7, #15]
      break;
 80080ba:	e00c      	b.n	80080d6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	4619      	mov	r1, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f003 ff4a 	bl	800bf64 <USBD_LL_StallEP>
 80080d0:	4603      	mov	r3, r0
 80080d2:	73fb      	strb	r3, [r7, #15]
      break;
 80080d4:	bf00      	nop
  }

  return ret;
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	460b      	mov	r3, r1
 80080ea:	607a      	str	r2, [r7, #4]
 80080ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80080ee:	7afb      	ldrb	r3, [r7, #11]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d137      	bne.n	8008164 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80080fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008102:	2b03      	cmp	r3, #3
 8008104:	d14a      	bne.n	800819c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	689a      	ldr	r2, [r3, #8]
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	429a      	cmp	r2, r3
 8008110:	d913      	bls.n	800813a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	689a      	ldr	r2, [r3, #8]
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	1ad2      	subs	r2, r2, r3
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	68da      	ldr	r2, [r3, #12]
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	4293      	cmp	r3, r2
 800812a:	bf28      	it	cs
 800812c:	4613      	movcs	r3, r2
 800812e:	461a      	mov	r2, r3
 8008130:	6879      	ldr	r1, [r7, #4]
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f000 ffe3 	bl	80090fe <USBD_CtlContinueRx>
 8008138:	e030      	b.n	800819c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00a      	beq.n	800815c <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800814c:	2b03      	cmp	r3, #3
 800814e:	d105      	bne.n	800815c <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f000 ffdf 	bl	8009120 <USBD_CtlSendStatus>
 8008162:	e01b      	b.n	800819c <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d013      	beq.n	8008198 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008176:	2b03      	cmp	r3, #3
 8008178:	d10e      	bne.n	8008198 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	7afa      	ldrb	r2, [r7, #11]
 8008184:	4611      	mov	r1, r2
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	4798      	blx	r3
 800818a:	4603      	mov	r3, r0
 800818c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800818e:	7dfb      	ldrb	r3, [r7, #23]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d003      	beq.n	800819c <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008194:	7dfb      	ldrb	r3, [r7, #23]
 8008196:	e002      	b.n	800819e <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008198:	2303      	movs	r3, #3
 800819a:	e000      	b.n	800819e <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3718      	adds	r7, #24
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b086      	sub	sp, #24
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	60f8      	str	r0, [r7, #12]
 80081ae:	460b      	mov	r3, r1
 80081b0:	607a      	str	r2, [r7, #4]
 80081b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80081b4:	7afb      	ldrb	r3, [r7, #11]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d16a      	bne.n	8008290 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	3314      	adds	r3, #20
 80081be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d155      	bne.n	8008276 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	689a      	ldr	r2, [r3, #8]
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d914      	bls.n	8008200 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	689a      	ldr	r2, [r3, #8]
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	1ad2      	subs	r2, r2, r3
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	461a      	mov	r2, r3
 80081ea:	6879      	ldr	r1, [r7, #4]
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 ff58 	bl	80090a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081f2:	2300      	movs	r3, #0
 80081f4:	2200      	movs	r2, #0
 80081f6:	2100      	movs	r1, #0
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f003 ff5d 	bl	800c0b8 <USBD_LL_PrepareReceive>
 80081fe:	e03a      	b.n	8008276 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	68da      	ldr	r2, [r3, #12]
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	429a      	cmp	r2, r3
 800820a:	d11c      	bne.n	8008246 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	685a      	ldr	r2, [r3, #4]
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008214:	429a      	cmp	r2, r3
 8008216:	d316      	bcc.n	8008246 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	685a      	ldr	r2, [r3, #4]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008222:	429a      	cmp	r2, r3
 8008224:	d20f      	bcs.n	8008246 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008226:	2200      	movs	r2, #0
 8008228:	2100      	movs	r1, #0
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f000 ff39 	bl	80090a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008238:	2300      	movs	r3, #0
 800823a:	2200      	movs	r2, #0
 800823c:	2100      	movs	r1, #0
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f003 ff3a 	bl	800c0b8 <USBD_LL_PrepareReceive>
 8008244:	e017      	b.n	8008276 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00a      	beq.n	8008268 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008258:	2b03      	cmp	r3, #3
 800825a:	d105      	bne.n	8008268 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008268:	2180      	movs	r1, #128	; 0x80
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f003 fe7a 	bl	800bf64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f000 ff68 	bl	8009146 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800827c:	2b01      	cmp	r3, #1
 800827e:	d123      	bne.n	80082c8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f7ff fe99 	bl	8007fb8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800828e:	e01b      	b.n	80082c8 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008296:	695b      	ldr	r3, [r3, #20]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d013      	beq.n	80082c4 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80082a2:	2b03      	cmp	r3, #3
 80082a4:	d10e      	bne.n	80082c4 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	7afa      	ldrb	r2, [r7, #11]
 80082b0:	4611      	mov	r1, r2
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	4798      	blx	r3
 80082b6:	4603      	mov	r3, r0
 80082b8:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d003      	beq.n	80082c8 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80082c0:	7dfb      	ldrb	r3, [r7, #23]
 80082c2:	e002      	b.n	80082ca <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e000      	b.n	80082ca <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3718      	adds	r7, #24
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b082      	sub	sp, #8
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d009      	beq.n	8008316 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	6852      	ldr	r2, [r2, #4]
 800830e:	b2d2      	uxtb	r2, r2
 8008310:	4611      	mov	r1, r2
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008316:	2340      	movs	r3, #64	; 0x40
 8008318:	2200      	movs	r2, #0
 800831a:	2100      	movs	r1, #0
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f003 fddc 	bl	800beda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2240      	movs	r2, #64	; 0x40
 800832e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008332:	2340      	movs	r3, #64	; 0x40
 8008334:	2200      	movs	r2, #0
 8008336:	2180      	movs	r1, #128	; 0x80
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f003 fdce 	bl	800beda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2201      	movs	r2, #1
 8008342:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2240      	movs	r2, #64	; 0x40
 8008348:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	460b      	mov	r3, r1
 800835e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	78fa      	ldrb	r2, [r7, #3]
 8008364:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2204      	movs	r2, #4
 800838c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	370c      	adds	r7, #12
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800839e:	b480      	push	{r7}
 80083a0:	b083      	sub	sp, #12
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ac:	2b04      	cmp	r3, #4
 80083ae:	d105      	bne.n	80083bc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b082      	sub	sp, #8
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083d8:	2b03      	cmp	r3, #3
 80083da:	d10b      	bne.n	80083f4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e2:	69db      	ldr	r3, [r3, #28]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d005      	beq.n	80083f4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ee:	69db      	ldr	r3, [r3, #28]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3708      	adds	r7, #8
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80083fe:	b480      	push	{r7}
 8008400:	b083      	sub	sp, #12
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
 8008406:	460b      	mov	r3, r1
 8008408:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	460b      	mov	r3, r1
 8008422:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	370c      	adds	r7, #12
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr

08008432 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008432:	b480      	push	{r7}
 8008434:	b083      	sub	sp, #12
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800845e:	2b00      	cmp	r3, #0
 8008460:	d009      	beq.n	8008476 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	6852      	ldr	r2, [r2, #4]
 800846e:	b2d2      	uxtb	r2, r2
 8008470:	4611      	mov	r1, r2
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	4798      	blx	r3
  }

  return USBD_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008480:	b480      	push	{r7}
 8008482:	b087      	sub	sp, #28
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	3301      	adds	r3, #1
 8008496:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800849e:	8a3b      	ldrh	r3, [r7, #16]
 80084a0:	021b      	lsls	r3, r3, #8
 80084a2:	b21a      	sxth	r2, r3
 80084a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	b21b      	sxth	r3, r3
 80084ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80084ae:	89fb      	ldrh	r3, [r7, #14]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	371c      	adds	r7, #28
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084d2:	2b40      	cmp	r3, #64	; 0x40
 80084d4:	d005      	beq.n	80084e2 <USBD_StdDevReq+0x26>
 80084d6:	2b40      	cmp	r3, #64	; 0x40
 80084d8:	d853      	bhi.n	8008582 <USBD_StdDevReq+0xc6>
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00b      	beq.n	80084f6 <USBD_StdDevReq+0x3a>
 80084de:	2b20      	cmp	r3, #32
 80084e0:	d14f      	bne.n	8008582 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	4798      	blx	r3
 80084f0:	4603      	mov	r3, r0
 80084f2:	73fb      	strb	r3, [r7, #15]
    break;
 80084f4:	e04a      	b.n	800858c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	785b      	ldrb	r3, [r3, #1]
 80084fa:	2b09      	cmp	r3, #9
 80084fc:	d83b      	bhi.n	8008576 <USBD_StdDevReq+0xba>
 80084fe:	a201      	add	r2, pc, #4	; (adr r2, 8008504 <USBD_StdDevReq+0x48>)
 8008500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008504:	08008559 	.word	0x08008559
 8008508:	0800856d 	.word	0x0800856d
 800850c:	08008577 	.word	0x08008577
 8008510:	08008563 	.word	0x08008563
 8008514:	08008577 	.word	0x08008577
 8008518:	08008537 	.word	0x08008537
 800851c:	0800852d 	.word	0x0800852d
 8008520:	08008577 	.word	0x08008577
 8008524:	0800854f 	.word	0x0800854f
 8008528:	08008541 	.word	0x08008541
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800852c:	6839      	ldr	r1, [r7, #0]
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f9d8 	bl	80088e4 <USBD_GetDescriptor>
      break;
 8008534:	e024      	b.n	8008580 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fb67 	bl	8008c0c <USBD_SetAddress>
      break;
 800853e:	e01f      	b.n	8008580 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fba6 	bl	8008c94 <USBD_SetConfig>
 8008548:	4603      	mov	r3, r0
 800854a:	73fb      	strb	r3, [r7, #15]
      break;
 800854c:	e018      	b.n	8008580 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fc43 	bl	8008ddc <USBD_GetConfig>
      break;
 8008556:	e013      	b.n	8008580 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fc73 	bl	8008e46 <USBD_GetStatus>
      break;
 8008560:	e00e      	b.n	8008580 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008562:	6839      	ldr	r1, [r7, #0]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fca1 	bl	8008eac <USBD_SetFeature>
      break;
 800856a:	e009      	b.n	8008580 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800856c:	6839      	ldr	r1, [r7, #0]
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fcb0 	bl	8008ed4 <USBD_ClrFeature>
      break;
 8008574:	e004      	b.n	8008580 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fd06 	bl	8008f8a <USBD_CtlError>
      break;
 800857e:	bf00      	nop
    }
    break;
 8008580:	e004      	b.n	800858c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fd00 	bl	8008f8a <USBD_CtlError>
    break;
 800858a:	bf00      	nop
  }

  return ret;
 800858c:	7bfb      	ldrb	r3, [r7, #15]
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop

08008598 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085a2:	2300      	movs	r3, #0
 80085a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085ae:	2b40      	cmp	r3, #64	; 0x40
 80085b0:	d005      	beq.n	80085be <USBD_StdItfReq+0x26>
 80085b2:	2b40      	cmp	r3, #64	; 0x40
 80085b4:	d82e      	bhi.n	8008614 <USBD_StdItfReq+0x7c>
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d001      	beq.n	80085be <USBD_StdItfReq+0x26>
 80085ba:	2b20      	cmp	r3, #32
 80085bc:	d12a      	bne.n	8008614 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085c4:	3b01      	subs	r3, #1
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d81d      	bhi.n	8008606 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	889b      	ldrh	r3, [r3, #4]
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	2b08      	cmp	r3, #8
 80085d2:	d813      	bhi.n	80085fc <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	4798      	blx	r3
 80085e2:	4603      	mov	r3, r0
 80085e4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	88db      	ldrh	r3, [r3, #6]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d110      	bne.n	8008610 <USBD_StdItfReq+0x78>
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10d      	bne.n	8008610 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fd93 	bl	8009120 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80085fa:	e009      	b.n	8008610 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fcc3 	bl	8008f8a <USBD_CtlError>
      break;
 8008604:	e004      	b.n	8008610 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fcbe 	bl	8008f8a <USBD_CtlError>
      break;
 800860e:	e000      	b.n	8008612 <USBD_StdItfReq+0x7a>
      break;
 8008610:	bf00      	nop
    }
    break;
 8008612:	e004      	b.n	800861e <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fcb7 	bl	8008f8a <USBD_CtlError>
    break;
 800861c:	bf00      	nop
  }

  return ret;
 800861e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	889b      	ldrh	r3, [r3, #4]
 800863a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008644:	2b40      	cmp	r3, #64	; 0x40
 8008646:	d007      	beq.n	8008658 <USBD_StdEPReq+0x30>
 8008648:	2b40      	cmp	r3, #64	; 0x40
 800864a:	f200 8140 	bhi.w	80088ce <USBD_StdEPReq+0x2a6>
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00c      	beq.n	800866c <USBD_StdEPReq+0x44>
 8008652:	2b20      	cmp	r3, #32
 8008654:	f040 813b 	bne.w	80088ce <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	6839      	ldr	r1, [r7, #0]
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	4798      	blx	r3
 8008666:	4603      	mov	r3, r0
 8008668:	73fb      	strb	r3, [r7, #15]
    break;
 800866a:	e135      	b.n	80088d8 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	785b      	ldrb	r3, [r3, #1]
 8008670:	2b03      	cmp	r3, #3
 8008672:	d007      	beq.n	8008684 <USBD_StdEPReq+0x5c>
 8008674:	2b03      	cmp	r3, #3
 8008676:	f300 8124 	bgt.w	80088c2 <USBD_StdEPReq+0x29a>
 800867a:	2b00      	cmp	r3, #0
 800867c:	d07b      	beq.n	8008776 <USBD_StdEPReq+0x14e>
 800867e:	2b01      	cmp	r3, #1
 8008680:	d03b      	beq.n	80086fa <USBD_StdEPReq+0xd2>
 8008682:	e11e      	b.n	80088c2 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800868a:	2b02      	cmp	r3, #2
 800868c:	d002      	beq.n	8008694 <USBD_StdEPReq+0x6c>
 800868e:	2b03      	cmp	r3, #3
 8008690:	d016      	beq.n	80086c0 <USBD_StdEPReq+0x98>
 8008692:	e02c      	b.n	80086ee <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008694:	7bbb      	ldrb	r3, [r7, #14]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00d      	beq.n	80086b6 <USBD_StdEPReq+0x8e>
 800869a:	7bbb      	ldrb	r3, [r7, #14]
 800869c:	2b80      	cmp	r3, #128	; 0x80
 800869e:	d00a      	beq.n	80086b6 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80086a0:	7bbb      	ldrb	r3, [r7, #14]
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f003 fc5d 	bl	800bf64 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80086aa:	2180      	movs	r1, #128	; 0x80
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f003 fc59 	bl	800bf64 <USBD_LL_StallEP>
 80086b2:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80086b4:	e020      	b.n	80086f8 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 80086b6:	6839      	ldr	r1, [r7, #0]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fc66 	bl	8008f8a <USBD_CtlError>
        break;
 80086be:	e01b      	b.n	80086f8 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	885b      	ldrh	r3, [r3, #2]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10e      	bne.n	80086e6 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80086c8:	7bbb      	ldrb	r3, [r7, #14]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00b      	beq.n	80086e6 <USBD_StdEPReq+0xbe>
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	2b80      	cmp	r3, #128	; 0x80
 80086d2:	d008      	beq.n	80086e6 <USBD_StdEPReq+0xbe>
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	88db      	ldrh	r3, [r3, #6]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d104      	bne.n	80086e6 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80086dc:	7bbb      	ldrb	r3, [r7, #14]
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f003 fc3f 	bl	800bf64 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fd1a 	bl	8009120 <USBD_CtlSendStatus>

        break;
 80086ec:	e004      	b.n	80086f8 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 80086ee:	6839      	ldr	r1, [r7, #0]
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 fc4a 	bl	8008f8a <USBD_CtlError>
        break;
 80086f6:	bf00      	nop
      }
      break;
 80086f8:	e0e8      	b.n	80088cc <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008700:	2b02      	cmp	r3, #2
 8008702:	d002      	beq.n	800870a <USBD_StdEPReq+0xe2>
 8008704:	2b03      	cmp	r3, #3
 8008706:	d016      	beq.n	8008736 <USBD_StdEPReq+0x10e>
 8008708:	e02e      	b.n	8008768 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800870a:	7bbb      	ldrb	r3, [r7, #14]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00d      	beq.n	800872c <USBD_StdEPReq+0x104>
 8008710:	7bbb      	ldrb	r3, [r7, #14]
 8008712:	2b80      	cmp	r3, #128	; 0x80
 8008714:	d00a      	beq.n	800872c <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008716:	7bbb      	ldrb	r3, [r7, #14]
 8008718:	4619      	mov	r1, r3
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f003 fc22 	bl	800bf64 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008720:	2180      	movs	r1, #128	; 0x80
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f003 fc1e 	bl	800bf64 <USBD_LL_StallEP>
 8008728:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800872a:	e023      	b.n	8008774 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fc2b 	bl	8008f8a <USBD_CtlError>
        break;
 8008734:	e01e      	b.n	8008774 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	885b      	ldrh	r3, [r3, #2]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d119      	bne.n	8008772 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008744:	2b00      	cmp	r3, #0
 8008746:	d004      	beq.n	8008752 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008748:	7bbb      	ldrb	r3, [r7, #14]
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f003 fc28 	bl	800bfa2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 fce4 	bl	8009120 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	4798      	blx	r3
        }
        break;
 8008766:	e004      	b.n	8008772 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8008768:	6839      	ldr	r1, [r7, #0]
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fc0d 	bl	8008f8a <USBD_CtlError>
        break;
 8008770:	e000      	b.n	8008774 <USBD_StdEPReq+0x14c>
        break;
 8008772:	bf00      	nop
      }
      break;
 8008774:	e0aa      	b.n	80088cc <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800877c:	2b02      	cmp	r3, #2
 800877e:	d002      	beq.n	8008786 <USBD_StdEPReq+0x15e>
 8008780:	2b03      	cmp	r3, #3
 8008782:	d032      	beq.n	80087ea <USBD_StdEPReq+0x1c2>
 8008784:	e097      	b.n	80088b6 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008786:	7bbb      	ldrb	r3, [r7, #14]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d007      	beq.n	800879c <USBD_StdEPReq+0x174>
 800878c:	7bbb      	ldrb	r3, [r7, #14]
 800878e:	2b80      	cmp	r3, #128	; 0x80
 8008790:	d004      	beq.n	800879c <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fbf8 	bl	8008f8a <USBD_CtlError>
          break;
 800879a:	e091      	b.n	80088c0 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800879c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	da0b      	bge.n	80087bc <USBD_StdEPReq+0x194>
 80087a4:	7bbb      	ldrb	r3, [r7, #14]
 80087a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087aa:	4613      	mov	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4413      	add	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	3310      	adds	r3, #16
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	4413      	add	r3, r2
 80087b8:	3304      	adds	r3, #4
 80087ba:	e00b      	b.n	80087d4 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 80087bc:	7bbb      	ldrb	r3, [r7, #14]
 80087be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087c2:	4613      	mov	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	4413      	add	r3, r2
 80087d2:	3304      	adds	r3, #4
 80087d4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	2200      	movs	r2, #0
 80087da:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	2202      	movs	r2, #2
 80087e0:	4619      	mov	r1, r3
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fc42 	bl	800906c <USBD_CtlSendData>
        break;
 80087e8:	e06a      	b.n	80088c0 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80087ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	da11      	bge.n	8008816 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	f003 020f 	and.w	r2, r3, #15
 80087f8:	6879      	ldr	r1, [r7, #4]
 80087fa:	4613      	mov	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	440b      	add	r3, r1
 8008804:	3324      	adds	r3, #36	; 0x24
 8008806:	881b      	ldrh	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d117      	bne.n	800883c <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800880c:	6839      	ldr	r1, [r7, #0]
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fbbb 	bl	8008f8a <USBD_CtlError>
            break;
 8008814:	e054      	b.n	80088c0 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008816:	7bbb      	ldrb	r3, [r7, #14]
 8008818:	f003 020f 	and.w	r2, r3, #15
 800881c:	6879      	ldr	r1, [r7, #4]
 800881e:	4613      	mov	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	4413      	add	r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	440b      	add	r3, r1
 8008828:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800882c:	881b      	ldrh	r3, [r3, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d104      	bne.n	800883c <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8008832:	6839      	ldr	r1, [r7, #0]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 fba8 	bl	8008f8a <USBD_CtlError>
            break;
 800883a:	e041      	b.n	80088c0 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800883c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008840:	2b00      	cmp	r3, #0
 8008842:	da0b      	bge.n	800885c <USBD_StdEPReq+0x234>
 8008844:	7bbb      	ldrb	r3, [r7, #14]
 8008846:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800884a:	4613      	mov	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	3310      	adds	r3, #16
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	4413      	add	r3, r2
 8008858:	3304      	adds	r3, #4
 800885a:	e00b      	b.n	8008874 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800885c:	7bbb      	ldrb	r3, [r7, #14]
 800885e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008862:	4613      	mov	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4413      	add	r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	4413      	add	r3, r2
 8008872:	3304      	adds	r3, #4
 8008874:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008876:	7bbb      	ldrb	r3, [r7, #14]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d002      	beq.n	8008882 <USBD_StdEPReq+0x25a>
 800887c:	7bbb      	ldrb	r3, [r7, #14]
 800887e:	2b80      	cmp	r3, #128	; 0x80
 8008880:	d103      	bne.n	800888a <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2200      	movs	r2, #0
 8008886:	601a      	str	r2, [r3, #0]
 8008888:	e00e      	b.n	80088a8 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800888a:	7bbb      	ldrb	r3, [r7, #14]
 800888c:	4619      	mov	r1, r3
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f003 fba6 	bl	800bfe0 <USBD_LL_IsStallEP>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d003      	beq.n	80088a2 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	2201      	movs	r2, #1
 800889e:	601a      	str	r2, [r3, #0]
 80088a0:	e002      	b.n	80088a8 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	2200      	movs	r2, #0
 80088a6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	2202      	movs	r2, #2
 80088ac:	4619      	mov	r1, r3
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 fbdc 	bl	800906c <USBD_CtlSendData>
          break;
 80088b4:	e004      	b.n	80088c0 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 fb66 	bl	8008f8a <USBD_CtlError>
        break;
 80088be:	bf00      	nop
      }
      break;
 80088c0:	e004      	b.n	80088cc <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 80088c2:	6839      	ldr	r1, [r7, #0]
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 fb60 	bl	8008f8a <USBD_CtlError>
      break;
 80088ca:	bf00      	nop
    }
    break;
 80088cc:	e004      	b.n	80088d8 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fb5a 	bl	8008f8a <USBD_CtlError>
    break;
 80088d6:	bf00      	nop
  }

  return ret;
 80088d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
	...

080088e4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80088f2:	2300      	movs	r3, #0
 80088f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80088f6:	2300      	movs	r3, #0
 80088f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	885b      	ldrh	r3, [r3, #2]
 80088fe:	0a1b      	lsrs	r3, r3, #8
 8008900:	b29b      	uxth	r3, r3
 8008902:	3b01      	subs	r3, #1
 8008904:	2b0e      	cmp	r3, #14
 8008906:	f200 8152 	bhi.w	8008bae <USBD_GetDescriptor+0x2ca>
 800890a:	a201      	add	r2, pc, #4	; (adr r2, 8008910 <USBD_GetDescriptor+0x2c>)
 800890c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008910:	08008981 	.word	0x08008981
 8008914:	08008999 	.word	0x08008999
 8008918:	080089d9 	.word	0x080089d9
 800891c:	08008baf 	.word	0x08008baf
 8008920:	08008baf 	.word	0x08008baf
 8008924:	08008b4f 	.word	0x08008b4f
 8008928:	08008b7b 	.word	0x08008b7b
 800892c:	08008baf 	.word	0x08008baf
 8008930:	08008baf 	.word	0x08008baf
 8008934:	08008baf 	.word	0x08008baf
 8008938:	08008baf 	.word	0x08008baf
 800893c:	08008baf 	.word	0x08008baf
 8008940:	08008baf 	.word	0x08008baf
 8008944:	08008baf 	.word	0x08008baf
 8008948:	0800894d 	.word	0x0800894d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008952:	69db      	ldr	r3, [r3, #28]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00b      	beq.n	8008970 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800895e:	69db      	ldr	r3, [r3, #28]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	7c12      	ldrb	r2, [r2, #16]
 8008964:	f107 0108 	add.w	r1, r7, #8
 8008968:	4610      	mov	r0, r2
 800896a:	4798      	blx	r3
 800896c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800896e:	e126      	b.n	8008bbe <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fb09 	bl	8008f8a <USBD_CtlError>
      err++;
 8008978:	7afb      	ldrb	r3, [r7, #11]
 800897a:	3301      	adds	r3, #1
 800897c:	72fb      	strb	r3, [r7, #11]
    break;
 800897e:	e11e      	b.n	8008bbe <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	7c12      	ldrb	r2, [r2, #16]
 800898c:	f107 0108 	add.w	r1, r7, #8
 8008990:	4610      	mov	r0, r2
 8008992:	4798      	blx	r3
 8008994:	60f8      	str	r0, [r7, #12]
    break;
 8008996:	e112      	b.n	8008bbe <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	7c1b      	ldrb	r3, [r3, #16]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10d      	bne.n	80089bc <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a8:	f107 0208 	add.w	r2, r7, #8
 80089ac:	4610      	mov	r0, r2
 80089ae:	4798      	blx	r3
 80089b0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	3301      	adds	r3, #1
 80089b6:	2202      	movs	r2, #2
 80089b8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80089ba:	e100      	b.n	8008bbe <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c4:	f107 0208 	add.w	r2, r7, #8
 80089c8:	4610      	mov	r0, r2
 80089ca:	4798      	blx	r3
 80089cc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3301      	adds	r3, #1
 80089d2:	2202      	movs	r2, #2
 80089d4:	701a      	strb	r2, [r3, #0]
    break;
 80089d6:	e0f2      	b.n	8008bbe <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	885b      	ldrh	r3, [r3, #2]
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b05      	cmp	r3, #5
 80089e0:	f200 80ac 	bhi.w	8008b3c <USBD_GetDescriptor+0x258>
 80089e4:	a201      	add	r2, pc, #4	; (adr r2, 80089ec <USBD_GetDescriptor+0x108>)
 80089e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ea:	bf00      	nop
 80089ec:	08008a05 	.word	0x08008a05
 80089f0:	08008a39 	.word	0x08008a39
 80089f4:	08008a6d 	.word	0x08008a6d
 80089f8:	08008aa1 	.word	0x08008aa1
 80089fc:	08008ad5 	.word	0x08008ad5
 8008a00:	08008b09 	.word	0x08008b09
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00b      	beq.n	8008a28 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	7c12      	ldrb	r2, [r2, #16]
 8008a1c:	f107 0108 	add.w	r1, r7, #8
 8008a20:	4610      	mov	r0, r2
 8008a22:	4798      	blx	r3
 8008a24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a26:	e091      	b.n	8008b4c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 faad 	bl	8008f8a <USBD_CtlError>
        err++;
 8008a30:	7afb      	ldrb	r3, [r7, #11]
 8008a32:	3301      	adds	r3, #1
 8008a34:	72fb      	strb	r3, [r7, #11]
      break;
 8008a36:	e089      	b.n	8008b4c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00b      	beq.n	8008a5c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	7c12      	ldrb	r2, [r2, #16]
 8008a50:	f107 0108 	add.w	r1, r7, #8
 8008a54:	4610      	mov	r0, r2
 8008a56:	4798      	blx	r3
 8008a58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a5a:	e077      	b.n	8008b4c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fa93 	bl	8008f8a <USBD_CtlError>
        err++;
 8008a64:	7afb      	ldrb	r3, [r7, #11]
 8008a66:	3301      	adds	r3, #1
 8008a68:	72fb      	strb	r3, [r7, #11]
      break;
 8008a6a:	e06f      	b.n	8008b4c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00b      	beq.n	8008a90 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	7c12      	ldrb	r2, [r2, #16]
 8008a84:	f107 0108 	add.w	r1, r7, #8
 8008a88:	4610      	mov	r0, r2
 8008a8a:	4798      	blx	r3
 8008a8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a8e:	e05d      	b.n	8008b4c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a90:	6839      	ldr	r1, [r7, #0]
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fa79 	bl	8008f8a <USBD_CtlError>
        err++;
 8008a98:	7afb      	ldrb	r3, [r7, #11]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	72fb      	strb	r3, [r7, #11]
      break;
 8008a9e:	e055      	b.n	8008b4c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00b      	beq.n	8008ac4 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	7c12      	ldrb	r2, [r2, #16]
 8008ab8:	f107 0108 	add.w	r1, r7, #8
 8008abc:	4610      	mov	r0, r2
 8008abe:	4798      	blx	r3
 8008ac0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ac2:	e043      	b.n	8008b4c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fa5f 	bl	8008f8a <USBD_CtlError>
        err++;
 8008acc:	7afb      	ldrb	r3, [r7, #11]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	72fb      	strb	r3, [r7, #11]
      break;
 8008ad2:	e03b      	b.n	8008b4c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ada:	695b      	ldr	r3, [r3, #20]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00b      	beq.n	8008af8 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	7c12      	ldrb	r2, [r2, #16]
 8008aec:	f107 0108 	add.w	r1, r7, #8
 8008af0:	4610      	mov	r0, r2
 8008af2:	4798      	blx	r3
 8008af4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008af6:	e029      	b.n	8008b4c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 fa45 	bl	8008f8a <USBD_CtlError>
        err++;
 8008b00:	7afb      	ldrb	r3, [r7, #11]
 8008b02:	3301      	adds	r3, #1
 8008b04:	72fb      	strb	r3, [r7, #11]
      break;
 8008b06:	e021      	b.n	8008b4c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b0e:	699b      	ldr	r3, [r3, #24]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00b      	beq.n	8008b2c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	7c12      	ldrb	r2, [r2, #16]
 8008b20:	f107 0108 	add.w	r1, r7, #8
 8008b24:	4610      	mov	r0, r2
 8008b26:	4798      	blx	r3
 8008b28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b2a:	e00f      	b.n	8008b4c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008b2c:	6839      	ldr	r1, [r7, #0]
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fa2b 	bl	8008f8a <USBD_CtlError>
        err++;
 8008b34:	7afb      	ldrb	r3, [r7, #11]
 8008b36:	3301      	adds	r3, #1
 8008b38:	72fb      	strb	r3, [r7, #11]
      break;
 8008b3a:	e007      	b.n	8008b4c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 fa23 	bl	8008f8a <USBD_CtlError>
      err++;
 8008b44:	7afb      	ldrb	r3, [r7, #11]
 8008b46:	3301      	adds	r3, #1
 8008b48:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008b4a:	bf00      	nop
    }
    break;
 8008b4c:	e037      	b.n	8008bbe <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	7c1b      	ldrb	r3, [r3, #16]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d109      	bne.n	8008b6a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5e:	f107 0208 	add.w	r2, r7, #8
 8008b62:	4610      	mov	r0, r2
 8008b64:	4798      	blx	r3
 8008b66:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008b68:	e029      	b.n	8008bbe <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008b6a:	6839      	ldr	r1, [r7, #0]
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fa0c 	bl	8008f8a <USBD_CtlError>
      err++;
 8008b72:	7afb      	ldrb	r3, [r7, #11]
 8008b74:	3301      	adds	r3, #1
 8008b76:	72fb      	strb	r3, [r7, #11]
    break;
 8008b78:	e021      	b.n	8008bbe <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	7c1b      	ldrb	r3, [r3, #16]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10d      	bne.n	8008b9e <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8a:	f107 0208 	add.w	r2, r7, #8
 8008b8e:	4610      	mov	r0, r2
 8008b90:	4798      	blx	r3
 8008b92:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	3301      	adds	r3, #1
 8008b98:	2207      	movs	r2, #7
 8008b9a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008b9c:	e00f      	b.n	8008bbe <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f9f2 	bl	8008f8a <USBD_CtlError>
      err++;
 8008ba6:	7afb      	ldrb	r3, [r7, #11]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	72fb      	strb	r3, [r7, #11]
    break;
 8008bac:	e007      	b.n	8008bbe <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008bae:	6839      	ldr	r1, [r7, #0]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f9ea 	bl	8008f8a <USBD_CtlError>
    err++;
 8008bb6:	7afb      	ldrb	r3, [r7, #11]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	72fb      	strb	r3, [r7, #11]
    break;
 8008bbc:	bf00      	nop
  }

  if (err != 0U)
 8008bbe:	7afb      	ldrb	r3, [r7, #11]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d11e      	bne.n	8008c02 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	88db      	ldrh	r3, [r3, #6]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d016      	beq.n	8008bfa <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008bcc:	893b      	ldrh	r3, [r7, #8]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00e      	beq.n	8008bf0 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	88da      	ldrh	r2, [r3, #6]
 8008bd6:	893b      	ldrh	r3, [r7, #8]
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	bf28      	it	cs
 8008bdc:	4613      	movcs	r3, r2
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008be2:	893b      	ldrh	r3, [r7, #8]
 8008be4:	461a      	mov	r2, r3
 8008be6:	68f9      	ldr	r1, [r7, #12]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 fa3f 	bl	800906c <USBD_CtlSendData>
 8008bee:	e009      	b.n	8008c04 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008bf0:	6839      	ldr	r1, [r7, #0]
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f9c9 	bl	8008f8a <USBD_CtlError>
 8008bf8:	e004      	b.n	8008c04 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fa90 	bl	8009120 <USBD_CtlSendStatus>
 8008c00:	e000      	b.n	8008c04 <USBD_GetDescriptor+0x320>
    return;
 8008c02:	bf00      	nop
    }
  }
}
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop

08008c0c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	889b      	ldrh	r3, [r3, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d130      	bne.n	8008c80 <USBD_SetAddress+0x74>
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	88db      	ldrh	r3, [r3, #6]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d12c      	bne.n	8008c80 <USBD_SetAddress+0x74>
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	885b      	ldrh	r3, [r3, #2]
 8008c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8008c2c:	d828      	bhi.n	8008c80 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	885b      	ldrh	r3, [r3, #2]
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c40:	2b03      	cmp	r3, #3
 8008c42:	d104      	bne.n	8008c4e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f99f 	bl	8008f8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c4c:	e01d      	b.n	8008c8a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	7bfa      	ldrb	r2, [r7, #15]
 8008c52:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f003 f9ec 	bl	800c038 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fa5d 	bl	8009120 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d004      	beq.n	8008c76 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2202      	movs	r2, #2
 8008c70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c74:	e009      	b.n	8008c8a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c7e:	e004      	b.n	8008c8a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c80:	6839      	ldr	r1, [r7, #0]
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 f981 	bl	8008f8a <USBD_CtlError>
  }
}
 8008c88:	bf00      	nop
 8008c8a:	bf00      	nop
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
	...

08008c94 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	885b      	ldrh	r3, [r3, #2]
 8008ca6:	b2da      	uxtb	r2, r3
 8008ca8:	4b4b      	ldr	r3, [pc, #300]	; (8008dd8 <USBD_SetConfig+0x144>)
 8008caa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008cac:	4b4a      	ldr	r3, [pc, #296]	; (8008dd8 <USBD_SetConfig+0x144>)
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d905      	bls.n	8008cc0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f967 	bl	8008f8a <USBD_CtlError>
    return USBD_FAIL;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	e087      	b.n	8008dd0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d002      	beq.n	8008cd0 <USBD_SetConfig+0x3c>
 8008cca:	2b03      	cmp	r3, #3
 8008ccc:	d025      	beq.n	8008d1a <USBD_SetConfig+0x86>
 8008cce:	e071      	b.n	8008db4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008cd0:	4b41      	ldr	r3, [pc, #260]	; (8008dd8 <USBD_SetConfig+0x144>)
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d01c      	beq.n	8008d12 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008cd8:	4b3f      	ldr	r3, [pc, #252]	; (8008dd8 <USBD_SetConfig+0x144>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	461a      	mov	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ce2:	4b3d      	ldr	r3, [pc, #244]	; (8008dd8 <USBD_SetConfig+0x144>)
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f7ff f970 	bl	8007fce <USBD_SetClassConfig>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008cf2:	7bfb      	ldrb	r3, [r7, #15]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d004      	beq.n	8008d02 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f945 	bl	8008f8a <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008d00:	e065      	b.n	8008dce <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 fa0c 	bl	8009120 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2203      	movs	r2, #3
 8008d0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008d10:	e05d      	b.n	8008dce <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fa04 	bl	8009120 <USBD_CtlSendStatus>
    break;
 8008d18:	e059      	b.n	8008dce <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008d1a:	4b2f      	ldr	r3, [pc, #188]	; (8008dd8 <USBD_SetConfig+0x144>)
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d112      	bne.n	8008d48 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2202      	movs	r2, #2
 8008d26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008d2a:	4b2b      	ldr	r3, [pc, #172]	; (8008dd8 <USBD_SetConfig+0x144>)
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d34:	4b28      	ldr	r3, [pc, #160]	; (8008dd8 <USBD_SetConfig+0x144>)
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	4619      	mov	r1, r3
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f7ff f963 	bl	8008006 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f9ed 	bl	8009120 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008d46:	e042      	b.n	8008dce <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008d48:	4b23      	ldr	r3, [pc, #140]	; (8008dd8 <USBD_SetConfig+0x144>)
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d02a      	beq.n	8008dac <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f7ff f951 	bl	8008006 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008d64:	4b1c      	ldr	r3, [pc, #112]	; (8008dd8 <USBD_SetConfig+0x144>)
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d6e:	4b1a      	ldr	r3, [pc, #104]	; (8008dd8 <USBD_SetConfig+0x144>)
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	4619      	mov	r1, r3
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f7ff f92a 	bl	8007fce <USBD_SetClassConfig>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d00f      	beq.n	8008da4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008d84:	6839      	ldr	r1, [r7, #0]
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f8ff 	bl	8008f8a <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	4619      	mov	r1, r3
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7ff f936 	bl	8008006 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2202      	movs	r2, #2
 8008d9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008da2:	e014      	b.n	8008dce <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 f9bb 	bl	8009120 <USBD_CtlSendStatus>
    break;
 8008daa:	e010      	b.n	8008dce <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f9b7 	bl	8009120 <USBD_CtlSendStatus>
    break;
 8008db2:	e00c      	b.n	8008dce <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f8e7 	bl	8008f8a <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008dbc:	4b06      	ldr	r3, [pc, #24]	; (8008dd8 <USBD_SetConfig+0x144>)
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f7ff f91f 	bl	8008006 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	73fb      	strb	r3, [r7, #15]
    break;
 8008dcc:	bf00      	nop
  }

  return ret;
 8008dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	200001d4 	.word	0x200001d4

08008ddc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	88db      	ldrh	r3, [r3, #6]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d004      	beq.n	8008df8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 f8ca 	bl	8008f8a <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008df6:	e022      	b.n	8008e3e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	dc02      	bgt.n	8008e08 <USBD_GetConfig+0x2c>
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	dc03      	bgt.n	8008e0e <USBD_GetConfig+0x32>
 8008e06:	e015      	b.n	8008e34 <USBD_GetConfig+0x58>
 8008e08:	2b03      	cmp	r3, #3
 8008e0a:	d00b      	beq.n	8008e24 <USBD_GetConfig+0x48>
 8008e0c:	e012      	b.n	8008e34 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	3308      	adds	r3, #8
 8008e18:	2201      	movs	r2, #1
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f925 	bl	800906c <USBD_CtlSendData>
      break;
 8008e22:	e00c      	b.n	8008e3e <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	3304      	adds	r3, #4
 8008e28:	2201      	movs	r2, #1
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f91d 	bl	800906c <USBD_CtlSendData>
      break;
 8008e32:	e004      	b.n	8008e3e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f8a7 	bl	8008f8a <USBD_CtlError>
      break;
 8008e3c:	bf00      	nop
}
 8008e3e:	bf00      	nop
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b082      	sub	sp, #8
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e56:	3b01      	subs	r3, #1
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d81e      	bhi.n	8008e9a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	88db      	ldrh	r3, [r3, #6]
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d004      	beq.n	8008e6e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f88f 	bl	8008f8a <USBD_CtlError>
      break;
 8008e6c:	e01a      	b.n	8008ea4 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2201      	movs	r2, #1
 8008e72:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d005      	beq.n	8008e8a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	f043 0202 	orr.w	r2, r3, #2
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	330c      	adds	r3, #12
 8008e8e:	2202      	movs	r2, #2
 8008e90:	4619      	mov	r1, r3
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f8ea 	bl	800906c <USBD_CtlSendData>
    break;
 8008e98:	e004      	b.n	8008ea4 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f874 	bl	8008f8a <USBD_CtlError>
    break;
 8008ea2:	bf00      	nop
  }
}
 8008ea4:	bf00      	nop
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	885b      	ldrh	r3, [r3, #2]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d106      	bne.n	8008ecc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f92a 	bl	8009120 <USBD_CtlSendStatus>
  }
}
 8008ecc:	bf00      	nop
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d80b      	bhi.n	8008f02 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	885b      	ldrh	r3, [r3, #2]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d10c      	bne.n	8008f0c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f910 	bl	8009120 <USBD_CtlSendStatus>
      }
      break;
 8008f00:	e004      	b.n	8008f0c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008f02:	6839      	ldr	r1, [r7, #0]
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 f840 	bl	8008f8a <USBD_CtlError>
      break;
 8008f0a:	e000      	b.n	8008f0e <USBD_ClrFeature+0x3a>
      break;
 8008f0c:	bf00      	nop
  }
}
 8008f0e:	bf00      	nop
 8008f10:	3708      	adds	r7, #8
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b084      	sub	sp, #16
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
 8008f1e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	781a      	ldrb	r2, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	781a      	ldrb	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f7ff fa9d 	bl	8008480 <SWAPBYTE>
 8008f46:	4603      	mov	r3, r0
 8008f48:	461a      	mov	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	3301      	adds	r3, #1
 8008f52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	3301      	adds	r3, #1
 8008f58:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f7ff fa90 	bl	8008480 <SWAPBYTE>
 8008f60:	4603      	mov	r3, r0
 8008f62:	461a      	mov	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	3301      	adds	r3, #1
 8008f72:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f7ff fa83 	bl	8008480 <SWAPBYTE>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	80da      	strh	r2, [r3, #6]
}
 8008f82:	bf00      	nop
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b082      	sub	sp, #8
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f94:	2180      	movs	r1, #128	; 0x80
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f002 ffe4 	bl	800bf64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f002 ffe0 	bl	800bf64 <USBD_LL_StallEP>
}
 8008fa4:	bf00      	nop
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d036      	beq.n	8009030 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008fc6:	6938      	ldr	r0, [r7, #16]
 8008fc8:	f000 f836 	bl	8009038 <USBD_GetLen>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	3301      	adds	r3, #1
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	005b      	lsls	r3, r3, #1
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008fda:	7dfb      	ldrb	r3, [r7, #23]
 8008fdc:	68ba      	ldr	r2, [r7, #8]
 8008fde:	4413      	add	r3, r2
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	7812      	ldrb	r2, [r2, #0]
 8008fe4:	701a      	strb	r2, [r3, #0]
  idx++;
 8008fe6:	7dfb      	ldrb	r3, [r7, #23]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008fec:	7dfb      	ldrb	r3, [r7, #23]
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	2203      	movs	r2, #3
 8008ff4:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ff6:	7dfb      	ldrb	r3, [r7, #23]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008ffc:	e013      	b.n	8009026 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008ffe:	7dfb      	ldrb	r3, [r7, #23]
 8009000:	68ba      	ldr	r2, [r7, #8]
 8009002:	4413      	add	r3, r2
 8009004:	693a      	ldr	r2, [r7, #16]
 8009006:	7812      	ldrb	r2, [r2, #0]
 8009008:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	3301      	adds	r3, #1
 800900e:	613b      	str	r3, [r7, #16]
    idx++;
 8009010:	7dfb      	ldrb	r3, [r7, #23]
 8009012:	3301      	adds	r3, #1
 8009014:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009016:	7dfb      	ldrb	r3, [r7, #23]
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	4413      	add	r3, r2
 800901c:	2200      	movs	r2, #0
 800901e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009020:	7dfb      	ldrb	r3, [r7, #23]
 8009022:	3301      	adds	r3, #1
 8009024:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1e7      	bne.n	8008ffe <USBD_GetString+0x52>
 800902e:	e000      	b.n	8009032 <USBD_GetString+0x86>
    return;
 8009030:	bf00      	nop
  }
}
 8009032:	3718      	adds	r7, #24
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009038:	b480      	push	{r7}
 800903a:	b085      	sub	sp, #20
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009040:	2300      	movs	r3, #0
 8009042:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009048:	e005      	b.n	8009056 <USBD_GetLen+0x1e>
  {
    len++;
 800904a:	7bfb      	ldrb	r3, [r7, #15]
 800904c:	3301      	adds	r3, #1
 800904e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	3301      	adds	r3, #1
 8009054:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1f5      	bne.n	800904a <USBD_GetLen+0x12>
  }

  return len;
 800905e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009060:	4618      	mov	r0, r3
 8009062:	3714      	adds	r7, #20
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2202      	movs	r2, #2
 800907c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	2100      	movs	r1, #0
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f002 ffef 	bl	800c076 <USBD_LL_Transmit>

  return USBD_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b084      	sub	sp, #16
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	60f8      	str	r0, [r7, #12]
 80090aa:	60b9      	str	r1, [r7, #8]
 80090ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	68ba      	ldr	r2, [r7, #8]
 80090b2:	2100      	movs	r1, #0
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f002 ffde 	bl	800c076 <USBD_LL_Transmit>

  return USBD_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2203      	movs	r2, #3
 80090d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	68ba      	ldr	r2, [r7, #8]
 80090ec:	2100      	movs	r1, #0
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f002 ffe2 	bl	800c0b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b084      	sub	sp, #16
 8009102:	af00      	add	r7, sp, #0
 8009104:	60f8      	str	r0, [r7, #12]
 8009106:	60b9      	str	r1, [r7, #8]
 8009108:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	68ba      	ldr	r2, [r7, #8]
 800910e:	2100      	movs	r1, #0
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f002 ffd1 	bl	800c0b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2204      	movs	r2, #4
 800912c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009130:	2300      	movs	r3, #0
 8009132:	2200      	movs	r2, #0
 8009134:	2100      	movs	r1, #0
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f002 ff9d 	bl	800c076 <USBD_LL_Transmit>

  return USBD_OK;
 800913c:	2300      	movs	r3, #0
}
 800913e:	4618      	mov	r0, r3
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b082      	sub	sp, #8
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2205      	movs	r2, #5
 8009152:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009156:	2300      	movs	r3, #0
 8009158:	2200      	movs	r2, #0
 800915a:	2100      	movs	r1, #0
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f002 ffab 	bl	800c0b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <BSP_ReadBatteryVoltage>:
  * @param  n number of Samples to read for averaging
  * @return floating point number of converted voltage 
  * (voltage divider taken into account)
  */
float BSP_ReadBatteryVoltage(uint8_t n)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	4603      	mov	r3, r0
 8009174:	71fb      	strb	r3, [r7, #7]
	uint32_t sum = 0;
 8009176:	2300      	movs	r3, #0
 8009178:	60fb      	str	r3, [r7, #12]
	HAL_ADC_Start(&hadc1);
 800917a:	481c      	ldr	r0, [pc, #112]	; (80091ec <BSP_ReadBatteryVoltage+0x80>)
 800917c:	f7f7 faee 	bl	800075c <HAL_ADC_Start>
	uint8_t avg = 0;
 8009180:	2300      	movs	r3, #0
 8009182:	72fb      	strb	r3, [r7, #11]
	
	for(uint8_t i=0; i<n; i++){
 8009184:	2300      	movs	r3, #0
 8009186:	72bb      	strb	r3, [r7, #10]
 8009188:	e013      	b.n	80091b2 <BSP_ReadBatteryVoltage+0x46>
		if(HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK){
 800918a:	2105      	movs	r1, #5
 800918c:	4817      	ldr	r0, [pc, #92]	; (80091ec <BSP_ReadBatteryVoltage+0x80>)
 800918e:	f7f7 fb8b 	bl	80008a8 <HAL_ADC_PollForConversion>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d109      	bne.n	80091ac <BSP_ReadBatteryVoltage+0x40>
			sum += HAL_ADC_GetValue(&hadc1);
 8009198:	4814      	ldr	r0, [pc, #80]	; (80091ec <BSP_ReadBatteryVoltage+0x80>)
 800919a:	f7f7 fc09 	bl	80009b0 <HAL_ADC_GetValue>
 800919e:	4602      	mov	r2, r0
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	4413      	add	r3, r2
 80091a4:	60fb      	str	r3, [r7, #12]
			avg ++;
 80091a6:	7afb      	ldrb	r3, [r7, #11]
 80091a8:	3301      	adds	r3, #1
 80091aa:	72fb      	strb	r3, [r7, #11]
	for(uint8_t i=0; i<n; i++){
 80091ac:	7abb      	ldrb	r3, [r7, #10]
 80091ae:	3301      	adds	r3, #1
 80091b0:	72bb      	strb	r3, [r7, #10]
 80091b2:	7aba      	ldrb	r2, [r7, #10]
 80091b4:	79fb      	ldrb	r3, [r7, #7]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d3e7      	bcc.n	800918a <BSP_ReadBatteryVoltage+0x1e>
		}
	}
	sum /= (uint32_t)avg;
 80091ba:	7afb      	ldrb	r3, [r7, #11]
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	fbb2 f3f3 	udiv	r3, r2, r3
 80091c2:	60fb      	str	r3, [r7, #12]
	// 4096 = 3.3V
	// 1 = 3.3/4096;
        // 4.2V correction factor = 0.7279 from Voltage Divider
        return (float)(sum) * (3.3f/4096.0f) / 0.7279f;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	ee07 3a90 	vmov	s15, r3
 80091ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ce:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80091f0 <BSP_ReadBatteryVoltage+0x84>
 80091d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80091d6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80091f4 <BSP_ReadBatteryVoltage+0x88>
 80091da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80091de:	eef0 7a66 	vmov.f32	s15, s13
}
 80091e2:	eeb0 0a67 	vmov.f32	s0, s15
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	20000f30 	.word	0x20000f30
 80091f0:	3a533333 	.word	0x3a533333
 80091f4:	3f3a57a8 	.word	0x3f3a57a8

080091f8 <BSP_ReadEncoder_Difference>:
/**
  * @param  encoder The encoder of which to return the difference
  * @return signed integer of encoder difference since last call of this function
  */
int16_t BSP_ReadEncoder_Difference(EncoderPosition_t encoder)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	4603      	mov	r3, r0
 8009200:	71fb      	strb	r3, [r7, #7]
	BSP_ReadEncoder(encoder); // update both encoders
 8009202:	79fb      	ldrb	r3, [r7, #7]
 8009204:	4618      	mov	r0, r3
 8009206:	f000 f81d 	bl	8009244 <BSP_ReadEncoder>
	int16_t delta = 0;
 800920a:	2300      	movs	r3, #0
 800920c:	81fb      	strh	r3, [r7, #14]
	if(encoder == ENCODER_LEFT){
 800920e:	79fb      	ldrb	r3, [r7, #7]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d106      	bne.n	8009222 <BSP_ReadEncoder_Difference+0x2a>
		delta = henc1.delta; // return accumulated delta
 8009214:	4b09      	ldr	r3, [pc, #36]	; (800923c <BSP_ReadEncoder_Difference+0x44>)
 8009216:	885b      	ldrh	r3, [r3, #2]
 8009218:	81fb      	strh	r3, [r7, #14]
		henc1.delta = 0;  // clear for new accumulation
 800921a:	4b08      	ldr	r3, [pc, #32]	; (800923c <BSP_ReadEncoder_Difference+0x44>)
 800921c:	2200      	movs	r2, #0
 800921e:	805a      	strh	r2, [r3, #2]
 8009220:	e005      	b.n	800922e <BSP_ReadEncoder_Difference+0x36>
	} else {
		delta = henc2.delta;
 8009222:	4b07      	ldr	r3, [pc, #28]	; (8009240 <BSP_ReadEncoder_Difference+0x48>)
 8009224:	885b      	ldrh	r3, [r3, #2]
 8009226:	81fb      	strh	r3, [r7, #14]
		henc2.delta = 0;
 8009228:	4b05      	ldr	r3, [pc, #20]	; (8009240 <BSP_ReadEncoder_Difference+0x48>)
 800922a:	2200      	movs	r2, #0
 800922c:	805a      	strh	r2, [r3, #2]
	}
	return delta;
 800922e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	20000790 	.word	0x20000790
 8009240:	2000078c 	.word	0x2000078c

08009244 <BSP_ReadEncoder>:
/**
  * @param  encoder The encoder of which to return the absolute counter value
  * @return unsigned integer of encoder's counter value
  */
uint16_t BSP_ReadEncoder(EncoderPosition_t encoder)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	4603      	mov	r3, r0
 800924c:	71fb      	strb	r3, [r7, #7]
	int16_t oldval = (int16_t)henc1.value;  // remember previous value
 800924e:	4b40      	ldr	r3, [pc, #256]	; (8009350 <BSP_ReadEncoder+0x10c>)
 8009250:	881b      	ldrh	r3, [r3, #0]
 8009252:	81bb      	strh	r3, [r7, #12]
	henc1.value = (((0xffff - TIM3->CNT)/2) +1) & 0x7fff;  // right encoder
 8009254:	4b3f      	ldr	r3, [pc, #252]	; (8009354 <BSP_ReadEncoder+0x110>)
 8009256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009258:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800925c:	33ff      	adds	r3, #255	; 0xff
 800925e:	085b      	lsrs	r3, r3, #1
 8009260:	b29b      	uxth	r3, r3
 8009262:	3301      	adds	r3, #1
 8009264:	b29b      	uxth	r3, r3
 8009266:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800926a:	b29a      	uxth	r2, r3
 800926c:	4b38      	ldr	r3, [pc, #224]	; (8009350 <BSP_ReadEncoder+0x10c>)
 800926e:	801a      	strh	r2, [r3, #0]
	int16_t delta = (int16_t)henc1.value - oldval;  // calculate difference
 8009270:	4b37      	ldr	r3, [pc, #220]	; (8009350 <BSP_ReadEncoder+0x10c>)
 8009272:	881a      	ldrh	r2, [r3, #0]
 8009274:	89bb      	ldrh	r3, [r7, #12]
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	b29b      	uxth	r3, r3
 800927a:	81fb      	strh	r3, [r7, #14]
	if(delta > 255) // overflow occured
 800927c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009280:	2bff      	cmp	r3, #255	; 0xff
 8009282:	dd08      	ble.n	8009296 <BSP_ReadEncoder+0x52>
		delta = (int16_t)henc1.value - (INT16_MAX+1) - oldval;
 8009284:	4b32      	ldr	r3, [pc, #200]	; (8009350 <BSP_ReadEncoder+0x10c>)
 8009286:	881a      	ldrh	r2, [r3, #0]
 8009288:	89bb      	ldrh	r3, [r7, #12]
 800928a:	1ad3      	subs	r3, r2, r3
 800928c:	b29b      	uxth	r3, r3
 800928e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8009292:	b29b      	uxth	r3, r3
 8009294:	81fb      	strh	r3, [r7, #14]
	if(delta < -255) // underflow occured
 8009296:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800929a:	f113 0fff 	cmn.w	r3, #255	; 0xff
 800929e:	da08      	bge.n	80092b2 <BSP_ReadEncoder+0x6e>
		delta = (int16_t)henc1.value + (INT16_MAX+1) - oldval;
 80092a0:	4b2b      	ldr	r3, [pc, #172]	; (8009350 <BSP_ReadEncoder+0x10c>)
 80092a2:	881a      	ldrh	r2, [r3, #0]
 80092a4:	89bb      	ldrh	r3, [r7, #12]
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	81fb      	strh	r3, [r7, #14]
	henc1.delta += delta;  // update difference
 80092b2:	4b27      	ldr	r3, [pc, #156]	; (8009350 <BSP_ReadEncoder+0x10c>)
 80092b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	89fb      	ldrh	r3, [r7, #14]
 80092bc:	4413      	add	r3, r2
 80092be:	b29b      	uxth	r3, r3
 80092c0:	b21a      	sxth	r2, r3
 80092c2:	4b23      	ldr	r3, [pc, #140]	; (8009350 <BSP_ReadEncoder+0x10c>)
 80092c4:	805a      	strh	r2, [r3, #2]
	
	oldval = (int16_t)henc2.value;  // remember previous value
 80092c6:	4b24      	ldr	r3, [pc, #144]	; (8009358 <BSP_ReadEncoder+0x114>)
 80092c8:	881b      	ldrh	r3, [r3, #0]
 80092ca:	81bb      	strh	r3, [r7, #12]
	henc2.value = (((         TIM4->CNT)/2)   ) & 0x7fff;     // left encoder
 80092cc:	4b23      	ldr	r3, [pc, #140]	; (800935c <BSP_ReadEncoder+0x118>)
 80092ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d0:	085b      	lsrs	r3, r3, #1
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80092d8:	b29a      	uxth	r2, r3
 80092da:	4b1f      	ldr	r3, [pc, #124]	; (8009358 <BSP_ReadEncoder+0x114>)
 80092dc:	801a      	strh	r2, [r3, #0]
	delta = (int16_t)henc2.value - oldval;  // calculate difference
 80092de:	4b1e      	ldr	r3, [pc, #120]	; (8009358 <BSP_ReadEncoder+0x114>)
 80092e0:	881a      	ldrh	r2, [r3, #0]
 80092e2:	89bb      	ldrh	r3, [r7, #12]
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	81fb      	strh	r3, [r7, #14]
	if(delta > 255) // overflow occured
 80092ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80092ee:	2bff      	cmp	r3, #255	; 0xff
 80092f0:	dd08      	ble.n	8009304 <BSP_ReadEncoder+0xc0>
		delta = (int16_t)henc2.value - (INT16_MAX+1) - oldval;
 80092f2:	4b19      	ldr	r3, [pc, #100]	; (8009358 <BSP_ReadEncoder+0x114>)
 80092f4:	881a      	ldrh	r2, [r3, #0]
 80092f6:	89bb      	ldrh	r3, [r7, #12]
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8009300:	b29b      	uxth	r3, r3
 8009302:	81fb      	strh	r3, [r7, #14]
	if(delta < -255) // underflow occured
 8009304:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009308:	f113 0fff 	cmn.w	r3, #255	; 0xff
 800930c:	da08      	bge.n	8009320 <BSP_ReadEncoder+0xdc>
		delta = (int16_t)henc2.value + (INT16_MAX+1) - oldval;
 800930e:	4b12      	ldr	r3, [pc, #72]	; (8009358 <BSP_ReadEncoder+0x114>)
 8009310:	881a      	ldrh	r2, [r3, #0]
 8009312:	89bb      	ldrh	r3, [r7, #12]
 8009314:	1ad3      	subs	r3, r2, r3
 8009316:	b29b      	uxth	r3, r3
 8009318:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800931c:	b29b      	uxth	r3, r3
 800931e:	81fb      	strh	r3, [r7, #14]
	henc2.delta += delta;  // update difference
 8009320:	4b0d      	ldr	r3, [pc, #52]	; (8009358 <BSP_ReadEncoder+0x114>)
 8009322:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009326:	b29a      	uxth	r2, r3
 8009328:	89fb      	ldrh	r3, [r7, #14]
 800932a:	4413      	add	r3, r2
 800932c:	b29b      	uxth	r3, r3
 800932e:	b21a      	sxth	r2, r3
 8009330:	4b09      	ldr	r3, [pc, #36]	; (8009358 <BSP_ReadEncoder+0x114>)
 8009332:	805a      	strh	r2, [r3, #2]

	if(encoder == ENCODER_LEFT)
 8009334:	79fb      	ldrb	r3, [r7, #7]
 8009336:	2b01      	cmp	r3, #1
 8009338:	d102      	bne.n	8009340 <BSP_ReadEncoder+0xfc>
		return henc1.value;
 800933a:	4b05      	ldr	r3, [pc, #20]	; (8009350 <BSP_ReadEncoder+0x10c>)
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	e001      	b.n	8009344 <BSP_ReadEncoder+0x100>
	else
		return henc2.value;
 8009340:	4b05      	ldr	r3, [pc, #20]	; (8009358 <BSP_ReadEncoder+0x114>)
 8009342:	881b      	ldrh	r3, [r3, #0]
}
 8009344:	4618      	mov	r0, r3
 8009346:	3714      	adds	r7, #20
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr
 8009350:	20000790 	.word	0x20000790
 8009354:	40000400 	.word	0x40000400
 8009358:	2000078c 	.word	0x2000078c
 800935c:	40000800 	.word	0x40000800

08009360 <BSP_SelectAudioIn>:

/* Select Audio Source -------------------------------------------------------*/
/**
  * @param  mode The Audio Input Mode
  */ 
void BSP_SelectAudioIn(AudioInState_t mode){
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	4603      	mov	r3, r0
 8009368:	71fb      	strb	r3, [r7, #7]
	switch(mode){
 800936a:	79fb      	ldrb	r3, [r7, #7]
 800936c:	2b03      	cmp	r3, #3
 800936e:	d823      	bhi.n	80093b8 <BSP_SelectAudioIn+0x58>
 8009370:	a201      	add	r2, pc, #4	; (adr r2, 8009378 <BSP_SelectAudioIn+0x18>)
 8009372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009376:	bf00      	nop
 8009378:	08009389 	.word	0x08009389
 800937c:	0800939d 	.word	0x0800939d
 8009380:	080093b1 	.word	0x080093b1
 8009384:	080093b9 	.word	0x080093b9
		case AUDIO_IN_EXT:
			HAL_GPIO_WritePin(SET_LIN_GPIO_Port, SET_LIN_Pin, GPIO_PIN_RESET);
 8009388:	2200      	movs	r2, #0
 800938a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800938e:	480d      	ldr	r0, [pc, #52]	; (80093c4 <BSP_SelectAudioIn+0x64>)
 8009390:	f7f8 fb50 	bl	8001a34 <HAL_GPIO_WritePin>
			TLV320_SetInput(LINE);
 8009394:	2000      	movs	r0, #0
 8009396:	f002 faff 	bl	800b998 <TLV320_SetInput>
			break;
 800939a:	e00e      	b.n	80093ba <BSP_SelectAudioIn+0x5a>
		case AUDIO_IN_LINE:
			HAL_GPIO_WritePin(SET_LIN_GPIO_Port, SET_LIN_Pin, GPIO_PIN_SET);
 800939c:	2201      	movs	r2, #1
 800939e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80093a2:	4808      	ldr	r0, [pc, #32]	; (80093c4 <BSP_SelectAudioIn+0x64>)
 80093a4:	f7f8 fb46 	bl	8001a34 <HAL_GPIO_WritePin>
			TLV320_SetInput(LINE);
 80093a8:	2000      	movs	r0, #0
 80093aa:	f002 faf5 	bl	800b998 <TLV320_SetInput>
			break;
 80093ae:	e004      	b.n	80093ba <BSP_SelectAudioIn+0x5a>
		case AUDIO_IN_MIC:
			TLV320_SetInput(MIC);
 80093b0:	2001      	movs	r0, #1
 80093b2:	f002 faf1 	bl	800b998 <TLV320_SetInput>
			break;
 80093b6:	e000      	b.n	80093ba <BSP_SelectAudioIn+0x5a>
		case AUDIO_IN_USB:
			break;
		default:
			break;
 80093b8:	bf00      	nop
	}
}
 80093ba:	bf00      	nop
 80093bc:	3708      	adds	r7, #8
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	40020800 	.word	0x40020800

080093c8 <DSP_Process_Data>:

/**
 * @param sourceBuffer Pointer to the Audio Signal Source Buffer (from DMA ISR)
 * @param targetBuffer Pointer to the Audio Signal Destination Buffer (to DMA)
 */
void DSP_Process_Data(uint16_t *sourceBuffer, uint16_t *targetBuffer) {
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]

#ifdef DEBUG_DSP_LATENCY
	/* Measure the Latency of the whole DSP_Process */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80093d2:	2201      	movs	r2, #1
 80093d4:	2140      	movs	r1, #64	; 0x40
 80093d6:	4844      	ldr	r0, [pc, #272]	; (80094e8 <DSP_Process_Data+0x120>)
 80093d8:	f7f8 fb2c 	bl	8001a34 <HAL_GPIO_WritePin>
#endif

	// copy sourceBuffer to leftSignalBuffer and rightSignalBuffer
	for (index1 = 0; index1 < DSP_BUFFERSIZE_HALF; index1++) {
 80093dc:	4b43      	ldr	r3, [pc, #268]	; (80094ec <DSP_Process_Data+0x124>)
 80093de:	2200      	movs	r2, #0
 80093e0:	801a      	strh	r2, [r3, #0]
 80093e2:	e020      	b.n	8009426 <DSP_Process_Data+0x5e>
		rxLeft[index1] = (int16_t) (sourceBuffer[2 * index1]);
 80093e4:	4b41      	ldr	r3, [pc, #260]	; (80094ec <DSP_Process_Data+0x124>)
 80093e6:	881b      	ldrh	r3, [r3, #0]
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	4413      	add	r3, r2
 80093ee:	8819      	ldrh	r1, [r3, #0]
 80093f0:	4b3e      	ldr	r3, [pc, #248]	; (80094ec <DSP_Process_Data+0x124>)
 80093f2:	881b      	ldrh	r3, [r3, #0]
 80093f4:	461a      	mov	r2, r3
 80093f6:	b209      	sxth	r1, r1
 80093f8:	4b3d      	ldr	r3, [pc, #244]	; (80094f0 <DSP_Process_Data+0x128>)
 80093fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		rxRight[index1] = (int16_t) (sourceBuffer[2 * index1 + 1]);
 80093fe:	4b3b      	ldr	r3, [pc, #236]	; (80094ec <DSP_Process_Data+0x124>)
 8009400:	881b      	ldrh	r3, [r3, #0]
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	3302      	adds	r3, #2
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	4413      	add	r3, r2
 800940a:	8819      	ldrh	r1, [r3, #0]
 800940c:	4b37      	ldr	r3, [pc, #220]	; (80094ec <DSP_Process_Data+0x124>)
 800940e:	881b      	ldrh	r3, [r3, #0]
 8009410:	461a      	mov	r2, r3
 8009412:	b209      	sxth	r1, r1
 8009414:	4b37      	ldr	r3, [pc, #220]	; (80094f4 <DSP_Process_Data+0x12c>)
 8009416:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (index1 = 0; index1 < DSP_BUFFERSIZE_HALF; index1++) {
 800941a:	4b34      	ldr	r3, [pc, #208]	; (80094ec <DSP_Process_Data+0x124>)
 800941c:	881b      	ldrh	r3, [r3, #0]
 800941e:	3301      	adds	r3, #1
 8009420:	b29a      	uxth	r2, r3
 8009422:	4b32      	ldr	r3, [pc, #200]	; (80094ec <DSP_Process_Data+0x124>)
 8009424:	801a      	strh	r2, [r3, #0]
 8009426:	4b31      	ldr	r3, [pc, #196]	; (80094ec <DSP_Process_Data+0x124>)
 8009428:	881b      	ldrh	r3, [r3, #0]
 800942a:	2b2f      	cmp	r3, #47	; 0x2f
 800942c:	d9da      	bls.n	80093e4 <DSP_Process_Data+0x1c>
//
//		tmp = P14R;
//		P14R = P14R2;
//		P14R2 = tmp;

	switch (dsp_mode) {
 800942e:	4b32      	ldr	r3, [pc, #200]	; (80094f8 <DSP_Process_Data+0x130>)
 8009430:	881b      	ldrh	r3, [r3, #0]
 8009432:	b29b      	uxth	r3, r3
 8009434:	2b00      	cmp	r3, #0
 8009436:	d001      	beq.n	800943c <DSP_Process_Data+0x74>
 8009438:	2b01      	cmp	r3, #1
			txRight[i] = rxRight[i];
		}
		break;

	default:
		break;
 800943a:	e022      	b.n	8009482 <DSP_Process_Data+0xba>
		for (uint16_t i = 0; i < DSP_BUFFERSIZE_HALF; i++) {
 800943c:	2300      	movs	r3, #0
 800943e:	81fb      	strh	r3, [r7, #14]
 8009440:	e00a      	b.n	8009458 <DSP_Process_Data+0x90>
			txLeft[i] = rxLeft[i];
 8009442:	89fa      	ldrh	r2, [r7, #14]
 8009444:	89fb      	ldrh	r3, [r7, #14]
 8009446:	492a      	ldr	r1, [pc, #168]	; (80094f0 <DSP_Process_Data+0x128>)
 8009448:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800944c:	4a2b      	ldr	r2, [pc, #172]	; (80094fc <DSP_Process_Data+0x134>)
 800944e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint16_t i = 0; i < DSP_BUFFERSIZE_HALF; i++) {
 8009452:	89fb      	ldrh	r3, [r7, #14]
 8009454:	3301      	adds	r3, #1
 8009456:	81fb      	strh	r3, [r7, #14]
 8009458:	89fb      	ldrh	r3, [r7, #14]
 800945a:	2b2f      	cmp	r3, #47	; 0x2f
 800945c:	d9f1      	bls.n	8009442 <DSP_Process_Data+0x7a>
		for (uint16_t i = 0; i < DSP_BUFFERSIZE_HALF; i++) {
 800945e:	2300      	movs	r3, #0
 8009460:	81bb      	strh	r3, [r7, #12]
 8009462:	e00a      	b.n	800947a <DSP_Process_Data+0xb2>
			txRight[i] = rxRight[i];
 8009464:	89ba      	ldrh	r2, [r7, #12]
 8009466:	89bb      	ldrh	r3, [r7, #12]
 8009468:	4922      	ldr	r1, [pc, #136]	; (80094f4 <DSP_Process_Data+0x12c>)
 800946a:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800946e:	4a24      	ldr	r2, [pc, #144]	; (8009500 <DSP_Process_Data+0x138>)
 8009470:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint16_t i = 0; i < DSP_BUFFERSIZE_HALF; i++) {
 8009474:	89bb      	ldrh	r3, [r7, #12]
 8009476:	3301      	adds	r3, #1
 8009478:	81bb      	strh	r3, [r7, #12]
 800947a:	89bb      	ldrh	r3, [r7, #12]
 800947c:	2b2f      	cmp	r3, #47	; 0x2f
 800947e:	d9f1      	bls.n	8009464 <DSP_Process_Data+0x9c>
		break;
 8009480:	bf00      	nop
	}

	// copy left and right txBuffer into targetBuffer
	for (index1 = 0; index1 < DSP_BUFFERSIZE_HALF; index1++) {
 8009482:	4b1a      	ldr	r3, [pc, #104]	; (80094ec <DSP_Process_Data+0x124>)
 8009484:	2200      	movs	r2, #0
 8009486:	801a      	strh	r2, [r3, #0]
 8009488:	e020      	b.n	80094cc <DSP_Process_Data+0x104>
		targetBuffer[2 * index1] = (int16_t) (txLeft[index1]);
 800948a:	4b18      	ldr	r3, [pc, #96]	; (80094ec <DSP_Process_Data+0x124>)
 800948c:	881b      	ldrh	r3, [r3, #0]
 800948e:	461a      	mov	r2, r3
 8009490:	4b1a      	ldr	r3, [pc, #104]	; (80094fc <DSP_Process_Data+0x134>)
 8009492:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8009496:	4b15      	ldr	r3, [pc, #84]	; (80094ec <DSP_Process_Data+0x124>)
 8009498:	881b      	ldrh	r3, [r3, #0]
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	683a      	ldr	r2, [r7, #0]
 800949e:	4413      	add	r3, r2
 80094a0:	b28a      	uxth	r2, r1
 80094a2:	801a      	strh	r2, [r3, #0]
		targetBuffer[2 * index1 + 1] = (int16_t) (txRight[index1]);
 80094a4:	4b11      	ldr	r3, [pc, #68]	; (80094ec <DSP_Process_Data+0x124>)
 80094a6:	881b      	ldrh	r3, [r3, #0]
 80094a8:	461a      	mov	r2, r3
 80094aa:	4b15      	ldr	r3, [pc, #84]	; (8009500 <DSP_Process_Data+0x138>)
 80094ac:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 80094b0:	4b0e      	ldr	r3, [pc, #56]	; (80094ec <DSP_Process_Data+0x124>)
 80094b2:	881b      	ldrh	r3, [r3, #0]
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	3302      	adds	r3, #2
 80094b8:	683a      	ldr	r2, [r7, #0]
 80094ba:	4413      	add	r3, r2
 80094bc:	b28a      	uxth	r2, r1
 80094be:	801a      	strh	r2, [r3, #0]
	for (index1 = 0; index1 < DSP_BUFFERSIZE_HALF; index1++) {
 80094c0:	4b0a      	ldr	r3, [pc, #40]	; (80094ec <DSP_Process_Data+0x124>)
 80094c2:	881b      	ldrh	r3, [r3, #0]
 80094c4:	3301      	adds	r3, #1
 80094c6:	b29a      	uxth	r2, r3
 80094c8:	4b08      	ldr	r3, [pc, #32]	; (80094ec <DSP_Process_Data+0x124>)
 80094ca:	801a      	strh	r2, [r3, #0]
 80094cc:	4b07      	ldr	r3, [pc, #28]	; (80094ec <DSP_Process_Data+0x124>)
 80094ce:	881b      	ldrh	r3, [r3, #0]
 80094d0:	2b2f      	cmp	r3, #47	; 0x2f
 80094d2:	d9da      	bls.n	800948a <DSP_Process_Data+0xc2>
	}

#ifdef DEBUG_DSP_LATENCY
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80094d4:	2200      	movs	r2, #0
 80094d6:	2140      	movs	r1, #64	; 0x40
 80094d8:	4803      	ldr	r0, [pc, #12]	; (80094e8 <DSP_Process_Data+0x120>)
 80094da:	f7f8 faab 	bl	8001a34 <HAL_GPIO_WritePin>
#endif
}
 80094de:	bf00      	nop
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	40020800 	.word	0x40020800
 80094ec:	20000796 	.word	0x20000796
 80094f0:	200001d8 	.word	0x200001d8
 80094f4:	20000238 	.word	0x20000238
 80094f8:	20000794 	.word	0x20000794
 80094fc:	20000298 	.word	0x20000298
 8009500:	200002f8 	.word	0x200002f8

08009504 <__NVIC_SystemReset>:
{
 8009504:	b480      	push	{r7}
 8009506:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009508:	f3bf 8f4f 	dsb	sy
}
 800950c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800950e:	4b06      	ldr	r3, [pc, #24]	; (8009528 <__NVIC_SystemReset+0x24>)
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009516:	4904      	ldr	r1, [pc, #16]	; (8009528 <__NVIC_SystemReset+0x24>)
 8009518:	4b04      	ldr	r3, [pc, #16]	; (800952c <__NVIC_SystemReset+0x28>)
 800951a:	4313      	orrs	r3, r2
 800951c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800951e:	f3bf 8f4f 	dsb	sy
}
 8009522:	bf00      	nop
    __NOP();
 8009524:	bf00      	nop
 8009526:	e7fd      	b.n	8009524 <__NVIC_SystemReset+0x20>
 8009528:	e000ed00 	.word	0xe000ed00
 800952c:	05fa0004 	.word	0x05fa0004

08009530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009536:	f7f7 f837 	bl	80005a8 <HAL_Init>

  /* USER CODE BEGIN Init */
	/* Init Device Library */
	USBD_Init(&USBD_Device, &FS_Desc, 0);
 800953a:	2200      	movs	r2, #0
 800953c:	499e      	ldr	r1, [pc, #632]	; (80097b8 <main+0x288>)
 800953e:	489f      	ldr	r0, [pc, #636]	; (80097bc <main+0x28c>)
 8009540:	f7fe fcbc 	bl	8007ebc <USBD_Init>

	/* Add Supported Class */
	USBD_RegisterClass(&USBD_Device, USBD_AUDIO_CLASS);
 8009544:	499e      	ldr	r1, [pc, #632]	; (80097c0 <main+0x290>)
 8009546:	489d      	ldr	r0, [pc, #628]	; (80097bc <main+0x28c>)
 8009548:	f7fe fcfc 	bl	8007f44 <USBD_RegisterClass>

	/* Add Interface callbacks for AUDIO Class */
	USBD_AUDIO_RegisterInterface(&USBD_Device, &audio_class_interface);
 800954c:	499d      	ldr	r1, [pc, #628]	; (80097c4 <main+0x294>)
 800954e:	489b      	ldr	r0, [pc, #620]	; (80097bc <main+0x28c>)
 8009550:	f7fe fc9e 	bl	8007e90 <USBD_AUDIO_RegisterInterface>

	/* Start Device Process */
	USBD_Start(&USBD_Device);
 8009554:	4899      	ldr	r0, [pc, #612]	; (80097bc <main+0x28c>)
 8009556:	f7fe fd23 	bl	8007fa0 <USBD_Start>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800955a:	f000 fb33 	bl	8009bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800955e:	f000 fd9f 	bl	800a0a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8009562:	f000 fd75 	bl	800a050 <MX_DMA_Init>
  MX_I2C1_Init();
 8009566:	f000 fc05 	bl	8009d74 <MX_I2C1_Init>
  MX_I2C3_Init();
 800956a:	f000 fc31 	bl	8009dd0 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 800956e:	f000 fd45 	bl	8009ffc <MX_USART1_UART_Init>
  MX_I2S2_Init();
 8009572:	f000 fc5b 	bl	8009e2c <MX_I2S2_Init>
  MX_TIM3_Init();
 8009576:	f000 fc99 	bl	8009eac <MX_TIM3_Init>
  MX_TIM4_Init();
 800957a:	f000 fceb 	bl	8009f54 <MX_TIM4_Init>
  MX_RNG_Init();
 800957e:	f000 fc81 	bl	8009e84 <MX_RNG_Init>
  MX_ADC1_Init();
 8009582:	f000 fba5 	bl	8009cd0 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8009586:	f002 fa77 	bl	800ba78 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

   /* Set up SSD1306 OLED Displays on both I2C Busses */
 	holedR.hi2cx = &hi2c3;
 800958a:	4b8f      	ldr	r3, [pc, #572]	; (80097c8 <main+0x298>)
 800958c:	4a8f      	ldr	r2, [pc, #572]	; (80097cc <main+0x29c>)
 800958e:	609a      	str	r2, [r3, #8]
 	holedL.hi2cx = &hi2c1;
 8009590:	4b8f      	ldr	r3, [pc, #572]	; (80097d0 <main+0x2a0>)
 8009592:	4a90      	ldr	r2, [pc, #576]	; (80097d4 <main+0x2a4>)
 8009594:	609a      	str	r2, [r3, #8]
 	ssd1306_Init(&holedL);
 8009596:	488e      	ldr	r0, [pc, #568]	; (80097d0 <main+0x2a0>)
 8009598:	f001 f9be 	bl	800a918 <ssd1306_Init>
 	ssd1306_Fill(&holedL, Black);
 800959c:	2100      	movs	r1, #0
 800959e:	488c      	ldr	r0, [pc, #560]	; (80097d0 <main+0x2a0>)
 80095a0:	f001 fa4e 	bl	800aa40 <ssd1306_Fill>
 	ssd1306_DrawHLine(&holedL,0,128,13,White);
 80095a4:	2301      	movs	r3, #1
 80095a6:	9300      	str	r3, [sp, #0]
 80095a8:	230d      	movs	r3, #13
 80095aa:	2280      	movs	r2, #128	; 0x80
 80095ac:	2100      	movs	r1, #0
 80095ae:	4888      	ldr	r0, [pc, #544]	; (80097d0 <main+0x2a0>)
 80095b0:	f001 fc68 	bl	800ae84 <ssd1306_DrawHLine>
 	ssd1306_DrawHLine(&holedL,0,128,48,White);
 80095b4:	2301      	movs	r3, #1
 80095b6:	9300      	str	r3, [sp, #0]
 80095b8:	2330      	movs	r3, #48	; 0x30
 80095ba:	2280      	movs	r2, #128	; 0x80
 80095bc:	2100      	movs	r1, #0
 80095be:	4884      	ldr	r0, [pc, #528]	; (80097d0 <main+0x2a0>)
 80095c0:	f001 fc60 	bl	800ae84 <ssd1306_DrawHLine>
 	ssd1306_UpdateScreen(&holedL);
 80095c4:	4882      	ldr	r0, [pc, #520]	; (80097d0 <main+0x2a0>)
 80095c6:	f001 fa5e 	bl	800aa86 <ssd1306_UpdateScreen>
 	ssd1306_Init(&holedR);
 80095ca:	487f      	ldr	r0, [pc, #508]	; (80097c8 <main+0x298>)
 80095cc:	f001 f9a4 	bl	800a918 <ssd1306_Init>
 	ssd1306_Fill(&holedR, Black);
 80095d0:	2100      	movs	r1, #0
 80095d2:	487d      	ldr	r0, [pc, #500]	; (80097c8 <main+0x298>)
 80095d4:	f001 fa34 	bl	800aa40 <ssd1306_Fill>
 	ssd1306_DrawHLine(&holedR,0,128,13,White);
 80095d8:	2301      	movs	r3, #1
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	230d      	movs	r3, #13
 80095de:	2280      	movs	r2, #128	; 0x80
 80095e0:	2100      	movs	r1, #0
 80095e2:	4879      	ldr	r0, [pc, #484]	; (80097c8 <main+0x298>)
 80095e4:	f001 fc4e 	bl	800ae84 <ssd1306_DrawHLine>
 	ssd1306_DrawHLine(&holedR,0,128,48,White);
 80095e8:	2301      	movs	r3, #1
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	2330      	movs	r3, #48	; 0x30
 80095ee:	2280      	movs	r2, #128	; 0x80
 80095f0:	2100      	movs	r1, #0
 80095f2:	4875      	ldr	r0, [pc, #468]	; (80097c8 <main+0x298>)
 80095f4:	f001 fc46 	bl	800ae84 <ssd1306_DrawHLine>
 	ssd1306_UpdateScreen(&holedR);
 80095f8:	4873      	ldr	r0, [pc, #460]	; (80097c8 <main+0x298>)
 80095fa:	f001 fa44 	bl	800aa86 <ssd1306_UpdateScreen>

   /* If User Button is pressed on Startup, enter DFU Firmware Upgrade Mode */
 	if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == GPIO_PIN_SET){
 80095fe:	2102      	movs	r1, #2
 8009600:	4875      	ldr	r0, [pc, #468]	; (80097d8 <main+0x2a8>)
 8009602:	f7f8 f9ff 	bl	8001a04 <HAL_GPIO_ReadPin>
 8009606:	4603      	mov	r3, r0
 8009608:	2b01      	cmp	r3, #1
 800960a:	d12a      	bne.n	8009662 <main+0x132>
 		HAL_GPIO_WritePin(SET_BOOT0_GPIO_Port, SET_BOOT0_Pin, GPIO_PIN_SET);  // pull BOOT0 = 1
 800960c:	2201      	movs	r2, #1
 800960e:	2104      	movs	r1, #4
 8009610:	4872      	ldr	r0, [pc, #456]	; (80097dc <main+0x2ac>)
 8009612:	f7f8 fa0f 	bl	8001a34 <HAL_GPIO_WritePin>
 		ssd1306_SetCursor(&holedL, 48, 23);
 8009616:	2217      	movs	r2, #23
 8009618:	2130      	movs	r1, #48	; 0x30
 800961a:	486d      	ldr	r0, [pc, #436]	; (80097d0 <main+0x2a0>)
 800961c:	f001 fc04 	bl	800ae28 <ssd1306_SetCursor>
 		ssd1306_WriteString(&holedL, "DFU", Font_11x18, White);
 8009620:	4b6f      	ldr	r3, [pc, #444]	; (80097e0 <main+0x2b0>)
 8009622:	2201      	movs	r2, #1
 8009624:	9200      	str	r2, [sp, #0]
 8009626:	cb0c      	ldmia	r3, {r2, r3}
 8009628:	496e      	ldr	r1, [pc, #440]	; (80097e4 <main+0x2b4>)
 800962a:	4869      	ldr	r0, [pc, #420]	; (80097d0 <main+0x2a0>)
 800962c:	f001 fbd4 	bl	800add8 <ssd1306_WriteString>
 		ssd1306_UpdateScreen(&holedL);
 8009630:	4867      	ldr	r0, [pc, #412]	; (80097d0 <main+0x2a0>)
 8009632:	f001 fa28 	bl	800aa86 <ssd1306_UpdateScreen>
 		ssd1306_SetCursor(&holedR, 42, 23);
 8009636:	2217      	movs	r2, #23
 8009638:	212a      	movs	r1, #42	; 0x2a
 800963a:	4863      	ldr	r0, [pc, #396]	; (80097c8 <main+0x298>)
 800963c:	f001 fbf4 	bl	800ae28 <ssd1306_SetCursor>
 		ssd1306_WriteString(&holedR, "MODE", Font_11x18, White);
 8009640:	4b67      	ldr	r3, [pc, #412]	; (80097e0 <main+0x2b0>)
 8009642:	2201      	movs	r2, #1
 8009644:	9200      	str	r2, [sp, #0]
 8009646:	cb0c      	ldmia	r3, {r2, r3}
 8009648:	4967      	ldr	r1, [pc, #412]	; (80097e8 <main+0x2b8>)
 800964a:	485f      	ldr	r0, [pc, #380]	; (80097c8 <main+0x298>)
 800964c:	f001 fbc4 	bl	800add8 <ssd1306_WriteString>
 		ssd1306_UpdateScreen(&holedR);
 8009650:	485d      	ldr	r0, [pc, #372]	; (80097c8 <main+0x298>)
 8009652:	f001 fa18 	bl	800aa86 <ssd1306_UpdateScreen>
 		HAL_Delay(500);      // wait for Capacitor to charge to ~3.3V
 8009656:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800965a:	f7f7 f817 	bl	800068c <HAL_Delay>
 		NVIC_SystemReset();  // Reset the MCU
 800965e:	f7ff ff51 	bl	8009504 <__NVIC_SystemReset>
 	}else{
 		ssd1306_SetCursor(&holedL, 48, 23);
 8009662:	2217      	movs	r2, #23
 8009664:	2130      	movs	r1, #48	; 0x30
 8009666:	485a      	ldr	r0, [pc, #360]	; (80097d0 <main+0x2a0>)
 8009668:	f001 fbde 	bl	800ae28 <ssd1306_SetCursor>
 		ssd1306_WriteString(&holedL, "DSP", Font_11x18, White);
 800966c:	4b5c      	ldr	r3, [pc, #368]	; (80097e0 <main+0x2b0>)
 800966e:	2201      	movs	r2, #1
 8009670:	9200      	str	r2, [sp, #0]
 8009672:	cb0c      	ldmia	r3, {r2, r3}
 8009674:	495d      	ldr	r1, [pc, #372]	; (80097ec <main+0x2bc>)
 8009676:	4856      	ldr	r0, [pc, #344]	; (80097d0 <main+0x2a0>)
 8009678:	f001 fbae 	bl	800add8 <ssd1306_WriteString>
 		ssd1306_UpdateScreen(&holedL);
 800967c:	4854      	ldr	r0, [pc, #336]	; (80097d0 <main+0x2a0>)
 800967e:	f001 fa02 	bl	800aa86 <ssd1306_UpdateScreen>
 		ssd1306_SetCursor(&holedR, 37, 23);
 8009682:	2217      	movs	r2, #23
 8009684:	2125      	movs	r1, #37	; 0x25
 8009686:	4850      	ldr	r0, [pc, #320]	; (80097c8 <main+0x298>)
 8009688:	f001 fbce 	bl	800ae28 <ssd1306_SetCursor>
 		ssd1306_WriteString(&holedR, "BOARD", Font_11x18, White);
 800968c:	4b54      	ldr	r3, [pc, #336]	; (80097e0 <main+0x2b0>)
 800968e:	2201      	movs	r2, #1
 8009690:	9200      	str	r2, [sp, #0]
 8009692:	cb0c      	ldmia	r3, {r2, r3}
 8009694:	4956      	ldr	r1, [pc, #344]	; (80097f0 <main+0x2c0>)
 8009696:	484c      	ldr	r0, [pc, #304]	; (80097c8 <main+0x298>)
 8009698:	f001 fb9e 	bl	800add8 <ssd1306_WriteString>
 		ssd1306_UpdateScreen(&holedR);
 800969c:	484a      	ldr	r0, [pc, #296]	; (80097c8 <main+0x298>)
 800969e:	f001 f9f2 	bl	800aa86 <ssd1306_UpdateScreen>
 	}

 	/* Start ADC for Battery Voltage */
 	HAL_ADC_Start(&hadc1);
 80096a2:	4854      	ldr	r0, [pc, #336]	; (80097f4 <main+0x2c4>)
 80096a4:	f7f7 f85a 	bl	800075c <HAL_ADC_Start>
 	if(HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK){
 80096a8:	2105      	movs	r1, #5
 80096aa:	4852      	ldr	r0, [pc, #328]	; (80097f4 <main+0x2c4>)
 80096ac:	f7f7 f8fc 	bl	80008a8 <HAL_ADC_PollForConversion>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d102      	bne.n	80096bc <main+0x18c>
 		HAL_ADC_GetValue(&hadc1);
 80096b6:	484f      	ldr	r0, [pc, #316]	; (80097f4 <main+0x2c4>)
 80096b8:	f7f7 f97a 	bl	80009b0 <HAL_ADC_GetValue>
 	}

 	/* Start both Timers in Encoder Mode for Rotary Encoders */
 	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1); // start encoder mode
 80096bc:	2100      	movs	r1, #0
 80096be:	484e      	ldr	r0, [pc, #312]	; (80097f8 <main+0x2c8>)
 80096c0:	f7fc f8ab 	bl	800581a <HAL_TIM_Encoder_Start>
 	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80096c4:	2100      	movs	r1, #0
 80096c6:	484d      	ldr	r0, [pc, #308]	; (80097fc <main+0x2cc>)
 80096c8:	f7fc f8a7 	bl	800581a <HAL_TIM_Encoder_Start>
 	TIM3->CNT = 0; // initialize zero
 80096cc:	4b4c      	ldr	r3, [pc, #304]	; (8009800 <main+0x2d0>)
 80096ce:	2200      	movs	r2, #0
 80096d0:	625a      	str	r2, [r3, #36]	; 0x24
 	TIM4->CNT = 0;
 80096d2:	4b4c      	ldr	r3, [pc, #304]	; (8009804 <main+0x2d4>)
 80096d4:	2200      	movs	r2, #0
 80096d6:	625a      	str	r2, [r3, #36]	; 0x24

 	/* define the input state */
 	strcpy(In.title,"Input");
 80096d8:	4b4b      	ldr	r3, [pc, #300]	; (8009808 <main+0x2d8>)
 80096da:	4a4c      	ldr	r2, [pc, #304]	; (800980c <main+0x2dc>)
 80096dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80096e0:	6018      	str	r0, [r3, #0]
 80096e2:	3304      	adds	r3, #4
 80096e4:	8019      	strh	r1, [r3, #0]
 	strcpy(In.par0.name,"Line Vol");
 80096e6:	4b4a      	ldr	r3, [pc, #296]	; (8009810 <main+0x2e0>)
 80096e8:	4a4a      	ldr	r2, [pc, #296]	; (8009814 <main+0x2e4>)
 80096ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80096ec:	c303      	stmia	r3!, {r0, r1}
 80096ee:	701a      	strb	r2, [r3, #0]
 	In.par0.value=17; //Line Vol, init value
 80096f0:	4b45      	ldr	r3, [pc, #276]	; (8009808 <main+0x2d8>)
 80096f2:	2211      	movs	r2, #17
 80096f4:	629a      	str	r2, [r3, #40]	; 0x28
 	In.par0.max=22; //Line Vol, maximum
 80096f6:	4b44      	ldr	r3, [pc, #272]	; (8009808 <main+0x2d8>)
 80096f8:	2216      	movs	r2, #22
 80096fa:	631a      	str	r2, [r3, #48]	; 0x30
 	In.par0.min=0; //Line Vol, minimum
 80096fc:	4b42      	ldr	r3, [pc, #264]	; (8009808 <main+0x2d8>)
 80096fe:	2200      	movs	r2, #0
 8009700:	62da      	str	r2, [r3, #44]	; 0x2c
 	In.par0.change=1; //Line Vol, step size
 8009702:	4b41      	ldr	r3, [pc, #260]	; (8009808 <main+0x2d8>)
 8009704:	2201      	movs	r2, #1
 8009706:	635a      	str	r2, [r3, #52]	; 0x34
 	strcpy(In.par1.name,"Source");
 8009708:	4b43      	ldr	r3, [pc, #268]	; (8009818 <main+0x2e8>)
 800970a:	4a44      	ldr	r2, [pc, #272]	; (800981c <main+0x2ec>)
 800970c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009710:	6018      	str	r0, [r3, #0]
 8009712:	3304      	adds	r3, #4
 8009714:	8019      	strh	r1, [r3, #0]
 8009716:	3302      	adds	r3, #2
 8009718:	0c0a      	lsrs	r2, r1, #16
 800971a:	701a      	strb	r2, [r3, #0]
 	In.par1.value=3;
 800971c:	4b3a      	ldr	r3, [pc, #232]	; (8009808 <main+0x2d8>)
 800971e:	2203      	movs	r2, #3
 8009720:	661a      	str	r2, [r3, #96]	; 0x60
 	In.par1.max=3;
 8009722:	4b39      	ldr	r3, [pc, #228]	; (8009808 <main+0x2d8>)
 8009724:	2203      	movs	r2, #3
 8009726:	669a      	str	r2, [r3, #104]	; 0x68
 	In.par1.min=0;
 8009728:	4b37      	ldr	r3, [pc, #220]	; (8009808 <main+0x2d8>)
 800972a:	2200      	movs	r2, #0
 800972c:	665a      	str	r2, [r3, #100]	; 0x64
 	In.par1.change=1;
 800972e:	4b36      	ldr	r3, [pc, #216]	; (8009808 <main+0x2d8>)
 8009730:	2201      	movs	r2, #1
 8009732:	66da      	str	r2, [r3, #108]	; 0x6c
 	strcpy(In.par2.name,"HP Vol");
 8009734:	4b3a      	ldr	r3, [pc, #232]	; (8009820 <main+0x2f0>)
 8009736:	4a3b      	ldr	r2, [pc, #236]	; (8009824 <main+0x2f4>)
 8009738:	e892 0003 	ldmia.w	r2, {r0, r1}
 800973c:	6018      	str	r0, [r3, #0]
 800973e:	3304      	adds	r3, #4
 8009740:	8019      	strh	r1, [r3, #0]
 8009742:	3302      	adds	r3, #2
 8009744:	0c0a      	lsrs	r2, r1, #16
 8009746:	701a      	strb	r2, [r3, #0]
 	In.par2.value=70; //HP Vol, init value
 8009748:	4b2f      	ldr	r3, [pc, #188]	; (8009808 <main+0x2d8>)
 800974a:	2246      	movs	r2, #70	; 0x46
 800974c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 	In.par2.max=78; //HP Vol, maximum
 8009750:	4b2d      	ldr	r3, [pc, #180]	; (8009808 <main+0x2d8>)
 8009752:	224e      	movs	r2, #78	; 0x4e
 8009754:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 	In.par2.min=0; //HP Vol, minimum
 8009758:	4b2b      	ldr	r3, [pc, #172]	; (8009808 <main+0x2d8>)
 800975a:	2200      	movs	r2, #0
 800975c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 	In.par2.change=1; //HP Vol, step size
 8009760:	4b29      	ldr	r3, [pc, #164]	; (8009808 <main+0x2d8>)
 8009762:	2201      	movs	r2, #1
 8009764:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

 	input_source=&In.par1.value;
 8009768:	4b2f      	ldr	r3, [pc, #188]	; (8009828 <main+0x2f8>)
 800976a:	4a30      	ldr	r2, [pc, #192]	; (800982c <main+0x2fc>)
 800976c:	601a      	str	r2, [r3, #0]
 	volume_line=&In.par0.value;
 800976e:	4b30      	ldr	r3, [pc, #192]	; (8009830 <main+0x300>)
 8009770:	4a30      	ldr	r2, [pc, #192]	; (8009834 <main+0x304>)
 8009772:	601a      	str	r2, [r3, #0]
 	volume_hp=&In.par2.value;
 8009774:	4b30      	ldr	r3, [pc, #192]	; (8009838 <main+0x308>)
 8009776:	4a31      	ldr	r2, [pc, #196]	; (800983c <main+0x30c>)
 8009778:	601a      	str	r2, [r3, #0]

 	/* Init TLV320 Audio Codec */
 	TLV320_Init(&hi2c1);
 800977a:	4816      	ldr	r0, [pc, #88]	; (80097d4 <main+0x2a4>)
 800977c:	f002 f8e2 	bl	800b944 <TLV320_Init>
 	BSP_SelectAudioIn(*input_source);
 8009780:	4b29      	ldr	r3, [pc, #164]	; (8009828 <main+0x2f8>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	b2db      	uxtb	r3, r3
 8009788:	4618      	mov	r0, r3
 800978a:	f7ff fde9 	bl	8009360 <BSP_SelectAudioIn>
 	TLV320_SetLineInVol(*volume_line);
 800978e:	4b28      	ldr	r3, [pc, #160]	; (8009830 <main+0x300>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	b29b      	uxth	r3, r3
 8009796:	4618      	mov	r0, r3
 8009798:	f002 f914 	bl	800b9c4 <TLV320_SetLineInVol>
 	TLV320_SetHeadphoneVol(*volume_hp);
 800979c:	4b26      	ldr	r3, [pc, #152]	; (8009838 <main+0x308>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	4618      	mov	r0, r3
 80097a6:	f002 f935 	bl	800ba14 <TLV320_SetHeadphoneVol>

   /* Signal Processing */
 	dsp_mode = DSP_MODE_PASSTHROUGH;
 80097aa:	4b25      	ldr	r3, [pc, #148]	; (8009840 <main+0x310>)
 80097ac:	2200      	movs	r2, #0
 80097ae:	801a      	strh	r2, [r3, #0]

 	/* Clear Audio Rx and Tx buffer for DMA */
 	for(uint16_t i=0; i<DSP_BUFFERSIZE_DOUBLE; i++){
 80097b0:	2300      	movs	r3, #0
 80097b2:	80fb      	strh	r3, [r7, #6]
 80097b4:	e053      	b.n	800985e <main+0x32e>
 80097b6:	bf00      	nop
 80097b8:	200000f4 	.word	0x200000f4
 80097bc:	20001388 	.word	0x20001388
 80097c0:	20000008 	.word	0x20000008
 80097c4:	20000cd4 	.word	0x20000cd4
 80097c8:	20000798 	.word	0x20000798
 80097cc:	20000be8 	.word	0x20000be8
 80097d0:	20000f78 	.word	0x20000f78
 80097d4:	20000c80 	.word	0x20000c80
 80097d8:	40020000 	.word	0x40020000
 80097dc:	40020c00 	.word	0x40020c00
 80097e0:	200000cc 	.word	0x200000cc
 80097e4:	0800d8b0 	.word	0x0800d8b0
 80097e8:	0800d8b4 	.word	0x0800d8b4
 80097ec:	0800d8bc 	.word	0x0800d8bc
 80097f0:	0800d8c0 	.word	0x0800d8c0
 80097f4:	20000f30 	.word	0x20000f30
 80097f8:	20000ef0 	.word	0x20000ef0
 80097fc:	20000c3c 	.word	0x20000c3c
 8009800:	40000400 	.word	0x40000400
 8009804:	40000800 	.word	0x40000800
 8009808:	2000169c 	.word	0x2000169c
 800980c:	0800d8c8 	.word	0x0800d8c8
 8009810:	200016b0 	.word	0x200016b0
 8009814:	0800d8d0 	.word	0x0800d8d0
 8009818:	200016e8 	.word	0x200016e8
 800981c:	0800d8dc 	.word	0x0800d8dc
 8009820:	20001720 	.word	0x20001720
 8009824:	0800d8e4 	.word	0x0800d8e4
 8009828:	20000788 	.word	0x20000788
 800982c:	200016fc 	.word	0x200016fc
 8009830:	2000198c 	.word	0x2000198c
 8009834:	200016c4 	.word	0x200016c4
 8009838:	20000c7c 	.word	0x20000c7c
 800983c:	20001734 	.word	0x20001734
 8009840:	20000794 	.word	0x20000794
 		pRxData[i] = 0;
 8009844:	88fb      	ldrh	r3, [r7, #6]
 8009846:	4a95      	ldr	r2, [pc, #596]	; (8009a9c <main+0x56c>)
 8009848:	2100      	movs	r1, #0
 800984a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 		pTxData[i] = 0;
 800984e:	88fb      	ldrh	r3, [r7, #6]
 8009850:	4a93      	ldr	r2, [pc, #588]	; (8009aa0 <main+0x570>)
 8009852:	2100      	movs	r1, #0
 8009854:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 	for(uint16_t i=0; i<DSP_BUFFERSIZE_DOUBLE; i++){
 8009858:	88fb      	ldrh	r3, [r7, #6]
 800985a:	3301      	adds	r3, #1
 800985c:	80fb      	strh	r3, [r7, #6]
 800985e:	88fb      	ldrh	r3, [r7, #6]
 8009860:	2bbf      	cmp	r3, #191	; 0xbf
 8009862:	d9ef      	bls.n	8009844 <main+0x314>
 	}

 	/* Generate a 1kHz Sine Wave */
 	//uint16_t nDataPoints = BSP_SineWave(48000.0f, 1000.0f, 1000, sinWave, sizeof(sinWave)/sizeof(uint16_t));
 	uint8_t update_counter = 0;
 8009864:	2300      	movs	r3, #0
 8009866:	717b      	strb	r3, [r7, #5]

	/* Start automatic DMA Transmission (Full Duplex) */
	/* Double buffer length, Interrupt on Half-Full */
	HAL_I2SEx_TransmitReceive_DMA(&hi2s2, pTxData, pRxData, DSP_BUFFERSIZE_DOUBLE);
 8009868:	23c0      	movs	r3, #192	; 0xc0
 800986a:	4a8c      	ldr	r2, [pc, #560]	; (8009a9c <main+0x56c>)
 800986c:	498c      	ldr	r1, [pc, #560]	; (8009aa0 <main+0x570>)
 800986e:	488d      	ldr	r0, [pc, #564]	; (8009aa4 <main+0x574>)
 8009870:	f7f8 ffd6 	bl	8002820 <HAL_I2SEx_TransmitReceive_DMA>

	/* show startup screen for 1s (and then clear it) */
	HAL_Delay(1000);
 8009874:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009878:	f7f6 ff08 	bl	800068c <HAL_Delay>
	ssd1306_Fill(&holedR, Black);
 800987c:	2100      	movs	r1, #0
 800987e:	488a      	ldr	r0, [pc, #552]	; (8009aa8 <main+0x578>)
 8009880:	f001 f8de 	bl	800aa40 <ssd1306_Fill>
	ssd1306_Fill(&holedL, Black);
 8009884:	2100      	movs	r1, #0
 8009886:	4889      	ldr	r0, [pc, #548]	; (8009aac <main+0x57c>)
 8009888:	f001 f8da 	bl	800aa40 <ssd1306_Fill>
	ssd1306_DrawHLine(&holedL,0,128,13,White);
 800988c:	2301      	movs	r3, #1
 800988e:	9300      	str	r3, [sp, #0]
 8009890:	230d      	movs	r3, #13
 8009892:	2280      	movs	r2, #128	; 0x80
 8009894:	2100      	movs	r1, #0
 8009896:	4885      	ldr	r0, [pc, #532]	; (8009aac <main+0x57c>)
 8009898:	f001 faf4 	bl	800ae84 <ssd1306_DrawHLine>
	ssd1306_DrawHLine(&holedL,0,128,48,White);
 800989c:	2301      	movs	r3, #1
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	2330      	movs	r3, #48	; 0x30
 80098a2:	2280      	movs	r2, #128	; 0x80
 80098a4:	2100      	movs	r1, #0
 80098a6:	4881      	ldr	r0, [pc, #516]	; (8009aac <main+0x57c>)
 80098a8:	f001 faec 	bl	800ae84 <ssd1306_DrawHLine>
	ssd1306_UpdateScreen(&holedL);
 80098ac:	487f      	ldr	r0, [pc, #508]	; (8009aac <main+0x57c>)
 80098ae:	f001 f8ea 	bl	800aa86 <ssd1306_UpdateScreen>
	ssd1306_DrawHLine(&holedR,0,128,13,White);
 80098b2:	2301      	movs	r3, #1
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	230d      	movs	r3, #13
 80098b8:	2280      	movs	r2, #128	; 0x80
 80098ba:	2100      	movs	r1, #0
 80098bc:	487a      	ldr	r0, [pc, #488]	; (8009aa8 <main+0x578>)
 80098be:	f001 fae1 	bl	800ae84 <ssd1306_DrawHLine>
	ssd1306_DrawHLine(&holedR,0,128,48,White);
 80098c2:	2301      	movs	r3, #1
 80098c4:	9300      	str	r3, [sp, #0]
 80098c6:	2330      	movs	r3, #48	; 0x30
 80098c8:	2280      	movs	r2, #128	; 0x80
 80098ca:	2100      	movs	r1, #0
 80098cc:	4876      	ldr	r0, [pc, #472]	; (8009aa8 <main+0x578>)
 80098ce:	f001 fad9 	bl	800ae84 <ssd1306_DrawHLine>
	ssd1306_UpdateScreen(&holedR);
 80098d2:	4875      	ldr	r0, [pc, #468]	; (8009aa8 <main+0x578>)
 80098d4:	f001 f8d7 	bl	800aa86 <ssd1306_UpdateScreen>
	updateAkku();
 80098d8:	f000 ff02 	bl	800a6e0 <updateAkku>
//		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
//	      } else {
//	    	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
//	      }

	    if(state_nxt!=state_crrnt){
 80098dc:	4b74      	ldr	r3, [pc, #464]	; (8009ab0 <main+0x580>)
 80098de:	781a      	ldrb	r2, [r3, #0]
 80098e0:	4b74      	ldr	r3, [pc, #464]	; (8009ab4 <main+0x584>)
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d001      	beq.n	80098ec <main+0x3bc>
			clearFX();
 80098e8:	f000 fe9c 	bl	800a624 <clearFX>
			}

			state_crrnt = state_nxt;
 80098ec:	4b70      	ldr	r3, [pc, #448]	; (8009ab0 <main+0x580>)
 80098ee:	781a      	ldrb	r2, [r3, #0]
 80098f0:	4b70      	ldr	r3, [pc, #448]	; (8009ab4 <main+0x584>)
 80098f2:	701a      	strb	r2, [r3, #0]
			update_counter ++;
 80098f4:	797b      	ldrb	r3, [r7, #5]
 80098f6:	3301      	adds	r3, #1
 80098f8:	717b      	strb	r3, [r7, #5]

	    /* STATE MACHINE */
			switch (state_crrnt){
 80098fa:	4b6e      	ldr	r3, [pc, #440]	; (8009ab4 <main+0x584>)
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10a      	bne.n	8009918 <main+0x3e8>
				case IN:
					showFX(&In);
 8009902:	486d      	ldr	r0, [pc, #436]	; (8009ab8 <main+0x588>)
 8009904:	f000 fce0 	bl	800a2c8 <showFX>
					BSP_SelectAudioIn(*input_source);
 8009908:	4b6c      	ldr	r3, [pc, #432]	; (8009abc <main+0x58c>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	b2db      	uxtb	r3, r3
 8009910:	4618      	mov	r0, r3
 8009912:	f7ff fd25 	bl	8009360 <BSP_SelectAudioIn>
					break;
 8009916:	e000      	b.n	800991a <main+0x3ea>
	      /* State Machine Includes */



				default:
					break;
 8009918:	bf00      	nop
			}



			encoder_change = BSP_ReadEncoder_Difference(ENCODER_LEFT);
 800991a:	2001      	movs	r0, #1
 800991c:	f7ff fc6c 	bl	80091f8 <BSP_ReadEncoder_Difference>
 8009920:	4603      	mov	r3, r0
 8009922:	461a      	mov	r2, r3
 8009924:	4b66      	ldr	r3, [pc, #408]	; (8009ac0 <main+0x590>)
 8009926:	801a      	strh	r2, [r3, #0]
			if(encoder_change){    // only execute when something changed
 8009928:	4b65      	ldr	r3, [pc, #404]	; (8009ac0 <main+0x590>)
 800992a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d02b      	beq.n	800998a <main+0x45a>
				(*para0).value+=encoder_change*(*para0).change;
 8009932:	4b64      	ldr	r3, [pc, #400]	; (8009ac4 <main+0x594>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	6959      	ldr	r1, [r3, #20]
 8009938:	4b61      	ldr	r3, [pc, #388]	; (8009ac0 <main+0x590>)
 800993a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800993e:	461a      	mov	r2, r3
 8009940:	4b60      	ldr	r3, [pc, #384]	; (8009ac4 <main+0x594>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	fb03 f202 	mul.w	r2, r3, r2
 800994a:	4b5e      	ldr	r3, [pc, #376]	; (8009ac4 <main+0x594>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	440a      	add	r2, r1
 8009950:	615a      	str	r2, [r3, #20]
				if((*para0).value<(*para0).min)
 8009952:	4b5c      	ldr	r3, [pc, #368]	; (8009ac4 <main+0x594>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	695a      	ldr	r2, [r3, #20]
 8009958:	4b5a      	ldr	r3, [pc, #360]	; (8009ac4 <main+0x594>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	699b      	ldr	r3, [r3, #24]
 800995e:	429a      	cmp	r2, r3
 8009960:	da05      	bge.n	800996e <main+0x43e>
					(*para0).value=(*para0).min;
 8009962:	4b58      	ldr	r3, [pc, #352]	; (8009ac4 <main+0x594>)
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	4b57      	ldr	r3, [pc, #348]	; (8009ac4 <main+0x594>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	6992      	ldr	r2, [r2, #24]
 800996c:	615a      	str	r2, [r3, #20]
				if((*para0).value>(*para0).max)
 800996e:	4b55      	ldr	r3, [pc, #340]	; (8009ac4 <main+0x594>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	695a      	ldr	r2, [r3, #20]
 8009974:	4b53      	ldr	r3, [pc, #332]	; (8009ac4 <main+0x594>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	69db      	ldr	r3, [r3, #28]
 800997a:	429a      	cmp	r2, r3
 800997c:	dd05      	ble.n	800998a <main+0x45a>
					(*para0).value=(*para0).max;
 800997e:	4b51      	ldr	r3, [pc, #324]	; (8009ac4 <main+0x594>)
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	4b50      	ldr	r3, [pc, #320]	; (8009ac4 <main+0x594>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	69d2      	ldr	r2, [r2, #28]
 8009988:	615a      	str	r2, [r3, #20]
			}

			encoder_change = BSP_ReadEncoder_Difference(ENCODER_RIGHT);
 800998a:	2000      	movs	r0, #0
 800998c:	f7ff fc34 	bl	80091f8 <BSP_ReadEncoder_Difference>
 8009990:	4603      	mov	r3, r0
 8009992:	461a      	mov	r2, r3
 8009994:	4b4a      	ldr	r3, [pc, #296]	; (8009ac0 <main+0x590>)
 8009996:	801a      	strh	r2, [r3, #0]
			if(encoder_change){    // only execute when something changed
 8009998:	4b49      	ldr	r3, [pc, #292]	; (8009ac0 <main+0x590>)
 800999a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d02b      	beq.n	80099fa <main+0x4ca>
				(*para2).value+=encoder_change*(*para2).change;
 80099a2:	4b49      	ldr	r3, [pc, #292]	; (8009ac8 <main+0x598>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	6959      	ldr	r1, [r3, #20]
 80099a8:	4b45      	ldr	r3, [pc, #276]	; (8009ac0 <main+0x590>)
 80099aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099ae:	461a      	mov	r2, r3
 80099b0:	4b45      	ldr	r3, [pc, #276]	; (8009ac8 <main+0x598>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6a1b      	ldr	r3, [r3, #32]
 80099b6:	fb03 f202 	mul.w	r2, r3, r2
 80099ba:	4b43      	ldr	r3, [pc, #268]	; (8009ac8 <main+0x598>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	440a      	add	r2, r1
 80099c0:	615a      	str	r2, [r3, #20]
				if((*para2).value<(*para2).min)
 80099c2:	4b41      	ldr	r3, [pc, #260]	; (8009ac8 <main+0x598>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	695a      	ldr	r2, [r3, #20]
 80099c8:	4b3f      	ldr	r3, [pc, #252]	; (8009ac8 <main+0x598>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	699b      	ldr	r3, [r3, #24]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	da05      	bge.n	80099de <main+0x4ae>
					(*para2).value=(*para2).min;
 80099d2:	4b3d      	ldr	r3, [pc, #244]	; (8009ac8 <main+0x598>)
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	4b3c      	ldr	r3, [pc, #240]	; (8009ac8 <main+0x598>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	6992      	ldr	r2, [r2, #24]
 80099dc:	615a      	str	r2, [r3, #20]
				if((*para2).value>(*para2).max)
 80099de:	4b3a      	ldr	r3, [pc, #232]	; (8009ac8 <main+0x598>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	695a      	ldr	r2, [r3, #20]
 80099e4:	4b38      	ldr	r3, [pc, #224]	; (8009ac8 <main+0x598>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	69db      	ldr	r3, [r3, #28]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	dd05      	ble.n	80099fa <main+0x4ca>
					(*para2).value=(*para2).max;
 80099ee:	4b36      	ldr	r3, [pc, #216]	; (8009ac8 <main+0x598>)
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	4b35      	ldr	r3, [pc, #212]	; (8009ac8 <main+0x598>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	69d2      	ldr	r2, [r2, #28]
 80099f8:	615a      	str	r2, [r3, #20]
			}

			/* LEFT USER BUTTON */
			if(btnLeftPressed){
 80099fa:	4b34      	ldr	r3, [pc, #208]	; (8009acc <main+0x59c>)
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d028      	beq.n	8009a56 <main+0x526>
				btnLeftPressed= 0;
 8009a04:	4b31      	ldr	r3, [pc, #196]	; (8009acc <main+0x59c>)
 8009a06:	2200      	movs	r2, #0
 8009a08:	701a      	strb	r2, [r3, #0]
				if(state_crrnt==IN){
 8009a0a:	4b2a      	ldr	r3, [pc, #168]	; (8009ab4 <main+0x584>)
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d116      	bne.n	8009a40 <main+0x510>
					if((*para1).value-1<(*para1).min)
 8009a12:	4b2f      	ldr	r3, [pc, #188]	; (8009ad0 <main+0x5a0>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	695a      	ldr	r2, [r3, #20]
 8009a18:	4b2d      	ldr	r3, [pc, #180]	; (8009ad0 <main+0x5a0>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	699b      	ldr	r3, [r3, #24]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	dc06      	bgt.n	8009a30 <main+0x500>
						(*para1).value=(*para1).max;
 8009a22:	4b2b      	ldr	r3, [pc, #172]	; (8009ad0 <main+0x5a0>)
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	4b2a      	ldr	r3, [pc, #168]	; (8009ad0 <main+0x5a0>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	69d2      	ldr	r2, [r2, #28]
 8009a2c:	615a      	str	r2, [r3, #20]
 8009a2e:	e012      	b.n	8009a56 <main+0x526>
					else
						(*para1).value-=1;
 8009a30:	4b27      	ldr	r3, [pc, #156]	; (8009ad0 <main+0x5a0>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	695a      	ldr	r2, [r3, #20]
 8009a36:	4b26      	ldr	r3, [pc, #152]	; (8009ad0 <main+0x5a0>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	3a01      	subs	r2, #1
 8009a3c:	615a      	str	r2, [r3, #20]
 8009a3e:	e00a      	b.n	8009a56 <main+0x526>
				}else{
				(*para1).value=!(*para1).value;
 8009a40:	4b23      	ldr	r3, [pc, #140]	; (8009ad0 <main+0x5a0>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	695b      	ldr	r3, [r3, #20]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	bf0c      	ite	eq
 8009a4a:	2301      	moveq	r3, #1
 8009a4c:	2300      	movne	r3, #0
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	4b1f      	ldr	r3, [pc, #124]	; (8009ad0 <main+0x5a0>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	615a      	str	r2, [r3, #20]
				}
			}

			/* RIGHT USER BUTTON */
			if(btnRightPressed){
 8009a56:	4b1f      	ldr	r3, [pc, #124]	; (8009ad4 <main+0x5a4>)
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d046      	beq.n	8009aee <main+0x5be>
				btnRightPressed= 0;
 8009a60:	4b1c      	ldr	r3, [pc, #112]	; (8009ad4 <main+0x5a4>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	701a      	strb	r2, [r3, #0]
				if(state_crrnt==IN){
 8009a66:	4b13      	ldr	r3, [pc, #76]	; (8009ab4 <main+0x584>)
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d134      	bne.n	8009ad8 <main+0x5a8>
					if((*para1).value+1>(*para1).max)
 8009a6e:	4b18      	ldr	r3, [pc, #96]	; (8009ad0 <main+0x5a0>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	695a      	ldr	r2, [r3, #20]
 8009a74:	4b16      	ldr	r3, [pc, #88]	; (8009ad0 <main+0x5a0>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	69db      	ldr	r3, [r3, #28]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	db06      	blt.n	8009a8c <main+0x55c>
						(*para1).value=(*para1).min;
 8009a7e:	4b14      	ldr	r3, [pc, #80]	; (8009ad0 <main+0x5a0>)
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	4b13      	ldr	r3, [pc, #76]	; (8009ad0 <main+0x5a0>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	6992      	ldr	r2, [r2, #24]
 8009a88:	615a      	str	r2, [r3, #20]
 8009a8a:	e030      	b.n	8009aee <main+0x5be>
					else
						(*para1).value+=1;
 8009a8c:	4b10      	ldr	r3, [pc, #64]	; (8009ad0 <main+0x5a0>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	695a      	ldr	r2, [r3, #20]
 8009a92:	4b0f      	ldr	r3, [pc, #60]	; (8009ad0 <main+0x5a0>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	3201      	adds	r2, #1
 8009a98:	615a      	str	r2, [r3, #20]
 8009a9a:	e028      	b.n	8009aee <main+0x5be>
 8009a9c:	20001790 	.word	0x20001790
 8009aa0:	20001a50 	.word	0x20001a50
 8009aa4:	20001bd4 	.word	0x20001bd4
 8009aa8:	20000798 	.word	0x20000798
 8009aac:	20000f78 	.word	0x20000f78
 8009ab0:	20000362 	.word	0x20000362
 8009ab4:	20000361 	.word	0x20000361
 8009ab8:	2000169c 	.word	0x2000169c
 8009abc:	20000788 	.word	0x20000788
 8009ac0:	2000035e 	.word	0x2000035e
 8009ac4:	20001c1c 	.word	0x20001c1c
 8009ac8:	20001bd0 	.word	0x20001bd0
 8009acc:	20000358 	.word	0x20000358
 8009ad0:	20001698 	.word	0x20001698
 8009ad4:	20000359 	.word	0x20000359
				}else{
					(*para3).value=!(*para3).value;
 8009ad8:	4b34      	ldr	r3, [pc, #208]	; (8009bac <main+0x67c>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	695b      	ldr	r3, [r3, #20]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	bf0c      	ite	eq
 8009ae2:	2301      	moveq	r3, #1
 8009ae4:	2300      	movne	r3, #0
 8009ae6:	b2da      	uxtb	r2, r3
 8009ae8:	4b30      	ldr	r3, [pc, #192]	; (8009bac <main+0x67c>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	615a      	str	r2, [r3, #20]
				}
			}

			/* LEFT ENCODER BUTTON */
			if(encLeftPressed){
 8009aee:	4b30      	ldr	r3, [pc, #192]	; (8009bb0 <main+0x680>)
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d010      	beq.n	8009b1a <main+0x5ea>
				encLeftPressed = 0;
 8009af8:	4b2d      	ldr	r3, [pc, #180]	; (8009bb0 <main+0x680>)
 8009afa:	2200      	movs	r2, #0
 8009afc:	701a      	strb	r2, [r3, #0]
				/*switch to the previous state (limit first state)*/
				if(state_nxt-1<0){
 8009afe:	4b2d      	ldr	r3, [pc, #180]	; (8009bb4 <main+0x684>)
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d103      	bne.n	8009b0e <main+0x5de>
				state_nxt=0;
 8009b06:	4b2b      	ldr	r3, [pc, #172]	; (8009bb4 <main+0x684>)
 8009b08:	2200      	movs	r2, #0
 8009b0a:	701a      	strb	r2, [r3, #0]
 8009b0c:	e005      	b.n	8009b1a <main+0x5ea>
				}else{
				state_nxt--;
 8009b0e:	4b29      	ldr	r3, [pc, #164]	; (8009bb4 <main+0x684>)
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	3b01      	subs	r3, #1
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	4b27      	ldr	r3, [pc, #156]	; (8009bb4 <main+0x684>)
 8009b18:	701a      	strb	r2, [r3, #0]
				}
			}

			/* RIGHT ENCODER BUTTON */
			if(encRightPressed){
 8009b1a:	4b27      	ldr	r3, [pc, #156]	; (8009bb8 <main+0x688>)
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d005      	beq.n	8009b30 <main+0x600>
				encRightPressed = 0;
 8009b24:	4b24      	ldr	r3, [pc, #144]	; (8009bb8 <main+0x688>)
 8009b26:	2200      	movs	r2, #0
 8009b28:	701a      	strb	r2, [r3, #0]
				/*switch to the next state (limit last state)*/
				if(state_nxt+1>CNT-1){
				state_nxt=CNT-1;
 8009b2a:	4b22      	ldr	r3, [pc, #136]	; (8009bb4 <main+0x684>)
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	701a      	strb	r2, [r3, #0]
				state_nxt++;
				}
			}

	    //limit line vol
			if(*volume_line>22)
 8009b30:	4b22      	ldr	r3, [pc, #136]	; (8009bbc <main+0x68c>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2b16      	cmp	r3, #22
 8009b38:	dd04      	ble.n	8009b44 <main+0x614>
				*volume_line=22;
 8009b3a:	4b20      	ldr	r3, [pc, #128]	; (8009bbc <main+0x68c>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2216      	movs	r2, #22
 8009b40:	601a      	str	r2, [r3, #0]
 8009b42:	e008      	b.n	8009b56 <main+0x626>
			else if(*volume_line<0)
 8009b44:	4b1d      	ldr	r3, [pc, #116]	; (8009bbc <main+0x68c>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	da03      	bge.n	8009b56 <main+0x626>
				*volume_line=0;
 8009b4e:	4b1b      	ldr	r3, [pc, #108]	; (8009bbc <main+0x68c>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2200      	movs	r2, #0
 8009b54:	601a      	str	r2, [r3, #0]
			//limit HP vol
			if(*volume_hp>78)
 8009b56:	4b1a      	ldr	r3, [pc, #104]	; (8009bc0 <main+0x690>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b4e      	cmp	r3, #78	; 0x4e
 8009b5e:	dd04      	ble.n	8009b6a <main+0x63a>
				*volume_hp=78;
 8009b60:	4b17      	ldr	r3, [pc, #92]	; (8009bc0 <main+0x690>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	224e      	movs	r2, #78	; 0x4e
 8009b66:	601a      	str	r2, [r3, #0]
 8009b68:	e008      	b.n	8009b7c <main+0x64c>
			else if(*volume_hp<0)
 8009b6a:	4b15      	ldr	r3, [pc, #84]	; (8009bc0 <main+0x690>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	da03      	bge.n	8009b7c <main+0x64c>
				*volume_hp=0;
 8009b74:	4b12      	ldr	r3, [pc, #72]	; (8009bc0 <main+0x690>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	601a      	str	r2, [r3, #0]
			TLV320_SetLineInVol(*volume_line);
 8009b7c:	4b0f      	ldr	r3, [pc, #60]	; (8009bbc <main+0x68c>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	4618      	mov	r0, r3
 8009b86:	f001 ff1d 	bl	800b9c4 <TLV320_SetLineInVol>
			TLV320_SetHeadphoneVol(*volume_hp);
 8009b8a:	4b0d      	ldr	r3, [pc, #52]	; (8009bc0 <main+0x690>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	4618      	mov	r0, r3
 8009b94:	f001 ff3e 	bl	800ba14 <TLV320_SetHeadphoneVol>

			/* update the battery level (every 50 counts) */
			if(update_counter >= 50){
 8009b98:	797b      	ldrb	r3, [r7, #5]
 8009b9a:	2b31      	cmp	r3, #49	; 0x31
 8009b9c:	f67f ae9e 	bls.w	80098dc <main+0x3ac>
				update_counter = 0;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	717b      	strb	r3, [r7, #5]
				updateAkku();
 8009ba4:	f000 fd9c 	bl	800a6e0 <updateAkku>
	    if(state_nxt!=state_crrnt){
 8009ba8:	e698      	b.n	80098dc <main+0x3ac>
 8009baa:	bf00      	nop
 8009bac:	20001920 	.word	0x20001920
 8009bb0:	2000035a 	.word	0x2000035a
 8009bb4:	20000362 	.word	0x20000362
 8009bb8:	2000035b 	.word	0x2000035b
 8009bbc:	2000198c 	.word	0x2000198c
 8009bc0:	20000c7c 	.word	0x20000c7c

08009bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b0a4      	sub	sp, #144	; 0x90
 8009bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009bca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009bce:	2234      	movs	r2, #52	; 0x34
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f002 fcb6 	bl	800c544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009bd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009bdc:	2200      	movs	r2, #0
 8009bde:	601a      	str	r2, [r3, #0]
 8009be0:	605a      	str	r2, [r3, #4]
 8009be2:	609a      	str	r2, [r3, #8]
 8009be4:	60da      	str	r2, [r3, #12]
 8009be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009be8:	f107 030c 	add.w	r3, r7, #12
 8009bec:	223c      	movs	r2, #60	; 0x3c
 8009bee:	2100      	movs	r1, #0
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f002 fca7 	bl	800c544 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	60bb      	str	r3, [r7, #8]
 8009bfa:	4b33      	ldr	r3, [pc, #204]	; (8009cc8 <SystemClock_Config+0x104>)
 8009bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bfe:	4a32      	ldr	r2, [pc, #200]	; (8009cc8 <SystemClock_Config+0x104>)
 8009c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c04:	6413      	str	r3, [r2, #64]	; 0x40
 8009c06:	4b30      	ldr	r3, [pc, #192]	; (8009cc8 <SystemClock_Config+0x104>)
 8009c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c0e:	60bb      	str	r3, [r7, #8]
 8009c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009c12:	2300      	movs	r3, #0
 8009c14:	607b      	str	r3, [r7, #4]
 8009c16:	4b2d      	ldr	r3, [pc, #180]	; (8009ccc <SystemClock_Config+0x108>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a2c      	ldr	r2, [pc, #176]	; (8009ccc <SystemClock_Config+0x108>)
 8009c1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c20:	6013      	str	r3, [r2, #0]
 8009c22:	4b2a      	ldr	r3, [pc, #168]	; (8009ccc <SystemClock_Config+0x108>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009c2a:	607b      	str	r3, [r7, #4]
 8009c2c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009c32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009c36:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009c38:	2302      	movs	r3, #2
 8009c3a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009c3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009c40:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009c42:	2304      	movs	r3, #4
 8009c44:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8009c46:	2348      	movs	r3, #72	; 0x48
 8009c48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8009c52:	2303      	movs	r3, #3
 8009c54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8009c58:	2302      	movs	r3, #2
 8009c5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009c5e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fb fa70 	bl	8005148 <HAL_RCC_OscConfig>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d001      	beq.n	8009c72 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8009c6e:	f000 fe0b 	bl	800a888 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009c72:	230f      	movs	r3, #15
 8009c74:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009c76:	2302      	movs	r3, #2
 8009c78:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c82:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009c84:	2300      	movs	r3, #0
 8009c86:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009c88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009c8c:	2102      	movs	r1, #2
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fa fd2c 	bl	80046ec <HAL_RCC_ClockConfig>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d001      	beq.n	8009c9e <SystemClock_Config+0xda>
  {
    Error_Handler();
 8009c9a:	f000 fdf5 	bl	800a888 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_CLK48;
 8009c9e:	2321      	movs	r3, #33	; 0x21
 8009ca0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_EXT;
 8009ca6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009caa:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009cac:	f107 030c 	add.w	r3, r7, #12
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7fa ff17 	bl	8004ae4 <HAL_RCCEx_PeriphCLKConfig>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d001      	beq.n	8009cc0 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8009cbc:	f000 fde4 	bl	800a888 <Error_Handler>
  }
}
 8009cc0:	bf00      	nop
 8009cc2:	3790      	adds	r7, #144	; 0x90
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	40023800 	.word	0x40023800
 8009ccc:	40007000 	.word	0x40007000

08009cd0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009cd6:	463b      	mov	r3, r7
 8009cd8:	2200      	movs	r2, #0
 8009cda:	601a      	str	r2, [r3, #0]
 8009cdc:	605a      	str	r2, [r3, #4]
 8009cde:	609a      	str	r2, [r3, #8]
 8009ce0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8009ce2:	4b21      	ldr	r3, [pc, #132]	; (8009d68 <MX_ADC1_Init+0x98>)
 8009ce4:	4a21      	ldr	r2, [pc, #132]	; (8009d6c <MX_ADC1_Init+0x9c>)
 8009ce6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8009ce8:	4b1f      	ldr	r3, [pc, #124]	; (8009d68 <MX_ADC1_Init+0x98>)
 8009cea:	2200      	movs	r2, #0
 8009cec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009cee:	4b1e      	ldr	r3, [pc, #120]	; (8009d68 <MX_ADC1_Init+0x98>)
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8009cf4:	4b1c      	ldr	r3, [pc, #112]	; (8009d68 <MX_ADC1_Init+0x98>)
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8009cfa:	4b1b      	ldr	r3, [pc, #108]	; (8009d68 <MX_ADC1_Init+0x98>)
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009d00:	4b19      	ldr	r3, [pc, #100]	; (8009d68 <MX_ADC1_Init+0x98>)
 8009d02:	2200      	movs	r2, #0
 8009d04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009d08:	4b17      	ldr	r3, [pc, #92]	; (8009d68 <MX_ADC1_Init+0x98>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009d0e:	4b16      	ldr	r3, [pc, #88]	; (8009d68 <MX_ADC1_Init+0x98>)
 8009d10:	4a17      	ldr	r2, [pc, #92]	; (8009d70 <MX_ADC1_Init+0xa0>)
 8009d12:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009d14:	4b14      	ldr	r3, [pc, #80]	; (8009d68 <MX_ADC1_Init+0x98>)
 8009d16:	2200      	movs	r2, #0
 8009d18:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8009d1a:	4b13      	ldr	r3, [pc, #76]	; (8009d68 <MX_ADC1_Init+0x98>)
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8009d20:	4b11      	ldr	r3, [pc, #68]	; (8009d68 <MX_ADC1_Init+0x98>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009d28:	4b0f      	ldr	r3, [pc, #60]	; (8009d68 <MX_ADC1_Init+0x98>)
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009d2e:	480e      	ldr	r0, [pc, #56]	; (8009d68 <MX_ADC1_Init+0x98>)
 8009d30:	f7f6 fcd0 	bl	80006d4 <HAL_ADC_Init>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d001      	beq.n	8009d3e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8009d3a:	f000 fda5 	bl	800a888 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8009d3e:	2309      	movs	r3, #9
 8009d40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8009d42:	2301      	movs	r3, #1
 8009d44:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009d46:	2300      	movs	r3, #0
 8009d48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009d4a:	463b      	mov	r3, r7
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	4806      	ldr	r0, [pc, #24]	; (8009d68 <MX_ADC1_Init+0x98>)
 8009d50:	f7f6 fe3c 	bl	80009cc <HAL_ADC_ConfigChannel>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d001      	beq.n	8009d5e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8009d5a:	f000 fd95 	bl	800a888 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8009d5e:	bf00      	nop
 8009d60:	3710      	adds	r7, #16
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	20000f30 	.word	0x20000f30
 8009d6c:	40012000 	.word	0x40012000
 8009d70:	0f000001 	.word	0x0f000001

08009d74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009d78:	4b12      	ldr	r3, [pc, #72]	; (8009dc4 <MX_I2C1_Init+0x50>)
 8009d7a:	4a13      	ldr	r2, [pc, #76]	; (8009dc8 <MX_I2C1_Init+0x54>)
 8009d7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8009d7e:	4b11      	ldr	r3, [pc, #68]	; (8009dc4 <MX_I2C1_Init+0x50>)
 8009d80:	4a12      	ldr	r2, [pc, #72]	; (8009dcc <MX_I2C1_Init+0x58>)
 8009d82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009d84:	4b0f      	ldr	r3, [pc, #60]	; (8009dc4 <MX_I2C1_Init+0x50>)
 8009d86:	2200      	movs	r2, #0
 8009d88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8009d8a:	4b0e      	ldr	r3, [pc, #56]	; (8009dc4 <MX_I2C1_Init+0x50>)
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009d90:	4b0c      	ldr	r3, [pc, #48]	; (8009dc4 <MX_I2C1_Init+0x50>)
 8009d92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009d96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009d98:	4b0a      	ldr	r3, [pc, #40]	; (8009dc4 <MX_I2C1_Init+0x50>)
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009d9e:	4b09      	ldr	r3, [pc, #36]	; (8009dc4 <MX_I2C1_Init+0x50>)
 8009da0:	2200      	movs	r2, #0
 8009da2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009da4:	4b07      	ldr	r3, [pc, #28]	; (8009dc4 <MX_I2C1_Init+0x50>)
 8009da6:	2200      	movs	r2, #0
 8009da8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009daa:	4b06      	ldr	r3, [pc, #24]	; (8009dc4 <MX_I2C1_Init+0x50>)
 8009dac:	2200      	movs	r2, #0
 8009dae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009db0:	4804      	ldr	r0, [pc, #16]	; (8009dc4 <MX_I2C1_Init+0x50>)
 8009db2:	f7f7 fe71 	bl	8001a98 <HAL_I2C_Init>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d001      	beq.n	8009dc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8009dbc:	f000 fd64 	bl	800a888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009dc0:	bf00      	nop
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	20000c80 	.word	0x20000c80
 8009dc8:	40005400 	.word	0x40005400
 8009dcc:	000186a0 	.word	0x000186a0

08009dd0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8009dd4:	4b12      	ldr	r3, [pc, #72]	; (8009e20 <MX_I2C3_Init+0x50>)
 8009dd6:	4a13      	ldr	r2, [pc, #76]	; (8009e24 <MX_I2C3_Init+0x54>)
 8009dd8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8009dda:	4b11      	ldr	r3, [pc, #68]	; (8009e20 <MX_I2C3_Init+0x50>)
 8009ddc:	4a12      	ldr	r2, [pc, #72]	; (8009e28 <MX_I2C3_Init+0x58>)
 8009dde:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009de0:	4b0f      	ldr	r3, [pc, #60]	; (8009e20 <MX_I2C3_Init+0x50>)
 8009de2:	2200      	movs	r2, #0
 8009de4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8009de6:	4b0e      	ldr	r3, [pc, #56]	; (8009e20 <MX_I2C3_Init+0x50>)
 8009de8:	2200      	movs	r2, #0
 8009dea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009dec:	4b0c      	ldr	r3, [pc, #48]	; (8009e20 <MX_I2C3_Init+0x50>)
 8009dee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009df2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009df4:	4b0a      	ldr	r3, [pc, #40]	; (8009e20 <MX_I2C3_Init+0x50>)
 8009df6:	2200      	movs	r2, #0
 8009df8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8009dfa:	4b09      	ldr	r3, [pc, #36]	; (8009e20 <MX_I2C3_Init+0x50>)
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009e00:	4b07      	ldr	r3, [pc, #28]	; (8009e20 <MX_I2C3_Init+0x50>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009e06:	4b06      	ldr	r3, [pc, #24]	; (8009e20 <MX_I2C3_Init+0x50>)
 8009e08:	2200      	movs	r2, #0
 8009e0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8009e0c:	4804      	ldr	r0, [pc, #16]	; (8009e20 <MX_I2C3_Init+0x50>)
 8009e0e:	f7f7 fe43 	bl	8001a98 <HAL_I2C_Init>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d001      	beq.n	8009e1c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8009e18:	f000 fd36 	bl	800a888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8009e1c:	bf00      	nop
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	20000be8 	.word	0x20000be8
 8009e24:	40005c00 	.word	0x40005c00
 8009e28:	000186a0 	.word	0x000186a0

08009e2c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8009e30:	4b12      	ldr	r3, [pc, #72]	; (8009e7c <MX_I2S2_Init+0x50>)
 8009e32:	4a13      	ldr	r2, [pc, #76]	; (8009e80 <MX_I2S2_Init+0x54>)
 8009e34:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_SLAVE_TX;
 8009e36:	4b11      	ldr	r3, [pc, #68]	; (8009e7c <MX_I2S2_Init+0x50>)
 8009e38:	2200      	movs	r2, #0
 8009e3a:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8009e3c:	4b0f      	ldr	r3, [pc, #60]	; (8009e7c <MX_I2S2_Init+0x50>)
 8009e3e:	2210      	movs	r2, #16
 8009e40:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8009e42:	4b0e      	ldr	r3, [pc, #56]	; (8009e7c <MX_I2S2_Init+0x50>)
 8009e44:	2201      	movs	r2, #1
 8009e46:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8009e48:	4b0c      	ldr	r3, [pc, #48]	; (8009e7c <MX_I2S2_Init+0x50>)
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8009e4e:	4b0b      	ldr	r3, [pc, #44]	; (8009e7c <MX_I2S2_Init+0x50>)
 8009e50:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8009e54:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8009e56:	4b09      	ldr	r3, [pc, #36]	; (8009e7c <MX_I2S2_Init+0x50>)
 8009e58:	2200      	movs	r2, #0
 8009e5a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_EXTERNAL;
 8009e5c:	4b07      	ldr	r3, [pc, #28]	; (8009e7c <MX_I2S2_Init+0x50>)
 8009e5e:	2201      	movs	r2, #1
 8009e60:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8009e62:	4b06      	ldr	r3, [pc, #24]	; (8009e7c <MX_I2S2_Init+0x50>)
 8009e64:	2201      	movs	r2, #1
 8009e66:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8009e68:	4804      	ldr	r0, [pc, #16]	; (8009e7c <MX_I2S2_Init+0x50>)
 8009e6a:	f7f8 fa71 	bl	8002350 <HAL_I2S_Init>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d001      	beq.n	8009e78 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8009e74:	f000 fd08 	bl	800a888 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8009e78:	bf00      	nop
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	20001bd4 	.word	0x20001bd4
 8009e80:	40003800 	.word	0x40003800

08009e84 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8009e88:	4b06      	ldr	r3, [pc, #24]	; (8009ea4 <MX_RNG_Init+0x20>)
 8009e8a:	4a07      	ldr	r2, [pc, #28]	; (8009ea8 <MX_RNG_Init+0x24>)
 8009e8c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8009e8e:	4805      	ldr	r0, [pc, #20]	; (8009ea4 <MX_RNG_Init+0x20>)
 8009e90:	f7fb fb9c 	bl	80055cc <HAL_RNG_Init>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d001      	beq.n	8009e9e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8009e9a:	f000 fcf5 	bl	800a888 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8009e9e:	bf00      	nop
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	20001910 	.word	0x20001910
 8009ea8:	50060800 	.word	0x50060800

08009eac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b08c      	sub	sp, #48	; 0x30
 8009eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009eb2:	f107 030c 	add.w	r3, r7, #12
 8009eb6:	2224      	movs	r2, #36	; 0x24
 8009eb8:	2100      	movs	r1, #0
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f002 fb42 	bl	800c544 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ec0:	1d3b      	adds	r3, r7, #4
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	601a      	str	r2, [r3, #0]
 8009ec6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009ec8:	4b20      	ldr	r3, [pc, #128]	; (8009f4c <MX_TIM3_Init+0xa0>)
 8009eca:	4a21      	ldr	r2, [pc, #132]	; (8009f50 <MX_TIM3_Init+0xa4>)
 8009ecc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8009ece:	4b1f      	ldr	r3, [pc, #124]	; (8009f4c <MX_TIM3_Init+0xa0>)
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009ed4:	4b1d      	ldr	r3, [pc, #116]	; (8009f4c <MX_TIM3_Init+0xa0>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8009eda:	4b1c      	ldr	r3, [pc, #112]	; (8009f4c <MX_TIM3_Init+0xa0>)
 8009edc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ee0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009ee2:	4b1a      	ldr	r3, [pc, #104]	; (8009f4c <MX_TIM3_Init+0xa0>)
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009ee8:	4b18      	ldr	r3, [pc, #96]	; (8009f4c <MX_TIM3_Init+0xa0>)
 8009eea:	2200      	movs	r2, #0
 8009eec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009efa:	2300      	movs	r3, #0
 8009efc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8009efe:	230a      	movs	r3, #10
 8009f00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009f02:	2300      	movs	r3, #0
 8009f04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009f06:	2301      	movs	r3, #1
 8009f08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8009f0e:	230a      	movs	r3, #10
 8009f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8009f12:	f107 030c 	add.w	r3, r7, #12
 8009f16:	4619      	mov	r1, r3
 8009f18:	480c      	ldr	r0, [pc, #48]	; (8009f4c <MX_TIM3_Init+0xa0>)
 8009f1a:	f7fb fbec 	bl	80056f6 <HAL_TIM_Encoder_Init>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d001      	beq.n	8009f28 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8009f24:	f000 fcb0 	bl	800a888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009f30:	1d3b      	adds	r3, r7, #4
 8009f32:	4619      	mov	r1, r3
 8009f34:	4805      	ldr	r0, [pc, #20]	; (8009f4c <MX_TIM3_Init+0xa0>)
 8009f36:	f7fb fd6f 	bl	8005a18 <HAL_TIMEx_MasterConfigSynchronization>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d001      	beq.n	8009f44 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8009f40:	f000 fca2 	bl	800a888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8009f44:	bf00      	nop
 8009f46:	3730      	adds	r7, #48	; 0x30
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	20000ef0 	.word	0x20000ef0
 8009f50:	40000400 	.word	0x40000400

08009f54 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b08c      	sub	sp, #48	; 0x30
 8009f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009f5a:	f107 030c 	add.w	r3, r7, #12
 8009f5e:	2224      	movs	r2, #36	; 0x24
 8009f60:	2100      	movs	r1, #0
 8009f62:	4618      	mov	r0, r3
 8009f64:	f002 faee 	bl	800c544 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009f68:	1d3b      	adds	r3, r7, #4
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	601a      	str	r2, [r3, #0]
 8009f6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8009f70:	4b20      	ldr	r3, [pc, #128]	; (8009ff4 <MX_TIM4_Init+0xa0>)
 8009f72:	4a21      	ldr	r2, [pc, #132]	; (8009ff8 <MX_TIM4_Init+0xa4>)
 8009f74:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8009f76:	4b1f      	ldr	r3, [pc, #124]	; (8009ff4 <MX_TIM4_Init+0xa0>)
 8009f78:	2200      	movs	r2, #0
 8009f7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009f7c:	4b1d      	ldr	r3, [pc, #116]	; (8009ff4 <MX_TIM4_Init+0xa0>)
 8009f7e:	2200      	movs	r2, #0
 8009f80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8009f82:	4b1c      	ldr	r3, [pc, #112]	; (8009ff4 <MX_TIM4_Init+0xa0>)
 8009f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009f8a:	4b1a      	ldr	r3, [pc, #104]	; (8009ff4 <MX_TIM4_Init+0xa0>)
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009f90:	4b18      	ldr	r3, [pc, #96]	; (8009ff4 <MX_TIM4_Init+0xa0>)
 8009f92:	2200      	movs	r2, #0
 8009f94:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8009f96:	2301      	movs	r3, #1
 8009f98:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8009fa6:	230a      	movs	r3, #10
 8009fa8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009faa:	2300      	movs	r3, #0
 8009fac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8009fb6:	230a      	movs	r3, #10
 8009fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8009fba:	f107 030c 	add.w	r3, r7, #12
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	480c      	ldr	r0, [pc, #48]	; (8009ff4 <MX_TIM4_Init+0xa0>)
 8009fc2:	f7fb fb98 	bl	80056f6 <HAL_TIM_Encoder_Init>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d001      	beq.n	8009fd0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8009fcc:	f000 fc5c 	bl	800a888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009fd8:	1d3b      	adds	r3, r7, #4
 8009fda:	4619      	mov	r1, r3
 8009fdc:	4805      	ldr	r0, [pc, #20]	; (8009ff4 <MX_TIM4_Init+0xa0>)
 8009fde:	f7fb fd1b 	bl	8005a18 <HAL_TIMEx_MasterConfigSynchronization>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d001      	beq.n	8009fec <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8009fe8:	f000 fc4e 	bl	800a888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8009fec:	bf00      	nop
 8009fee:	3730      	adds	r7, #48	; 0x30
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	20000c3c 	.word	0x20000c3c
 8009ff8:	40000800 	.word	0x40000800

08009ffc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a000:	4b11      	ldr	r3, [pc, #68]	; (800a048 <MX_USART1_UART_Init+0x4c>)
 800a002:	4a12      	ldr	r2, [pc, #72]	; (800a04c <MX_USART1_UART_Init+0x50>)
 800a004:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a006:	4b10      	ldr	r3, [pc, #64]	; (800a048 <MX_USART1_UART_Init+0x4c>)
 800a008:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a00c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a00e:	4b0e      	ldr	r3, [pc, #56]	; (800a048 <MX_USART1_UART_Init+0x4c>)
 800a010:	2200      	movs	r2, #0
 800a012:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a014:	4b0c      	ldr	r3, [pc, #48]	; (800a048 <MX_USART1_UART_Init+0x4c>)
 800a016:	2200      	movs	r2, #0
 800a018:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a01a:	4b0b      	ldr	r3, [pc, #44]	; (800a048 <MX_USART1_UART_Init+0x4c>)
 800a01c:	2200      	movs	r2, #0
 800a01e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a020:	4b09      	ldr	r3, [pc, #36]	; (800a048 <MX_USART1_UART_Init+0x4c>)
 800a022:	220c      	movs	r2, #12
 800a024:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a026:	4b08      	ldr	r3, [pc, #32]	; (800a048 <MX_USART1_UART_Init+0x4c>)
 800a028:	2200      	movs	r2, #0
 800a02a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a02c:	4b06      	ldr	r3, [pc, #24]	; (800a048 <MX_USART1_UART_Init+0x4c>)
 800a02e:	2200      	movs	r2, #0
 800a030:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a032:	4805      	ldr	r0, [pc, #20]	; (800a048 <MX_USART1_UART_Init+0x4c>)
 800a034:	f7fb fd6c 	bl	8005b10 <HAL_UART_Init>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d001      	beq.n	800a042 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a03e:	f000 fc23 	bl	800a888 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a042:	bf00      	nop
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	20001658 	.word	0x20001658
 800a04c:	40011000 	.word	0x40011000

0800a050 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a056:	2300      	movs	r3, #0
 800a058:	607b      	str	r3, [r7, #4]
 800a05a:	4b10      	ldr	r3, [pc, #64]	; (800a09c <MX_DMA_Init+0x4c>)
 800a05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a05e:	4a0f      	ldr	r2, [pc, #60]	; (800a09c <MX_DMA_Init+0x4c>)
 800a060:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a064:	6313      	str	r3, [r2, #48]	; 0x30
 800a066:	4b0d      	ldr	r3, [pc, #52]	; (800a09c <MX_DMA_Init+0x4c>)
 800a068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a06a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a06e:	607b      	str	r3, [r7, #4]
 800a070:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800a072:	2200      	movs	r2, #0
 800a074:	2100      	movs	r1, #0
 800a076:	200e      	movs	r0, #14
 800a078:	f7f6 ffa1 	bl	8000fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800a07c:	200e      	movs	r0, #14
 800a07e:	f7f6 ffba 	bl	8000ff6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800a082:	2200      	movs	r2, #0
 800a084:	2100      	movs	r1, #0
 800a086:	200f      	movs	r0, #15
 800a088:	f7f6 ff99 	bl	8000fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800a08c:	200f      	movs	r0, #15
 800a08e:	f7f6 ffb2 	bl	8000ff6 <HAL_NVIC_EnableIRQ>

}
 800a092:	bf00      	nop
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	40023800 	.word	0x40023800

0800a0a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b08a      	sub	sp, #40	; 0x28
 800a0a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0a6:	f107 0314 	add.w	r3, r7, #20
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	601a      	str	r2, [r3, #0]
 800a0ae:	605a      	str	r2, [r3, #4]
 800a0b0:	609a      	str	r2, [r3, #8]
 800a0b2:	60da      	str	r2, [r3, #12]
 800a0b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	613b      	str	r3, [r7, #16]
 800a0ba:	4b7c      	ldr	r3, [pc, #496]	; (800a2ac <MX_GPIO_Init+0x20c>)
 800a0bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0be:	4a7b      	ldr	r2, [pc, #492]	; (800a2ac <MX_GPIO_Init+0x20c>)
 800a0c0:	f043 0304 	orr.w	r3, r3, #4
 800a0c4:	6313      	str	r3, [r2, #48]	; 0x30
 800a0c6:	4b79      	ldr	r3, [pc, #484]	; (800a2ac <MX_GPIO_Init+0x20c>)
 800a0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ca:	f003 0304 	and.w	r3, r3, #4
 800a0ce:	613b      	str	r3, [r7, #16]
 800a0d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	60fb      	str	r3, [r7, #12]
 800a0d6:	4b75      	ldr	r3, [pc, #468]	; (800a2ac <MX_GPIO_Init+0x20c>)
 800a0d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0da:	4a74      	ldr	r2, [pc, #464]	; (800a2ac <MX_GPIO_Init+0x20c>)
 800a0dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0e0:	6313      	str	r3, [r2, #48]	; 0x30
 800a0e2:	4b72      	ldr	r3, [pc, #456]	; (800a2ac <MX_GPIO_Init+0x20c>)
 800a0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0ea:	60fb      	str	r3, [r7, #12]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	60bb      	str	r3, [r7, #8]
 800a0f2:	4b6e      	ldr	r3, [pc, #440]	; (800a2ac <MX_GPIO_Init+0x20c>)
 800a0f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0f6:	4a6d      	ldr	r2, [pc, #436]	; (800a2ac <MX_GPIO_Init+0x20c>)
 800a0f8:	f043 0301 	orr.w	r3, r3, #1
 800a0fc:	6313      	str	r3, [r2, #48]	; 0x30
 800a0fe:	4b6b      	ldr	r3, [pc, #428]	; (800a2ac <MX_GPIO_Init+0x20c>)
 800a100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a102:	f003 0301 	and.w	r3, r3, #1
 800a106:	60bb      	str	r3, [r7, #8]
 800a108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a10a:	2300      	movs	r3, #0
 800a10c:	607b      	str	r3, [r7, #4]
 800a10e:	4b67      	ldr	r3, [pc, #412]	; (800a2ac <MX_GPIO_Init+0x20c>)
 800a110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a112:	4a66      	ldr	r2, [pc, #408]	; (800a2ac <MX_GPIO_Init+0x20c>)
 800a114:	f043 0302 	orr.w	r3, r3, #2
 800a118:	6313      	str	r3, [r2, #48]	; 0x30
 800a11a:	4b64      	ldr	r3, [pc, #400]	; (800a2ac <MX_GPIO_Init+0x20c>)
 800a11c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a11e:	f003 0302 	and.w	r3, r3, #2
 800a122:	607b      	str	r3, [r7, #4]
 800a124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a126:	2300      	movs	r3, #0
 800a128:	603b      	str	r3, [r7, #0]
 800a12a:	4b60      	ldr	r3, [pc, #384]	; (800a2ac <MX_GPIO_Init+0x20c>)
 800a12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a12e:	4a5f      	ldr	r2, [pc, #380]	; (800a2ac <MX_GPIO_Init+0x20c>)
 800a130:	f043 0308 	orr.w	r3, r3, #8
 800a134:	6313      	str	r3, [r2, #48]	; 0x30
 800a136:	4b5d      	ldr	r3, [pc, #372]	; (800a2ac <MX_GPIO_Init+0x20c>)
 800a138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a13a:	f003 0308 	and.w	r3, r3, #8
 800a13e:	603b      	str	r3, [r7, #0]
 800a140:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SET_LIN_Pin|LED1_Pin, GPIO_PIN_RESET);
 800a142:	2200      	movs	r2, #0
 800a144:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 800a148:	4859      	ldr	r0, [pc, #356]	; (800a2b0 <MX_GPIO_Init+0x210>)
 800a14a:	f7f7 fc73 	bl	8001a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SET_I_LIM_Pin|LED2_Pin, GPIO_PIN_RESET);
 800a14e:	2200      	movs	r2, #0
 800a150:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800a154:	4857      	ldr	r0, [pc, #348]	; (800a2b4 <MX_GPIO_Init+0x214>)
 800a156:	f7f7 fc6d 	bl	8001a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SET_BOOT0_GPIO_Port, SET_BOOT0_Pin, GPIO_PIN_RESET);
 800a15a:	2200      	movs	r2, #0
 800a15c:	2104      	movs	r1, #4
 800a15e:	4856      	ldr	r0, [pc, #344]	; (800a2b8 <MX_GPIO_Init+0x218>)
 800a160:	f7f7 fc68 	bl	8001a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SET_LIN_Pin LED1_Pin */
  GPIO_InitStruct.Pin = SET_LIN_Pin|LED1_Pin;
 800a164:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 800a168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a16a:	2301      	movs	r3, #1
 800a16c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a16e:	2300      	movs	r3, #0
 800a170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a172:	2300      	movs	r3, #0
 800a174:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a176:	f107 0314 	add.w	r3, r7, #20
 800a17a:	4619      	mov	r1, r3
 800a17c:	484c      	ldr	r0, [pc, #304]	; (800a2b0 <MX_GPIO_Init+0x210>)
 800a17e:	f7f7 fac5 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : DTC_LIN_Pin DTC_MIC_Pin */
  GPIO_InitStruct.Pin = DTC_LIN_Pin|DTC_MIC_Pin;
 800a182:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800a186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800a188:	4b4c      	ldr	r3, [pc, #304]	; (800a2bc <MX_GPIO_Init+0x21c>)
 800a18a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a18c:	2300      	movs	r3, #0
 800a18e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a190:	f107 0314 	add.w	r3, r7, #20
 800a194:	4619      	mov	r1, r3
 800a196:	4846      	ldr	r0, [pc, #280]	; (800a2b0 <MX_GPIO_Init+0x210>)
 800a198:	f7f7 fab8 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : DTC_HP_Pin DTC_LOUT_Pin */
  GPIO_InitStruct.Pin = DTC_HP_Pin|DTC_LOUT_Pin;
 800a19c:	2303      	movs	r3, #3
 800a19e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a1a8:	f107 0314 	add.w	r3, r7, #20
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	4840      	ldr	r0, [pc, #256]	; (800a2b0 <MX_GPIO_Init+0x210>)
 800a1b0:	f7f7 faac 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a1b8:	4b41      	ldr	r3, [pc, #260]	; (800a2c0 <MX_GPIO_Init+0x220>)
 800a1ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1c0:	f107 0314 	add.w	r3, r7, #20
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	483f      	ldr	r0, [pc, #252]	; (800a2c4 <MX_GPIO_Init+0x224>)
 800a1c8:	f7f7 faa0 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a1cc:	2304      	movs	r3, #4
 800a1ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1d0:	2302      	movs	r3, #2
 800a1d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a1dc:	2305      	movs	r3, #5
 800a1de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1e0:	f107 0314 	add.w	r3, r7, #20
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	4837      	ldr	r0, [pc, #220]	; (800a2c4 <MX_GPIO_Init+0x224>)
 800a1e8:	f7f7 fa90 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800a1ec:	2304      	movs	r3, #4
 800a1ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800a1f8:	f107 0314 	add.w	r3, r7, #20
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	482d      	ldr	r0, [pc, #180]	; (800a2b4 <MX_GPIO_Init+0x214>)
 800a200:	f7f7 fa84 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_ENC2_Pin */
  GPIO_InitStruct.Pin = BTN_ENC2_Pin;
 800a204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a20a:	4b2d      	ldr	r3, [pc, #180]	; (800a2c0 <MX_GPIO_Init+0x220>)
 800a20c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a20e:	2300      	movs	r3, #0
 800a210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_ENC2_GPIO_Port, &GPIO_InitStruct);
 800a212:	f107 0314 	add.w	r3, r7, #20
 800a216:	4619      	mov	r1, r3
 800a218:	4826      	ldr	r0, [pc, #152]	; (800a2b4 <MX_GPIO_Init+0x214>)
 800a21a:	f7f7 fa77 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : SET_I_LIM_Pin LED2_Pin */
  GPIO_InitStruct.Pin = SET_I_LIM_Pin|LED2_Pin;
 800a21e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800a222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a224:	2301      	movs	r3, #1
 800a226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a228:	2300      	movs	r3, #0
 800a22a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a22c:	2300      	movs	r3, #0
 800a22e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a230:	f107 0314 	add.w	r3, r7, #20
 800a234:	4619      	mov	r1, r3
 800a236:	481f      	ldr	r0, [pc, #124]	; (800a2b4 <MX_GPIO_Init+0x214>)
 800a238:	f7f7 fa68 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_ENC1_Pin */
  GPIO_InitStruct.Pin = BTN_ENC1_Pin;
 800a23c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a242:	4b1f      	ldr	r3, [pc, #124]	; (800a2c0 <MX_GPIO_Init+0x220>)
 800a244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a246:	2300      	movs	r3, #0
 800a248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_ENC1_GPIO_Port, &GPIO_InitStruct);
 800a24a:	f107 0314 	add.w	r3, r7, #20
 800a24e:	4619      	mov	r1, r3
 800a250:	4817      	ldr	r0, [pc, #92]	; (800a2b0 <MX_GPIO_Init+0x210>)
 800a252:	f7f7 fa5b 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : SET_BOOT0_Pin */
  GPIO_InitStruct.Pin = SET_BOOT0_Pin;
 800a256:	2304      	movs	r3, #4
 800a258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a25a:	2301      	movs	r3, #1
 800a25c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a25e:	2300      	movs	r3, #0
 800a260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a262:	2300      	movs	r3, #0
 800a264:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SET_BOOT0_GPIO_Port, &GPIO_InitStruct);
 800a266:	f107 0314 	add.w	r3, r7, #20
 800a26a:	4619      	mov	r1, r3
 800a26c:	4812      	ldr	r0, [pc, #72]	; (800a2b8 <MX_GPIO_Init+0x218>)
 800a26e:	f7f7 fa4d 	bl	800170c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800a272:	2200      	movs	r2, #0
 800a274:	2100      	movs	r1, #0
 800a276:	2006      	movs	r0, #6
 800a278:	f7f6 fea1 	bl	8000fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800a27c:	2006      	movs	r0, #6
 800a27e:	f7f6 feba 	bl	8000ff6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800a282:	2200      	movs	r2, #0
 800a284:	2100      	movs	r1, #0
 800a286:	2007      	movs	r0, #7
 800a288:	f7f6 fe99 	bl	8000fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800a28c:	2007      	movs	r0, #7
 800a28e:	f7f6 feb2 	bl	8000ff6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800a292:	2200      	movs	r2, #0
 800a294:	2100      	movs	r1, #0
 800a296:	2028      	movs	r0, #40	; 0x28
 800a298:	f7f6 fe91 	bl	8000fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a29c:	2028      	movs	r0, #40	; 0x28
 800a29e:	f7f6 feaa 	bl	8000ff6 <HAL_NVIC_EnableIRQ>

}
 800a2a2:	bf00      	nop
 800a2a4:	3728      	adds	r7, #40	; 0x28
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	40023800 	.word	0x40023800
 800a2b0:	40020800 	.word	0x40020800
 800a2b4:	40020400 	.word	0x40020400
 800a2b8:	40020c00 	.word	0x40020c00
 800a2bc:	10310000 	.word	0x10310000
 800a2c0:	10110000 	.word	0x10110000
 800a2c4:	40020000 	.word	0x40020000

0800a2c8 <showFX>:
/**
  * @brief Display the current state effect struct
  * @retval None
	*	@param fx: pointer to the effect's struct
  */
void showFX(effect *fx){
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af02      	add	r7, sp, #8
 800a2ce:	6078      	str	r0, [r7, #4]
	/*direct the pointers to the currently displayed effect struct*/
	para0=&(*fx).par0;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	3314      	adds	r3, #20
 800a2d4:	4a82      	ldr	r2, [pc, #520]	; (800a4e0 <showFX+0x218>)
 800a2d6:	6013      	str	r3, [r2, #0]
	para1=&(*fx).par1;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	334c      	adds	r3, #76	; 0x4c
 800a2dc:	4a81      	ldr	r2, [pc, #516]	; (800a4e4 <showFX+0x21c>)
 800a2de:	6013      	str	r3, [r2, #0]
	para2=&(*fx).par2;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	3384      	adds	r3, #132	; 0x84
 800a2e4:	4a80      	ldr	r2, [pc, #512]	; (800a4e8 <showFX+0x220>)
 800a2e6:	6013      	str	r3, [r2, #0]
	para3=&(*fx).par3;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	33bc      	adds	r3, #188	; 0xbc
 800a2ec:	4a7f      	ldr	r2, [pc, #508]	; (800a4ec <showFX+0x224>)
 800a2ee:	6013      	str	r3, [r2, #0]

	/****************************************
	 * Draw the left display
	 ***************************************/

	if(state_crrnt!=0){
 800a2f0:	4b7f      	ldr	r3, [pc, #508]	; (800a4f0 <showFX+0x228>)
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d02d      	beq.n	800a354 <showFX+0x8c>
    // draw the left arrow
		ssd1306_SetCursor(&holedL, 2, 23);
 800a2f8:	2217      	movs	r2, #23
 800a2fa:	2102      	movs	r1, #2
 800a2fc:	487d      	ldr	r0, [pc, #500]	; (800a4f4 <showFX+0x22c>)
 800a2fe:	f000 fd93 	bl	800ae28 <ssd1306_SetCursor>
		ssd1306_WriteString(&holedL, "<", Font_11x18, White);
 800a302:	4b7d      	ldr	r3, [pc, #500]	; (800a4f8 <showFX+0x230>)
 800a304:	2201      	movs	r2, #1
 800a306:	9200      	str	r2, [sp, #0]
 800a308:	cb0c      	ldmia	r3, {r2, r3}
 800a30a:	497c      	ldr	r1, [pc, #496]	; (800a4fc <showFX+0x234>)
 800a30c:	4879      	ldr	r0, [pc, #484]	; (800a4f4 <showFX+0x22c>)
 800a30e:	f000 fd63 	bl	800add8 <ssd1306_WriteString>
		ssd1306_DrawHLine(&holedL,0,13,23,White);
 800a312:	2301      	movs	r3, #1
 800a314:	9300      	str	r3, [sp, #0]
 800a316:	2317      	movs	r3, #23
 800a318:	220d      	movs	r2, #13
 800a31a:	2100      	movs	r1, #0
 800a31c:	4875      	ldr	r0, [pc, #468]	; (800a4f4 <showFX+0x22c>)
 800a31e:	f000 fdb1 	bl	800ae84 <ssd1306_DrawHLine>
		ssd1306_DrawVLine(&holedL,13,23,40,White);
 800a322:	2301      	movs	r3, #1
 800a324:	9300      	str	r3, [sp, #0]
 800a326:	2328      	movs	r3, #40	; 0x28
 800a328:	2217      	movs	r2, #23
 800a32a:	210d      	movs	r1, #13
 800a32c:	4871      	ldr	r0, [pc, #452]	; (800a4f4 <showFX+0x22c>)
 800a32e:	f000 fde9 	bl	800af04 <ssd1306_DrawVLine>
		ssd1306_DrawHLine(&holedL,0,13,40,White);
 800a332:	2301      	movs	r3, #1
 800a334:	9300      	str	r3, [sp, #0]
 800a336:	2328      	movs	r3, #40	; 0x28
 800a338:	220d      	movs	r2, #13
 800a33a:	2100      	movs	r1, #0
 800a33c:	486d      	ldr	r0, [pc, #436]	; (800a4f4 <showFX+0x22c>)
 800a33e:	f000 fda1 	bl	800ae84 <ssd1306_DrawHLine>
		ssd1306_DrawVLine(&holedL,0,23,40,White);
 800a342:	2301      	movs	r3, #1
 800a344:	9300      	str	r3, [sp, #0]
 800a346:	2328      	movs	r3, #40	; 0x28
 800a348:	2217      	movs	r2, #23
 800a34a:	2100      	movs	r1, #0
 800a34c:	4869      	ldr	r0, [pc, #420]	; (800a4f4 <showFX+0x22c>)
 800a34e:	f000 fdd9 	bl	800af04 <ssd1306_DrawVLine>
 800a352:	e00c      	b.n	800a36e <showFX+0xa6>
	}else{
    // remove the left arrow
		ssd1306_SetCursor(&holedL, 0, 23);
 800a354:	2217      	movs	r2, #23
 800a356:	2100      	movs	r1, #0
 800a358:	4866      	ldr	r0, [pc, #408]	; (800a4f4 <showFX+0x22c>)
 800a35a:	f000 fd65 	bl	800ae28 <ssd1306_SetCursor>
		ssd1306_WriteString(&holedL, "  ", Font_11x18, White);
 800a35e:	4b66      	ldr	r3, [pc, #408]	; (800a4f8 <showFX+0x230>)
 800a360:	2201      	movs	r2, #1
 800a362:	9200      	str	r2, [sp, #0]
 800a364:	cb0c      	ldmia	r3, {r2, r3}
 800a366:	4966      	ldr	r1, [pc, #408]	; (800a500 <showFX+0x238>)
 800a368:	4862      	ldr	r0, [pc, #392]	; (800a4f4 <showFX+0x22c>)
 800a36a:	f000 fd35 	bl	800add8 <ssd1306_WriteString>
	}
	ssd1306_SetCursor(&holedL, 10, 0);
 800a36e:	2200      	movs	r2, #0
 800a370:	210a      	movs	r1, #10
 800a372:	4860      	ldr	r0, [pc, #384]	; (800a4f4 <showFX+0x22c>)
 800a374:	f000 fd58 	bl	800ae28 <ssd1306_SetCursor>
	if((*fx).par0.name[0]!= '\0'){
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	7d1b      	ldrb	r3, [r3, #20]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d014      	beq.n	800a3aa <showFX+0xe2>
		sprintf(lcd_buf, "%s %5d %s",(*fx).par0.name, (*fx).par0.value, (*fx).par0.unit);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f103 0214 	add.w	r2, r3, #20
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	3338      	adds	r3, #56	; 0x38
 800a38e:	9300      	str	r3, [sp, #0]
 800a390:	460b      	mov	r3, r1
 800a392:	495c      	ldr	r1, [pc, #368]	; (800a504 <showFX+0x23c>)
 800a394:	485c      	ldr	r0, [pc, #368]	; (800a508 <showFX+0x240>)
 800a396:	f002 f9c5 	bl	800c724 <siprintf>
		ssd1306_WriteString(&holedL, lcd_buf, Font_7x10, White);
 800a39a:	4b5c      	ldr	r3, [pc, #368]	; (800a50c <showFX+0x244>)
 800a39c:	2201      	movs	r2, #1
 800a39e:	9200      	str	r2, [sp, #0]
 800a3a0:	cb0c      	ldmia	r3, {r2, r3}
 800a3a2:	4959      	ldr	r1, [pc, #356]	; (800a508 <showFX+0x240>)
 800a3a4:	4853      	ldr	r0, [pc, #332]	; (800a4f4 <showFX+0x22c>)
 800a3a6:	f000 fd17 	bl	800add8 <ssd1306_WriteString>
	}

	ssd1306_SetCursor(&holedL, 10, 53);
 800a3aa:	2235      	movs	r2, #53	; 0x35
 800a3ac:	210a      	movs	r1, #10
 800a3ae:	4851      	ldr	r0, [pc, #324]	; (800a4f4 <showFX+0x22c>)
 800a3b0:	f000 fd3a 	bl	800ae28 <ssd1306_SetCursor>
	if((*fx).par1.name[0]!= '\0'){
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d04e      	beq.n	800a45c <showFX+0x194>
		if(state_crrnt==IN){
 800a3be:	4b4c      	ldr	r3, [pc, #304]	; (800a4f0 <showFX+0x228>)
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d135      	bne.n	800a432 <showFX+0x16a>
			char tmp[5];
			//check input state
			switch((*fx).par1.value){
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3ca:	2b03      	cmp	r3, #3
 800a3cc:	d822      	bhi.n	800a414 <showFX+0x14c>
 800a3ce:	a201      	add	r2, pc, #4	; (adr r2, 800a3d4 <showFX+0x10c>)
 800a3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d4:	0800a3e5 	.word	0x0800a3e5
 800a3d8:	0800a3ef 	.word	0x0800a3ef
 800a3dc:	0800a401 	.word	0x0800a401
 800a3e0:	0800a40b 	.word	0x0800a40b
				case 0:
					strcpy(tmp,"EXT");
 800a3e4:	f107 0308 	add.w	r3, r7, #8
 800a3e8:	4a49      	ldr	r2, [pc, #292]	; (800a510 <showFX+0x248>)
 800a3ea:	601a      	str	r2, [r3, #0]
					break;
 800a3ec:	e013      	b.n	800a416 <showFX+0x14e>
				case 1:
					strcpy(tmp,"LINE");
 800a3ee:	4a49      	ldr	r2, [pc, #292]	; (800a514 <showFX+0x24c>)
 800a3f0:	f107 0308 	add.w	r3, r7, #8
 800a3f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a3f8:	6018      	str	r0, [r3, #0]
 800a3fa:	3304      	adds	r3, #4
 800a3fc:	7019      	strb	r1, [r3, #0]
					break;
 800a3fe:	e00a      	b.n	800a416 <showFX+0x14e>
				case 2:
					strcpy(tmp,"MIC");
 800a400:	f107 0308 	add.w	r3, r7, #8
 800a404:	4a44      	ldr	r2, [pc, #272]	; (800a518 <showFX+0x250>)
 800a406:	601a      	str	r2, [r3, #0]
					break;
 800a408:	e005      	b.n	800a416 <showFX+0x14e>
				case 3:
					strcpy(tmp,"USB");
 800a40a:	f107 0308 	add.w	r3, r7, #8
 800a40e:	4a43      	ldr	r2, [pc, #268]	; (800a51c <showFX+0x254>)
 800a410:	601a      	str	r2, [r3, #0]
					break;
 800a412:	e000      	b.n	800a416 <showFX+0x14e>
				default:
					break;
 800a414:	bf00      	nop
			}
			sprintf(lcd_buf, "%s %s %s",(*fx).par1.name, tmp, (*fx).par1.unit);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	3370      	adds	r3, #112	; 0x70
 800a420:	f107 0108 	add.w	r1, r7, #8
 800a424:	9300      	str	r3, [sp, #0]
 800a426:	460b      	mov	r3, r1
 800a428:	493d      	ldr	r1, [pc, #244]	; (800a520 <showFX+0x258>)
 800a42a:	4837      	ldr	r0, [pc, #220]	; (800a508 <showFX+0x240>)
 800a42c:	f002 f97a 	bl	800c724 <siprintf>
 800a430:	e00c      	b.n	800a44c <showFX+0x184>
		} else{
			sprintf(lcd_buf, "%s %1d %s",(*fx).par1.name, (*fx).par1.value, (*fx).par1.unit);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	3370      	adds	r3, #112	; 0x70
 800a440:	9300      	str	r3, [sp, #0]
 800a442:	460b      	mov	r3, r1
 800a444:	4937      	ldr	r1, [pc, #220]	; (800a524 <showFX+0x25c>)
 800a446:	4830      	ldr	r0, [pc, #192]	; (800a508 <showFX+0x240>)
 800a448:	f002 f96c 	bl	800c724 <siprintf>
		}
		ssd1306_WriteString(&holedL, lcd_buf, Font_7x10, White);
 800a44c:	4b2f      	ldr	r3, [pc, #188]	; (800a50c <showFX+0x244>)
 800a44e:	2201      	movs	r2, #1
 800a450:	9200      	str	r2, [sp, #0]
 800a452:	cb0c      	ldmia	r3, {r2, r3}
 800a454:	492c      	ldr	r1, [pc, #176]	; (800a508 <showFX+0x240>)
 800a456:	4827      	ldr	r0, [pc, #156]	; (800a4f4 <showFX+0x22c>)
 800a458:	f000 fcbe 	bl	800add8 <ssd1306_WriteString>
	}
	ssd1306_SetCursor(&holedL, 30, 23);
 800a45c:	2217      	movs	r2, #23
 800a45e:	211e      	movs	r1, #30
 800a460:	4824      	ldr	r0, [pc, #144]	; (800a4f4 <showFX+0x22c>)
 800a462:	f000 fce1 	bl	800ae28 <ssd1306_SetCursor>
	ssd1306_WriteString(&holedL, (*fx).title, Font_11x18, White);
 800a466:	6879      	ldr	r1, [r7, #4]
 800a468:	4b23      	ldr	r3, [pc, #140]	; (800a4f8 <showFX+0x230>)
 800a46a:	2201      	movs	r2, #1
 800a46c:	9200      	str	r2, [sp, #0]
 800a46e:	cb0c      	ldmia	r3, {r2, r3}
 800a470:	4820      	ldr	r0, [pc, #128]	; (800a4f4 <showFX+0x22c>)
 800a472:	f000 fcb1 	bl	800add8 <ssd1306_WriteString>
	ssd1306_UpdateScreen(&holedL);
 800a476:	481f      	ldr	r0, [pc, #124]	; (800a4f4 <showFX+0x22c>)
 800a478:	f000 fb05 	bl	800aa86 <ssd1306_UpdateScreen>

	/****************************************
	 * Draw the right display
	 ***************************************/

	if(state_crrnt!=CNT-1){
 800a47c:	4b1c      	ldr	r3, [pc, #112]	; (800a4f0 <showFX+0x228>)
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d055      	beq.n	800a530 <showFX+0x268>
		//draw the right arrow
		ssd1306_SetCursor(&holedR, 116, 23);
 800a484:	2217      	movs	r2, #23
 800a486:	2174      	movs	r1, #116	; 0x74
 800a488:	4827      	ldr	r0, [pc, #156]	; (800a528 <showFX+0x260>)
 800a48a:	f000 fccd 	bl	800ae28 <ssd1306_SetCursor>
		ssd1306_WriteString(&holedR, ">", Font_11x18, White);
 800a48e:	4b1a      	ldr	r3, [pc, #104]	; (800a4f8 <showFX+0x230>)
 800a490:	2201      	movs	r2, #1
 800a492:	9200      	str	r2, [sp, #0]
 800a494:	cb0c      	ldmia	r3, {r2, r3}
 800a496:	4925      	ldr	r1, [pc, #148]	; (800a52c <showFX+0x264>)
 800a498:	4823      	ldr	r0, [pc, #140]	; (800a528 <showFX+0x260>)
 800a49a:	f000 fc9d 	bl	800add8 <ssd1306_WriteString>
		ssd1306_DrawHLine(&holedR,114,127,23,White);
 800a49e:	2301      	movs	r3, #1
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	2317      	movs	r3, #23
 800a4a4:	227f      	movs	r2, #127	; 0x7f
 800a4a6:	2172      	movs	r1, #114	; 0x72
 800a4a8:	481f      	ldr	r0, [pc, #124]	; (800a528 <showFX+0x260>)
 800a4aa:	f000 fceb 	bl	800ae84 <ssd1306_DrawHLine>
		ssd1306_DrawVLine(&holedR,114,23,40,White);
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	2328      	movs	r3, #40	; 0x28
 800a4b4:	2217      	movs	r2, #23
 800a4b6:	2172      	movs	r1, #114	; 0x72
 800a4b8:	481b      	ldr	r0, [pc, #108]	; (800a528 <showFX+0x260>)
 800a4ba:	f000 fd23 	bl	800af04 <ssd1306_DrawVLine>
		ssd1306_DrawHLine(&holedR,114,127,40,White);
 800a4be:	2301      	movs	r3, #1
 800a4c0:	9300      	str	r3, [sp, #0]
 800a4c2:	2328      	movs	r3, #40	; 0x28
 800a4c4:	227f      	movs	r2, #127	; 0x7f
 800a4c6:	2172      	movs	r1, #114	; 0x72
 800a4c8:	4817      	ldr	r0, [pc, #92]	; (800a528 <showFX+0x260>)
 800a4ca:	f000 fcdb 	bl	800ae84 <ssd1306_DrawHLine>
		ssd1306_DrawVLine(&holedR,127,23,40,White);
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	9300      	str	r3, [sp, #0]
 800a4d2:	2328      	movs	r3, #40	; 0x28
 800a4d4:	2217      	movs	r2, #23
 800a4d6:	217f      	movs	r1, #127	; 0x7f
 800a4d8:	4813      	ldr	r0, [pc, #76]	; (800a528 <showFX+0x260>)
 800a4da:	f000 fd13 	bl	800af04 <ssd1306_DrawVLine>
 800a4de:	e04c      	b.n	800a57a <showFX+0x2b2>
 800a4e0:	20001c1c 	.word	0x20001c1c
 800a4e4:	20001698 	.word	0x20001698
 800a4e8:	20001bd0 	.word	0x20001bd0
 800a4ec:	20001920 	.word	0x20001920
 800a4f0:	20000361 	.word	0x20000361
 800a4f4:	20000f78 	.word	0x20000f78
 800a4f8:	200000cc 	.word	0x200000cc
 800a4fc:	0800d8ec 	.word	0x0800d8ec
 800a500:	0800d8f0 	.word	0x0800d8f0
 800a504:	0800d8f4 	.word	0x0800d8f4
 800a508:	20000ba8 	.word	0x20000ba8
 800a50c:	200000c4 	.word	0x200000c4
 800a510:	00545845 	.word	0x00545845
 800a514:	0800d900 	.word	0x0800d900
 800a518:	0043494d 	.word	0x0043494d
 800a51c:	00425355 	.word	0x00425355
 800a520:	0800d908 	.word	0x0800d908
 800a524:	0800d914 	.word	0x0800d914
 800a528:	20000798 	.word	0x20000798
 800a52c:	0800d920 	.word	0x0800d920
	}else{
		//remove the right arrow
		ssd1306_SetCursor(&holedR, 114, 23);
 800a530:	2217      	movs	r2, #23
 800a532:	2172      	movs	r1, #114	; 0x72
 800a534:	4834      	ldr	r0, [pc, #208]	; (800a608 <showFX+0x340>)
 800a536:	f000 fc77 	bl	800ae28 <ssd1306_SetCursor>
		ssd1306_WriteString(&holedR, "  ", Font_11x18, White);
 800a53a:	4b34      	ldr	r3, [pc, #208]	; (800a60c <showFX+0x344>)
 800a53c:	2201      	movs	r2, #1
 800a53e:	9200      	str	r2, [sp, #0]
 800a540:	cb0c      	ldmia	r3, {r2, r3}
 800a542:	4933      	ldr	r1, [pc, #204]	; (800a610 <showFX+0x348>)
 800a544:	4830      	ldr	r0, [pc, #192]	; (800a608 <showFX+0x340>)
 800a546:	f000 fc47 	bl	800add8 <ssd1306_WriteString>
		ssd1306_DrawVLine(&holedR,127,23,40,Black);
 800a54a:	2300      	movs	r3, #0
 800a54c:	9300      	str	r3, [sp, #0]
 800a54e:	2328      	movs	r3, #40	; 0x28
 800a550:	2217      	movs	r2, #23
 800a552:	217f      	movs	r1, #127	; 0x7f
 800a554:	482c      	ldr	r0, [pc, #176]	; (800a608 <showFX+0x340>)
 800a556:	f000 fcd5 	bl	800af04 <ssd1306_DrawVLine>
		ssd1306_DrawVLine(&holedR,126,23,40,Black);
 800a55a:	2300      	movs	r3, #0
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	2328      	movs	r3, #40	; 0x28
 800a560:	2217      	movs	r2, #23
 800a562:	217e      	movs	r1, #126	; 0x7e
 800a564:	4828      	ldr	r0, [pc, #160]	; (800a608 <showFX+0x340>)
 800a566:	f000 fccd 	bl	800af04 <ssd1306_DrawVLine>
		ssd1306_DrawVLine(&holedR,125,23,40,Black);
 800a56a:	2300      	movs	r3, #0
 800a56c:	9300      	str	r3, [sp, #0]
 800a56e:	2328      	movs	r3, #40	; 0x28
 800a570:	2217      	movs	r2, #23
 800a572:	217d      	movs	r1, #125	; 0x7d
 800a574:	4824      	ldr	r0, [pc, #144]	; (800a608 <showFX+0x340>)
 800a576:	f000 fcc5 	bl	800af04 <ssd1306_DrawVLine>
	}
	ssd1306_SetCursor(&holedR, 10, 0);
 800a57a:	2200      	movs	r2, #0
 800a57c:	210a      	movs	r1, #10
 800a57e:	4822      	ldr	r0, [pc, #136]	; (800a608 <showFX+0x340>)
 800a580:	f000 fc52 	bl	800ae28 <ssd1306_SetCursor>
	if((*fx).par2.name[0]!= '\0'){
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d015      	beq.n	800a5ba <showFX+0x2f2>
		sprintf(lcd_buf, "%s %5d %s",(*fx).par2.name, (*fx).par2.value, (*fx).par2.unit);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f103 0284 	add.w	r2, r3, #132	; 0x84
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	33a8      	adds	r3, #168	; 0xa8
 800a59e:	9300      	str	r3, [sp, #0]
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	491c      	ldr	r1, [pc, #112]	; (800a614 <showFX+0x34c>)
 800a5a4:	481c      	ldr	r0, [pc, #112]	; (800a618 <showFX+0x350>)
 800a5a6:	f002 f8bd 	bl	800c724 <siprintf>
		ssd1306_WriteString(&holedR, lcd_buf, Font_7x10, White);
 800a5aa:	4b1c      	ldr	r3, [pc, #112]	; (800a61c <showFX+0x354>)
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	9200      	str	r2, [sp, #0]
 800a5b0:	cb0c      	ldmia	r3, {r2, r3}
 800a5b2:	4919      	ldr	r1, [pc, #100]	; (800a618 <showFX+0x350>)
 800a5b4:	4814      	ldr	r0, [pc, #80]	; (800a608 <showFX+0x340>)
 800a5b6:	f000 fc0f 	bl	800add8 <ssd1306_WriteString>
	}
	ssd1306_SetCursor(&holedR, 10, 53);
 800a5ba:	2235      	movs	r2, #53	; 0x35
 800a5bc:	210a      	movs	r1, #10
 800a5be:	4812      	ldr	r0, [pc, #72]	; (800a608 <showFX+0x340>)
 800a5c0:	f000 fc32 	bl	800ae28 <ssd1306_SetCursor>
	if((*fx).par3.name[0]!= '\0'){
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d015      	beq.n	800a5fa <showFX+0x332>
		sprintf(lcd_buf, "%s %1d %s",(*fx).par3.name, (*fx).par3.value, (*fx).par3.unit);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	33e0      	adds	r3, #224	; 0xe0
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	490f      	ldr	r1, [pc, #60]	; (800a620 <showFX+0x358>)
 800a5e4:	480c      	ldr	r0, [pc, #48]	; (800a618 <showFX+0x350>)
 800a5e6:	f002 f89d 	bl	800c724 <siprintf>
		ssd1306_WriteString(&holedR, lcd_buf, Font_7x10, White);
 800a5ea:	4b0c      	ldr	r3, [pc, #48]	; (800a61c <showFX+0x354>)
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	9200      	str	r2, [sp, #0]
 800a5f0:	cb0c      	ldmia	r3, {r2, r3}
 800a5f2:	4909      	ldr	r1, [pc, #36]	; (800a618 <showFX+0x350>)
 800a5f4:	4804      	ldr	r0, [pc, #16]	; (800a608 <showFX+0x340>)
 800a5f6:	f000 fbef 	bl	800add8 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen(&holedR);
 800a5fa:	4803      	ldr	r0, [pc, #12]	; (800a608 <showFX+0x340>)
 800a5fc:	f000 fa43 	bl	800aa86 <ssd1306_UpdateScreen>
}
 800a600:	bf00      	nop
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}
 800a608:	20000798 	.word	0x20000798
 800a60c:	200000cc 	.word	0x200000cc
 800a610:	0800d8f0 	.word	0x0800d8f0
 800a614:	0800d8f4 	.word	0x0800d8f4
 800a618:	20000ba8 	.word	0x20000ba8
 800a61c:	200000c4 	.word	0x200000c4
 800a620:	0800d914 	.word	0x0800d914

0800a624 <clearFX>:

void clearFX(void){
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af02      	add	r7, sp, #8
		//clear the Strings & Parameters
		sprintf(lcd_buf, "                  ");
 800a62a:	4927      	ldr	r1, [pc, #156]	; (800a6c8 <clearFX+0xa4>)
 800a62c:	4827      	ldr	r0, [pc, #156]	; (800a6cc <clearFX+0xa8>)
 800a62e:	f002 f879 	bl	800c724 <siprintf>
		//remove the parameters
		ssd1306_SetCursor(&holedL, 10, 0);
 800a632:	2200      	movs	r2, #0
 800a634:	210a      	movs	r1, #10
 800a636:	4826      	ldr	r0, [pc, #152]	; (800a6d0 <clearFX+0xac>)
 800a638:	f000 fbf6 	bl	800ae28 <ssd1306_SetCursor>
		ssd1306_WriteString(&holedL, lcd_buf, Font_7x10, White);
 800a63c:	4b25      	ldr	r3, [pc, #148]	; (800a6d4 <clearFX+0xb0>)
 800a63e:	2201      	movs	r2, #1
 800a640:	9200      	str	r2, [sp, #0]
 800a642:	cb0c      	ldmia	r3, {r2, r3}
 800a644:	4921      	ldr	r1, [pc, #132]	; (800a6cc <clearFX+0xa8>)
 800a646:	4822      	ldr	r0, [pc, #136]	; (800a6d0 <clearFX+0xac>)
 800a648:	f000 fbc6 	bl	800add8 <ssd1306_WriteString>
		ssd1306_SetCursor(&holedL, 10, 53);
 800a64c:	2235      	movs	r2, #53	; 0x35
 800a64e:	210a      	movs	r1, #10
 800a650:	481f      	ldr	r0, [pc, #124]	; (800a6d0 <clearFX+0xac>)
 800a652:	f000 fbe9 	bl	800ae28 <ssd1306_SetCursor>
		ssd1306_WriteString(&holedL, lcd_buf, Font_7x10, White);
 800a656:	4b1f      	ldr	r3, [pc, #124]	; (800a6d4 <clearFX+0xb0>)
 800a658:	2201      	movs	r2, #1
 800a65a:	9200      	str	r2, [sp, #0]
 800a65c:	cb0c      	ldmia	r3, {r2, r3}
 800a65e:	491b      	ldr	r1, [pc, #108]	; (800a6cc <clearFX+0xa8>)
 800a660:	481b      	ldr	r0, [pc, #108]	; (800a6d0 <clearFX+0xac>)
 800a662:	f000 fbb9 	bl	800add8 <ssd1306_WriteString>
		ssd1306_SetCursor(&holedR, 10, 0);
 800a666:	2200      	movs	r2, #0
 800a668:	210a      	movs	r1, #10
 800a66a:	481b      	ldr	r0, [pc, #108]	; (800a6d8 <clearFX+0xb4>)
 800a66c:	f000 fbdc 	bl	800ae28 <ssd1306_SetCursor>
		ssd1306_WriteString(&holedR, lcd_buf, Font_7x10, White);
 800a670:	4b18      	ldr	r3, [pc, #96]	; (800a6d4 <clearFX+0xb0>)
 800a672:	2201      	movs	r2, #1
 800a674:	9200      	str	r2, [sp, #0]
 800a676:	cb0c      	ldmia	r3, {r2, r3}
 800a678:	4914      	ldr	r1, [pc, #80]	; (800a6cc <clearFX+0xa8>)
 800a67a:	4817      	ldr	r0, [pc, #92]	; (800a6d8 <clearFX+0xb4>)
 800a67c:	f000 fbac 	bl	800add8 <ssd1306_WriteString>
		ssd1306_SetCursor(&holedR, 10, 53);
 800a680:	2235      	movs	r2, #53	; 0x35
 800a682:	210a      	movs	r1, #10
 800a684:	4814      	ldr	r0, [pc, #80]	; (800a6d8 <clearFX+0xb4>)
 800a686:	f000 fbcf 	bl	800ae28 <ssd1306_SetCursor>
		ssd1306_WriteString(&holedR, lcd_buf, Font_7x10, White);
 800a68a:	4b12      	ldr	r3, [pc, #72]	; (800a6d4 <clearFX+0xb0>)
 800a68c:	2201      	movs	r2, #1
 800a68e:	9200      	str	r2, [sp, #0]
 800a690:	cb0c      	ldmia	r3, {r2, r3}
 800a692:	490e      	ldr	r1, [pc, #56]	; (800a6cc <clearFX+0xa8>)
 800a694:	4810      	ldr	r0, [pc, #64]	; (800a6d8 <clearFX+0xb4>)
 800a696:	f000 fb9f 	bl	800add8 <ssd1306_WriteString>
		//remove the title
		ssd1306_SetCursor(&holedL, 30, 23);
 800a69a:	2217      	movs	r2, #23
 800a69c:	211e      	movs	r1, #30
 800a69e:	480c      	ldr	r0, [pc, #48]	; (800a6d0 <clearFX+0xac>)
 800a6a0:	f000 fbc2 	bl	800ae28 <ssd1306_SetCursor>
		ssd1306_WriteString(&holedL, lcd_buf, Font_11x18, White);
 800a6a4:	4b0d      	ldr	r3, [pc, #52]	; (800a6dc <clearFX+0xb8>)
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	9200      	str	r2, [sp, #0]
 800a6aa:	cb0c      	ldmia	r3, {r2, r3}
 800a6ac:	4907      	ldr	r1, [pc, #28]	; (800a6cc <clearFX+0xa8>)
 800a6ae:	4808      	ldr	r0, [pc, #32]	; (800a6d0 <clearFX+0xac>)
 800a6b0:	f000 fb92 	bl	800add8 <ssd1306_WriteString>
		//update
		ssd1306_UpdateScreen(&holedL);
 800a6b4:	4806      	ldr	r0, [pc, #24]	; (800a6d0 <clearFX+0xac>)
 800a6b6:	f000 f9e6 	bl	800aa86 <ssd1306_UpdateScreen>
		ssd1306_UpdateScreen(&holedR);
 800a6ba:	4807      	ldr	r0, [pc, #28]	; (800a6d8 <clearFX+0xb4>)
 800a6bc:	f000 f9e3 	bl	800aa86 <ssd1306_UpdateScreen>
}
 800a6c0:	bf00      	nop
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	0800d924 	.word	0x0800d924
 800a6cc:	20000ba8 	.word	0x20000ba8
 800a6d0:	20000f78 	.word	0x20000f78
 800a6d4:	200000c4 	.word	0x200000c4
 800a6d8:	20000798 	.word	0x20000798
 800a6dc:	200000cc 	.word	0x200000cc

0800a6e0 <updateAkku>:
  * @brief Update the state of the akku
  * @retval None
  * @param None
*/

void updateAkku(void){
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b086      	sub	sp, #24
 800a6e4:	af02      	add	r7, sp, #8
    float volt = BSP_ReadBatteryVoltage(10);
 800a6e6:	200a      	movs	r0, #10
 800a6e8:	f7fe fd40 	bl	800916c <BSP_ReadBatteryVoltage>
 800a6ec:	ed87 0a02 	vstr	s0, [r7, #8]

    //shut the uC down
    if(volt<=UNDER_VOLTAGE){
 800a6f0:	edd7 7a02 	vldr	s15, [r7, #8]
 800a6f4:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800a858 <updateAkku+0x178>
 800a6f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a700:	d833      	bhi.n	800a76a <updateAkku+0x8a>
            ssd1306_Fill(&holedL, Black);
 800a702:	2100      	movs	r1, #0
 800a704:	4855      	ldr	r0, [pc, #340]	; (800a85c <updateAkku+0x17c>)
 800a706:	f000 f99b 	bl	800aa40 <ssd1306_Fill>
            ssd1306_Fill(&holedR, Black);
 800a70a:	2100      	movs	r1, #0
 800a70c:	4854      	ldr	r0, [pc, #336]	; (800a860 <updateAkku+0x180>)
 800a70e:	f000 f997 	bl	800aa40 <ssd1306_Fill>
            sprintf(lcd_buf, "Going to sleep...");
 800a712:	4954      	ldr	r1, [pc, #336]	; (800a864 <updateAkku+0x184>)
 800a714:	4854      	ldr	r0, [pc, #336]	; (800a868 <updateAkku+0x188>)
 800a716:	f002 f805 	bl	800c724 <siprintf>
            ssd1306_SetCursor(&holedL, 10, 20);
 800a71a:	2214      	movs	r2, #20
 800a71c:	210a      	movs	r1, #10
 800a71e:	484f      	ldr	r0, [pc, #316]	; (800a85c <updateAkku+0x17c>)
 800a720:	f000 fb82 	bl	800ae28 <ssd1306_SetCursor>
            ssd1306_WriteString(&holedL, lcd_buf, Font_7x10, White);
 800a724:	4b51      	ldr	r3, [pc, #324]	; (800a86c <updateAkku+0x18c>)
 800a726:	2201      	movs	r2, #1
 800a728:	9200      	str	r2, [sp, #0]
 800a72a:	cb0c      	ldmia	r3, {r2, r3}
 800a72c:	494e      	ldr	r1, [pc, #312]	; (800a868 <updateAkku+0x188>)
 800a72e:	484b      	ldr	r0, [pc, #300]	; (800a85c <updateAkku+0x17c>)
 800a730:	f000 fb52 	bl	800add8 <ssd1306_WriteString>
            ssd1306_UpdateScreen(&holedL);
 800a734:	4849      	ldr	r0, [pc, #292]	; (800a85c <updateAkku+0x17c>)
 800a736:	f000 f9a6 	bl	800aa86 <ssd1306_UpdateScreen>
            sprintf(lcd_buf, "Charge battery!");
 800a73a:	494d      	ldr	r1, [pc, #308]	; (800a870 <updateAkku+0x190>)
 800a73c:	484a      	ldr	r0, [pc, #296]	; (800a868 <updateAkku+0x188>)
 800a73e:	f001 fff1 	bl	800c724 <siprintf>
            ssd1306_SetCursor(&holedR, 10, 20);
 800a742:	2214      	movs	r2, #20
 800a744:	210a      	movs	r1, #10
 800a746:	4846      	ldr	r0, [pc, #280]	; (800a860 <updateAkku+0x180>)
 800a748:	f000 fb6e 	bl	800ae28 <ssd1306_SetCursor>
            ssd1306_WriteString(&holedR, lcd_buf, Font_7x10, White);
 800a74c:	4b47      	ldr	r3, [pc, #284]	; (800a86c <updateAkku+0x18c>)
 800a74e:	2201      	movs	r2, #1
 800a750:	9200      	str	r2, [sp, #0]
 800a752:	cb0c      	ldmia	r3, {r2, r3}
 800a754:	4944      	ldr	r1, [pc, #272]	; (800a868 <updateAkku+0x188>)
 800a756:	4842      	ldr	r0, [pc, #264]	; (800a860 <updateAkku+0x180>)
 800a758:	f000 fb3e 	bl	800add8 <ssd1306_WriteString>
            ssd1306_UpdateScreen(&holedR);
 800a75c:	4840      	ldr	r0, [pc, #256]	; (800a860 <updateAkku+0x180>)
 800a75e:	f000 f992 	bl	800aa86 <ssd1306_UpdateScreen>
            TLV320_PowerDown();
 800a762:	f001 f980 	bl	800ba66 <TLV320_PowerDown>
            HAL_PWR_EnterSTANDBYMode();
 800a766:	f7f9 ffa9 	bl	80046bc <HAL_PWR_EnterSTANDBYMode>
    }

    uint8_t akku_state =(volt-UNDER_VOLTAGE)/(MAX_VOLTAGE-UNDER_VOLTAGE)*100;
 800a76a:	edd7 7a02 	vldr	s15, [r7, #8]
 800a76e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800a858 <updateAkku+0x178>
 800a772:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a776:	eddf 6a3f 	vldr	s13, [pc, #252]	; 800a874 <updateAkku+0x194>
 800a77a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a77e:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800a878 <updateAkku+0x198>
 800a782:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a78a:	edc7 7a01 	vstr	s15, [r7, #4]
 800a78e:	793b      	ldrb	r3, [r7, #4]
 800a790:	73fb      	strb	r3, [r7, #15]
    /* different levels of the batterie symbol */
    if(akku_state>100)
 800a792:	7bfb      	ldrb	r3, [r7, #15]
 800a794:	2b64      	cmp	r3, #100	; 0x64
 800a796:	d901      	bls.n	800a79c <updateAkku+0xbc>
            akku_state=100;
 800a798:	2364      	movs	r3, #100	; 0x64
 800a79a:	73fb      	strb	r3, [r7, #15]
    if (akku_state>=84){
 800a79c:	7bfb      	ldrb	r3, [r7, #15]
 800a79e:	2b53      	cmp	r3, #83	; 0x53
 800a7a0:	d903      	bls.n	800a7aa <updateAkku+0xca>
    level=5;
 800a7a2:	4b36      	ldr	r3, [pc, #216]	; (800a87c <updateAkku+0x19c>)
 800a7a4:	2205      	movs	r2, #5
 800a7a6:	701a      	strb	r2, [r3, #0]
 800a7a8:	e02d      	b.n	800a806 <updateAkku+0x126>
    } else if (akku_state<84 && akku_state>=68){
 800a7aa:	7bfb      	ldrb	r3, [r7, #15]
 800a7ac:	2b53      	cmp	r3, #83	; 0x53
 800a7ae:	d806      	bhi.n	800a7be <updateAkku+0xde>
 800a7b0:	7bfb      	ldrb	r3, [r7, #15]
 800a7b2:	2b43      	cmp	r3, #67	; 0x43
 800a7b4:	d903      	bls.n	800a7be <updateAkku+0xde>
            level=4;
 800a7b6:	4b31      	ldr	r3, [pc, #196]	; (800a87c <updateAkku+0x19c>)
 800a7b8:	2204      	movs	r2, #4
 800a7ba:	701a      	strb	r2, [r3, #0]
 800a7bc:	e023      	b.n	800a806 <updateAkku+0x126>
    }	else if (akku_state<68 && akku_state>=52){
 800a7be:	7bfb      	ldrb	r3, [r7, #15]
 800a7c0:	2b43      	cmp	r3, #67	; 0x43
 800a7c2:	d806      	bhi.n	800a7d2 <updateAkku+0xf2>
 800a7c4:	7bfb      	ldrb	r3, [r7, #15]
 800a7c6:	2b33      	cmp	r3, #51	; 0x33
 800a7c8:	d903      	bls.n	800a7d2 <updateAkku+0xf2>
            level=3;
 800a7ca:	4b2c      	ldr	r3, [pc, #176]	; (800a87c <updateAkku+0x19c>)
 800a7cc:	2203      	movs	r2, #3
 800a7ce:	701a      	strb	r2, [r3, #0]
 800a7d0:	e019      	b.n	800a806 <updateAkku+0x126>
    }	else if (akku_state<52 && akku_state>=36){
 800a7d2:	7bfb      	ldrb	r3, [r7, #15]
 800a7d4:	2b33      	cmp	r3, #51	; 0x33
 800a7d6:	d806      	bhi.n	800a7e6 <updateAkku+0x106>
 800a7d8:	7bfb      	ldrb	r3, [r7, #15]
 800a7da:	2b23      	cmp	r3, #35	; 0x23
 800a7dc:	d903      	bls.n	800a7e6 <updateAkku+0x106>
            level=2;
 800a7de:	4b27      	ldr	r3, [pc, #156]	; (800a87c <updateAkku+0x19c>)
 800a7e0:	2202      	movs	r2, #2
 800a7e2:	701a      	strb	r2, [r3, #0]
 800a7e4:	e00f      	b.n	800a806 <updateAkku+0x126>
    }	else if (akku_state<36 && akku_state>=20){
 800a7e6:	7bfb      	ldrb	r3, [r7, #15]
 800a7e8:	2b23      	cmp	r3, #35	; 0x23
 800a7ea:	d806      	bhi.n	800a7fa <updateAkku+0x11a>
 800a7ec:	7bfb      	ldrb	r3, [r7, #15]
 800a7ee:	2b13      	cmp	r3, #19
 800a7f0:	d903      	bls.n	800a7fa <updateAkku+0x11a>
            level=1;
 800a7f2:	4b22      	ldr	r3, [pc, #136]	; (800a87c <updateAkku+0x19c>)
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	701a      	strb	r2, [r3, #0]
 800a7f8:	e005      	b.n	800a806 <updateAkku+0x126>
    }	else if (akku_state<20){
 800a7fa:	7bfb      	ldrb	r3, [r7, #15]
 800a7fc:	2b13      	cmp	r3, #19
 800a7fe:	d802      	bhi.n	800a806 <updateAkku+0x126>
            level=0;
 800a800:	4b1e      	ldr	r3, [pc, #120]	; (800a87c <updateAkku+0x19c>)
 800a802:	2200      	movs	r2, #0
 800a804:	701a      	strb	r2, [r3, #0]
    }

    ssd1306_SetCursor(&holedR, 59, 27);
 800a806:	221b      	movs	r2, #27
 800a808:	213b      	movs	r1, #59	; 0x3b
 800a80a:	4815      	ldr	r0, [pc, #84]	; (800a860 <updateAkku+0x180>)
 800a80c:	f000 fb0c 	bl	800ae28 <ssd1306_SetCursor>
    sprintf(lcd_buf, "%3.0d%%", akku_state);
 800a810:	7bfb      	ldrb	r3, [r7, #15]
 800a812:	461a      	mov	r2, r3
 800a814:	491a      	ldr	r1, [pc, #104]	; (800a880 <updateAkku+0x1a0>)
 800a816:	4814      	ldr	r0, [pc, #80]	; (800a868 <updateAkku+0x188>)
 800a818:	f001 ff84 	bl	800c724 <siprintf>
    ssd1306_WriteString(&holedR, lcd_buf, Font_7x10, White);
 800a81c:	4b13      	ldr	r3, [pc, #76]	; (800a86c <updateAkku+0x18c>)
 800a81e:	2201      	movs	r2, #1
 800a820:	9200      	str	r2, [sp, #0]
 800a822:	cb0c      	ldmia	r3, {r2, r3}
 800a824:	4910      	ldr	r1, [pc, #64]	; (800a868 <updateAkku+0x188>)
 800a826:	480e      	ldr	r0, [pc, #56]	; (800a860 <updateAkku+0x180>)
 800a828:	f000 fad6 	bl	800add8 <ssd1306_WriteString>
    ssd1306_SetCursor(&holedR, 89, 27);
 800a82c:	221b      	movs	r2, #27
 800a82e:	2159      	movs	r1, #89	; 0x59
 800a830:	480b      	ldr	r0, [pc, #44]	; (800a860 <updateAkku+0x180>)
 800a832:	f000 faf9 	bl	800ae28 <ssd1306_SetCursor>
    ssd1306_DrawBat(&holedR,level, Bat_16x9, White);
 800a836:	4b11      	ldr	r3, [pc, #68]	; (800a87c <updateAkku+0x19c>)
 800a838:	7819      	ldrb	r1, [r3, #0]
 800a83a:	4b12      	ldr	r3, [pc, #72]	; (800a884 <updateAkku+0x1a4>)
 800a83c:	2201      	movs	r2, #1
 800a83e:	9200      	str	r2, [sp, #0]
 800a840:	cb0c      	ldmia	r3, {r2, r3}
 800a842:	4807      	ldr	r0, [pc, #28]	; (800a860 <updateAkku+0x180>)
 800a844:	f000 fb08 	bl	800ae58 <ssd1306_DrawBat>
    ssd1306_UpdateScreen(&holedR);
 800a848:	4805      	ldr	r0, [pc, #20]	; (800a860 <updateAkku+0x180>)
 800a84a:	f000 f91c 	bl	800aa86 <ssd1306_UpdateScreen>
}
 800a84e:	bf00      	nop
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	40533333 	.word	0x40533333
 800a85c:	20000f78 	.word	0x20000f78
 800a860:	20000798 	.word	0x20000798
 800a864:	0800d938 	.word	0x0800d938
 800a868:	20000ba8 	.word	0x20000ba8
 800a86c:	200000c4 	.word	0x200000c4
 800a870:	0800d94c 	.word	0x0800d94c
 800a874:	3f63d70c 	.word	0x3f63d70c
 800a878:	42c80000 	.word	0x42c80000
 800a87c:	20000360 	.word	0x20000360
 800a880:	0800d95c 	.word	0x0800d95c
 800a884:	200000bc 	.word	0x200000bc

0800a888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a888:	b480      	push	{r7}
 800a88a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a88c:	bf00      	nop
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <ssd1306_Reset>:

#if defined(SSD1306_USE_I2C)

extern SSD1306_t holed1;

void ssd1306_Reset(SSD1306_t *ssd) {
 800a896:	b480      	push	{r7}
 800a898:	b083      	sub	sp, #12
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
	/* for I2C - do nothing */
}
 800a89e:	bf00      	nop
 800a8a0:	370c      	adds	r7, #12
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr

0800a8aa <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(SSD1306_t *ssd, uint8_t byte) {
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b086      	sub	sp, #24
 800a8ae:	af04      	add	r7, sp, #16
 800a8b0:	6078      	str	r0, [r7, #4]
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(ssd->hi2cx, ssd->address, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6898      	ldr	r0, [r3, #8]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 800a8c0:	b299      	uxth	r1, r3
 800a8c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8c6:	9302      	str	r3, [sp, #8]
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	9301      	str	r3, [sp, #4]
 800a8cc:	1cfb      	adds	r3, r7, #3
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f7f7 fa24 	bl	8001d20 <HAL_I2C_Mem_Write>
}
 800a8d8:	bf00      	nop
 800a8da:	3708      	adds	r7, #8
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(SSD1306_t *ssd, uint8_t* buffer, size_t buff_size) {
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b088      	sub	sp, #32
 800a8e4:	af04      	add	r7, sp, #16
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	607a      	str	r2, [r7, #4]
	HAL_I2C_Mem_Write(ssd->hi2cx, ssd->address, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6898      	ldr	r0, [r3, #8]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 800a8f6:	b299      	uxth	r1, r3
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a900:	9202      	str	r2, [sp, #8]
 800a902:	9301      	str	r3, [sp, #4]
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	9300      	str	r3, [sp, #0]
 800a908:	2301      	movs	r3, #1
 800a90a:	2240      	movs	r2, #64	; 0x40
 800a90c:	f7f7 fa08 	bl	8001d20 <HAL_I2C_Mem_Write>
}
 800a910:	bf00      	nop
 800a912:	3710      	adds	r7, #16
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(SSD1306_t *ssd) {
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
    // Reset OLED
    ssd1306_Reset(ssd);
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f7ff ffb8 	bl	800a896 <ssd1306_Reset>
	  ssd->address = SSD1306_I2C_ADDR;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2278      	movs	r2, #120	; 0x78
 800a92a:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

    // Wait for the screen to boot
    HAL_Delay(100);
 800a92e:	2064      	movs	r0, #100	; 0x64
 800a930:	f7f5 feac 	bl	800068c <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(ssd, 0xAE); //display off
 800a934:	21ae      	movs	r1, #174	; 0xae
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f7ff ffb7 	bl	800a8aa <ssd1306_WriteCommand>

    ssd1306_WriteCommand(ssd, 0x20); //Set Memory Addressing Mode   
 800a93c:	2120      	movs	r1, #32
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f7ff ffb3 	bl	800a8aa <ssd1306_WriteCommand>
    ssd1306_WriteCommand(ssd, 0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 800a944:	2110      	movs	r1, #16
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f7ff ffaf 	bl	800a8aa <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(ssd, 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800a94c:	21b0      	movs	r1, #176	; 0xb0
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f7ff ffab 	bl	800a8aa <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(ssd, 0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(ssd, 0xC8); //Set COM Output Scan Direction
 800a954:	21c8      	movs	r1, #200	; 0xc8
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f7ff ffa7 	bl	800a8aa <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(ssd, 0x00); //---set low column address
 800a95c:	2100      	movs	r1, #0
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f7ff ffa3 	bl	800a8aa <ssd1306_WriteCommand>
    ssd1306_WriteCommand(ssd, 0x10); //---set high column address
 800a964:	2110      	movs	r1, #16
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f7ff ff9f 	bl	800a8aa <ssd1306_WriteCommand>

    ssd1306_WriteCommand(ssd, 0x40); //--set start line address - CHECK
 800a96c:	2140      	movs	r1, #64	; 0x40
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7ff ff9b 	bl	800a8aa <ssd1306_WriteCommand>

    ssd1306_WriteCommand(ssd, 0x81); //--set contrast control register - CHECK
 800a974:	2181      	movs	r1, #129	; 0x81
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f7ff ff97 	bl	800a8aa <ssd1306_WriteCommand>
    ssd1306_WriteCommand(ssd, 0xFF);
 800a97c:	21ff      	movs	r1, #255	; 0xff
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f7ff ff93 	bl	800a8aa <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(ssd, 0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(ssd, 0xA1); //--set segment re-map 0 to 127 - CHECK
 800a984:	21a1      	movs	r1, #161	; 0xa1
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f7ff ff8f 	bl	800a8aa <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(ssd, 0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(ssd, 0xA6); //--set normal color
 800a98c:	21a6      	movs	r1, #166	; 0xa6
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f7ff ff8b 	bl	800a8aa <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(ssd, 0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800a994:	21a8      	movs	r1, #168	; 0xa8
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f7ff ff87 	bl	800a8aa <ssd1306_WriteCommand>
    ssd1306_WriteCommand(ssd, 0x3F); //
 800a99c:	213f      	movs	r1, #63	; 0x3f
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f7ff ff83 	bl	800a8aa <ssd1306_WriteCommand>

    ssd1306_WriteCommand(ssd, 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800a9a4:	21a4      	movs	r1, #164	; 0xa4
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f7ff ff7f 	bl	800a8aa <ssd1306_WriteCommand>

    ssd1306_WriteCommand(ssd, 0xD3); //-set display offset - CHECK
 800a9ac:	21d3      	movs	r1, #211	; 0xd3
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f7ff ff7b 	bl	800a8aa <ssd1306_WriteCommand>
    ssd1306_WriteCommand(ssd, 0x00); //-not offset
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f7ff ff77 	bl	800a8aa <ssd1306_WriteCommand>

    ssd1306_WriteCommand(ssd, 0xD5); //--set display clock divide ratio/oscillator frequency
 800a9bc:	21d5      	movs	r1, #213	; 0xd5
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f7ff ff73 	bl	800a8aa <ssd1306_WriteCommand>
    ssd1306_WriteCommand(ssd, 0xF0); //--set divide ratio
 800a9c4:	21f0      	movs	r1, #240	; 0xf0
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f7ff ff6f 	bl	800a8aa <ssd1306_WriteCommand>

    ssd1306_WriteCommand(ssd, 0xD9); //--set pre-charge period
 800a9cc:	21d9      	movs	r1, #217	; 0xd9
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f7ff ff6b 	bl	800a8aa <ssd1306_WriteCommand>
    ssd1306_WriteCommand(ssd, 0x22); //
 800a9d4:	2122      	movs	r1, #34	; 0x22
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f7ff ff67 	bl	800a8aa <ssd1306_WriteCommand>

    ssd1306_WriteCommand(ssd, 0xDA); //--set com pins hardware configuration - CHECK
 800a9dc:	21da      	movs	r1, #218	; 0xda
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f7ff ff63 	bl	800a8aa <ssd1306_WriteCommand>
    ssd1306_WriteCommand(ssd, 0x12);
 800a9e4:	2112      	movs	r1, #18
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f7ff ff5f 	bl	800a8aa <ssd1306_WriteCommand>

    ssd1306_WriteCommand(ssd, 0xDB); //--set vcomh
 800a9ec:	21db      	movs	r1, #219	; 0xdb
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f7ff ff5b 	bl	800a8aa <ssd1306_WriteCommand>
    ssd1306_WriteCommand(ssd, 0x20); //0x20,0.77xVcc
 800a9f4:	2120      	movs	r1, #32
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7ff ff57 	bl	800a8aa <ssd1306_WriteCommand>

    ssd1306_WriteCommand(ssd, 0x8D); //--set DC-DC enable
 800a9fc:	218d      	movs	r1, #141	; 0x8d
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f7ff ff53 	bl	800a8aa <ssd1306_WriteCommand>
    ssd1306_WriteCommand(ssd, 0x14); //
 800aa04:	2114      	movs	r1, #20
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f7ff ff4f 	bl	800a8aa <ssd1306_WriteCommand>
    ssd1306_WriteCommand(ssd, 0xAF); //--turn on SSD1306 panel
 800aa0c:	21af      	movs	r1, #175	; 0xaf
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f7ff ff4b 	bl	800a8aa <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(ssd, Black);
 800aa14:	2100      	movs	r1, #0
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 f812 	bl	800aa40 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen(ssd);
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 f832 	bl	800aa86 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800aa22:	4b06      	ldr	r3, [pc, #24]	; (800aa3c <ssd1306_Init+0x124>)
 800aa24:	2200      	movs	r2, #0
 800aa26:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800aa28:	4b04      	ldr	r3, [pc, #16]	; (800aa3c <ssd1306_Init+0x124>)
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800aa2e:	4b03      	ldr	r3, [pc, #12]	; (800aa3c <ssd1306_Init+0x124>)
 800aa30:	2201      	movs	r2, #1
 800aa32:	715a      	strb	r2, [r3, #5]
}
 800aa34:	bf00      	nop
 800aa36:	3708      	adds	r7, #8
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	20000364 	.word	0x20000364

0800aa40 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_t *ssd, SSD1306_COLOR color) {
 800aa40:	b480      	push	{r7}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	460b      	mov	r3, r1
 800aa4a:	70fb      	strb	r3, [r7, #3]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(ssd->pixels); i++) {
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	60fb      	str	r3, [r7, #12]
 800aa50:	e00e      	b.n	800aa70 <ssd1306_Fill+0x30>
        ssd->pixels[i] = (color == Black) ? 0x00 : 0xFF;
 800aa52:	78fb      	ldrb	r3, [r7, #3]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d101      	bne.n	800aa5c <ssd1306_Fill+0x1c>
 800aa58:	2100      	movs	r1, #0
 800aa5a:	e000      	b.n	800aa5e <ssd1306_Fill+0x1e>
 800aa5c:	21ff      	movs	r1, #255	; 0xff
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	4413      	add	r3, r2
 800aa64:	330c      	adds	r3, #12
 800aa66:	460a      	mov	r2, r1
 800aa68:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(ssd->pixels); i++) {
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	60fb      	str	r3, [r7, #12]
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa76:	d3ec      	bcc.n	800aa52 <ssd1306_Fill+0x12>
    }
}
 800aa78:	bf00      	nop
 800aa7a:	bf00      	nop
 800aa7c:	3714      	adds	r7, #20
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr

0800aa86 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(SSD1306_t *ssd) {
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b084      	sub	sp, #16
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for(i = 0; i < 8; i++) {
 800aa8e:	2300      	movs	r3, #0
 800aa90:	73fb      	strb	r3, [r7, #15]
 800aa92:	e01c      	b.n	800aace <ssd1306_UpdateScreen+0x48>
        ssd1306_WriteCommand(ssd, 0xB0 + i);
 800aa94:	7bfb      	ldrb	r3, [r7, #15]
 800aa96:	3b50      	subs	r3, #80	; 0x50
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7ff ff04 	bl	800a8aa <ssd1306_WriteCommand>
        ssd1306_WriteCommand(ssd, 0x00);
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f7ff ff00 	bl	800a8aa <ssd1306_WriteCommand>
        ssd1306_WriteCommand(ssd, 0x10);
 800aaaa:	2110      	movs	r1, #16
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f7ff fefc 	bl	800a8aa <ssd1306_WriteCommand>
        ssd1306_WriteData(ssd, &ssd->pixels[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800aab2:	7bfb      	ldrb	r3, [r7, #15]
 800aab4:	01db      	lsls	r3, r3, #7
 800aab6:	3308      	adds	r3, #8
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	4413      	add	r3, r2
 800aabc:	3304      	adds	r3, #4
 800aabe:	2280      	movs	r2, #128	; 0x80
 800aac0:	4619      	mov	r1, r3
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f7ff ff0c 	bl	800a8e0 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 800aac8:	7bfb      	ldrb	r3, [r7, #15]
 800aaca:	3301      	adds	r3, #1
 800aacc:	73fb      	strb	r3, [r7, #15]
 800aace:	7bfb      	ldrb	r3, [r7, #15]
 800aad0:	2b07      	cmp	r3, #7
 800aad2:	d9df      	bls.n	800aa94 <ssd1306_UpdateScreen+0xe>
    }
}
 800aad4:	bf00      	nop
 800aad6:	bf00      	nop
 800aad8:	3710      	adds	r7, #16
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
	...

0800aae0 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(SSD1306_t *ssd, uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800aae0:	b480      	push	{r7}
 800aae2:	b083      	sub	sp, #12
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	4608      	mov	r0, r1
 800aaea:	4611      	mov	r1, r2
 800aaec:	461a      	mov	r2, r3
 800aaee:	4603      	mov	r3, r0
 800aaf0:	70fb      	strb	r3, [r7, #3]
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	70bb      	strb	r3, [r7, #2]
 800aaf6:	4613      	mov	r3, r2
 800aaf8:	707b      	strb	r3, [r7, #1]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800aafa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	db4e      	blt.n	800aba0 <ssd1306_DrawPixel+0xc0>
 800ab02:	78bb      	ldrb	r3, [r7, #2]
 800ab04:	2b3f      	cmp	r3, #63	; 0x3f
 800ab06:	d84b      	bhi.n	800aba0 <ssd1306_DrawPixel+0xc0>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 800ab08:	4b28      	ldr	r3, [pc, #160]	; (800abac <ssd1306_DrawPixel+0xcc>)
 800ab0a:	791b      	ldrb	r3, [r3, #4]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d006      	beq.n	800ab1e <ssd1306_DrawPixel+0x3e>
        color = (SSD1306_COLOR)!color;
 800ab10:	787b      	ldrb	r3, [r7, #1]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	bf0c      	ite	eq
 800ab16:	2301      	moveq	r3, #1
 800ab18:	2300      	movne	r3, #0
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	707b      	strb	r3, [r7, #1]
    }
    
    // Draw in the right color
    if(color == White) {
 800ab1e:	787b      	ldrb	r3, [r7, #1]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d11d      	bne.n	800ab60 <ssd1306_DrawPixel+0x80>
        ssd->pixels[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800ab24:	78fa      	ldrb	r2, [r7, #3]
 800ab26:	78bb      	ldrb	r3, [r7, #2]
 800ab28:	08db      	lsrs	r3, r3, #3
 800ab2a:	b2d8      	uxtb	r0, r3
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	01db      	lsls	r3, r3, #7
 800ab30:	4413      	add	r3, r2
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	4413      	add	r3, r2
 800ab36:	7b1b      	ldrb	r3, [r3, #12]
 800ab38:	b25a      	sxtb	r2, r3
 800ab3a:	78bb      	ldrb	r3, [r7, #2]
 800ab3c:	f003 0307 	and.w	r3, r3, #7
 800ab40:	2101      	movs	r1, #1
 800ab42:	fa01 f303 	lsl.w	r3, r1, r3
 800ab46:	b25b      	sxtb	r3, r3
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	b259      	sxtb	r1, r3
 800ab4c:	78fa      	ldrb	r2, [r7, #3]
 800ab4e:	4603      	mov	r3, r0
 800ab50:	01db      	lsls	r3, r3, #7
 800ab52:	4413      	add	r3, r2
 800ab54:	b2c9      	uxtb	r1, r1
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	4413      	add	r3, r2
 800ab5a:	460a      	mov	r2, r1
 800ab5c:	731a      	strb	r2, [r3, #12]
 800ab5e:	e020      	b.n	800aba2 <ssd1306_DrawPixel+0xc2>
    } else { 
        ssd->pixels[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800ab60:	78fa      	ldrb	r2, [r7, #3]
 800ab62:	78bb      	ldrb	r3, [r7, #2]
 800ab64:	08db      	lsrs	r3, r3, #3
 800ab66:	b2d8      	uxtb	r0, r3
 800ab68:	4603      	mov	r3, r0
 800ab6a:	01db      	lsls	r3, r3, #7
 800ab6c:	4413      	add	r3, r2
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	4413      	add	r3, r2
 800ab72:	7b1b      	ldrb	r3, [r3, #12]
 800ab74:	b25a      	sxtb	r2, r3
 800ab76:	78bb      	ldrb	r3, [r7, #2]
 800ab78:	f003 0307 	and.w	r3, r3, #7
 800ab7c:	2101      	movs	r1, #1
 800ab7e:	fa01 f303 	lsl.w	r3, r1, r3
 800ab82:	b25b      	sxtb	r3, r3
 800ab84:	43db      	mvns	r3, r3
 800ab86:	b25b      	sxtb	r3, r3
 800ab88:	4013      	ands	r3, r2
 800ab8a:	b259      	sxtb	r1, r3
 800ab8c:	78fa      	ldrb	r2, [r7, #3]
 800ab8e:	4603      	mov	r3, r0
 800ab90:	01db      	lsls	r3, r3, #7
 800ab92:	4413      	add	r3, r2
 800ab94:	b2c9      	uxtb	r1, r1
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	4413      	add	r3, r2
 800ab9a:	460a      	mov	r2, r1
 800ab9c:	731a      	strb	r2, [r3, #12]
 800ab9e:	e000      	b.n	800aba2 <ssd1306_DrawPixel+0xc2>
        return;
 800aba0:	bf00      	nop
    }
}
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr
 800abac:	20000364 	.word	0x20000364

0800abb0 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(SSD1306_t *ssd, char ch, FontDef Font, SSD1306_COLOR color) {
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b088      	sub	sp, #32
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	4608      	mov	r0, r1
 800abba:	4639      	mov	r1, r7
 800abbc:	e881 000c 	stmia.w	r1, {r2, r3}
 800abc0:	4603      	mov	r3, r0
 800abc2:	72fb      	strb	r3, [r7, #11]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 800abc4:	7afb      	ldrb	r3, [r7, #11]
 800abc6:	2b1f      	cmp	r3, #31
 800abc8:	d902      	bls.n	800abd0 <ssd1306_WriteChar+0x20>
 800abca:	7afb      	ldrb	r3, [r7, #11]
 800abcc:	2b7e      	cmp	r3, #126	; 0x7e
 800abce:	d901      	bls.n	800abd4 <ssd1306_WriteChar+0x24>
        return 0;
 800abd0:	2300      	movs	r3, #0
 800abd2:	e06f      	b.n	800acb4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800abd4:	4b39      	ldr	r3, [pc, #228]	; (800acbc <ssd1306_WriteChar+0x10c>)
 800abd6:	881b      	ldrh	r3, [r3, #0]
 800abd8:	461a      	mov	r2, r3
 800abda:	783b      	ldrb	r3, [r7, #0]
 800abdc:	4413      	add	r3, r2
 800abde:	2b7f      	cmp	r3, #127	; 0x7f
 800abe0:	dc06      	bgt.n	800abf0 <ssd1306_WriteChar+0x40>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800abe2:	4b36      	ldr	r3, [pc, #216]	; (800acbc <ssd1306_WriteChar+0x10c>)
 800abe4:	885b      	ldrh	r3, [r3, #2]
 800abe6:	461a      	mov	r2, r3
 800abe8:	787b      	ldrb	r3, [r7, #1]
 800abea:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800abec:	2b3f      	cmp	r3, #63	; 0x3f
 800abee:	dd01      	ble.n	800abf4 <ssd1306_WriteChar+0x44>
    {
        // Not enough space on current line
        return 0;
 800abf0:	2300      	movs	r3, #0
 800abf2:	e05f      	b.n	800acb4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800abf4:	2300      	movs	r3, #0
 800abf6:	61fb      	str	r3, [r7, #28]
 800abf8:	e04e      	b.n	800ac98 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	7afb      	ldrb	r3, [r7, #11]
 800abfe:	3b20      	subs	r3, #32
 800ac00:	7879      	ldrb	r1, [r7, #1]
 800ac02:	fb01 f303 	mul.w	r3, r1, r3
 800ac06:	4619      	mov	r1, r3
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	440b      	add	r3, r1
 800ac0c:	005b      	lsls	r3, r3, #1
 800ac0e:	4413      	add	r3, r2
 800ac10:	881b      	ldrh	r3, [r3, #0]
 800ac12:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800ac14:	2300      	movs	r3, #0
 800ac16:	61bb      	str	r3, [r7, #24]
 800ac18:	e036      	b.n	800ac88 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800ac1a:	697a      	ldr	r2, [r7, #20]
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d013      	beq.n	800ac52 <ssd1306_WriteChar+0xa2>
                ssd1306_DrawPixel(ssd, SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800ac2a:	4b24      	ldr	r3, [pc, #144]	; (800acbc <ssd1306_WriteChar+0x10c>)
 800ac2c:	881b      	ldrh	r3, [r3, #0]
 800ac2e:	b2da      	uxtb	r2, r3
 800ac30:	69bb      	ldr	r3, [r7, #24]
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	4413      	add	r3, r2
 800ac36:	b2d9      	uxtb	r1, r3
 800ac38:	4b20      	ldr	r3, [pc, #128]	; (800acbc <ssd1306_WriteChar+0x10c>)
 800ac3a:	885b      	ldrh	r3, [r3, #2]
 800ac3c:	b2da      	uxtb	r2, r3
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	4413      	add	r3, r2
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	f7ff ff48 	bl	800aae0 <ssd1306_DrawPixel>
 800ac50:	e017      	b.n	800ac82 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(ssd, SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800ac52:	4b1a      	ldr	r3, [pc, #104]	; (800acbc <ssd1306_WriteChar+0x10c>)
 800ac54:	881b      	ldrh	r3, [r3, #0]
 800ac56:	b2da      	uxtb	r2, r3
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	4413      	add	r3, r2
 800ac5e:	b2d9      	uxtb	r1, r3
 800ac60:	4b16      	ldr	r3, [pc, #88]	; (800acbc <ssd1306_WriteChar+0x10c>)
 800ac62:	885b      	ldrh	r3, [r3, #2]
 800ac64:	b2da      	uxtb	r2, r3
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	4413      	add	r3, r2
 800ac6c:	b2da      	uxtb	r2, r3
 800ac6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	bf0c      	ite	eq
 800ac76:	2301      	moveq	r3, #1
 800ac78:	2300      	movne	r3, #0
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	f7ff ff2f 	bl	800aae0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	3301      	adds	r3, #1
 800ac86:	61bb      	str	r3, [r7, #24]
 800ac88:	783b      	ldrb	r3, [r7, #0]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d3c3      	bcc.n	800ac1a <ssd1306_WriteChar+0x6a>
    for(i = 0; i < Font.FontHeight; i++) {
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	3301      	adds	r3, #1
 800ac96:	61fb      	str	r3, [r7, #28]
 800ac98:	787b      	ldrb	r3, [r7, #1]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	69fb      	ldr	r3, [r7, #28]
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d3ab      	bcc.n	800abfa <ssd1306_WriteChar+0x4a>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800aca2:	4b06      	ldr	r3, [pc, #24]	; (800acbc <ssd1306_WriteChar+0x10c>)
 800aca4:	881a      	ldrh	r2, [r3, #0]
 800aca6:	783b      	ldrb	r3, [r7, #0]
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	4413      	add	r3, r2
 800acac:	b29a      	uxth	r2, r3
 800acae:	4b03      	ldr	r3, [pc, #12]	; (800acbc <ssd1306_WriteChar+0x10c>)
 800acb0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800acb2:	7afb      	ldrb	r3, [r7, #11]
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3720      	adds	r7, #32
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	20000364 	.word	0x20000364

0800acc0 <ssd1306_DrawSign>:


char ssd1306_DrawSign(SSD1306_t *ssd,uint8_t level, SignDef Sign, SSD1306_COLOR color) {
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b088      	sub	sp, #32
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	4608      	mov	r0, r1
 800acca:	4639      	mov	r1, r7
 800accc:	e881 000c 	stmia.w	r1, {r2, r3}
 800acd0:	4603      	mov	r3, r0
 800acd2:	72fb      	strb	r3, [r7, #11]
    uint32_t i, b, j;
		char ch =32+level;
 800acd4:	7afb      	ldrb	r3, [r7, #11]
 800acd6:	3320      	adds	r3, #32
 800acd8:	75fb      	strb	r3, [r7, #23]
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800acda:	7dfb      	ldrb	r3, [r7, #23]
 800acdc:	2b1f      	cmp	r3, #31
 800acde:	d902      	bls.n	800ace6 <ssd1306_DrawSign+0x26>
 800ace0:	7dfb      	ldrb	r3, [r7, #23]
 800ace2:	2b7e      	cmp	r3, #126	; 0x7e
 800ace4:	d901      	bls.n	800acea <ssd1306_DrawSign+0x2a>
        return 0;
 800ace6:	2300      	movs	r3, #0
 800ace8:	e06f      	b.n	800adca <ssd1306_DrawSign+0x10a>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Sign.SignWidth) ||
 800acea:	4b3a      	ldr	r3, [pc, #232]	; (800add4 <ssd1306_DrawSign+0x114>)
 800acec:	881b      	ldrh	r3, [r3, #0]
 800acee:	461a      	mov	r2, r3
 800acf0:	783b      	ldrb	r3, [r7, #0]
 800acf2:	4413      	add	r3, r2
 800acf4:	2b7f      	cmp	r3, #127	; 0x7f
 800acf6:	dc06      	bgt.n	800ad06 <ssd1306_DrawSign+0x46>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Sign.SignHeight))
 800acf8:	4b36      	ldr	r3, [pc, #216]	; (800add4 <ssd1306_DrawSign+0x114>)
 800acfa:	885b      	ldrh	r3, [r3, #2]
 800acfc:	461a      	mov	r2, r3
 800acfe:	787b      	ldrb	r3, [r7, #1]
 800ad00:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Sign.SignWidth) ||
 800ad02:	2b3f      	cmp	r3, #63	; 0x3f
 800ad04:	dd01      	ble.n	800ad0a <ssd1306_DrawSign+0x4a>
    {
        // Not enough space on current line
        return 0;
 800ad06:	2300      	movs	r3, #0
 800ad08:	e05f      	b.n	800adca <ssd1306_DrawSign+0x10a>
    }
    
    // Use the font to write
    for(i = 0; i < Sign.SignHeight; i++) {
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	61fb      	str	r3, [r7, #28]
 800ad0e:	e04e      	b.n	800adae <ssd1306_DrawSign+0xee>
        b = Sign.data[(ch - 32) * Sign.SignHeight + i];
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	7dfb      	ldrb	r3, [r7, #23]
 800ad14:	3b20      	subs	r3, #32
 800ad16:	7879      	ldrb	r1, [r7, #1]
 800ad18:	fb01 f303 	mul.w	r3, r1, r3
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	440b      	add	r3, r1
 800ad22:	005b      	lsls	r3, r3, #1
 800ad24:	4413      	add	r3, r2
 800ad26:	881b      	ldrh	r3, [r3, #0]
 800ad28:	613b      	str	r3, [r7, #16]
        for(j = 0; j < Sign.SignWidth; j++) {
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	61bb      	str	r3, [r7, #24]
 800ad2e:	e036      	b.n	800ad9e <ssd1306_DrawSign+0xde>
            if((b << j) & 0x8000)  {
 800ad30:	693a      	ldr	r2, [r7, #16]
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	fa02 f303 	lsl.w	r3, r2, r3
 800ad38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d013      	beq.n	800ad68 <ssd1306_DrawSign+0xa8>
                ssd1306_DrawPixel(ssd, SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800ad40:	4b24      	ldr	r3, [pc, #144]	; (800add4 <ssd1306_DrawSign+0x114>)
 800ad42:	881b      	ldrh	r3, [r3, #0]
 800ad44:	b2da      	uxtb	r2, r3
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	4413      	add	r3, r2
 800ad4c:	b2d9      	uxtb	r1, r3
 800ad4e:	4b21      	ldr	r3, [pc, #132]	; (800add4 <ssd1306_DrawSign+0x114>)
 800ad50:	885b      	ldrh	r3, [r3, #2]
 800ad52:	b2da      	uxtb	r2, r3
 800ad54:	69fb      	ldr	r3, [r7, #28]
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	4413      	add	r3, r2
 800ad5a:	b2da      	uxtb	r2, r3
 800ad5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ad60:	68f8      	ldr	r0, [r7, #12]
 800ad62:	f7ff febd 	bl	800aae0 <ssd1306_DrawPixel>
 800ad66:	e017      	b.n	800ad98 <ssd1306_DrawSign+0xd8>
            } else {
                ssd1306_DrawPixel(ssd, SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800ad68:	4b1a      	ldr	r3, [pc, #104]	; (800add4 <ssd1306_DrawSign+0x114>)
 800ad6a:	881b      	ldrh	r3, [r3, #0]
 800ad6c:	b2da      	uxtb	r2, r3
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	4413      	add	r3, r2
 800ad74:	b2d9      	uxtb	r1, r3
 800ad76:	4b17      	ldr	r3, [pc, #92]	; (800add4 <ssd1306_DrawSign+0x114>)
 800ad78:	885b      	ldrh	r3, [r3, #2]
 800ad7a:	b2da      	uxtb	r2, r3
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	b2db      	uxtb	r3, r3
 800ad80:	4413      	add	r3, r2
 800ad82:	b2da      	uxtb	r2, r3
 800ad84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	bf0c      	ite	eq
 800ad8c:	2301      	moveq	r3, #1
 800ad8e:	2300      	movne	r3, #0
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	68f8      	ldr	r0, [r7, #12]
 800ad94:	f7ff fea4 	bl	800aae0 <ssd1306_DrawPixel>
        for(j = 0; j < Sign.SignWidth; j++) {
 800ad98:	69bb      	ldr	r3, [r7, #24]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	61bb      	str	r3, [r7, #24]
 800ad9e:	783b      	ldrb	r3, [r7, #0]
 800ada0:	461a      	mov	r2, r3
 800ada2:	69bb      	ldr	r3, [r7, #24]
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d3c3      	bcc.n	800ad30 <ssd1306_DrawSign+0x70>
    for(i = 0; i < Sign.SignHeight; i++) {
 800ada8:	69fb      	ldr	r3, [r7, #28]
 800adaa:	3301      	adds	r3, #1
 800adac:	61fb      	str	r3, [r7, #28]
 800adae:	787b      	ldrb	r3, [r7, #1]
 800adb0:	461a      	mov	r2, r3
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d3ab      	bcc.n	800ad10 <ssd1306_DrawSign+0x50>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Sign.SignWidth;
 800adb8:	4b06      	ldr	r3, [pc, #24]	; (800add4 <ssd1306_DrawSign+0x114>)
 800adba:	881a      	ldrh	r2, [r3, #0]
 800adbc:	783b      	ldrb	r3, [r7, #0]
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	4413      	add	r3, r2
 800adc2:	b29a      	uxth	r2, r3
 800adc4:	4b03      	ldr	r3, [pc, #12]	; (800add4 <ssd1306_DrawSign+0x114>)
 800adc6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800adc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3720      	adds	r7, #32
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	20000364 	.word	0x20000364

0800add8 <ssd1306_WriteString>:




// Write full string to screenbuffer
char ssd1306_WriteString(SSD1306_t *ssd, char* str, FontDef Font, SSD1306_COLOR color) {
 800add8:	b580      	push	{r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	af02      	add	r7, sp, #8
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	4639      	mov	r1, r7
 800ade4:	e881 000c 	stmia.w	r1, {r2, r3}
    // Write until null-byte
    while (*str) {
 800ade8:	e014      	b.n	800ae14 <ssd1306_WriteString+0x3c>
        if (ssd1306_WriteChar(ssd, *str, Font, color) != *str) {
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	7819      	ldrb	r1, [r3, #0]
 800adee:	7e3b      	ldrb	r3, [r7, #24]
 800adf0:	9300      	str	r3, [sp, #0]
 800adf2:	463b      	mov	r3, r7
 800adf4:	cb0c      	ldmia	r3, {r2, r3}
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	f7ff feda 	bl	800abb0 <ssd1306_WriteChar>
 800adfc:	4603      	mov	r3, r0
 800adfe:	461a      	mov	r2, r3
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d002      	beq.n	800ae0e <ssd1306_WriteString+0x36>
            // Char could not be written
            return *str;
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	e008      	b.n	800ae20 <ssd1306_WriteString+0x48>
        }
        
        // Next char
        str++;
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	3301      	adds	r3, #1
 800ae12:	60bb      	str	r3, [r7, #8]
    while (*str) {
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d1e6      	bne.n	800adea <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	781b      	ldrb	r3, [r3, #0]
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3710      	adds	r7, #16
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(SSD1306_t *ssd, uint8_t x, uint8_t y) {
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	460b      	mov	r3, r1
 800ae32:	70fb      	strb	r3, [r7, #3]
 800ae34:	4613      	mov	r3, r2
 800ae36:	70bb      	strb	r3, [r7, #2]
    SSD1306.CurrentX = x;
 800ae38:	78fb      	ldrb	r3, [r7, #3]
 800ae3a:	b29a      	uxth	r2, r3
 800ae3c:	4b05      	ldr	r3, [pc, #20]	; (800ae54 <ssd1306_SetCursor+0x2c>)
 800ae3e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800ae40:	78bb      	ldrb	r3, [r7, #2]
 800ae42:	b29a      	uxth	r2, r3
 800ae44:	4b03      	ldr	r3, [pc, #12]	; (800ae54 <ssd1306_SetCursor+0x2c>)
 800ae46:	805a      	strh	r2, [r3, #2]
}
 800ae48:	bf00      	nop
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr
 800ae54:	20000364 	.word	0x20000364

0800ae58 <ssd1306_DrawBat>:


//draw a battery sign 16x9
void ssd1306_DrawBat(SSD1306_t *ssd,uint8_t level, SignDef Sign, SSD1306_COLOR color){
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b086      	sub	sp, #24
 800ae5c:	af02      	add	r7, sp, #8
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	4608      	mov	r0, r1
 800ae62:	4639      	mov	r1, r7
 800ae64:	e881 000c 	stmia.w	r1, {r2, r3}
 800ae68:	4603      	mov	r3, r0
 800ae6a:	72fb      	strb	r3, [r7, #11]
	ssd1306_DrawSign(ssd, level, Sign, color);
 800ae6c:	7af9      	ldrb	r1, [r7, #11]
 800ae6e:	7e3b      	ldrb	r3, [r7, #24]
 800ae70:	9300      	str	r3, [sp, #0]
 800ae72:	463b      	mov	r3, r7
 800ae74:	cb0c      	ldmia	r3, {r2, r3}
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	f7ff ff22 	bl	800acc0 <ssd1306_DrawSign>
}
 800ae7c:	bf00      	nop
 800ae7e:	3710      	adds	r7, #16
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <ssd1306_DrawHLine>:

//draw a horizontal line
void ssd1306_DrawHLine(SSD1306_t *ssd, uint8_t x1, uint8_t x2, uint8_t y,SSD1306_COLOR color){
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	4608      	mov	r0, r1
 800ae8e:	4611      	mov	r1, r2
 800ae90:	461a      	mov	r2, r3
 800ae92:	4603      	mov	r3, r0
 800ae94:	70fb      	strb	r3, [r7, #3]
 800ae96:	460b      	mov	r3, r1
 800ae98:	70bb      	strb	r3, [r7, #2]
 800ae9a:	4613      	mov	r3, r2
 800ae9c:	707b      	strb	r3, [r7, #1]
	uint8_t dx=abs(x2-x1);
 800ae9e:	78ba      	ldrb	r2, [r7, #2]
 800aea0:	78fb      	ldrb	r3, [r7, #3]
 800aea2:	1ad3      	subs	r3, r2, r3
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	bfb8      	it	lt
 800aea8:	425b      	neglt	r3, r3
 800aeaa:	72fb      	strb	r3, [r7, #11]
	for(int i=0;i<dx+1;i++){
 800aeac:	2300      	movs	r3, #0
 800aeae:	60fb      	str	r3, [r7, #12]
 800aeb0:	e01f      	b.n	800aef2 <ssd1306_DrawHLine+0x6e>
		if (x1<x2){
 800aeb2:	78fa      	ldrb	r2, [r7, #3]
 800aeb4:	78bb      	ldrb	r3, [r7, #2]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d20a      	bcs.n	800aed0 <ssd1306_DrawHLine+0x4c>
			ssd1306_DrawPixel(ssd,x1+i,y,color);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	b2da      	uxtb	r2, r3
 800aebe:	78fb      	ldrb	r3, [r7, #3]
 800aec0:	4413      	add	r3, r2
 800aec2:	b2d9      	uxtb	r1, r3
 800aec4:	7e3b      	ldrb	r3, [r7, #24]
 800aec6:	787a      	ldrb	r2, [r7, #1]
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f7ff fe09 	bl	800aae0 <ssd1306_DrawPixel>
 800aece:	e00d      	b.n	800aeec <ssd1306_DrawHLine+0x68>
		}else if(x1>x2){
 800aed0:	78fa      	ldrb	r2, [r7, #3]
 800aed2:	78bb      	ldrb	r3, [r7, #2]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d909      	bls.n	800aeec <ssd1306_DrawHLine+0x68>
			ssd1306_DrawPixel(ssd,x2+i,y,color);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	78bb      	ldrb	r3, [r7, #2]
 800aede:	4413      	add	r3, r2
 800aee0:	b2d9      	uxtb	r1, r3
 800aee2:	7e3b      	ldrb	r3, [r7, #24]
 800aee4:	787a      	ldrb	r2, [r7, #1]
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f7ff fdfa 	bl	800aae0 <ssd1306_DrawPixel>
	for(int i=0;i<dx+1;i++){
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	3301      	adds	r3, #1
 800aef0:	60fb      	str	r3, [r7, #12]
 800aef2:	7afb      	ldrb	r3, [r7, #11]
 800aef4:	68fa      	ldr	r2, [r7, #12]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	dddb      	ble.n	800aeb2 <ssd1306_DrawHLine+0x2e>
		}
	}
}
 800aefa:	bf00      	nop
 800aefc:	bf00      	nop
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <ssd1306_DrawVLine>:

//draw a vertical line
void ssd1306_DrawVLine(SSD1306_t *ssd, uint8_t x, uint8_t y1, uint8_t y2,SSD1306_COLOR color){
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	4608      	mov	r0, r1
 800af0e:	4611      	mov	r1, r2
 800af10:	461a      	mov	r2, r3
 800af12:	4603      	mov	r3, r0
 800af14:	70fb      	strb	r3, [r7, #3]
 800af16:	460b      	mov	r3, r1
 800af18:	70bb      	strb	r3, [r7, #2]
 800af1a:	4613      	mov	r3, r2
 800af1c:	707b      	strb	r3, [r7, #1]
	uint8_t dy=abs(y2-y1);
 800af1e:	787a      	ldrb	r2, [r7, #1]
 800af20:	78bb      	ldrb	r3, [r7, #2]
 800af22:	1ad3      	subs	r3, r2, r3
 800af24:	2b00      	cmp	r3, #0
 800af26:	bfb8      	it	lt
 800af28:	425b      	neglt	r3, r3
 800af2a:	72fb      	strb	r3, [r7, #11]
	for(int i=0;i<dy+1;i++){
 800af2c:	2300      	movs	r3, #0
 800af2e:	60fb      	str	r3, [r7, #12]
 800af30:	e01f      	b.n	800af72 <ssd1306_DrawVLine+0x6e>
		if (y1<y2){
 800af32:	78ba      	ldrb	r2, [r7, #2]
 800af34:	787b      	ldrb	r3, [r7, #1]
 800af36:	429a      	cmp	r2, r3
 800af38:	d20a      	bcs.n	800af50 <ssd1306_DrawVLine+0x4c>
			ssd1306_DrawPixel(ssd,x,y1+i,color);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	b2da      	uxtb	r2, r3
 800af3e:	78bb      	ldrb	r3, [r7, #2]
 800af40:	4413      	add	r3, r2
 800af42:	b2da      	uxtb	r2, r3
 800af44:	7e3b      	ldrb	r3, [r7, #24]
 800af46:	78f9      	ldrb	r1, [r7, #3]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f7ff fdc9 	bl	800aae0 <ssd1306_DrawPixel>
 800af4e:	e00d      	b.n	800af6c <ssd1306_DrawVLine+0x68>
		}else if(y1>y2){
 800af50:	78ba      	ldrb	r2, [r7, #2]
 800af52:	787b      	ldrb	r3, [r7, #1]
 800af54:	429a      	cmp	r2, r3
 800af56:	d909      	bls.n	800af6c <ssd1306_DrawVLine+0x68>
			ssd1306_DrawPixel(ssd,x,y2+i,color);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	b2da      	uxtb	r2, r3
 800af5c:	787b      	ldrb	r3, [r7, #1]
 800af5e:	4413      	add	r3, r2
 800af60:	b2da      	uxtb	r2, r3
 800af62:	7e3b      	ldrb	r3, [r7, #24]
 800af64:	78f9      	ldrb	r1, [r7, #3]
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f7ff fdba 	bl	800aae0 <ssd1306_DrawPixel>
	for(int i=0;i<dy+1;i++){
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	3301      	adds	r3, #1
 800af70:	60fb      	str	r3, [r7, #12]
 800af72:	7afb      	ldrb	r3, [r7, #11]
 800af74:	68fa      	ldr	r2, [r7, #12]
 800af76:	429a      	cmp	r2, r3
 800af78:	dddb      	ble.n	800af32 <ssd1306_DrawVLine+0x2e>
		}
	}
}
 800af7a:	bf00      	nop
 800af7c:	bf00      	nop
 800af7e:	3710      	adds	r7, #16
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800af8a:	2300      	movs	r3, #0
 800af8c:	607b      	str	r3, [r7, #4]
 800af8e:	4b10      	ldr	r3, [pc, #64]	; (800afd0 <HAL_MspInit+0x4c>)
 800af90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af92:	4a0f      	ldr	r2, [pc, #60]	; (800afd0 <HAL_MspInit+0x4c>)
 800af94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af98:	6453      	str	r3, [r2, #68]	; 0x44
 800af9a:	4b0d      	ldr	r3, [pc, #52]	; (800afd0 <HAL_MspInit+0x4c>)
 800af9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afa2:	607b      	str	r3, [r7, #4]
 800afa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800afa6:	2300      	movs	r3, #0
 800afa8:	603b      	str	r3, [r7, #0]
 800afaa:	4b09      	ldr	r3, [pc, #36]	; (800afd0 <HAL_MspInit+0x4c>)
 800afac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afae:	4a08      	ldr	r2, [pc, #32]	; (800afd0 <HAL_MspInit+0x4c>)
 800afb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afb4:	6413      	str	r3, [r2, #64]	; 0x40
 800afb6:	4b06      	ldr	r3, [pc, #24]	; (800afd0 <HAL_MspInit+0x4c>)
 800afb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afbe:	603b      	str	r3, [r7, #0]
 800afc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800afc2:	bf00      	nop
 800afc4:	370c      	adds	r7, #12
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	40023800 	.word	0x40023800

0800afd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b08a      	sub	sp, #40	; 0x28
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afdc:	f107 0314 	add.w	r3, r7, #20
 800afe0:	2200      	movs	r2, #0
 800afe2:	601a      	str	r2, [r3, #0]
 800afe4:	605a      	str	r2, [r3, #4]
 800afe6:	609a      	str	r2, [r3, #8]
 800afe8:	60da      	str	r2, [r3, #12]
 800afea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a17      	ldr	r2, [pc, #92]	; (800b050 <HAL_ADC_MspInit+0x7c>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d127      	bne.n	800b046 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800aff6:	2300      	movs	r3, #0
 800aff8:	613b      	str	r3, [r7, #16]
 800affa:	4b16      	ldr	r3, [pc, #88]	; (800b054 <HAL_ADC_MspInit+0x80>)
 800affc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800affe:	4a15      	ldr	r2, [pc, #84]	; (800b054 <HAL_ADC_MspInit+0x80>)
 800b000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b004:	6453      	str	r3, [r2, #68]	; 0x44
 800b006:	4b13      	ldr	r3, [pc, #76]	; (800b054 <HAL_ADC_MspInit+0x80>)
 800b008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b00a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b00e:	613b      	str	r3, [r7, #16]
 800b010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b012:	2300      	movs	r3, #0
 800b014:	60fb      	str	r3, [r7, #12]
 800b016:	4b0f      	ldr	r3, [pc, #60]	; (800b054 <HAL_ADC_MspInit+0x80>)
 800b018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b01a:	4a0e      	ldr	r2, [pc, #56]	; (800b054 <HAL_ADC_MspInit+0x80>)
 800b01c:	f043 0302 	orr.w	r3, r3, #2
 800b020:	6313      	str	r3, [r2, #48]	; 0x30
 800b022:	4b0c      	ldr	r3, [pc, #48]	; (800b054 <HAL_ADC_MspInit+0x80>)
 800b024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b026:	f003 0302 	and.w	r3, r3, #2
 800b02a:	60fb      	str	r3, [r7, #12]
 800b02c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_BAT_Pin;
 800b02e:	2302      	movs	r3, #2
 800b030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b032:	2303      	movs	r3, #3
 800b034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b036:	2300      	movs	r3, #0
 800b038:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_BAT_GPIO_Port, &GPIO_InitStruct);
 800b03a:	f107 0314 	add.w	r3, r7, #20
 800b03e:	4619      	mov	r1, r3
 800b040:	4805      	ldr	r0, [pc, #20]	; (800b058 <HAL_ADC_MspInit+0x84>)
 800b042:	f7f6 fb63 	bl	800170c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800b046:	bf00      	nop
 800b048:	3728      	adds	r7, #40	; 0x28
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	40012000 	.word	0x40012000
 800b054:	40023800 	.word	0x40023800
 800b058:	40020400 	.word	0x40020400

0800b05c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b08c      	sub	sp, #48	; 0x30
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b064:	f107 031c 	add.w	r3, r7, #28
 800b068:	2200      	movs	r2, #0
 800b06a:	601a      	str	r2, [r3, #0]
 800b06c:	605a      	str	r2, [r3, #4]
 800b06e:	609a      	str	r2, [r3, #8]
 800b070:	60da      	str	r2, [r3, #12]
 800b072:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4a42      	ldr	r2, [pc, #264]	; (800b184 <HAL_I2C_MspInit+0x128>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d12d      	bne.n	800b0da <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b07e:	2300      	movs	r3, #0
 800b080:	61bb      	str	r3, [r7, #24]
 800b082:	4b41      	ldr	r3, [pc, #260]	; (800b188 <HAL_I2C_MspInit+0x12c>)
 800b084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b086:	4a40      	ldr	r2, [pc, #256]	; (800b188 <HAL_I2C_MspInit+0x12c>)
 800b088:	f043 0302 	orr.w	r3, r3, #2
 800b08c:	6313      	str	r3, [r2, #48]	; 0x30
 800b08e:	4b3e      	ldr	r3, [pc, #248]	; (800b188 <HAL_I2C_MspInit+0x12c>)
 800b090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b092:	f003 0302 	and.w	r3, r3, #2
 800b096:	61bb      	str	r3, [r7, #24]
 800b098:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800b09a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b09e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b0a0:	2312      	movs	r3, #18
 800b0a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0a8:	2303      	movs	r3, #3
 800b0aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b0ac:	2304      	movs	r3, #4
 800b0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b0b0:	f107 031c 	add.w	r3, r7, #28
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	4835      	ldr	r0, [pc, #212]	; (800b18c <HAL_I2C_MspInit+0x130>)
 800b0b8:	f7f6 fb28 	bl	800170c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b0bc:	2300      	movs	r3, #0
 800b0be:	617b      	str	r3, [r7, #20]
 800b0c0:	4b31      	ldr	r3, [pc, #196]	; (800b188 <HAL_I2C_MspInit+0x12c>)
 800b0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c4:	4a30      	ldr	r2, [pc, #192]	; (800b188 <HAL_I2C_MspInit+0x12c>)
 800b0c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b0ca:	6413      	str	r3, [r2, #64]	; 0x40
 800b0cc:	4b2e      	ldr	r3, [pc, #184]	; (800b188 <HAL_I2C_MspInit+0x12c>)
 800b0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b0d4:	617b      	str	r3, [r7, #20]
 800b0d6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800b0d8:	e050      	b.n	800b17c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4a2c      	ldr	r2, [pc, #176]	; (800b190 <HAL_I2C_MspInit+0x134>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d14b      	bne.n	800b17c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	613b      	str	r3, [r7, #16]
 800b0e8:	4b27      	ldr	r3, [pc, #156]	; (800b188 <HAL_I2C_MspInit+0x12c>)
 800b0ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ec:	4a26      	ldr	r2, [pc, #152]	; (800b188 <HAL_I2C_MspInit+0x12c>)
 800b0ee:	f043 0304 	orr.w	r3, r3, #4
 800b0f2:	6313      	str	r3, [r2, #48]	; 0x30
 800b0f4:	4b24      	ldr	r3, [pc, #144]	; (800b188 <HAL_I2C_MspInit+0x12c>)
 800b0f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f8:	f003 0304 	and.w	r3, r3, #4
 800b0fc:	613b      	str	r3, [r7, #16]
 800b0fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b100:	2300      	movs	r3, #0
 800b102:	60fb      	str	r3, [r7, #12]
 800b104:	4b20      	ldr	r3, [pc, #128]	; (800b188 <HAL_I2C_MspInit+0x12c>)
 800b106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b108:	4a1f      	ldr	r2, [pc, #124]	; (800b188 <HAL_I2C_MspInit+0x12c>)
 800b10a:	f043 0301 	orr.w	r3, r3, #1
 800b10e:	6313      	str	r3, [r2, #48]	; 0x30
 800b110:	4b1d      	ldr	r3, [pc, #116]	; (800b188 <HAL_I2C_MspInit+0x12c>)
 800b112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b114:	f003 0301 	and.w	r3, r3, #1
 800b118:	60fb      	str	r3, [r7, #12]
 800b11a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b11c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b122:	2312      	movs	r3, #18
 800b124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b126:	2301      	movs	r3, #1
 800b128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b12a:	2303      	movs	r3, #3
 800b12c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800b12e:	2304      	movs	r3, #4
 800b130:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b132:	f107 031c 	add.w	r3, r7, #28
 800b136:	4619      	mov	r1, r3
 800b138:	4816      	ldr	r0, [pc, #88]	; (800b194 <HAL_I2C_MspInit+0x138>)
 800b13a:	f7f6 fae7 	bl	800170c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800b13e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b144:	2312      	movs	r3, #18
 800b146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b148:	2301      	movs	r3, #1
 800b14a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b14c:	2303      	movs	r3, #3
 800b14e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800b150:	2304      	movs	r3, #4
 800b152:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b154:	f107 031c 	add.w	r3, r7, #28
 800b158:	4619      	mov	r1, r3
 800b15a:	480f      	ldr	r0, [pc, #60]	; (800b198 <HAL_I2C_MspInit+0x13c>)
 800b15c:	f7f6 fad6 	bl	800170c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800b160:	2300      	movs	r3, #0
 800b162:	60bb      	str	r3, [r7, #8]
 800b164:	4b08      	ldr	r3, [pc, #32]	; (800b188 <HAL_I2C_MspInit+0x12c>)
 800b166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b168:	4a07      	ldr	r2, [pc, #28]	; (800b188 <HAL_I2C_MspInit+0x12c>)
 800b16a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b16e:	6413      	str	r3, [r2, #64]	; 0x40
 800b170:	4b05      	ldr	r3, [pc, #20]	; (800b188 <HAL_I2C_MspInit+0x12c>)
 800b172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b174:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b178:	60bb      	str	r3, [r7, #8]
 800b17a:	68bb      	ldr	r3, [r7, #8]
}
 800b17c:	bf00      	nop
 800b17e:	3730      	adds	r7, #48	; 0x30
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}
 800b184:	40005400 	.word	0x40005400
 800b188:	40023800 	.word	0x40023800
 800b18c:	40020400 	.word	0x40020400
 800b190:	40005c00 	.word	0x40005c00
 800b194:	40020800 	.word	0x40020800
 800b198:	40020000 	.word	0x40020000

0800b19c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b08a      	sub	sp, #40	; 0x28
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b1a4:	f107 0314 	add.w	r3, r7, #20
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	601a      	str	r2, [r3, #0]
 800b1ac:	605a      	str	r2, [r3, #4]
 800b1ae:	609a      	str	r2, [r3, #8]
 800b1b0:	60da      	str	r2, [r3, #12]
 800b1b2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a6b      	ldr	r2, [pc, #428]	; (800b368 <HAL_I2S_MspInit+0x1cc>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	f040 80d0 	bne.w	800b360 <HAL_I2S_MspInit+0x1c4>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	613b      	str	r3, [r7, #16]
 800b1c4:	4b69      	ldr	r3, [pc, #420]	; (800b36c <HAL_I2S_MspInit+0x1d0>)
 800b1c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c8:	4a68      	ldr	r2, [pc, #416]	; (800b36c <HAL_I2S_MspInit+0x1d0>)
 800b1ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b1ce:	6413      	str	r3, [r2, #64]	; 0x40
 800b1d0:	4b66      	ldr	r3, [pc, #408]	; (800b36c <HAL_I2S_MspInit+0x1d0>)
 800b1d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1d8:	613b      	str	r3, [r7, #16]
 800b1da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b1dc:	2300      	movs	r3, #0
 800b1de:	60fb      	str	r3, [r7, #12]
 800b1e0:	4b62      	ldr	r3, [pc, #392]	; (800b36c <HAL_I2S_MspInit+0x1d0>)
 800b1e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1e4:	4a61      	ldr	r2, [pc, #388]	; (800b36c <HAL_I2S_MspInit+0x1d0>)
 800b1e6:	f043 0304 	orr.w	r3, r3, #4
 800b1ea:	6313      	str	r3, [r2, #48]	; 0x30
 800b1ec:	4b5f      	ldr	r3, [pc, #380]	; (800b36c <HAL_I2S_MspInit+0x1d0>)
 800b1ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f0:	f003 0304 	and.w	r3, r3, #4
 800b1f4:	60fb      	str	r3, [r7, #12]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	60bb      	str	r3, [r7, #8]
 800b1fc:	4b5b      	ldr	r3, [pc, #364]	; (800b36c <HAL_I2S_MspInit+0x1d0>)
 800b1fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b200:	4a5a      	ldr	r2, [pc, #360]	; (800b36c <HAL_I2S_MspInit+0x1d0>)
 800b202:	f043 0302 	orr.w	r3, r3, #2
 800b206:	6313      	str	r3, [r2, #48]	; 0x30
 800b208:	4b58      	ldr	r3, [pc, #352]	; (800b36c <HAL_I2S_MspInit+0x1d0>)
 800b20a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b20c:	f003 0302 	and.w	r3, r3, #2
 800b210:	60bb      	str	r3, [r7, #8]
 800b212:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = I2S2_DIN_Pin;
 800b214:	2304      	movs	r3, #4
 800b216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b218:	2302      	movs	r3, #2
 800b21a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b21c:	2300      	movs	r3, #0
 800b21e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b220:	2300      	movs	r3, #0
 800b222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 800b224:	2306      	movs	r3, #6
 800b226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S2_DIN_GPIO_Port, &GPIO_InitStruct);
 800b228:	f107 0314 	add.w	r3, r7, #20
 800b22c:	4619      	mov	r1, r3
 800b22e:	4850      	ldr	r0, [pc, #320]	; (800b370 <HAL_I2S_MspInit+0x1d4>)
 800b230:	f7f6 fa6c 	bl	800170c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S2_DOUT_Pin;
 800b234:	2308      	movs	r3, #8
 800b236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b238:	2302      	movs	r3, #2
 800b23a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b23c:	2300      	movs	r3, #0
 800b23e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b240:	2300      	movs	r3, #0
 800b242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b244:	2305      	movs	r3, #5
 800b246:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S2_DOUT_GPIO_Port, &GPIO_InitStruct);
 800b248:	f107 0314 	add.w	r3, r7, #20
 800b24c:	4619      	mov	r1, r3
 800b24e:	4848      	ldr	r0, [pc, #288]	; (800b370 <HAL_I2S_MspInit+0x1d4>)
 800b250:	f7f6 fa5c 	bl	800170c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800b254:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800b258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b25a:	2302      	movs	r3, #2
 800b25c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b25e:	2300      	movs	r3, #0
 800b260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b262:	2300      	movs	r3, #0
 800b264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b266:	2305      	movs	r3, #5
 800b268:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b26a:	f107 0314 	add.w	r3, r7, #20
 800b26e:	4619      	mov	r1, r3
 800b270:	4840      	ldr	r0, [pc, #256]	; (800b374 <HAL_I2S_MspInit+0x1d8>)
 800b272:	f7f6 fa4b 	bl	800170c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 800b276:	4b40      	ldr	r3, [pc, #256]	; (800b378 <HAL_I2S_MspInit+0x1dc>)
 800b278:	4a40      	ldr	r2, [pc, #256]	; (800b37c <HAL_I2S_MspInit+0x1e0>)
 800b27a:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 800b27c:	4b3e      	ldr	r3, [pc, #248]	; (800b378 <HAL_I2S_MspInit+0x1dc>)
 800b27e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800b282:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b284:	4b3c      	ldr	r3, [pc, #240]	; (800b378 <HAL_I2S_MspInit+0x1dc>)
 800b286:	2200      	movs	r2, #0
 800b288:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b28a:	4b3b      	ldr	r3, [pc, #236]	; (800b378 <HAL_I2S_MspInit+0x1dc>)
 800b28c:	2200      	movs	r2, #0
 800b28e:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b290:	4b39      	ldr	r3, [pc, #228]	; (800b378 <HAL_I2S_MspInit+0x1dc>)
 800b292:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b296:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800b298:	4b37      	ldr	r3, [pc, #220]	; (800b378 <HAL_I2S_MspInit+0x1dc>)
 800b29a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b29e:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800b2a0:	4b35      	ldr	r3, [pc, #212]	; (800b378 <HAL_I2S_MspInit+0x1dc>)
 800b2a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b2a6:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 800b2a8:	4b33      	ldr	r3, [pc, #204]	; (800b378 <HAL_I2S_MspInit+0x1dc>)
 800b2aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b2ae:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800b2b0:	4b31      	ldr	r3, [pc, #196]	; (800b378 <HAL_I2S_MspInit+0x1dc>)
 800b2b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b2b6:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b2b8:	4b2f      	ldr	r3, [pc, #188]	; (800b378 <HAL_I2S_MspInit+0x1dc>)
 800b2ba:	2204      	movs	r2, #4
 800b2bc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2s2_ext_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800b2be:	4b2e      	ldr	r3, [pc, #184]	; (800b378 <HAL_I2S_MspInit+0x1dc>)
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2s2_ext_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800b2c4:	4b2c      	ldr	r3, [pc, #176]	; (800b378 <HAL_I2S_MspInit+0x1dc>)
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2s2_ext_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800b2ca:	4b2b      	ldr	r3, [pc, #172]	; (800b378 <HAL_I2S_MspInit+0x1dc>)
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 800b2d0:	4829      	ldr	r0, [pc, #164]	; (800b378 <HAL_I2S_MspInit+0x1dc>)
 800b2d2:	f7f5 feab 	bl	800102c <HAL_DMA_Init>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d001      	beq.n	800b2e0 <HAL_I2S_MspInit+0x144>
    {
      Error_Handler();
 800b2dc:	f7ff fad4 	bl	800a888 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a25      	ldr	r2, [pc, #148]	; (800b378 <HAL_I2S_MspInit+0x1dc>)
 800b2e4:	63da      	str	r2, [r3, #60]	; 0x3c
 800b2e6:	4a24      	ldr	r2, [pc, #144]	; (800b378 <HAL_I2S_MspInit+0x1dc>)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800b2ec:	4b24      	ldr	r3, [pc, #144]	; (800b380 <HAL_I2S_MspInit+0x1e4>)
 800b2ee:	4a25      	ldr	r2, [pc, #148]	; (800b384 <HAL_I2S_MspInit+0x1e8>)
 800b2f0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800b2f2:	4b23      	ldr	r3, [pc, #140]	; (800b380 <HAL_I2S_MspInit+0x1e4>)
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b2f8:	4b21      	ldr	r3, [pc, #132]	; (800b380 <HAL_I2S_MspInit+0x1e4>)
 800b2fa:	2240      	movs	r2, #64	; 0x40
 800b2fc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b2fe:	4b20      	ldr	r3, [pc, #128]	; (800b380 <HAL_I2S_MspInit+0x1e4>)
 800b300:	2200      	movs	r2, #0
 800b302:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b304:	4b1e      	ldr	r3, [pc, #120]	; (800b380 <HAL_I2S_MspInit+0x1e4>)
 800b306:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b30a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800b30c:	4b1c      	ldr	r3, [pc, #112]	; (800b380 <HAL_I2S_MspInit+0x1e4>)
 800b30e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b312:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800b314:	4b1a      	ldr	r3, [pc, #104]	; (800b380 <HAL_I2S_MspInit+0x1e4>)
 800b316:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b31a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800b31c:	4b18      	ldr	r3, [pc, #96]	; (800b380 <HAL_I2S_MspInit+0x1e4>)
 800b31e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b322:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800b324:	4b16      	ldr	r3, [pc, #88]	; (800b380 <HAL_I2S_MspInit+0x1e4>)
 800b326:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b32a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b32c:	4b14      	ldr	r3, [pc, #80]	; (800b380 <HAL_I2S_MspInit+0x1e4>)
 800b32e:	2204      	movs	r2, #4
 800b330:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800b332:	4b13      	ldr	r3, [pc, #76]	; (800b380 <HAL_I2S_MspInit+0x1e4>)
 800b334:	2201      	movs	r2, #1
 800b336:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800b338:	4b11      	ldr	r3, [pc, #68]	; (800b380 <HAL_I2S_MspInit+0x1e4>)
 800b33a:	2200      	movs	r2, #0
 800b33c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800b33e:	4b10      	ldr	r3, [pc, #64]	; (800b380 <HAL_I2S_MspInit+0x1e4>)
 800b340:	2200      	movs	r2, #0
 800b342:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800b344:	480e      	ldr	r0, [pc, #56]	; (800b380 <HAL_I2S_MspInit+0x1e4>)
 800b346:	f7f5 fe71 	bl	800102c <HAL_DMA_Init>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d001      	beq.n	800b354 <HAL_I2S_MspInit+0x1b8>
    {
      Error_Handler();
 800b350:	f7ff fa9a 	bl	800a888 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a0a      	ldr	r2, [pc, #40]	; (800b380 <HAL_I2S_MspInit+0x1e4>)
 800b358:	639a      	str	r2, [r3, #56]	; 0x38
 800b35a:	4a09      	ldr	r2, [pc, #36]	; (800b380 <HAL_I2S_MspInit+0x1e4>)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800b360:	bf00      	nop
 800b362:	3728      	adds	r7, #40	; 0x28
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	40003800 	.word	0x40003800
 800b36c:	40023800 	.word	0x40023800
 800b370:	40020800 	.word	0x40020800
 800b374:	40020400 	.word	0x40020400
 800b378:	20001990 	.word	0x20001990
 800b37c:	40026058 	.word	0x40026058
 800b380:	200019f0 	.word	0x200019f0
 800b384:	40026070 	.word	0x40026070

0800b388 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a0e      	ldr	r2, [pc, #56]	; (800b3d0 <HAL_RNG_MspInit+0x48>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d115      	bne.n	800b3c6 <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800b39a:	2300      	movs	r3, #0
 800b39c:	60fb      	str	r3, [r7, #12]
 800b39e:	4b0d      	ldr	r3, [pc, #52]	; (800b3d4 <HAL_RNG_MspInit+0x4c>)
 800b3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a2:	4a0c      	ldr	r2, [pc, #48]	; (800b3d4 <HAL_RNG_MspInit+0x4c>)
 800b3a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3a8:	6353      	str	r3, [r2, #52]	; 0x34
 800b3aa:	4b0a      	ldr	r3, [pc, #40]	; (800b3d4 <HAL_RNG_MspInit+0x4c>)
 800b3ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3b2:	60fb      	str	r3, [r7, #12]
 800b3b4:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 0, 0);
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	2050      	movs	r0, #80	; 0x50
 800b3bc:	f7f5 fdff 	bl	8000fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 800b3c0:	2050      	movs	r0, #80	; 0x50
 800b3c2:	f7f5 fe18 	bl	8000ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800b3c6:	bf00      	nop
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	50060800 	.word	0x50060800
 800b3d4:	40023800 	.word	0x40023800

0800b3d8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b08c      	sub	sp, #48	; 0x30
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3e0:	f107 031c 	add.w	r3, r7, #28
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	601a      	str	r2, [r3, #0]
 800b3e8:	605a      	str	r2, [r3, #4]
 800b3ea:	609a      	str	r2, [r3, #8]
 800b3ec:	60da      	str	r2, [r3, #12]
 800b3ee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4a32      	ldr	r2, [pc, #200]	; (800b4c0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d12c      	bne.n	800b454 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	61bb      	str	r3, [r7, #24]
 800b3fe:	4b31      	ldr	r3, [pc, #196]	; (800b4c4 <HAL_TIM_Encoder_MspInit+0xec>)
 800b400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b402:	4a30      	ldr	r2, [pc, #192]	; (800b4c4 <HAL_TIM_Encoder_MspInit+0xec>)
 800b404:	f043 0302 	orr.w	r3, r3, #2
 800b408:	6413      	str	r3, [r2, #64]	; 0x40
 800b40a:	4b2e      	ldr	r3, [pc, #184]	; (800b4c4 <HAL_TIM_Encoder_MspInit+0xec>)
 800b40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b40e:	f003 0302 	and.w	r3, r3, #2
 800b412:	61bb      	str	r3, [r7, #24]
 800b414:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b416:	2300      	movs	r3, #0
 800b418:	617b      	str	r3, [r7, #20]
 800b41a:	4b2a      	ldr	r3, [pc, #168]	; (800b4c4 <HAL_TIM_Encoder_MspInit+0xec>)
 800b41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b41e:	4a29      	ldr	r2, [pc, #164]	; (800b4c4 <HAL_TIM_Encoder_MspInit+0xec>)
 800b420:	f043 0302 	orr.w	r3, r3, #2
 800b424:	6313      	str	r3, [r2, #48]	; 0x30
 800b426:	4b27      	ldr	r3, [pc, #156]	; (800b4c4 <HAL_TIM_Encoder_MspInit+0xec>)
 800b428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b42a:	f003 0302 	and.w	r3, r3, #2
 800b42e:	617b      	str	r3, [r7, #20]
 800b430:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC2_B_Pin|ENC2_A_Pin;
 800b432:	2330      	movs	r3, #48	; 0x30
 800b434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b436:	2302      	movs	r3, #2
 800b438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b43a:	2300      	movs	r3, #0
 800b43c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b43e:	2300      	movs	r3, #0
 800b440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b442:	2302      	movs	r3, #2
 800b444:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b446:	f107 031c 	add.w	r3, r7, #28
 800b44a:	4619      	mov	r1, r3
 800b44c:	481e      	ldr	r0, [pc, #120]	; (800b4c8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800b44e:	f7f6 f95d 	bl	800170c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800b452:	e030      	b.n	800b4b6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4a1c      	ldr	r2, [pc, #112]	; (800b4cc <HAL_TIM_Encoder_MspInit+0xf4>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d12b      	bne.n	800b4b6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b45e:	2300      	movs	r3, #0
 800b460:	613b      	str	r3, [r7, #16]
 800b462:	4b18      	ldr	r3, [pc, #96]	; (800b4c4 <HAL_TIM_Encoder_MspInit+0xec>)
 800b464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b466:	4a17      	ldr	r2, [pc, #92]	; (800b4c4 <HAL_TIM_Encoder_MspInit+0xec>)
 800b468:	f043 0304 	orr.w	r3, r3, #4
 800b46c:	6413      	str	r3, [r2, #64]	; 0x40
 800b46e:	4b15      	ldr	r3, [pc, #84]	; (800b4c4 <HAL_TIM_Encoder_MspInit+0xec>)
 800b470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b472:	f003 0304 	and.w	r3, r3, #4
 800b476:	613b      	str	r3, [r7, #16]
 800b478:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b47a:	2300      	movs	r3, #0
 800b47c:	60fb      	str	r3, [r7, #12]
 800b47e:	4b11      	ldr	r3, [pc, #68]	; (800b4c4 <HAL_TIM_Encoder_MspInit+0xec>)
 800b480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b482:	4a10      	ldr	r2, [pc, #64]	; (800b4c4 <HAL_TIM_Encoder_MspInit+0xec>)
 800b484:	f043 0302 	orr.w	r3, r3, #2
 800b488:	6313      	str	r3, [r2, #48]	; 0x30
 800b48a:	4b0e      	ldr	r3, [pc, #56]	; (800b4c4 <HAL_TIM_Encoder_MspInit+0xec>)
 800b48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b48e:	f003 0302 	and.w	r3, r3, #2
 800b492:	60fb      	str	r3, [r7, #12]
 800b494:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin;
 800b496:	23c0      	movs	r3, #192	; 0xc0
 800b498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b49a:	2302      	movs	r3, #2
 800b49c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800b4a6:	2302      	movs	r3, #2
 800b4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b4aa:	f107 031c 	add.w	r3, r7, #28
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	4805      	ldr	r0, [pc, #20]	; (800b4c8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800b4b2:	f7f6 f92b 	bl	800170c <HAL_GPIO_Init>
}
 800b4b6:	bf00      	nop
 800b4b8:	3730      	adds	r7, #48	; 0x30
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	40000400 	.word	0x40000400
 800b4c4:	40023800 	.word	0x40023800
 800b4c8:	40020400 	.word	0x40020400
 800b4cc:	40000800 	.word	0x40000800

0800b4d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b08a      	sub	sp, #40	; 0x28
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4d8:	f107 0314 	add.w	r3, r7, #20
 800b4dc:	2200      	movs	r2, #0
 800b4de:	601a      	str	r2, [r3, #0]
 800b4e0:	605a      	str	r2, [r3, #4]
 800b4e2:	609a      	str	r2, [r3, #8]
 800b4e4:	60da      	str	r2, [r3, #12]
 800b4e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a19      	ldr	r2, [pc, #100]	; (800b554 <HAL_UART_MspInit+0x84>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d12c      	bne.n	800b54c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	613b      	str	r3, [r7, #16]
 800b4f6:	4b18      	ldr	r3, [pc, #96]	; (800b558 <HAL_UART_MspInit+0x88>)
 800b4f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4fa:	4a17      	ldr	r2, [pc, #92]	; (800b558 <HAL_UART_MspInit+0x88>)
 800b4fc:	f043 0310 	orr.w	r3, r3, #16
 800b500:	6453      	str	r3, [r2, #68]	; 0x44
 800b502:	4b15      	ldr	r3, [pc, #84]	; (800b558 <HAL_UART_MspInit+0x88>)
 800b504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b506:	f003 0310 	and.w	r3, r3, #16
 800b50a:	613b      	str	r3, [r7, #16]
 800b50c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b50e:	2300      	movs	r3, #0
 800b510:	60fb      	str	r3, [r7, #12]
 800b512:	4b11      	ldr	r3, [pc, #68]	; (800b558 <HAL_UART_MspInit+0x88>)
 800b514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b516:	4a10      	ldr	r2, [pc, #64]	; (800b558 <HAL_UART_MspInit+0x88>)
 800b518:	f043 0301 	orr.w	r3, r3, #1
 800b51c:	6313      	str	r3, [r2, #48]	; 0x30
 800b51e:	4b0e      	ldr	r3, [pc, #56]	; (800b558 <HAL_UART_MspInit+0x88>)
 800b520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b522:	f003 0301 	and.w	r3, r3, #1
 800b526:	60fb      	str	r3, [r7, #12]
 800b528:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800b52a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b52e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b530:	2302      	movs	r3, #2
 800b532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b534:	2300      	movs	r3, #0
 800b536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b538:	2303      	movs	r3, #3
 800b53a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b53c:	2307      	movs	r3, #7
 800b53e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b540:	f107 0314 	add.w	r3, r7, #20
 800b544:	4619      	mov	r1, r3
 800b546:	4805      	ldr	r0, [pc, #20]	; (800b55c <HAL_UART_MspInit+0x8c>)
 800b548:	f7f6 f8e0 	bl	800170c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b54c:	bf00      	nop
 800b54e:	3728      	adds	r7, #40	; 0x28
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	40011000 	.word	0x40011000
 800b558:	40023800 	.word	0x40023800
 800b55c:	40020000 	.word	0x40020000

0800b560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b560:	b480      	push	{r7}
 800b562:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b564:	bf00      	nop
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b56e:	b480      	push	{r7}
 800b570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b572:	e7fe      	b.n	800b572 <HardFault_Handler+0x4>

0800b574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b574:	b480      	push	{r7}
 800b576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b578:	e7fe      	b.n	800b578 <MemManage_Handler+0x4>

0800b57a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b57a:	b480      	push	{r7}
 800b57c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b57e:	e7fe      	b.n	800b57e <BusFault_Handler+0x4>

0800b580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b580:	b480      	push	{r7}
 800b582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b584:	e7fe      	b.n	800b584 <UsageFault_Handler+0x4>

0800b586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b586:	b480      	push	{r7}
 800b588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b58a:	bf00      	nop
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b594:	b480      	push	{r7}
 800b596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b598:	bf00      	nop
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr

0800b5a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b5a2:	b480      	push	{r7}
 800b5a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b5a6:	bf00      	nop
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b5b4:	f7f5 f84a 	bl	800064c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b5b8:	bf00      	nop
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	// SW1 = right PA0 EXTI0
	btnRightPressed++;
 800b5c0:	4b05      	ldr	r3, [pc, #20]	; (800b5d8 <EXTI0_IRQHandler+0x1c>)
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	b2da      	uxtb	r2, r3
 800b5ca:	4b03      	ldr	r3, [pc, #12]	; (800b5d8 <EXTI0_IRQHandler+0x1c>)
 800b5cc:	701a      	strb	r2, [r3, #0]
	// @TODO positive negative edge event

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800b5ce:	2001      	movs	r0, #1
 800b5d0:	f7f6 fa4a 	bl	8001a68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800b5d4:	bf00      	nop
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	20000359 	.word	0x20000359

0800b5dc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	// SW2 = left  PA1 EXTI1
	btnLeftPressed++;
 800b5e0:	4b05      	ldr	r3, [pc, #20]	; (800b5f8 <EXTI1_IRQHandler+0x1c>)
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	b2da      	uxtb	r2, r3
 800b5ea:	4b03      	ldr	r3, [pc, #12]	; (800b5f8 <EXTI1_IRQHandler+0x1c>)
 800b5ec:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800b5ee:	2002      	movs	r0, #2
 800b5f0:	f7f6 fa3a 	bl	8001a68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800b5f4:	bf00      	nop
 800b5f6:	bd80      	pop	{r7, pc}
 800b5f8:	20000358 	.word	0x20000358

0800b5fc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */
	/* DMA STREAM 3 is I2S2 RX complete */
	dmaTransferComplete++;
 800b600:	4b19      	ldr	r3, [pc, #100]	; (800b668 <DMA1_Stream3_IRQHandler+0x6c>)
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	b2db      	uxtb	r3, r3
 800b606:	3301      	adds	r3, #1
 800b608:	b2da      	uxtb	r2, r3
 800b60a:	4b17      	ldr	r3, [pc, #92]	; (800b668 <DMA1_Stream3_IRQHandler+0x6c>)
 800b60c:	701a      	strb	r2, [r3, #0]
	// HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 800b60e:	4817      	ldr	r0, [pc, #92]	; (800b66c <DMA1_Stream3_IRQHandler+0x70>)
 800b610:	f7f5 fe12 	bl	8001238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */
	// arm_fir_f32() is called in this function
	switch (*input_source) {
 800b614:	4b16      	ldr	r3, [pc, #88]	; (800b670 <DMA1_Stream3_IRQHandler+0x74>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	2b03      	cmp	r3, #3
 800b61c:	d103      	bne.n	800b626 <DMA1_Stream3_IRQHandler+0x2a>
	case 3:
		pAUDIO_src = &USB_buffer[0];
 800b61e:	4b15      	ldr	r3, [pc, #84]	; (800b674 <DMA1_Stream3_IRQHandler+0x78>)
 800b620:	4a15      	ldr	r2, [pc, #84]	; (800b678 <DMA1_Stream3_IRQHandler+0x7c>)
 800b622:	601a      	str	r2, [r3, #0]
		break;
 800b624:	e007      	b.n	800b636 <DMA1_Stream3_IRQHandler+0x3a>
	default:
		pAUDIO_src = &pRxData[0] + buffer_offset;
 800b626:	4b15      	ldr	r3, [pc, #84]	; (800b67c <DMA1_Stream3_IRQHandler+0x80>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	005b      	lsls	r3, r3, #1
 800b62c:	4a14      	ldr	r2, [pc, #80]	; (800b680 <DMA1_Stream3_IRQHandler+0x84>)
 800b62e:	4413      	add	r3, r2
 800b630:	4a10      	ldr	r2, [pc, #64]	; (800b674 <DMA1_Stream3_IRQHandler+0x78>)
 800b632:	6013      	str	r3, [r2, #0]
		break;
 800b634:	bf00      	nop
	}

	DSP_Process_Data(pAUDIO_src, (pTxData + buffer_offset));
 800b636:	4b0f      	ldr	r3, [pc, #60]	; (800b674 <DMA1_Stream3_IRQHandler+0x78>)
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	4b10      	ldr	r3, [pc, #64]	; (800b67c <DMA1_Stream3_IRQHandler+0x80>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	005b      	lsls	r3, r3, #1
 800b640:	4910      	ldr	r1, [pc, #64]	; (800b684 <DMA1_Stream3_IRQHandler+0x88>)
 800b642:	440b      	add	r3, r1
 800b644:	4619      	mov	r1, r3
 800b646:	4610      	mov	r0, r2
 800b648:	f7fd febe 	bl	80093c8 <DSP_Process_Data>
	if (!buffer_offset)
 800b64c:	4b0b      	ldr	r3, [pc, #44]	; (800b67c <DMA1_Stream3_IRQHandler+0x80>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d103      	bne.n	800b65c <DMA1_Stream3_IRQHandler+0x60>
		buffer_offset = DSP_BUFFERSIZE;
 800b654:	4b09      	ldr	r3, [pc, #36]	; (800b67c <DMA1_Stream3_IRQHandler+0x80>)
 800b656:	2260      	movs	r2, #96	; 0x60
 800b658:	601a      	str	r2, [r3, #0]
	else
		buffer_offset = 0;
	// HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800b65a:	e002      	b.n	800b662 <DMA1_Stream3_IRQHandler+0x66>
		buffer_offset = 0;
 800b65c:	4b07      	ldr	r3, [pc, #28]	; (800b67c <DMA1_Stream3_IRQHandler+0x80>)
 800b65e:	2200      	movs	r2, #0
 800b660:	601a      	str	r2, [r3, #0]
}
 800b662:	bf00      	nop
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	2000035c 	.word	0x2000035c
 800b66c:	20001990 	.word	0x20001990
 800b670:	20000788 	.word	0x20000788
 800b674:	20001c20 	.word	0x20001c20
 800b678:	20001c24 	.word	0x20001c24
 800b67c:	20000774 	.word	0x20000774
 800b680:	20001790 	.word	0x20001790
 800b684:	20001a50 	.word	0x20001a50

0800b688 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */
	/* DMA STREAM 4 is SPI2 TX complete */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800b68c:	4802      	ldr	r0, [pc, #8]	; (800b698 <DMA1_Stream4_IRQHandler+0x10>)
 800b68e:	f7f5 fdd3 	bl	8001238 <HAL_DMA_IRQHandler>

	/* DMA Buffer is HALF full */
	/* use first half for Processing */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800b692:	bf00      	nop
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	200019f0 	.word	0x200019f0

0800b69c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	af00      	add	r7, sp, #0

	// ROT1 - right - PC12 - EXTI12
	// ROT2 - left  - PB13 - EXTI13
	// DTC_LIN - PC14 - EXTI14
	// DTC_MIC - PC15 - EXTI15
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_12)) {
 800b6a0:	4b1b      	ldr	r3, [pc, #108]	; (800b710 <EXTI15_10_IRQHandler+0x74>)
 800b6a2:	695b      	ldr	r3, [r3, #20]
 800b6a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00e      	beq.n	800b6ca <EXTI15_10_IRQHandler+0x2e>
		/**
		 * @bug Turning the encoder (TIM4) also issues an EXTI_12 Interrupt
		 *      hacky fix: check if Button is actually pressed
		 */
		if (HAL_GPIO_ReadPin(BTN_ENC1_GPIO_Port, BTN_ENC1_Pin) == GPIO_PIN_SET)
 800b6ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b6b0:	4818      	ldr	r0, [pc, #96]	; (800b714 <EXTI15_10_IRQHandler+0x78>)
 800b6b2:	f7f6 f9a7 	bl	8001a04 <HAL_GPIO_ReadPin>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d106      	bne.n	800b6ca <EXTI15_10_IRQHandler+0x2e>
			encRightPressed++;
 800b6bc:	4b16      	ldr	r3, [pc, #88]	; (800b718 <EXTI15_10_IRQHandler+0x7c>)
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	b2da      	uxtb	r2, r3
 800b6c6:	4b14      	ldr	r3, [pc, #80]	; (800b718 <EXTI15_10_IRQHandler+0x7c>)
 800b6c8:	701a      	strb	r2, [r3, #0]
	}
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)) {
 800b6ca:	4b11      	ldr	r3, [pc, #68]	; (800b710 <EXTI15_10_IRQHandler+0x74>)
 800b6cc:	695b      	ldr	r3, [r3, #20]
 800b6ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d006      	beq.n	800b6e4 <EXTI15_10_IRQHandler+0x48>
		encLeftPressed++;
 800b6d6:	4b11      	ldr	r3, [pc, #68]	; (800b71c <EXTI15_10_IRQHandler+0x80>)
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	3301      	adds	r3, #1
 800b6de:	b2da      	uxtb	r2, r3
 800b6e0:	4b0e      	ldr	r3, [pc, #56]	; (800b71c <EXTI15_10_IRQHandler+0x80>)
 800b6e2:	701a      	strb	r2, [r3, #0]
	}
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14)) {
 800b6e4:	4b0a      	ldr	r3, [pc, #40]	; (800b710 <EXTI15_10_IRQHandler+0x74>)
 800b6e6:	695b      	ldr	r3, [r3, #20]
		/* LINE IN Detect : rising/falling edge = connected/disconnected */
	}
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15)) {
 800b6e8:	4b09      	ldr	r3, [pc, #36]	; (800b710 <EXTI15_10_IRQHandler+0x74>)
 800b6ea:	695b      	ldr	r3, [r3, #20]
		/* MIC IN Detect : rising/falling edge = connected/disconnected */
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800b6ec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b6f0:	f7f6 f9ba 	bl	8001a68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800b6f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b6f8:	f7f6 f9b6 	bl	8001a68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800b6fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b700:	f7f6 f9b2 	bl	8001a68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800b704:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b708:	f7f6 f9ae 	bl	8001a68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800b70c:	bf00      	nop
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	40013c00 	.word	0x40013c00
 800b714:	40020800 	.word	0x40020800
 800b718:	2000035b 	.word	0x2000035b
 800b71c:	2000035a 	.word	0x2000035a

0800b720 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b724:	4807      	ldr	r0, [pc, #28]	; (800b744 <OTG_FS_IRQHandler+0x24>)
 800b726:	f7f7 fea6 	bl	8003476 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */
	HAL_PCD_EP_Receive(&hpcd_USB_OTG_FS, hpcd_USB_OTG_FS.OUT_ep[1].num,
 800b72a:	4b06      	ldr	r3, [pc, #24]	; (800b744 <OTG_FS_IRQHandler+0x24>)
 800b72c:	f893 1218 	ldrb.w	r1, [r3, #536]	; 0x218
 800b730:	4b04      	ldr	r3, [pc, #16]	; (800b744 <OTG_FS_IRQHandler+0x24>)
 800b732:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800b736:	4a04      	ldr	r2, [pc, #16]	; (800b748 <OTG_FS_IRQHandler+0x28>)
 800b738:	4802      	ldr	r0, [pc, #8]	; (800b744 <OTG_FS_IRQHandler+0x24>)
 800b73a:	f7f8 fb52 	bl	8003de2 <HAL_PCD_EP_Receive>
			&(USB_buffer[0]), hpcd_USB_OTG_FS.OUT_ep[1].xfer_len);
//	HAL_PCD_EP_Transmit(&hpcd_USB_OTG_FS, 1, USB_buffer,
//			hpcd_USB_OTG_FS.IN_ep[1].xfer_len);
  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b73e:	bf00      	nop
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	20001fb8 	.word	0x20001fb8
 800b748:	20001c24 	.word	0x20001c24

0800b74c <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 800b750:	4802      	ldr	r0, [pc, #8]	; (800b75c <RNG_IRQHandler+0x10>)
 800b752:	f7f9 ff65 	bl	8005620 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 800b756:	bf00      	nop
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	20001910 	.word	0x20001910

0800b760 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b086      	sub	sp, #24
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b76c:	2300      	movs	r3, #0
 800b76e:	617b      	str	r3, [r7, #20]
 800b770:	e00a      	b.n	800b788 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b772:	f3af 8000 	nop.w
 800b776:	4601      	mov	r1, r0
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	1c5a      	adds	r2, r3, #1
 800b77c:	60ba      	str	r2, [r7, #8]
 800b77e:	b2ca      	uxtb	r2, r1
 800b780:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	3301      	adds	r3, #1
 800b786:	617b      	str	r3, [r7, #20]
 800b788:	697a      	ldr	r2, [r7, #20]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	dbf0      	blt.n	800b772 <_read+0x12>
	}

return len;
 800b790:	687b      	ldr	r3, [r7, #4]
}
 800b792:	4618      	mov	r0, r3
 800b794:	3718      	adds	r7, #24
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b086      	sub	sp, #24
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	60f8      	str	r0, [r7, #12]
 800b7a2:	60b9      	str	r1, [r7, #8]
 800b7a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	617b      	str	r3, [r7, #20]
 800b7aa:	e009      	b.n	800b7c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	1c5a      	adds	r2, r3, #1
 800b7b0:	60ba      	str	r2, [r7, #8]
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	3301      	adds	r3, #1
 800b7be:	617b      	str	r3, [r7, #20]
 800b7c0:	697a      	ldr	r2, [r7, #20]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	dbf1      	blt.n	800b7ac <_write+0x12>
	}
	return len;
 800b7c8:	687b      	ldr	r3, [r7, #4]
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3718      	adds	r7, #24
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}

0800b7d2 <_close>:

int _close(int file)
{
 800b7d2:	b480      	push	{r7}
 800b7d4:	b083      	sub	sp, #12
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
	return -1;
 800b7da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	370c      	adds	r7, #12
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr

0800b7ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b7ea:	b480      	push	{r7}
 800b7ec:	b083      	sub	sp, #12
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
 800b7f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b7fa:	605a      	str	r2, [r3, #4]
	return 0;
 800b7fc:	2300      	movs	r3, #0
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	370c      	adds	r7, #12
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr

0800b80a <_isatty>:

int _isatty(int file)
{
 800b80a:	b480      	push	{r7}
 800b80c:	b083      	sub	sp, #12
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
	return 1;
 800b812:	2301      	movs	r3, #1
}
 800b814:	4618      	mov	r0, r3
 800b816:	370c      	adds	r7, #12
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b820:	b480      	push	{r7}
 800b822:	b085      	sub	sp, #20
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]
	return 0;
 800b82c:	2300      	movs	r3, #0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3714      	adds	r7, #20
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr
	...

0800b83c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b086      	sub	sp, #24
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b844:	4a14      	ldr	r2, [pc, #80]	; (800b898 <_sbrk+0x5c>)
 800b846:	4b15      	ldr	r3, [pc, #84]	; (800b89c <_sbrk+0x60>)
 800b848:	1ad3      	subs	r3, r2, r3
 800b84a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b850:	4b13      	ldr	r3, [pc, #76]	; (800b8a0 <_sbrk+0x64>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d102      	bne.n	800b85e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b858:	4b11      	ldr	r3, [pc, #68]	; (800b8a0 <_sbrk+0x64>)
 800b85a:	4a12      	ldr	r2, [pc, #72]	; (800b8a4 <_sbrk+0x68>)
 800b85c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b85e:	4b10      	ldr	r3, [pc, #64]	; (800b8a0 <_sbrk+0x64>)
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4413      	add	r3, r2
 800b866:	693a      	ldr	r2, [r7, #16]
 800b868:	429a      	cmp	r2, r3
 800b86a:	d207      	bcs.n	800b87c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b86c:	f000 fe30 	bl	800c4d0 <__errno>
 800b870:	4603      	mov	r3, r0
 800b872:	220c      	movs	r2, #12
 800b874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b87a:	e009      	b.n	800b890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b87c:	4b08      	ldr	r3, [pc, #32]	; (800b8a0 <_sbrk+0x64>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b882:	4b07      	ldr	r3, [pc, #28]	; (800b8a0 <_sbrk+0x64>)
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	4413      	add	r3, r2
 800b88a:	4a05      	ldr	r2, [pc, #20]	; (800b8a0 <_sbrk+0x64>)
 800b88c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b88e:	68fb      	ldr	r3, [r7, #12]
}
 800b890:	4618      	mov	r0, r3
 800b892:	3718      	adds	r7, #24
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	20040000 	.word	0x20040000
 800b89c:	00000400 	.word	0x00000400
 800b8a0:	20000778 	.word	0x20000778
 800b8a4:	200025d0 	.word	0x200025d0

0800b8a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b8ac:	4b08      	ldr	r3, [pc, #32]	; (800b8d0 <SystemInit+0x28>)
 800b8ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8b2:	4a07      	ldr	r2, [pc, #28]	; (800b8d0 <SystemInit+0x28>)
 800b8b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b8b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b8bc:	4b04      	ldr	r3, [pc, #16]	; (800b8d0 <SystemInit+0x28>)
 800b8be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b8c2:	609a      	str	r2, [r3, #8]
#endif
}
 800b8c4:	bf00      	nop
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr
 800b8ce:	bf00      	nop
 800b8d0:	e000ed00 	.word	0xe000ed00

0800b8d4 <_tlv320_write8>:
 * @param reg   is a register address, the makros defined in <em>tlv320aic.h</em> 
 *              should be used.
 * @param data  is a one byte value depending on the expected inputs of the register.
 */
void _tlv320_write8(uint8_t reg, uint16_t data)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b088      	sub	sp, #32
 800b8d8:	af04      	add	r7, sp, #16
 800b8da:	4603      	mov	r3, r0
 800b8dc:	460a      	mov	r2, r1
 800b8de:	71fb      	strb	r3, [r7, #7]
 800b8e0:	4613      	mov	r3, r2
 800b8e2:	80bb      	strh	r3, [r7, #4]
    //  .   [ 7 6 5 4 3 2 1 0 ] [ 6 5 4 3 2 1 0 8 ] [ 7 6 5 4 3 2 1 0]
    // register address = 7 bit
    // register data    = 9 bits

    // stuff the output buffer
    reg = ((reg << 1)&0xFE) | ((data >> 8)&0x01);  // append data MSB to reg
 800b8e4:	79fb      	ldrb	r3, [r7, #7]
 800b8e6:	005b      	lsls	r3, r3, #1
 800b8e8:	b25a      	sxtb	r2, r3
 800b8ea:	88bb      	ldrh	r3, [r7, #4]
 800b8ec:	0a1b      	lsrs	r3, r3, #8
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	b25b      	sxtb	r3, r3
 800b8f2:	f003 0301 	and.w	r3, r3, #1
 800b8f6:	b25b      	sxtb	r3, r3
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	b25b      	sxtb	r3, r3
 800b8fc:	71fb      	strb	r3, [r7, #7]
    uint8_t val = data % 0xFF;
 800b8fe:	88ba      	ldrh	r2, [r7, #4]
 800b900:	4b0e      	ldr	r3, [pc, #56]	; (800b93c <_tlv320_write8+0x68>)
 800b902:	fba3 1302 	umull	r1, r3, r3, r2
 800b906:	09d9      	lsrs	r1, r3, #7
 800b908:	460b      	mov	r3, r1
 800b90a:	021b      	lsls	r3, r3, #8
 800b90c:	1a5b      	subs	r3, r3, r1
 800b90e:	1ad3      	subs	r3, r2, r3
 800b910:	b29b      	uxth	r3, r3
 800b912:	b2db      	uxtb	r3, r3
 800b914:	73fb      	strb	r3, [r7, #15]

    // Send it
    // i2c_write(wdata, 3);
    HAL_I2C_Mem_Write(hi2cCODEC, TLV320_ADDR, reg, 1, &val, 1, 10);
 800b916:	4b0a      	ldr	r3, [pc, #40]	; (800b940 <_tlv320_write8+0x6c>)
 800b918:	6818      	ldr	r0, [r3, #0]
 800b91a:	79fb      	ldrb	r3, [r7, #7]
 800b91c:	b29a      	uxth	r2, r3
 800b91e:	230a      	movs	r3, #10
 800b920:	9302      	str	r3, [sp, #8]
 800b922:	2301      	movs	r3, #1
 800b924:	9301      	str	r3, [sp, #4]
 800b926:	f107 030f 	add.w	r3, r7, #15
 800b92a:	9300      	str	r3, [sp, #0]
 800b92c:	2301      	movs	r3, #1
 800b92e:	2134      	movs	r1, #52	; 0x34
 800b930:	f7f6 f9f6 	bl	8001d20 <HAL_I2C_Mem_Write>
}
 800b934:	bf00      	nop
 800b936:	3710      	adds	r7, #16
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	80808081 	.word	0x80808081
 800b940:	20001ce4 	.word	0x20001ce4

0800b944 <TLV320_Init>:
/**************************************************************************
 * Initiation
 ***************************************************************************/

void TLV320_Init(I2C_HandleTypeDef *hi2c)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
	  hi2cCODEC = hi2c;
 800b94c:	4a10      	ldr	r2, [pc, #64]	; (800b990 <TLV320_Init+0x4c>)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6013      	str	r3, [r2, #0]
    uint8_t i;
    // Reset
    TLV320_Reset();
 800b952:	f000 f880 	bl	800ba56 <TLV320_Reset>
    HAL_Delay(10);
 800b956:	200a      	movs	r0, #10
 800b958:	f7f4 fe98 	bl	800068c <HAL_Delay>
    // Configure registers
    for (i = 0; i < TLV320_NUM_REGS; i++)
 800b95c:	2300      	movs	r3, #0
 800b95e:	73fb      	strb	r3, [r7, #15]
 800b960:	e00b      	b.n	800b97a <TLV320_Init+0x36>
    {
        _tlv320_write8(i, TLV320_init_data[i]);
 800b962:	7bfb      	ldrb	r3, [r7, #15]
 800b964:	4a0b      	ldr	r2, [pc, #44]	; (800b994 <TLV320_Init+0x50>)
 800b966:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800b96a:	7bfb      	ldrb	r3, [r7, #15]
 800b96c:	4611      	mov	r1, r2
 800b96e:	4618      	mov	r0, r3
 800b970:	f7ff ffb0 	bl	800b8d4 <_tlv320_write8>
    for (i = 0; i < TLV320_NUM_REGS; i++)
 800b974:	7bfb      	ldrb	r3, [r7, #15]
 800b976:	3301      	adds	r3, #1
 800b978:	73fb      	strb	r3, [r7, #15]
 800b97a:	7bfb      	ldrb	r3, [r7, #15]
 800b97c:	2b09      	cmp	r3, #9
 800b97e:	d9f0      	bls.n	800b962 <TLV320_Init+0x1e>
    }
    TLV320_SetInput(LINE);
 800b980:	2000      	movs	r0, #0
 800b982:	f000 f809 	bl	800b998 <TLV320_SetInput>
}
 800b986:	bf00      	nop
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	20001ce4 	.word	0x20001ce4
 800b994:	0800eef4 	.word	0x0800eef4

0800b998 <TLV320_SetInput>:
    }

}

void TLV320_SetInput(input_t in)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	4603      	mov	r3, r0
 800b9a0:	71fb      	strb	r3, [r7, #7]
    switch (in)
 800b9a2:	79fb      	ldrb	r3, [r7, #7]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d104      	bne.n	800b9b2 <TLV320_SetInput+0x1a>
    {
    case LINE:
        // Reg 04: Analog Audio Path Control (DAC sel, Mute Mic)
        _tlv320_write8(TLV320_ANALOG_AUDIO_PATH_REG, 0x012);
 800b9a8:	2112      	movs	r1, #18
 800b9aa:	2004      	movs	r0, #4
 800b9ac:	f7ff ff92 	bl	800b8d4 <_tlv320_write8>
        break;
 800b9b0:	e004      	b.n	800b9bc <TLV320_SetInput+0x24>

    case MIC:
    default:
        // Reg 04: Analog Audio Path Control (DAC sel, Mic, 20dB boost)
        _tlv320_write8(TLV320_ANALOG_AUDIO_PATH_REG, 0x015);
 800b9b2:	2115      	movs	r1, #21
 800b9b4:	2004      	movs	r0, #4
 800b9b6:	f7ff ff8d 	bl	800b8d4 <_tlv320_write8>
        break;
 800b9ba:	bf00      	nop
    }
}
 800b9bc:	bf00      	nop
 800b9be:	3708      	adds	r7, #8
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <TLV320_SetLineInVol>:
    // Reg 04: Analog Audio Path Control (DAC sel, Mic, 20dB boost)
    _tlv320_write8(TLV320_ANALOG_AUDIO_PATH_REG, value);
}

void TLV320_SetLineInVol(uint16_t vol)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	80fb      	strh	r3, [r7, #6]
    if (vol > 0x01F)
 800b9ce:	88fb      	ldrh	r3, [r7, #6]
 800b9d0:	2b1f      	cmp	r3, #31
 800b9d2:	d901      	bls.n	800b9d8 <TLV320_SetLineInVol+0x14>
        vol = 0x01F;
 800b9d4:	231f      	movs	r3, #31
 800b9d6:	80fb      	strh	r3, [r7, #6]
    _tlv320_write8(TLV320_LEFT_IN_VOL_REG, 0x100 | (vol & 0x01F));
 800b9d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b9dc:	f003 031f 	and.w	r3, r3, #31
 800b9e0:	b21b      	sxth	r3, r3
 800b9e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9e6:	b21b      	sxth	r3, r3
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	2000      	movs	r0, #0
 800b9ee:	f7ff ff71 	bl	800b8d4 <_tlv320_write8>
    _tlv320_write8(TLV320_RIGHT_IN_VOL_REG, 0x100 | (vol & 0x01F));
 800b9f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b9f6:	f003 031f 	and.w	r3, r3, #31
 800b9fa:	b21b      	sxth	r3, r3
 800b9fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba00:	b21b      	sxth	r3, r3
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	4619      	mov	r1, r3
 800ba06:	2001      	movs	r0, #1
 800ba08:	f7ff ff64 	bl	800b8d4 <_tlv320_write8>
}
 800ba0c:	bf00      	nop
 800ba0e:	3708      	adds	r7, #8
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <TLV320_SetHeadphoneVol>:

void TLV320_SetHeadphoneVol(uint16_t vol)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	80fb      	strh	r3, [r7, #6]
    vol += 0x030;
 800ba1e:	88fb      	ldrh	r3, [r7, #6]
 800ba20:	3330      	adds	r3, #48	; 0x30
 800ba22:	80fb      	strh	r3, [r7, #6]
    if (vol > 0x07F)
 800ba24:	88fb      	ldrh	r3, [r7, #6]
 800ba26:	2b7f      	cmp	r3, #127	; 0x7f
 800ba28:	d901      	bls.n	800ba2e <TLV320_SetHeadphoneVol+0x1a>
        vol = 0x07F;
 800ba2a:	237f      	movs	r3, #127	; 0x7f
 800ba2c:	80fb      	strh	r3, [r7, #6]
    _tlv320_write8(TLV320_LEFT_HP_VOL_REG, 0x100 | vol);
 800ba2e:	88fb      	ldrh	r3, [r7, #6]
 800ba30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	4619      	mov	r1, r3
 800ba38:	2002      	movs	r0, #2
 800ba3a:	f7ff ff4b 	bl	800b8d4 <_tlv320_write8>
    _tlv320_write8(TLV320_RIGHT_HP_VOL_REG, 0x100 | vol);
 800ba3e:	88fb      	ldrh	r3, [r7, #6]
 800ba40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	4619      	mov	r1, r3
 800ba48:	2003      	movs	r0, #3
 800ba4a:	f7ff ff43 	bl	800b8d4 <_tlv320_write8>
}
 800ba4e:	bf00      	nop
 800ba50:	3708      	adds	r7, #8
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <TLV320_Reset>:

void TLV320_Reset(void)
{
 800ba56:	b580      	push	{r7, lr}
 800ba58:	af00      	add	r7, sp, #0
    _tlv320_write8(TLV320_RESET_REG, 0);
 800ba5a:	2100      	movs	r1, #0
 800ba5c:	200f      	movs	r0, #15
 800ba5e:	f7ff ff39 	bl	800b8d4 <_tlv320_write8>
}
 800ba62:	bf00      	nop
 800ba64:	bd80      	pop	{r7, pc}

0800ba66 <TLV320_PowerDown>:

void TLV320_PowerDown(void)
{
 800ba66:	b580      	push	{r7, lr}
 800ba68:	af00      	add	r7, sp, #0
    // Turn off the TLV320
    _tlv320_write8(TLV320_POWER_DOWN_REG, 0x01FF);
 800ba6a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ba6e:	2006      	movs	r0, #6
 800ba70:	f7ff ff30 	bl	800b8d4 <_tlv320_write8>
}
 800ba74:	bf00      	nop
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	4912      	ldr	r1, [pc, #72]	; (800bac8 <MX_USB_DEVICE_Init+0x50>)
 800ba80:	4812      	ldr	r0, [pc, #72]	; (800bacc <MX_USB_DEVICE_Init+0x54>)
 800ba82:	f7fc fa1b 	bl	8007ebc <USBD_Init>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d001      	beq.n	800ba90 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ba8c:	f7fe fefc 	bl	800a888 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800ba90:	490f      	ldr	r1, [pc, #60]	; (800bad0 <MX_USB_DEVICE_Init+0x58>)
 800ba92:	480e      	ldr	r0, [pc, #56]	; (800bacc <MX_USB_DEVICE_Init+0x54>)
 800ba94:	f7fc fa56 	bl	8007f44 <USBD_RegisterClass>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d001      	beq.n	800baa2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ba9e:	f7fe fef3 	bl	800a888 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800baa2:	490c      	ldr	r1, [pc, #48]	; (800bad4 <MX_USB_DEVICE_Init+0x5c>)
 800baa4:	4809      	ldr	r0, [pc, #36]	; (800bacc <MX_USB_DEVICE_Init+0x54>)
 800baa6:	f7fc f9f3 	bl	8007e90 <USBD_AUDIO_RegisterInterface>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d001      	beq.n	800bab4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bab0:	f7fe feea 	bl	800a888 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bab4:	4805      	ldr	r0, [pc, #20]	; (800bacc <MX_USB_DEVICE_Init+0x54>)
 800bab6:	f7fc fa73 	bl	8007fa0 <USBD_Start>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d001      	beq.n	800bac4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bac0:	f7fe fee2 	bl	800a888 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bac4:	bf00      	nop
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	200000f4 	.word	0x200000f4
 800bacc:	20001ce8 	.word	0x20001ce8
 800bad0:	20000008 	.word	0x20000008
 800bad4:	200000d8 	.word	0x200000d8

0800bad8 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800bad8:	b480      	push	{r7}
 800bada:	b085      	sub	sp, #20
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 800bae4:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3714      	adds	r7, #20
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr

0800baf2 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800baf2:	b480      	push	{r7}
 800baf4:	b083      	sub	sp, #12
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 800bafa:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	370c      	adds	r7, #12
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr

0800bb08 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b085      	sub	sp, #20
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	4613      	mov	r3, r2
 800bb14:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800bb16:	79fb      	ldrb	r3, [r7, #7]
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	d001      	beq.n	800bb20 <AUDIO_AudioCmd_FS+0x18>
 800bb1c:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 800bb1e:	e000      	b.n	800bb22 <AUDIO_AudioCmd_FS+0x1a>
    break;
 800bb20:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800bb22:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3714      	adds	r7, #20
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b083      	sub	sp, #12
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	4603      	mov	r3, r0
 800bb38:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 800bb3a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	370c      	adds	r7, #12
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr

0800bb48 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	4603      	mov	r3, r0
 800bb50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 800bb52:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b085      	sub	sp, #20
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800bb6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3714      	adds	r7, #20
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800bb80:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr

0800bb8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b08a      	sub	sp, #40	; 0x28
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb94:	f107 0314 	add.w	r3, r7, #20
 800bb98:	2200      	movs	r2, #0
 800bb9a:	601a      	str	r2, [r3, #0]
 800bb9c:	605a      	str	r2, [r3, #4]
 800bb9e:	609a      	str	r2, [r3, #8]
 800bba0:	60da      	str	r2, [r3, #12]
 800bba2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbac:	d13a      	bne.n	800bc24 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bbae:	2300      	movs	r3, #0
 800bbb0:	613b      	str	r3, [r7, #16]
 800bbb2:	4b1e      	ldr	r3, [pc, #120]	; (800bc2c <HAL_PCD_MspInit+0xa0>)
 800bbb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbb6:	4a1d      	ldr	r2, [pc, #116]	; (800bc2c <HAL_PCD_MspInit+0xa0>)
 800bbb8:	f043 0301 	orr.w	r3, r3, #1
 800bbbc:	6313      	str	r3, [r2, #48]	; 0x30
 800bbbe:	4b1b      	ldr	r3, [pc, #108]	; (800bc2c <HAL_PCD_MspInit+0xa0>)
 800bbc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbc2:	f003 0301 	and.w	r3, r3, #1
 800bbc6:	613b      	str	r3, [r7, #16]
 800bbc8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800bbca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bbce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbd0:	2302      	movs	r3, #2
 800bbd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bbd8:	2303      	movs	r3, #3
 800bbda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bbdc:	230a      	movs	r3, #10
 800bbde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bbe0:	f107 0314 	add.w	r3, r7, #20
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	4812      	ldr	r0, [pc, #72]	; (800bc30 <HAL_PCD_MspInit+0xa4>)
 800bbe8:	f7f5 fd90 	bl	800170c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bbec:	4b0f      	ldr	r3, [pc, #60]	; (800bc2c <HAL_PCD_MspInit+0xa0>)
 800bbee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbf0:	4a0e      	ldr	r2, [pc, #56]	; (800bc2c <HAL_PCD_MspInit+0xa0>)
 800bbf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbf6:	6353      	str	r3, [r2, #52]	; 0x34
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	60fb      	str	r3, [r7, #12]
 800bbfc:	4b0b      	ldr	r3, [pc, #44]	; (800bc2c <HAL_PCD_MspInit+0xa0>)
 800bbfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc00:	4a0a      	ldr	r2, [pc, #40]	; (800bc2c <HAL_PCD_MspInit+0xa0>)
 800bc02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bc06:	6453      	str	r3, [r2, #68]	; 0x44
 800bc08:	4b08      	ldr	r3, [pc, #32]	; (800bc2c <HAL_PCD_MspInit+0xa0>)
 800bc0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc10:	60fb      	str	r3, [r7, #12]
 800bc12:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bc14:	2200      	movs	r2, #0
 800bc16:	2100      	movs	r1, #0
 800bc18:	2043      	movs	r0, #67	; 0x43
 800bc1a:	f7f5 f9d0 	bl	8000fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bc1e:	2043      	movs	r0, #67	; 0x43
 800bc20:	f7f5 f9e9 	bl	8000ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bc24:	bf00      	nop
 800bc26:	3728      	adds	r7, #40	; 0x28
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	40023800 	.word	0x40023800
 800bc30:	40020000 	.word	0x40020000

0800bc34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b082      	sub	sp, #8
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bc48:	4619      	mov	r1, r3
 800bc4a:	4610      	mov	r0, r2
 800bc4c:	f7fc f9f3 	bl	8008036 <USBD_LL_SetupStage>
}
 800bc50:	bf00      	nop
 800bc52:	3708      	adds	r7, #8
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	460b      	mov	r3, r1
 800bc62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bc6a:	78fa      	ldrb	r2, [r7, #3]
 800bc6c:	6879      	ldr	r1, [r7, #4]
 800bc6e:	4613      	mov	r3, r2
 800bc70:	00db      	lsls	r3, r3, #3
 800bc72:	1a9b      	subs	r3, r3, r2
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	440b      	add	r3, r1
 800bc78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bc7c:	681a      	ldr	r2, [r3, #0]
 800bc7e:	78fb      	ldrb	r3, [r7, #3]
 800bc80:	4619      	mov	r1, r3
 800bc82:	f7fc fa2d 	bl	80080e0 <USBD_LL_DataOutStage>
}
 800bc86:	bf00      	nop
 800bc88:	3708      	adds	r7, #8
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}

0800bc8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc8e:	b580      	push	{r7, lr}
 800bc90:	b082      	sub	sp, #8
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
 800bc96:	460b      	mov	r3, r1
 800bc98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bca0:	78fa      	ldrb	r2, [r7, #3]
 800bca2:	6879      	ldr	r1, [r7, #4]
 800bca4:	4613      	mov	r3, r2
 800bca6:	00db      	lsls	r3, r3, #3
 800bca8:	1a9b      	subs	r3, r3, r2
 800bcaa:	009b      	lsls	r3, r3, #2
 800bcac:	440b      	add	r3, r1
 800bcae:	3348      	adds	r3, #72	; 0x48
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	78fb      	ldrb	r3, [r7, #3]
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	f7fc fa76 	bl	80081a6 <USBD_LL_DataInStage>
}
 800bcba:	bf00      	nop
 800bcbc:	3708      	adds	r7, #8
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}

0800bcc2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcc2:	b580      	push	{r7, lr}
 800bcc4:	b082      	sub	sp, #8
 800bcc6:	af00      	add	r7, sp, #0
 800bcc8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7fc fb7a 	bl	80083ca <USBD_LL_SOF>
}
 800bcd6:	bf00      	nop
 800bcd8:	3708      	adds	r7, #8
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}

0800bcde <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b084      	sub	sp, #16
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bce6:	2301      	movs	r3, #1
 800bce8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	68db      	ldr	r3, [r3, #12]
 800bcee:	2b02      	cmp	r3, #2
 800bcf0:	d001      	beq.n	800bcf6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bcf2:	f7fe fdc9 	bl	800a888 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bcfc:	7bfa      	ldrb	r2, [r7, #15]
 800bcfe:	4611      	mov	r1, r2
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7fc fb27 	bl	8008354 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7fc fae0 	bl	80082d2 <USBD_LL_Reset>
}
 800bd12:	bf00      	nop
 800bd14:	3710      	adds	r7, #16
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
	...

0800bd1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7fc fb22 	bl	8008374 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	6812      	ldr	r2, [r2, #0]
 800bd3e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bd42:	f043 0301 	orr.w	r3, r3, #1
 800bd46:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6a1b      	ldr	r3, [r3, #32]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d005      	beq.n	800bd5c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd50:	4b04      	ldr	r3, [pc, #16]	; (800bd64 <HAL_PCD_SuspendCallback+0x48>)
 800bd52:	691b      	ldr	r3, [r3, #16]
 800bd54:	4a03      	ldr	r2, [pc, #12]	; (800bd64 <HAL_PCD_SuspendCallback+0x48>)
 800bd56:	f043 0306 	orr.w	r3, r3, #6
 800bd5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bd5c:	bf00      	nop
 800bd5e:	3708      	adds	r7, #8
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	e000ed00 	.word	0xe000ed00

0800bd68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7fc fb11 	bl	800839e <USBD_LL_Resume>
}
 800bd7c:	bf00      	nop
 800bd7e:	3708      	adds	r7, #8
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd96:	78fa      	ldrb	r2, [r7, #3]
 800bd98:	4611      	mov	r1, r2
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7fc fb3c 	bl	8008418 <USBD_LL_IsoOUTIncomplete>
}
 800bda0:	bf00      	nop
 800bda2:	3708      	adds	r7, #8
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bdba:	78fa      	ldrb	r2, [r7, #3]
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7fc fb1d 	bl	80083fe <USBD_LL_IsoINIncomplete>
}
 800bdc4:	bf00      	nop
 800bdc6:	3708      	adds	r7, #8
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7fc fb29 	bl	8008432 <USBD_LL_DevConnected>
}
 800bde0:	bf00      	nop
 800bde2:	3708      	adds	r7, #8
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7fc fb26 	bl	8008448 <USBD_LL_DevDisconnected>
}
 800bdfc:	bf00      	nop
 800bdfe:	3708      	adds	r7, #8
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d13f      	bne.n	800be94 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800be14:	4a22      	ldr	r2, [pc, #136]	; (800bea0 <USBD_LL_Init+0x9c>)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	4a20      	ldr	r2, [pc, #128]	; (800bea0 <USBD_LL_Init+0x9c>)
 800be20:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800be24:	4b1e      	ldr	r3, [pc, #120]	; (800bea0 <USBD_LL_Init+0x9c>)
 800be26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800be2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800be2c:	4b1c      	ldr	r3, [pc, #112]	; (800bea0 <USBD_LL_Init+0x9c>)
 800be2e:	2206      	movs	r2, #6
 800be30:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800be32:	4b1b      	ldr	r3, [pc, #108]	; (800bea0 <USBD_LL_Init+0x9c>)
 800be34:	2202      	movs	r2, #2
 800be36:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800be38:	4b19      	ldr	r3, [pc, #100]	; (800bea0 <USBD_LL_Init+0x9c>)
 800be3a:	2200      	movs	r2, #0
 800be3c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800be3e:	4b18      	ldr	r3, [pc, #96]	; (800bea0 <USBD_LL_Init+0x9c>)
 800be40:	2202      	movs	r2, #2
 800be42:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800be44:	4b16      	ldr	r3, [pc, #88]	; (800bea0 <USBD_LL_Init+0x9c>)
 800be46:	2200      	movs	r2, #0
 800be48:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800be4a:	4b15      	ldr	r3, [pc, #84]	; (800bea0 <USBD_LL_Init+0x9c>)
 800be4c:	2200      	movs	r2, #0
 800be4e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800be50:	4b13      	ldr	r3, [pc, #76]	; (800bea0 <USBD_LL_Init+0x9c>)
 800be52:	2200      	movs	r2, #0
 800be54:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800be56:	4b12      	ldr	r3, [pc, #72]	; (800bea0 <USBD_LL_Init+0x9c>)
 800be58:	2200      	movs	r2, #0
 800be5a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800be5c:	4b10      	ldr	r3, [pc, #64]	; (800bea0 <USBD_LL_Init+0x9c>)
 800be5e:	2200      	movs	r2, #0
 800be60:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800be62:	4b0f      	ldr	r3, [pc, #60]	; (800bea0 <USBD_LL_Init+0x9c>)
 800be64:	2200      	movs	r2, #0
 800be66:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800be68:	480d      	ldr	r0, [pc, #52]	; (800bea0 <USBD_LL_Init+0x9c>)
 800be6a:	f7f7 f9ad 	bl	80031c8 <HAL_PCD_Init>
 800be6e:	4603      	mov	r3, r0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d001      	beq.n	800be78 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800be74:	f7fe fd08 	bl	800a888 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800be78:	2180      	movs	r1, #128	; 0x80
 800be7a:	4809      	ldr	r0, [pc, #36]	; (800bea0 <USBD_LL_Init+0x9c>)
 800be7c:	f7f8 fb3f 	bl	80044fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800be80:	2240      	movs	r2, #64	; 0x40
 800be82:	2100      	movs	r1, #0
 800be84:	4806      	ldr	r0, [pc, #24]	; (800bea0 <USBD_LL_Init+0x9c>)
 800be86:	f7f8 faf3 	bl	8004470 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800be8a:	2280      	movs	r2, #128	; 0x80
 800be8c:	2101      	movs	r1, #1
 800be8e:	4804      	ldr	r0, [pc, #16]	; (800bea0 <USBD_LL_Init+0x9c>)
 800be90:	f7f8 faee 	bl	8004470 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800be94:	2300      	movs	r3, #0
}
 800be96:	4618      	mov	r0, r3
 800be98:	3708      	adds	r7, #8
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	20001fb8 	.word	0x20001fb8

0800bea4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800beac:	2300      	movs	r3, #0
 800beae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beb0:	2300      	movs	r3, #0
 800beb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800beba:	4618      	mov	r0, r3
 800bebc:	f7f7 faa8 	bl	8003410 <HAL_PCD_Start>
 800bec0:	4603      	mov	r3, r0
 800bec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bec4:	7bfb      	ldrb	r3, [r7, #15]
 800bec6:	4618      	mov	r0, r3
 800bec8:	f000 f98a 	bl	800c1e0 <USBD_Get_USB_Status>
 800becc:	4603      	mov	r3, r0
 800bece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bed0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3710      	adds	r7, #16
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}

0800beda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800beda:	b580      	push	{r7, lr}
 800bedc:	b084      	sub	sp, #16
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
 800bee2:	4608      	mov	r0, r1
 800bee4:	4611      	mov	r1, r2
 800bee6:	461a      	mov	r2, r3
 800bee8:	4603      	mov	r3, r0
 800beea:	70fb      	strb	r3, [r7, #3]
 800beec:	460b      	mov	r3, r1
 800beee:	70bb      	strb	r3, [r7, #2]
 800bef0:	4613      	mov	r3, r2
 800bef2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bef4:	2300      	movs	r3, #0
 800bef6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bef8:	2300      	movs	r3, #0
 800befa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bf02:	78bb      	ldrb	r3, [r7, #2]
 800bf04:	883a      	ldrh	r2, [r7, #0]
 800bf06:	78f9      	ldrb	r1, [r7, #3]
 800bf08:	f7f7 feb9 	bl	8003c7e <HAL_PCD_EP_Open>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf10:	7bfb      	ldrb	r3, [r7, #15]
 800bf12:	4618      	mov	r0, r3
 800bf14:	f000 f964 	bl	800c1e0 <USBD_Get_USB_Status>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b084      	sub	sp, #16
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
 800bf2e:	460b      	mov	r3, r1
 800bf30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf32:	2300      	movs	r3, #0
 800bf34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf36:	2300      	movs	r3, #0
 800bf38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf40:	78fa      	ldrb	r2, [r7, #3]
 800bf42:	4611      	mov	r1, r2
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7f7 ff02 	bl	8003d4e <HAL_PCD_EP_Close>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf4e:	7bfb      	ldrb	r3, [r7, #15]
 800bf50:	4618      	mov	r0, r3
 800bf52:	f000 f945 	bl	800c1e0 <USBD_Get_USB_Status>
 800bf56:	4603      	mov	r3, r0
 800bf58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3710      	adds	r7, #16
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf70:	2300      	movs	r3, #0
 800bf72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf74:	2300      	movs	r3, #0
 800bf76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf7e:	78fa      	ldrb	r2, [r7, #3]
 800bf80:	4611      	mov	r1, r2
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7f7 ffda 	bl	8003f3c <HAL_PCD_EP_SetStall>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf8c:	7bfb      	ldrb	r3, [r7, #15]
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f000 f926 	bl	800c1e0 <USBD_Get_USB_Status>
 800bf94:	4603      	mov	r3, r0
 800bf96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf98:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3710      	adds	r7, #16
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}

0800bfa2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b084      	sub	sp, #16
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
 800bfaa:	460b      	mov	r3, r1
 800bfac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bfbc:	78fa      	ldrb	r2, [r7, #3]
 800bfbe:	4611      	mov	r1, r2
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7f8 f81f 	bl	8004004 <HAL_PCD_EP_ClrStall>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfca:	7bfb      	ldrb	r3, [r7, #15]
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f000 f907 	bl	800c1e0 <USBD_Get_USB_Status>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfd6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3710      	adds	r7, #16
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b085      	sub	sp, #20
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	460b      	mov	r3, r1
 800bfea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bff2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bff4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	da0b      	bge.n	800c014 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bffc:	78fb      	ldrb	r3, [r7, #3]
 800bffe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c002:	68f9      	ldr	r1, [r7, #12]
 800c004:	4613      	mov	r3, r2
 800c006:	00db      	lsls	r3, r3, #3
 800c008:	1a9b      	subs	r3, r3, r2
 800c00a:	009b      	lsls	r3, r3, #2
 800c00c:	440b      	add	r3, r1
 800c00e:	333e      	adds	r3, #62	; 0x3e
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	e00b      	b.n	800c02c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c014:	78fb      	ldrb	r3, [r7, #3]
 800c016:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c01a:	68f9      	ldr	r1, [r7, #12]
 800c01c:	4613      	mov	r3, r2
 800c01e:	00db      	lsls	r3, r3, #3
 800c020:	1a9b      	subs	r3, r3, r2
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	440b      	add	r3, r1
 800c026:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c02a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3714      	adds	r7, #20
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr

0800c038 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	460b      	mov	r3, r1
 800c042:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c044:	2300      	movs	r3, #0
 800c046:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c048:	2300      	movs	r3, #0
 800c04a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c052:	78fa      	ldrb	r2, [r7, #3]
 800c054:	4611      	mov	r1, r2
 800c056:	4618      	mov	r0, r3
 800c058:	f7f7 fdec 	bl	8003c34 <HAL_PCD_SetAddress>
 800c05c:	4603      	mov	r3, r0
 800c05e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c060:	7bfb      	ldrb	r3, [r7, #15]
 800c062:	4618      	mov	r0, r3
 800c064:	f000 f8bc 	bl	800c1e0 <USBD_Get_USB_Status>
 800c068:	4603      	mov	r3, r0
 800c06a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c06c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3710      	adds	r7, #16
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}

0800c076 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c076:	b580      	push	{r7, lr}
 800c078:	b086      	sub	sp, #24
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	60f8      	str	r0, [r7, #12]
 800c07e:	607a      	str	r2, [r7, #4]
 800c080:	603b      	str	r3, [r7, #0]
 800c082:	460b      	mov	r3, r1
 800c084:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c086:	2300      	movs	r3, #0
 800c088:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c08a:	2300      	movs	r3, #0
 800c08c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c094:	7af9      	ldrb	r1, [r7, #11]
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	687a      	ldr	r2, [r7, #4]
 800c09a:	f7f7 ff05 	bl	8003ea8 <HAL_PCD_EP_Transmit>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0a2:	7dfb      	ldrb	r3, [r7, #23]
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f000 f89b 	bl	800c1e0 <USBD_Get_USB_Status>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c0ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3718      	adds	r7, #24
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}

0800c0b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b086      	sub	sp, #24
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	607a      	str	r2, [r7, #4]
 800c0c2:	603b      	str	r3, [r7, #0]
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c0d6:	7af9      	ldrb	r1, [r7, #11]
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	f7f7 fe81 	bl	8003de2 <HAL_PCD_EP_Receive>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0e4:	7dfb      	ldrb	r3, [r7, #23]
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f000 f87a 	bl	800c1e0 <USBD_Get_USB_Status>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c0f0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3718      	adds	r7, #24
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}

0800c0fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0fa:	b580      	push	{r7, lr}
 800c0fc:	b082      	sub	sp, #8
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
 800c102:	460b      	mov	r3, r1
 800c104:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c10c:	78fa      	ldrb	r2, [r7, #3]
 800c10e:	4611      	mov	r1, r2
 800c110:	4618      	mov	r0, r3
 800c112:	f7f7 feb1 	bl	8003e78 <HAL_PCD_EP_GetRxCount>
 800c116:	4603      	mov	r3, r0
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3708      	adds	r7, #8
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <HAL_GPIO_EXTI_Callback>:
  * @brief  Handle USB VBUS detection upon external interrupt
  * @param  GPIO_Pin
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
 800c126:	4603      	mov	r3, r0
 800c128:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_9)
 800c12a:	88fb      	ldrh	r3, [r7, #6]
 800c12c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c130:	d102      	bne.n	800c138 <HAL_GPIO_EXTI_Callback+0x18>
  {
    HAL_PCDEx_BCD_VBUSDetect(&hpcd_USB_OTG_FS);
 800c132:	4803      	ldr	r0, [pc, #12]	; (800c140 <HAL_GPIO_EXTI_Callback+0x20>)
 800c134:	f7f8 fa18 	bl	8004568 <HAL_PCDEx_BCD_VBUSDetect>
  }
}
 800c138:	bf00      	nop
 800c13a:	3708      	adds	r7, #8
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	20001fb8 	.word	0x20001fb8

0800c144 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	460b      	mov	r3, r1
 800c14e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c150:	78fb      	ldrb	r3, [r7, #3]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d002      	beq.n	800c15c <HAL_PCDEx_LPM_Callback+0x18>
 800c156:	2b01      	cmp	r3, #1
 800c158:	d01f      	beq.n	800c19a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c15a:	e03b      	b.n	800c1d4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6a1b      	ldr	r3, [r3, #32]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d007      	beq.n	800c174 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800c164:	f7fd fd2e 	bl	8009bc4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c168:	4b1c      	ldr	r3, [pc, #112]	; (800c1dc <HAL_PCDEx_LPM_Callback+0x98>)
 800c16a:	691b      	ldr	r3, [r3, #16]
 800c16c:	4a1b      	ldr	r2, [pc, #108]	; (800c1dc <HAL_PCDEx_LPM_Callback+0x98>)
 800c16e:	f023 0306 	bic.w	r3, r3, #6
 800c172:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	6812      	ldr	r2, [r2, #0]
 800c182:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c186:	f023 0301 	bic.w	r3, r3, #1
 800c18a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c192:	4618      	mov	r0, r3
 800c194:	f7fc f903 	bl	800839e <USBD_LL_Resume>
    break;
 800c198:	e01c      	b.n	800c1d4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	6812      	ldr	r2, [r2, #0]
 800c1a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c1ac:	f043 0301 	orr.w	r3, r3, #1
 800c1b0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7fc f8db 	bl	8008374 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6a1b      	ldr	r3, [r3, #32]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d005      	beq.n	800c1d2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1c6:	4b05      	ldr	r3, [pc, #20]	; (800c1dc <HAL_PCDEx_LPM_Callback+0x98>)
 800c1c8:	691b      	ldr	r3, [r3, #16]
 800c1ca:	4a04      	ldr	r2, [pc, #16]	; (800c1dc <HAL_PCDEx_LPM_Callback+0x98>)
 800c1cc:	f043 0306 	orr.w	r3, r3, #6
 800c1d0:	6113      	str	r3, [r2, #16]
    break;
 800c1d2:	bf00      	nop
}
 800c1d4:	bf00      	nop
 800c1d6:	3708      	adds	r7, #8
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}
 800c1dc:	e000ed00 	.word	0xe000ed00

0800c1e0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b085      	sub	sp, #20
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c1ee:	79fb      	ldrb	r3, [r7, #7]
 800c1f0:	2b03      	cmp	r3, #3
 800c1f2:	d817      	bhi.n	800c224 <USBD_Get_USB_Status+0x44>
 800c1f4:	a201      	add	r2, pc, #4	; (adr r2, 800c1fc <USBD_Get_USB_Status+0x1c>)
 800c1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1fa:	bf00      	nop
 800c1fc:	0800c20d 	.word	0x0800c20d
 800c200:	0800c213 	.word	0x0800c213
 800c204:	0800c219 	.word	0x0800c219
 800c208:	0800c21f 	.word	0x0800c21f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c20c:	2300      	movs	r3, #0
 800c20e:	73fb      	strb	r3, [r7, #15]
    break;
 800c210:	e00b      	b.n	800c22a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c212:	2303      	movs	r3, #3
 800c214:	73fb      	strb	r3, [r7, #15]
    break;
 800c216:	e008      	b.n	800c22a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c218:	2301      	movs	r3, #1
 800c21a:	73fb      	strb	r3, [r7, #15]
    break;
 800c21c:	e005      	b.n	800c22a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c21e:	2303      	movs	r3, #3
 800c220:	73fb      	strb	r3, [r7, #15]
    break;
 800c222:	e002      	b.n	800c22a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c224:	2303      	movs	r3, #3
 800c226:	73fb      	strb	r3, [r7, #15]
    break;
 800c228:	bf00      	nop
  }
  return usb_status;
 800c22a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3714      	adds	r7, #20
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	4603      	mov	r3, r0
 800c240:	6039      	str	r1, [r7, #0]
 800c242:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	2212      	movs	r2, #18
 800c248:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c24a:	4b03      	ldr	r3, [pc, #12]	; (800c258 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	370c      	adds	r7, #12
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr
 800c258:	20000114 	.word	0x20000114

0800c25c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b083      	sub	sp, #12
 800c260:	af00      	add	r7, sp, #0
 800c262:	4603      	mov	r3, r0
 800c264:	6039      	str	r1, [r7, #0]
 800c266:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	2204      	movs	r2, #4
 800c26c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c26e:	4b03      	ldr	r3, [pc, #12]	; (800c27c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c270:	4618      	mov	r0, r3
 800c272:	370c      	adds	r7, #12
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr
 800c27c:	20000134 	.word	0x20000134

0800c280 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	4603      	mov	r3, r0
 800c288:	6039      	str	r1, [r7, #0]
 800c28a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c28c:	79fb      	ldrb	r3, [r7, #7]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d105      	bne.n	800c29e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c292:	683a      	ldr	r2, [r7, #0]
 800c294:	4907      	ldr	r1, [pc, #28]	; (800c2b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c296:	4808      	ldr	r0, [pc, #32]	; (800c2b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c298:	f7fc fe88 	bl	8008fac <USBD_GetString>
 800c29c:	e004      	b.n	800c2a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c29e:	683a      	ldr	r2, [r7, #0]
 800c2a0:	4904      	ldr	r1, [pc, #16]	; (800c2b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c2a2:	4805      	ldr	r0, [pc, #20]	; (800c2b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c2a4:	f7fc fe82 	bl	8008fac <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2a8:	4b02      	ldr	r3, [pc, #8]	; (800c2b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3708      	adds	r7, #8
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	200023c0 	.word	0x200023c0
 800c2b8:	0800d964 	.word	0x0800d964

0800c2bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b082      	sub	sp, #8
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	6039      	str	r1, [r7, #0]
 800c2c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c2c8:	683a      	ldr	r2, [r7, #0]
 800c2ca:	4904      	ldr	r1, [pc, #16]	; (800c2dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c2cc:	4804      	ldr	r0, [pc, #16]	; (800c2e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c2ce:	f7fc fe6d 	bl	8008fac <USBD_GetString>
  return USBD_StrDesc;
 800c2d2:	4b02      	ldr	r3, [pc, #8]	; (800c2dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3708      	adds	r7, #8
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}
 800c2dc:	200023c0 	.word	0x200023c0
 800c2e0:	0800d970 	.word	0x0800d970

0800c2e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	6039      	str	r1, [r7, #0]
 800c2ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	221a      	movs	r2, #26
 800c2f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c2f6:	f000 f855 	bl	800c3a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c2fa:	4b02      	ldr	r3, [pc, #8]	; (800c304 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3708      	adds	r7, #8
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	20000138 	.word	0x20000138

0800c308 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b082      	sub	sp, #8
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	4603      	mov	r3, r0
 800c310:	6039      	str	r1, [r7, #0]
 800c312:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c314:	79fb      	ldrb	r3, [r7, #7]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d105      	bne.n	800c326 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c31a:	683a      	ldr	r2, [r7, #0]
 800c31c:	4907      	ldr	r1, [pc, #28]	; (800c33c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c31e:	4808      	ldr	r0, [pc, #32]	; (800c340 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c320:	f7fc fe44 	bl	8008fac <USBD_GetString>
 800c324:	e004      	b.n	800c330 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c326:	683a      	ldr	r2, [r7, #0]
 800c328:	4904      	ldr	r1, [pc, #16]	; (800c33c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c32a:	4805      	ldr	r0, [pc, #20]	; (800c340 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c32c:	f7fc fe3e 	bl	8008fac <USBD_GetString>
  }
  return USBD_StrDesc;
 800c330:	4b02      	ldr	r3, [pc, #8]	; (800c33c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c332:	4618      	mov	r0, r3
 800c334:	3708      	adds	r7, #8
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
 800c33a:	bf00      	nop
 800c33c:	200023c0 	.word	0x200023c0
 800c340:	0800d980 	.word	0x0800d980

0800c344 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
 800c34a:	4603      	mov	r3, r0
 800c34c:	6039      	str	r1, [r7, #0]
 800c34e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c350:	79fb      	ldrb	r3, [r7, #7]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d105      	bne.n	800c362 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c356:	683a      	ldr	r2, [r7, #0]
 800c358:	4907      	ldr	r1, [pc, #28]	; (800c378 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c35a:	4808      	ldr	r0, [pc, #32]	; (800c37c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c35c:	f7fc fe26 	bl	8008fac <USBD_GetString>
 800c360:	e004      	b.n	800c36c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c362:	683a      	ldr	r2, [r7, #0]
 800c364:	4904      	ldr	r1, [pc, #16]	; (800c378 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c366:	4805      	ldr	r0, [pc, #20]	; (800c37c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c368:	f7fc fe20 	bl	8008fac <USBD_GetString>
  }
  return USBD_StrDesc;
 800c36c:	4b02      	ldr	r3, [pc, #8]	; (800c378 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3708      	adds	r7, #8
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
 800c376:	bf00      	nop
 800c378:	200023c0 	.word	0x200023c0
 800c37c:	0800d990 	.word	0x0800d990

0800c380 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c380:	b480      	push	{r7}
 800c382:	b083      	sub	sp, #12
 800c384:	af00      	add	r7, sp, #0
 800c386:	4603      	mov	r3, r0
 800c388:	6039      	str	r1, [r7, #0]
 800c38a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	220c      	movs	r2, #12
 800c390:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c392:	4b03      	ldr	r3, [pc, #12]	; (800c3a0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c394:	4618      	mov	r0, r3
 800c396:	370c      	adds	r7, #12
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr
 800c3a0:	20000128 	.word	0x20000128

0800c3a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b084      	sub	sp, #16
 800c3a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c3aa:	4b0f      	ldr	r3, [pc, #60]	; (800c3e8 <Get_SerialNum+0x44>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c3b0:	4b0e      	ldr	r3, [pc, #56]	; (800c3ec <Get_SerialNum+0x48>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c3b6:	4b0e      	ldr	r3, [pc, #56]	; (800c3f0 <Get_SerialNum+0x4c>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c3bc:	68fa      	ldr	r2, [r7, #12]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	4413      	add	r3, r2
 800c3c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d009      	beq.n	800c3de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c3ca:	2208      	movs	r2, #8
 800c3cc:	4909      	ldr	r1, [pc, #36]	; (800c3f4 <Get_SerialNum+0x50>)
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f000 f814 	bl	800c3fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c3d4:	2204      	movs	r2, #4
 800c3d6:	4908      	ldr	r1, [pc, #32]	; (800c3f8 <Get_SerialNum+0x54>)
 800c3d8:	68b8      	ldr	r0, [r7, #8]
 800c3da:	f000 f80f 	bl	800c3fc <IntToUnicode>
  }
}
 800c3de:	bf00      	nop
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	1fff7a10 	.word	0x1fff7a10
 800c3ec:	1fff7a14 	.word	0x1fff7a14
 800c3f0:	1fff7a18 	.word	0x1fff7a18
 800c3f4:	2000013a 	.word	0x2000013a
 800c3f8:	2000014a 	.word	0x2000014a

0800c3fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b087      	sub	sp, #28
 800c400:	af00      	add	r7, sp, #0
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	60b9      	str	r1, [r7, #8]
 800c406:	4613      	mov	r3, r2
 800c408:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c40a:	2300      	movs	r3, #0
 800c40c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c40e:	2300      	movs	r3, #0
 800c410:	75fb      	strb	r3, [r7, #23]
 800c412:	e027      	b.n	800c464 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	0f1b      	lsrs	r3, r3, #28
 800c418:	2b09      	cmp	r3, #9
 800c41a:	d80b      	bhi.n	800c434 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	0f1b      	lsrs	r3, r3, #28
 800c420:	b2da      	uxtb	r2, r3
 800c422:	7dfb      	ldrb	r3, [r7, #23]
 800c424:	005b      	lsls	r3, r3, #1
 800c426:	4619      	mov	r1, r3
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	440b      	add	r3, r1
 800c42c:	3230      	adds	r2, #48	; 0x30
 800c42e:	b2d2      	uxtb	r2, r2
 800c430:	701a      	strb	r2, [r3, #0]
 800c432:	e00a      	b.n	800c44a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	0f1b      	lsrs	r3, r3, #28
 800c438:	b2da      	uxtb	r2, r3
 800c43a:	7dfb      	ldrb	r3, [r7, #23]
 800c43c:	005b      	lsls	r3, r3, #1
 800c43e:	4619      	mov	r1, r3
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	440b      	add	r3, r1
 800c444:	3237      	adds	r2, #55	; 0x37
 800c446:	b2d2      	uxtb	r2, r2
 800c448:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	011b      	lsls	r3, r3, #4
 800c44e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c450:	7dfb      	ldrb	r3, [r7, #23]
 800c452:	005b      	lsls	r3, r3, #1
 800c454:	3301      	adds	r3, #1
 800c456:	68ba      	ldr	r2, [r7, #8]
 800c458:	4413      	add	r3, r2
 800c45a:	2200      	movs	r2, #0
 800c45c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c45e:	7dfb      	ldrb	r3, [r7, #23]
 800c460:	3301      	adds	r3, #1
 800c462:	75fb      	strb	r3, [r7, #23]
 800c464:	7dfa      	ldrb	r2, [r7, #23]
 800c466:	79fb      	ldrb	r3, [r7, #7]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d3d3      	bcc.n	800c414 <IntToUnicode+0x18>
  }
}
 800c46c:	bf00      	nop
 800c46e:	bf00      	nop
 800c470:	371c      	adds	r7, #28
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr
	...

0800c47c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800c47c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c4b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800c480:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c482:	e003      	b.n	800c48c <LoopCopyDataInit>

0800c484 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c484:	4b0c      	ldr	r3, [pc, #48]	; (800c4b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c486:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c488:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c48a:	3104      	adds	r1, #4

0800c48c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c48c:	480b      	ldr	r0, [pc, #44]	; (800c4bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c48e:	4b0c      	ldr	r3, [pc, #48]	; (800c4c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c490:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c492:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c494:	d3f6      	bcc.n	800c484 <CopyDataInit>
  ldr  r2, =_sbss
 800c496:	4a0b      	ldr	r2, [pc, #44]	; (800c4c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c498:	e002      	b.n	800c4a0 <LoopFillZerobss>

0800c49a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800c49a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c49c:	f842 3b04 	str.w	r3, [r2], #4

0800c4a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c4a0:	4b09      	ldr	r3, [pc, #36]	; (800c4c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c4a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c4a4:	d3f9      	bcc.n	800c49a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c4a6:	f7ff f9ff 	bl	800b8a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c4aa:	f000 f817 	bl	800c4dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c4ae:	f7fd f83f 	bl	8009530 <main>
  bx  lr    
 800c4b2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800c4b4:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 800c4b8:	0800efb0 	.word	0x0800efb0
  ldr  r0, =_sdata
 800c4bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c4c0:	200001b8 	.word	0x200001b8
  ldr  r2, =_sbss
 800c4c4:	200001b8 	.word	0x200001b8
  ldr  r3, = _ebss
 800c4c8:	200025d0 	.word	0x200025d0

0800c4cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c4cc:	e7fe      	b.n	800c4cc <ADC_IRQHandler>
	...

0800c4d0 <__errno>:
 800c4d0:	4b01      	ldr	r3, [pc, #4]	; (800c4d8 <__errno+0x8>)
 800c4d2:	6818      	ldr	r0, [r3, #0]
 800c4d4:	4770      	bx	lr
 800c4d6:	bf00      	nop
 800c4d8:	20000154 	.word	0x20000154

0800c4dc <__libc_init_array>:
 800c4dc:	b570      	push	{r4, r5, r6, lr}
 800c4de:	4d0d      	ldr	r5, [pc, #52]	; (800c514 <__libc_init_array+0x38>)
 800c4e0:	4c0d      	ldr	r4, [pc, #52]	; (800c518 <__libc_init_array+0x3c>)
 800c4e2:	1b64      	subs	r4, r4, r5
 800c4e4:	10a4      	asrs	r4, r4, #2
 800c4e6:	2600      	movs	r6, #0
 800c4e8:	42a6      	cmp	r6, r4
 800c4ea:	d109      	bne.n	800c500 <__libc_init_array+0x24>
 800c4ec:	4d0b      	ldr	r5, [pc, #44]	; (800c51c <__libc_init_array+0x40>)
 800c4ee:	4c0c      	ldr	r4, [pc, #48]	; (800c520 <__libc_init_array+0x44>)
 800c4f0:	f001 f9b6 	bl	800d860 <_init>
 800c4f4:	1b64      	subs	r4, r4, r5
 800c4f6:	10a4      	asrs	r4, r4, #2
 800c4f8:	2600      	movs	r6, #0
 800c4fa:	42a6      	cmp	r6, r4
 800c4fc:	d105      	bne.n	800c50a <__libc_init_array+0x2e>
 800c4fe:	bd70      	pop	{r4, r5, r6, pc}
 800c500:	f855 3b04 	ldr.w	r3, [r5], #4
 800c504:	4798      	blx	r3
 800c506:	3601      	adds	r6, #1
 800c508:	e7ee      	b.n	800c4e8 <__libc_init_array+0xc>
 800c50a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c50e:	4798      	blx	r3
 800c510:	3601      	adds	r6, #1
 800c512:	e7f2      	b.n	800c4fa <__libc_init_array+0x1e>
 800c514:	0800efa8 	.word	0x0800efa8
 800c518:	0800efa8 	.word	0x0800efa8
 800c51c:	0800efa8 	.word	0x0800efa8
 800c520:	0800efac 	.word	0x0800efac

0800c524 <malloc>:
 800c524:	4b02      	ldr	r3, [pc, #8]	; (800c530 <malloc+0xc>)
 800c526:	4601      	mov	r1, r0
 800c528:	6818      	ldr	r0, [r3, #0]
 800c52a:	f000 b863 	b.w	800c5f4 <_malloc_r>
 800c52e:	bf00      	nop
 800c530:	20000154 	.word	0x20000154

0800c534 <free>:
 800c534:	4b02      	ldr	r3, [pc, #8]	; (800c540 <free+0xc>)
 800c536:	4601      	mov	r1, r0
 800c538:	6818      	ldr	r0, [r3, #0]
 800c53a:	f000 b80b 	b.w	800c554 <_free_r>
 800c53e:	bf00      	nop
 800c540:	20000154 	.word	0x20000154

0800c544 <memset>:
 800c544:	4402      	add	r2, r0
 800c546:	4603      	mov	r3, r0
 800c548:	4293      	cmp	r3, r2
 800c54a:	d100      	bne.n	800c54e <memset+0xa>
 800c54c:	4770      	bx	lr
 800c54e:	f803 1b01 	strb.w	r1, [r3], #1
 800c552:	e7f9      	b.n	800c548 <memset+0x4>

0800c554 <_free_r>:
 800c554:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c556:	2900      	cmp	r1, #0
 800c558:	d048      	beq.n	800c5ec <_free_r+0x98>
 800c55a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c55e:	9001      	str	r0, [sp, #4]
 800c560:	2b00      	cmp	r3, #0
 800c562:	f1a1 0404 	sub.w	r4, r1, #4
 800c566:	bfb8      	it	lt
 800c568:	18e4      	addlt	r4, r4, r3
 800c56a:	f000 fbd9 	bl	800cd20 <__malloc_lock>
 800c56e:	4a20      	ldr	r2, [pc, #128]	; (800c5f0 <_free_r+0x9c>)
 800c570:	9801      	ldr	r0, [sp, #4]
 800c572:	6813      	ldr	r3, [r2, #0]
 800c574:	4615      	mov	r5, r2
 800c576:	b933      	cbnz	r3, 800c586 <_free_r+0x32>
 800c578:	6063      	str	r3, [r4, #4]
 800c57a:	6014      	str	r4, [r2, #0]
 800c57c:	b003      	add	sp, #12
 800c57e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c582:	f000 bbd3 	b.w	800cd2c <__malloc_unlock>
 800c586:	42a3      	cmp	r3, r4
 800c588:	d90b      	bls.n	800c5a2 <_free_r+0x4e>
 800c58a:	6821      	ldr	r1, [r4, #0]
 800c58c:	1862      	adds	r2, r4, r1
 800c58e:	4293      	cmp	r3, r2
 800c590:	bf04      	itt	eq
 800c592:	681a      	ldreq	r2, [r3, #0]
 800c594:	685b      	ldreq	r3, [r3, #4]
 800c596:	6063      	str	r3, [r4, #4]
 800c598:	bf04      	itt	eq
 800c59a:	1852      	addeq	r2, r2, r1
 800c59c:	6022      	streq	r2, [r4, #0]
 800c59e:	602c      	str	r4, [r5, #0]
 800c5a0:	e7ec      	b.n	800c57c <_free_r+0x28>
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	b10b      	cbz	r3, 800c5ac <_free_r+0x58>
 800c5a8:	42a3      	cmp	r3, r4
 800c5aa:	d9fa      	bls.n	800c5a2 <_free_r+0x4e>
 800c5ac:	6811      	ldr	r1, [r2, #0]
 800c5ae:	1855      	adds	r5, r2, r1
 800c5b0:	42a5      	cmp	r5, r4
 800c5b2:	d10b      	bne.n	800c5cc <_free_r+0x78>
 800c5b4:	6824      	ldr	r4, [r4, #0]
 800c5b6:	4421      	add	r1, r4
 800c5b8:	1854      	adds	r4, r2, r1
 800c5ba:	42a3      	cmp	r3, r4
 800c5bc:	6011      	str	r1, [r2, #0]
 800c5be:	d1dd      	bne.n	800c57c <_free_r+0x28>
 800c5c0:	681c      	ldr	r4, [r3, #0]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	6053      	str	r3, [r2, #4]
 800c5c6:	4421      	add	r1, r4
 800c5c8:	6011      	str	r1, [r2, #0]
 800c5ca:	e7d7      	b.n	800c57c <_free_r+0x28>
 800c5cc:	d902      	bls.n	800c5d4 <_free_r+0x80>
 800c5ce:	230c      	movs	r3, #12
 800c5d0:	6003      	str	r3, [r0, #0]
 800c5d2:	e7d3      	b.n	800c57c <_free_r+0x28>
 800c5d4:	6825      	ldr	r5, [r4, #0]
 800c5d6:	1961      	adds	r1, r4, r5
 800c5d8:	428b      	cmp	r3, r1
 800c5da:	bf04      	itt	eq
 800c5dc:	6819      	ldreq	r1, [r3, #0]
 800c5de:	685b      	ldreq	r3, [r3, #4]
 800c5e0:	6063      	str	r3, [r4, #4]
 800c5e2:	bf04      	itt	eq
 800c5e4:	1949      	addeq	r1, r1, r5
 800c5e6:	6021      	streq	r1, [r4, #0]
 800c5e8:	6054      	str	r4, [r2, #4]
 800c5ea:	e7c7      	b.n	800c57c <_free_r+0x28>
 800c5ec:	b003      	add	sp, #12
 800c5ee:	bd30      	pop	{r4, r5, pc}
 800c5f0:	2000077c 	.word	0x2000077c

0800c5f4 <_malloc_r>:
 800c5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5f6:	1ccd      	adds	r5, r1, #3
 800c5f8:	f025 0503 	bic.w	r5, r5, #3
 800c5fc:	3508      	adds	r5, #8
 800c5fe:	2d0c      	cmp	r5, #12
 800c600:	bf38      	it	cc
 800c602:	250c      	movcc	r5, #12
 800c604:	2d00      	cmp	r5, #0
 800c606:	4606      	mov	r6, r0
 800c608:	db01      	blt.n	800c60e <_malloc_r+0x1a>
 800c60a:	42a9      	cmp	r1, r5
 800c60c:	d903      	bls.n	800c616 <_malloc_r+0x22>
 800c60e:	230c      	movs	r3, #12
 800c610:	6033      	str	r3, [r6, #0]
 800c612:	2000      	movs	r0, #0
 800c614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c616:	f000 fb83 	bl	800cd20 <__malloc_lock>
 800c61a:	4921      	ldr	r1, [pc, #132]	; (800c6a0 <_malloc_r+0xac>)
 800c61c:	680a      	ldr	r2, [r1, #0]
 800c61e:	4614      	mov	r4, r2
 800c620:	b99c      	cbnz	r4, 800c64a <_malloc_r+0x56>
 800c622:	4f20      	ldr	r7, [pc, #128]	; (800c6a4 <_malloc_r+0xb0>)
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	b923      	cbnz	r3, 800c632 <_malloc_r+0x3e>
 800c628:	4621      	mov	r1, r4
 800c62a:	4630      	mov	r0, r6
 800c62c:	f000 f86a 	bl	800c704 <_sbrk_r>
 800c630:	6038      	str	r0, [r7, #0]
 800c632:	4629      	mov	r1, r5
 800c634:	4630      	mov	r0, r6
 800c636:	f000 f865 	bl	800c704 <_sbrk_r>
 800c63a:	1c43      	adds	r3, r0, #1
 800c63c:	d123      	bne.n	800c686 <_malloc_r+0x92>
 800c63e:	230c      	movs	r3, #12
 800c640:	6033      	str	r3, [r6, #0]
 800c642:	4630      	mov	r0, r6
 800c644:	f000 fb72 	bl	800cd2c <__malloc_unlock>
 800c648:	e7e3      	b.n	800c612 <_malloc_r+0x1e>
 800c64a:	6823      	ldr	r3, [r4, #0]
 800c64c:	1b5b      	subs	r3, r3, r5
 800c64e:	d417      	bmi.n	800c680 <_malloc_r+0x8c>
 800c650:	2b0b      	cmp	r3, #11
 800c652:	d903      	bls.n	800c65c <_malloc_r+0x68>
 800c654:	6023      	str	r3, [r4, #0]
 800c656:	441c      	add	r4, r3
 800c658:	6025      	str	r5, [r4, #0]
 800c65a:	e004      	b.n	800c666 <_malloc_r+0x72>
 800c65c:	6863      	ldr	r3, [r4, #4]
 800c65e:	42a2      	cmp	r2, r4
 800c660:	bf0c      	ite	eq
 800c662:	600b      	streq	r3, [r1, #0]
 800c664:	6053      	strne	r3, [r2, #4]
 800c666:	4630      	mov	r0, r6
 800c668:	f000 fb60 	bl	800cd2c <__malloc_unlock>
 800c66c:	f104 000b 	add.w	r0, r4, #11
 800c670:	1d23      	adds	r3, r4, #4
 800c672:	f020 0007 	bic.w	r0, r0, #7
 800c676:	1ac2      	subs	r2, r0, r3
 800c678:	d0cc      	beq.n	800c614 <_malloc_r+0x20>
 800c67a:	1a1b      	subs	r3, r3, r0
 800c67c:	50a3      	str	r3, [r4, r2]
 800c67e:	e7c9      	b.n	800c614 <_malloc_r+0x20>
 800c680:	4622      	mov	r2, r4
 800c682:	6864      	ldr	r4, [r4, #4]
 800c684:	e7cc      	b.n	800c620 <_malloc_r+0x2c>
 800c686:	1cc4      	adds	r4, r0, #3
 800c688:	f024 0403 	bic.w	r4, r4, #3
 800c68c:	42a0      	cmp	r0, r4
 800c68e:	d0e3      	beq.n	800c658 <_malloc_r+0x64>
 800c690:	1a21      	subs	r1, r4, r0
 800c692:	4630      	mov	r0, r6
 800c694:	f000 f836 	bl	800c704 <_sbrk_r>
 800c698:	3001      	adds	r0, #1
 800c69a:	d1dd      	bne.n	800c658 <_malloc_r+0x64>
 800c69c:	e7cf      	b.n	800c63e <_malloc_r+0x4a>
 800c69e:	bf00      	nop
 800c6a0:	2000077c 	.word	0x2000077c
 800c6a4:	20000780 	.word	0x20000780

0800c6a8 <iprintf>:
 800c6a8:	b40f      	push	{r0, r1, r2, r3}
 800c6aa:	4b0a      	ldr	r3, [pc, #40]	; (800c6d4 <iprintf+0x2c>)
 800c6ac:	b513      	push	{r0, r1, r4, lr}
 800c6ae:	681c      	ldr	r4, [r3, #0]
 800c6b0:	b124      	cbz	r4, 800c6bc <iprintf+0x14>
 800c6b2:	69a3      	ldr	r3, [r4, #24]
 800c6b4:	b913      	cbnz	r3, 800c6bc <iprintf+0x14>
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	f000 fa2e 	bl	800cb18 <__sinit>
 800c6bc:	ab05      	add	r3, sp, #20
 800c6be:	9a04      	ldr	r2, [sp, #16]
 800c6c0:	68a1      	ldr	r1, [r4, #8]
 800c6c2:	9301      	str	r3, [sp, #4]
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	f000 fcbd 	bl	800d044 <_vfiprintf_r>
 800c6ca:	b002      	add	sp, #8
 800c6cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6d0:	b004      	add	sp, #16
 800c6d2:	4770      	bx	lr
 800c6d4:	20000154 	.word	0x20000154

0800c6d8 <putchar>:
 800c6d8:	4b09      	ldr	r3, [pc, #36]	; (800c700 <putchar+0x28>)
 800c6da:	b513      	push	{r0, r1, r4, lr}
 800c6dc:	681c      	ldr	r4, [r3, #0]
 800c6de:	4601      	mov	r1, r0
 800c6e0:	b134      	cbz	r4, 800c6f0 <putchar+0x18>
 800c6e2:	69a3      	ldr	r3, [r4, #24]
 800c6e4:	b923      	cbnz	r3, 800c6f0 <putchar+0x18>
 800c6e6:	9001      	str	r0, [sp, #4]
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	f000 fa15 	bl	800cb18 <__sinit>
 800c6ee:	9901      	ldr	r1, [sp, #4]
 800c6f0:	68a2      	ldr	r2, [r4, #8]
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	b002      	add	sp, #8
 800c6f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6fa:	f000 bf67 	b.w	800d5cc <_putc_r>
 800c6fe:	bf00      	nop
 800c700:	20000154 	.word	0x20000154

0800c704 <_sbrk_r>:
 800c704:	b538      	push	{r3, r4, r5, lr}
 800c706:	4d06      	ldr	r5, [pc, #24]	; (800c720 <_sbrk_r+0x1c>)
 800c708:	2300      	movs	r3, #0
 800c70a:	4604      	mov	r4, r0
 800c70c:	4608      	mov	r0, r1
 800c70e:	602b      	str	r3, [r5, #0]
 800c710:	f7ff f894 	bl	800b83c <_sbrk>
 800c714:	1c43      	adds	r3, r0, #1
 800c716:	d102      	bne.n	800c71e <_sbrk_r+0x1a>
 800c718:	682b      	ldr	r3, [r5, #0]
 800c71a:	b103      	cbz	r3, 800c71e <_sbrk_r+0x1a>
 800c71c:	6023      	str	r3, [r4, #0]
 800c71e:	bd38      	pop	{r3, r4, r5, pc}
 800c720:	200025cc 	.word	0x200025cc

0800c724 <siprintf>:
 800c724:	b40e      	push	{r1, r2, r3}
 800c726:	b500      	push	{lr}
 800c728:	b09c      	sub	sp, #112	; 0x70
 800c72a:	ab1d      	add	r3, sp, #116	; 0x74
 800c72c:	9002      	str	r0, [sp, #8]
 800c72e:	9006      	str	r0, [sp, #24]
 800c730:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c734:	4809      	ldr	r0, [pc, #36]	; (800c75c <siprintf+0x38>)
 800c736:	9107      	str	r1, [sp, #28]
 800c738:	9104      	str	r1, [sp, #16]
 800c73a:	4909      	ldr	r1, [pc, #36]	; (800c760 <siprintf+0x3c>)
 800c73c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c740:	9105      	str	r1, [sp, #20]
 800c742:	6800      	ldr	r0, [r0, #0]
 800c744:	9301      	str	r3, [sp, #4]
 800c746:	a902      	add	r1, sp, #8
 800c748:	f000 fb52 	bl	800cdf0 <_svfiprintf_r>
 800c74c:	9b02      	ldr	r3, [sp, #8]
 800c74e:	2200      	movs	r2, #0
 800c750:	701a      	strb	r2, [r3, #0]
 800c752:	b01c      	add	sp, #112	; 0x70
 800c754:	f85d eb04 	ldr.w	lr, [sp], #4
 800c758:	b003      	add	sp, #12
 800c75a:	4770      	bx	lr
 800c75c:	20000154 	.word	0x20000154
 800c760:	ffff0208 	.word	0xffff0208

0800c764 <__swbuf_r>:
 800c764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c766:	460e      	mov	r6, r1
 800c768:	4614      	mov	r4, r2
 800c76a:	4605      	mov	r5, r0
 800c76c:	b118      	cbz	r0, 800c776 <__swbuf_r+0x12>
 800c76e:	6983      	ldr	r3, [r0, #24]
 800c770:	b90b      	cbnz	r3, 800c776 <__swbuf_r+0x12>
 800c772:	f000 f9d1 	bl	800cb18 <__sinit>
 800c776:	4b21      	ldr	r3, [pc, #132]	; (800c7fc <__swbuf_r+0x98>)
 800c778:	429c      	cmp	r4, r3
 800c77a:	d12b      	bne.n	800c7d4 <__swbuf_r+0x70>
 800c77c:	686c      	ldr	r4, [r5, #4]
 800c77e:	69a3      	ldr	r3, [r4, #24]
 800c780:	60a3      	str	r3, [r4, #8]
 800c782:	89a3      	ldrh	r3, [r4, #12]
 800c784:	071a      	lsls	r2, r3, #28
 800c786:	d52f      	bpl.n	800c7e8 <__swbuf_r+0x84>
 800c788:	6923      	ldr	r3, [r4, #16]
 800c78a:	b36b      	cbz	r3, 800c7e8 <__swbuf_r+0x84>
 800c78c:	6923      	ldr	r3, [r4, #16]
 800c78e:	6820      	ldr	r0, [r4, #0]
 800c790:	1ac0      	subs	r0, r0, r3
 800c792:	6963      	ldr	r3, [r4, #20]
 800c794:	b2f6      	uxtb	r6, r6
 800c796:	4283      	cmp	r3, r0
 800c798:	4637      	mov	r7, r6
 800c79a:	dc04      	bgt.n	800c7a6 <__swbuf_r+0x42>
 800c79c:	4621      	mov	r1, r4
 800c79e:	4628      	mov	r0, r5
 800c7a0:	f000 f926 	bl	800c9f0 <_fflush_r>
 800c7a4:	bb30      	cbnz	r0, 800c7f4 <__swbuf_r+0x90>
 800c7a6:	68a3      	ldr	r3, [r4, #8]
 800c7a8:	3b01      	subs	r3, #1
 800c7aa:	60a3      	str	r3, [r4, #8]
 800c7ac:	6823      	ldr	r3, [r4, #0]
 800c7ae:	1c5a      	adds	r2, r3, #1
 800c7b0:	6022      	str	r2, [r4, #0]
 800c7b2:	701e      	strb	r6, [r3, #0]
 800c7b4:	6963      	ldr	r3, [r4, #20]
 800c7b6:	3001      	adds	r0, #1
 800c7b8:	4283      	cmp	r3, r0
 800c7ba:	d004      	beq.n	800c7c6 <__swbuf_r+0x62>
 800c7bc:	89a3      	ldrh	r3, [r4, #12]
 800c7be:	07db      	lsls	r3, r3, #31
 800c7c0:	d506      	bpl.n	800c7d0 <__swbuf_r+0x6c>
 800c7c2:	2e0a      	cmp	r6, #10
 800c7c4:	d104      	bne.n	800c7d0 <__swbuf_r+0x6c>
 800c7c6:	4621      	mov	r1, r4
 800c7c8:	4628      	mov	r0, r5
 800c7ca:	f000 f911 	bl	800c9f0 <_fflush_r>
 800c7ce:	b988      	cbnz	r0, 800c7f4 <__swbuf_r+0x90>
 800c7d0:	4638      	mov	r0, r7
 800c7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7d4:	4b0a      	ldr	r3, [pc, #40]	; (800c800 <__swbuf_r+0x9c>)
 800c7d6:	429c      	cmp	r4, r3
 800c7d8:	d101      	bne.n	800c7de <__swbuf_r+0x7a>
 800c7da:	68ac      	ldr	r4, [r5, #8]
 800c7dc:	e7cf      	b.n	800c77e <__swbuf_r+0x1a>
 800c7de:	4b09      	ldr	r3, [pc, #36]	; (800c804 <__swbuf_r+0xa0>)
 800c7e0:	429c      	cmp	r4, r3
 800c7e2:	bf08      	it	eq
 800c7e4:	68ec      	ldreq	r4, [r5, #12]
 800c7e6:	e7ca      	b.n	800c77e <__swbuf_r+0x1a>
 800c7e8:	4621      	mov	r1, r4
 800c7ea:	4628      	mov	r0, r5
 800c7ec:	f000 f80c 	bl	800c808 <__swsetup_r>
 800c7f0:	2800      	cmp	r0, #0
 800c7f2:	d0cb      	beq.n	800c78c <__swbuf_r+0x28>
 800c7f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c7f8:	e7ea      	b.n	800c7d0 <__swbuf_r+0x6c>
 800c7fa:	bf00      	nop
 800c7fc:	0800ef2c 	.word	0x0800ef2c
 800c800:	0800ef4c 	.word	0x0800ef4c
 800c804:	0800ef0c 	.word	0x0800ef0c

0800c808 <__swsetup_r>:
 800c808:	4b32      	ldr	r3, [pc, #200]	; (800c8d4 <__swsetup_r+0xcc>)
 800c80a:	b570      	push	{r4, r5, r6, lr}
 800c80c:	681d      	ldr	r5, [r3, #0]
 800c80e:	4606      	mov	r6, r0
 800c810:	460c      	mov	r4, r1
 800c812:	b125      	cbz	r5, 800c81e <__swsetup_r+0x16>
 800c814:	69ab      	ldr	r3, [r5, #24]
 800c816:	b913      	cbnz	r3, 800c81e <__swsetup_r+0x16>
 800c818:	4628      	mov	r0, r5
 800c81a:	f000 f97d 	bl	800cb18 <__sinit>
 800c81e:	4b2e      	ldr	r3, [pc, #184]	; (800c8d8 <__swsetup_r+0xd0>)
 800c820:	429c      	cmp	r4, r3
 800c822:	d10f      	bne.n	800c844 <__swsetup_r+0x3c>
 800c824:	686c      	ldr	r4, [r5, #4]
 800c826:	89a3      	ldrh	r3, [r4, #12]
 800c828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c82c:	0719      	lsls	r1, r3, #28
 800c82e:	d42c      	bmi.n	800c88a <__swsetup_r+0x82>
 800c830:	06dd      	lsls	r5, r3, #27
 800c832:	d411      	bmi.n	800c858 <__swsetup_r+0x50>
 800c834:	2309      	movs	r3, #9
 800c836:	6033      	str	r3, [r6, #0]
 800c838:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c83c:	81a3      	strh	r3, [r4, #12]
 800c83e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c842:	e03e      	b.n	800c8c2 <__swsetup_r+0xba>
 800c844:	4b25      	ldr	r3, [pc, #148]	; (800c8dc <__swsetup_r+0xd4>)
 800c846:	429c      	cmp	r4, r3
 800c848:	d101      	bne.n	800c84e <__swsetup_r+0x46>
 800c84a:	68ac      	ldr	r4, [r5, #8]
 800c84c:	e7eb      	b.n	800c826 <__swsetup_r+0x1e>
 800c84e:	4b24      	ldr	r3, [pc, #144]	; (800c8e0 <__swsetup_r+0xd8>)
 800c850:	429c      	cmp	r4, r3
 800c852:	bf08      	it	eq
 800c854:	68ec      	ldreq	r4, [r5, #12]
 800c856:	e7e6      	b.n	800c826 <__swsetup_r+0x1e>
 800c858:	0758      	lsls	r0, r3, #29
 800c85a:	d512      	bpl.n	800c882 <__swsetup_r+0x7a>
 800c85c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c85e:	b141      	cbz	r1, 800c872 <__swsetup_r+0x6a>
 800c860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c864:	4299      	cmp	r1, r3
 800c866:	d002      	beq.n	800c86e <__swsetup_r+0x66>
 800c868:	4630      	mov	r0, r6
 800c86a:	f7ff fe73 	bl	800c554 <_free_r>
 800c86e:	2300      	movs	r3, #0
 800c870:	6363      	str	r3, [r4, #52]	; 0x34
 800c872:	89a3      	ldrh	r3, [r4, #12]
 800c874:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c878:	81a3      	strh	r3, [r4, #12]
 800c87a:	2300      	movs	r3, #0
 800c87c:	6063      	str	r3, [r4, #4]
 800c87e:	6923      	ldr	r3, [r4, #16]
 800c880:	6023      	str	r3, [r4, #0]
 800c882:	89a3      	ldrh	r3, [r4, #12]
 800c884:	f043 0308 	orr.w	r3, r3, #8
 800c888:	81a3      	strh	r3, [r4, #12]
 800c88a:	6923      	ldr	r3, [r4, #16]
 800c88c:	b94b      	cbnz	r3, 800c8a2 <__swsetup_r+0x9a>
 800c88e:	89a3      	ldrh	r3, [r4, #12]
 800c890:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c898:	d003      	beq.n	800c8a2 <__swsetup_r+0x9a>
 800c89a:	4621      	mov	r1, r4
 800c89c:	4630      	mov	r0, r6
 800c89e:	f000 f9ff 	bl	800cca0 <__smakebuf_r>
 800c8a2:	89a0      	ldrh	r0, [r4, #12]
 800c8a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8a8:	f010 0301 	ands.w	r3, r0, #1
 800c8ac:	d00a      	beq.n	800c8c4 <__swsetup_r+0xbc>
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	60a3      	str	r3, [r4, #8]
 800c8b2:	6963      	ldr	r3, [r4, #20]
 800c8b4:	425b      	negs	r3, r3
 800c8b6:	61a3      	str	r3, [r4, #24]
 800c8b8:	6923      	ldr	r3, [r4, #16]
 800c8ba:	b943      	cbnz	r3, 800c8ce <__swsetup_r+0xc6>
 800c8bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c8c0:	d1ba      	bne.n	800c838 <__swsetup_r+0x30>
 800c8c2:	bd70      	pop	{r4, r5, r6, pc}
 800c8c4:	0781      	lsls	r1, r0, #30
 800c8c6:	bf58      	it	pl
 800c8c8:	6963      	ldrpl	r3, [r4, #20]
 800c8ca:	60a3      	str	r3, [r4, #8]
 800c8cc:	e7f4      	b.n	800c8b8 <__swsetup_r+0xb0>
 800c8ce:	2000      	movs	r0, #0
 800c8d0:	e7f7      	b.n	800c8c2 <__swsetup_r+0xba>
 800c8d2:	bf00      	nop
 800c8d4:	20000154 	.word	0x20000154
 800c8d8:	0800ef2c 	.word	0x0800ef2c
 800c8dc:	0800ef4c 	.word	0x0800ef4c
 800c8e0:	0800ef0c 	.word	0x0800ef0c

0800c8e4 <__sflush_r>:
 800c8e4:	898a      	ldrh	r2, [r1, #12]
 800c8e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ea:	4605      	mov	r5, r0
 800c8ec:	0710      	lsls	r0, r2, #28
 800c8ee:	460c      	mov	r4, r1
 800c8f0:	d458      	bmi.n	800c9a4 <__sflush_r+0xc0>
 800c8f2:	684b      	ldr	r3, [r1, #4]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	dc05      	bgt.n	800c904 <__sflush_r+0x20>
 800c8f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	dc02      	bgt.n	800c904 <__sflush_r+0x20>
 800c8fe:	2000      	movs	r0, #0
 800c900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c906:	2e00      	cmp	r6, #0
 800c908:	d0f9      	beq.n	800c8fe <__sflush_r+0x1a>
 800c90a:	2300      	movs	r3, #0
 800c90c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c910:	682f      	ldr	r7, [r5, #0]
 800c912:	602b      	str	r3, [r5, #0]
 800c914:	d032      	beq.n	800c97c <__sflush_r+0x98>
 800c916:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c918:	89a3      	ldrh	r3, [r4, #12]
 800c91a:	075a      	lsls	r2, r3, #29
 800c91c:	d505      	bpl.n	800c92a <__sflush_r+0x46>
 800c91e:	6863      	ldr	r3, [r4, #4]
 800c920:	1ac0      	subs	r0, r0, r3
 800c922:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c924:	b10b      	cbz	r3, 800c92a <__sflush_r+0x46>
 800c926:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c928:	1ac0      	subs	r0, r0, r3
 800c92a:	2300      	movs	r3, #0
 800c92c:	4602      	mov	r2, r0
 800c92e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c930:	6a21      	ldr	r1, [r4, #32]
 800c932:	4628      	mov	r0, r5
 800c934:	47b0      	blx	r6
 800c936:	1c43      	adds	r3, r0, #1
 800c938:	89a3      	ldrh	r3, [r4, #12]
 800c93a:	d106      	bne.n	800c94a <__sflush_r+0x66>
 800c93c:	6829      	ldr	r1, [r5, #0]
 800c93e:	291d      	cmp	r1, #29
 800c940:	d82c      	bhi.n	800c99c <__sflush_r+0xb8>
 800c942:	4a2a      	ldr	r2, [pc, #168]	; (800c9ec <__sflush_r+0x108>)
 800c944:	40ca      	lsrs	r2, r1
 800c946:	07d6      	lsls	r6, r2, #31
 800c948:	d528      	bpl.n	800c99c <__sflush_r+0xb8>
 800c94a:	2200      	movs	r2, #0
 800c94c:	6062      	str	r2, [r4, #4]
 800c94e:	04d9      	lsls	r1, r3, #19
 800c950:	6922      	ldr	r2, [r4, #16]
 800c952:	6022      	str	r2, [r4, #0]
 800c954:	d504      	bpl.n	800c960 <__sflush_r+0x7c>
 800c956:	1c42      	adds	r2, r0, #1
 800c958:	d101      	bne.n	800c95e <__sflush_r+0x7a>
 800c95a:	682b      	ldr	r3, [r5, #0]
 800c95c:	b903      	cbnz	r3, 800c960 <__sflush_r+0x7c>
 800c95e:	6560      	str	r0, [r4, #84]	; 0x54
 800c960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c962:	602f      	str	r7, [r5, #0]
 800c964:	2900      	cmp	r1, #0
 800c966:	d0ca      	beq.n	800c8fe <__sflush_r+0x1a>
 800c968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c96c:	4299      	cmp	r1, r3
 800c96e:	d002      	beq.n	800c976 <__sflush_r+0x92>
 800c970:	4628      	mov	r0, r5
 800c972:	f7ff fdef 	bl	800c554 <_free_r>
 800c976:	2000      	movs	r0, #0
 800c978:	6360      	str	r0, [r4, #52]	; 0x34
 800c97a:	e7c1      	b.n	800c900 <__sflush_r+0x1c>
 800c97c:	6a21      	ldr	r1, [r4, #32]
 800c97e:	2301      	movs	r3, #1
 800c980:	4628      	mov	r0, r5
 800c982:	47b0      	blx	r6
 800c984:	1c41      	adds	r1, r0, #1
 800c986:	d1c7      	bne.n	800c918 <__sflush_r+0x34>
 800c988:	682b      	ldr	r3, [r5, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d0c4      	beq.n	800c918 <__sflush_r+0x34>
 800c98e:	2b1d      	cmp	r3, #29
 800c990:	d001      	beq.n	800c996 <__sflush_r+0xb2>
 800c992:	2b16      	cmp	r3, #22
 800c994:	d101      	bne.n	800c99a <__sflush_r+0xb6>
 800c996:	602f      	str	r7, [r5, #0]
 800c998:	e7b1      	b.n	800c8fe <__sflush_r+0x1a>
 800c99a:	89a3      	ldrh	r3, [r4, #12]
 800c99c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9a0:	81a3      	strh	r3, [r4, #12]
 800c9a2:	e7ad      	b.n	800c900 <__sflush_r+0x1c>
 800c9a4:	690f      	ldr	r7, [r1, #16]
 800c9a6:	2f00      	cmp	r7, #0
 800c9a8:	d0a9      	beq.n	800c8fe <__sflush_r+0x1a>
 800c9aa:	0793      	lsls	r3, r2, #30
 800c9ac:	680e      	ldr	r6, [r1, #0]
 800c9ae:	bf08      	it	eq
 800c9b0:	694b      	ldreq	r3, [r1, #20]
 800c9b2:	600f      	str	r7, [r1, #0]
 800c9b4:	bf18      	it	ne
 800c9b6:	2300      	movne	r3, #0
 800c9b8:	eba6 0807 	sub.w	r8, r6, r7
 800c9bc:	608b      	str	r3, [r1, #8]
 800c9be:	f1b8 0f00 	cmp.w	r8, #0
 800c9c2:	dd9c      	ble.n	800c8fe <__sflush_r+0x1a>
 800c9c4:	6a21      	ldr	r1, [r4, #32]
 800c9c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c9c8:	4643      	mov	r3, r8
 800c9ca:	463a      	mov	r2, r7
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	47b0      	blx	r6
 800c9d0:	2800      	cmp	r0, #0
 800c9d2:	dc06      	bgt.n	800c9e2 <__sflush_r+0xfe>
 800c9d4:	89a3      	ldrh	r3, [r4, #12]
 800c9d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9da:	81a3      	strh	r3, [r4, #12]
 800c9dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c9e0:	e78e      	b.n	800c900 <__sflush_r+0x1c>
 800c9e2:	4407      	add	r7, r0
 800c9e4:	eba8 0800 	sub.w	r8, r8, r0
 800c9e8:	e7e9      	b.n	800c9be <__sflush_r+0xda>
 800c9ea:	bf00      	nop
 800c9ec:	20400001 	.word	0x20400001

0800c9f0 <_fflush_r>:
 800c9f0:	b538      	push	{r3, r4, r5, lr}
 800c9f2:	690b      	ldr	r3, [r1, #16]
 800c9f4:	4605      	mov	r5, r0
 800c9f6:	460c      	mov	r4, r1
 800c9f8:	b913      	cbnz	r3, 800ca00 <_fflush_r+0x10>
 800c9fa:	2500      	movs	r5, #0
 800c9fc:	4628      	mov	r0, r5
 800c9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ca00:	b118      	cbz	r0, 800ca0a <_fflush_r+0x1a>
 800ca02:	6983      	ldr	r3, [r0, #24]
 800ca04:	b90b      	cbnz	r3, 800ca0a <_fflush_r+0x1a>
 800ca06:	f000 f887 	bl	800cb18 <__sinit>
 800ca0a:	4b14      	ldr	r3, [pc, #80]	; (800ca5c <_fflush_r+0x6c>)
 800ca0c:	429c      	cmp	r4, r3
 800ca0e:	d11b      	bne.n	800ca48 <_fflush_r+0x58>
 800ca10:	686c      	ldr	r4, [r5, #4]
 800ca12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d0ef      	beq.n	800c9fa <_fflush_r+0xa>
 800ca1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca1c:	07d0      	lsls	r0, r2, #31
 800ca1e:	d404      	bmi.n	800ca2a <_fflush_r+0x3a>
 800ca20:	0599      	lsls	r1, r3, #22
 800ca22:	d402      	bmi.n	800ca2a <_fflush_r+0x3a>
 800ca24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca26:	f000 f915 	bl	800cc54 <__retarget_lock_acquire_recursive>
 800ca2a:	4628      	mov	r0, r5
 800ca2c:	4621      	mov	r1, r4
 800ca2e:	f7ff ff59 	bl	800c8e4 <__sflush_r>
 800ca32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca34:	07da      	lsls	r2, r3, #31
 800ca36:	4605      	mov	r5, r0
 800ca38:	d4e0      	bmi.n	800c9fc <_fflush_r+0xc>
 800ca3a:	89a3      	ldrh	r3, [r4, #12]
 800ca3c:	059b      	lsls	r3, r3, #22
 800ca3e:	d4dd      	bmi.n	800c9fc <_fflush_r+0xc>
 800ca40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca42:	f000 f908 	bl	800cc56 <__retarget_lock_release_recursive>
 800ca46:	e7d9      	b.n	800c9fc <_fflush_r+0xc>
 800ca48:	4b05      	ldr	r3, [pc, #20]	; (800ca60 <_fflush_r+0x70>)
 800ca4a:	429c      	cmp	r4, r3
 800ca4c:	d101      	bne.n	800ca52 <_fflush_r+0x62>
 800ca4e:	68ac      	ldr	r4, [r5, #8]
 800ca50:	e7df      	b.n	800ca12 <_fflush_r+0x22>
 800ca52:	4b04      	ldr	r3, [pc, #16]	; (800ca64 <_fflush_r+0x74>)
 800ca54:	429c      	cmp	r4, r3
 800ca56:	bf08      	it	eq
 800ca58:	68ec      	ldreq	r4, [r5, #12]
 800ca5a:	e7da      	b.n	800ca12 <_fflush_r+0x22>
 800ca5c:	0800ef2c 	.word	0x0800ef2c
 800ca60:	0800ef4c 	.word	0x0800ef4c
 800ca64:	0800ef0c 	.word	0x0800ef0c

0800ca68 <std>:
 800ca68:	2300      	movs	r3, #0
 800ca6a:	b510      	push	{r4, lr}
 800ca6c:	4604      	mov	r4, r0
 800ca6e:	e9c0 3300 	strd	r3, r3, [r0]
 800ca72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca76:	6083      	str	r3, [r0, #8]
 800ca78:	8181      	strh	r1, [r0, #12]
 800ca7a:	6643      	str	r3, [r0, #100]	; 0x64
 800ca7c:	81c2      	strh	r2, [r0, #14]
 800ca7e:	6183      	str	r3, [r0, #24]
 800ca80:	4619      	mov	r1, r3
 800ca82:	2208      	movs	r2, #8
 800ca84:	305c      	adds	r0, #92	; 0x5c
 800ca86:	f7ff fd5d 	bl	800c544 <memset>
 800ca8a:	4b05      	ldr	r3, [pc, #20]	; (800caa0 <std+0x38>)
 800ca8c:	6263      	str	r3, [r4, #36]	; 0x24
 800ca8e:	4b05      	ldr	r3, [pc, #20]	; (800caa4 <std+0x3c>)
 800ca90:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca92:	4b05      	ldr	r3, [pc, #20]	; (800caa8 <std+0x40>)
 800ca94:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca96:	4b05      	ldr	r3, [pc, #20]	; (800caac <std+0x44>)
 800ca98:	6224      	str	r4, [r4, #32]
 800ca9a:	6323      	str	r3, [r4, #48]	; 0x30
 800ca9c:	bd10      	pop	{r4, pc}
 800ca9e:	bf00      	nop
 800caa0:	0800d65d 	.word	0x0800d65d
 800caa4:	0800d67f 	.word	0x0800d67f
 800caa8:	0800d6b7 	.word	0x0800d6b7
 800caac:	0800d6db 	.word	0x0800d6db

0800cab0 <_cleanup_r>:
 800cab0:	4901      	ldr	r1, [pc, #4]	; (800cab8 <_cleanup_r+0x8>)
 800cab2:	f000 b8af 	b.w	800cc14 <_fwalk_reent>
 800cab6:	bf00      	nop
 800cab8:	0800c9f1 	.word	0x0800c9f1

0800cabc <__sfmoreglue>:
 800cabc:	b570      	push	{r4, r5, r6, lr}
 800cabe:	1e4a      	subs	r2, r1, #1
 800cac0:	2568      	movs	r5, #104	; 0x68
 800cac2:	4355      	muls	r5, r2
 800cac4:	460e      	mov	r6, r1
 800cac6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800caca:	f7ff fd93 	bl	800c5f4 <_malloc_r>
 800cace:	4604      	mov	r4, r0
 800cad0:	b140      	cbz	r0, 800cae4 <__sfmoreglue+0x28>
 800cad2:	2100      	movs	r1, #0
 800cad4:	e9c0 1600 	strd	r1, r6, [r0]
 800cad8:	300c      	adds	r0, #12
 800cada:	60a0      	str	r0, [r4, #8]
 800cadc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cae0:	f7ff fd30 	bl	800c544 <memset>
 800cae4:	4620      	mov	r0, r4
 800cae6:	bd70      	pop	{r4, r5, r6, pc}

0800cae8 <__sfp_lock_acquire>:
 800cae8:	4801      	ldr	r0, [pc, #4]	; (800caf0 <__sfp_lock_acquire+0x8>)
 800caea:	f000 b8b3 	b.w	800cc54 <__retarget_lock_acquire_recursive>
 800caee:	bf00      	nop
 800caf0:	200025c8 	.word	0x200025c8

0800caf4 <__sfp_lock_release>:
 800caf4:	4801      	ldr	r0, [pc, #4]	; (800cafc <__sfp_lock_release+0x8>)
 800caf6:	f000 b8ae 	b.w	800cc56 <__retarget_lock_release_recursive>
 800cafa:	bf00      	nop
 800cafc:	200025c8 	.word	0x200025c8

0800cb00 <__sinit_lock_acquire>:
 800cb00:	4801      	ldr	r0, [pc, #4]	; (800cb08 <__sinit_lock_acquire+0x8>)
 800cb02:	f000 b8a7 	b.w	800cc54 <__retarget_lock_acquire_recursive>
 800cb06:	bf00      	nop
 800cb08:	200025c3 	.word	0x200025c3

0800cb0c <__sinit_lock_release>:
 800cb0c:	4801      	ldr	r0, [pc, #4]	; (800cb14 <__sinit_lock_release+0x8>)
 800cb0e:	f000 b8a2 	b.w	800cc56 <__retarget_lock_release_recursive>
 800cb12:	bf00      	nop
 800cb14:	200025c3 	.word	0x200025c3

0800cb18 <__sinit>:
 800cb18:	b510      	push	{r4, lr}
 800cb1a:	4604      	mov	r4, r0
 800cb1c:	f7ff fff0 	bl	800cb00 <__sinit_lock_acquire>
 800cb20:	69a3      	ldr	r3, [r4, #24]
 800cb22:	b11b      	cbz	r3, 800cb2c <__sinit+0x14>
 800cb24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb28:	f7ff bff0 	b.w	800cb0c <__sinit_lock_release>
 800cb2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cb30:	6523      	str	r3, [r4, #80]	; 0x50
 800cb32:	4b13      	ldr	r3, [pc, #76]	; (800cb80 <__sinit+0x68>)
 800cb34:	4a13      	ldr	r2, [pc, #76]	; (800cb84 <__sinit+0x6c>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	62a2      	str	r2, [r4, #40]	; 0x28
 800cb3a:	42a3      	cmp	r3, r4
 800cb3c:	bf04      	itt	eq
 800cb3e:	2301      	moveq	r3, #1
 800cb40:	61a3      	streq	r3, [r4, #24]
 800cb42:	4620      	mov	r0, r4
 800cb44:	f000 f820 	bl	800cb88 <__sfp>
 800cb48:	6060      	str	r0, [r4, #4]
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f000 f81c 	bl	800cb88 <__sfp>
 800cb50:	60a0      	str	r0, [r4, #8]
 800cb52:	4620      	mov	r0, r4
 800cb54:	f000 f818 	bl	800cb88 <__sfp>
 800cb58:	2200      	movs	r2, #0
 800cb5a:	60e0      	str	r0, [r4, #12]
 800cb5c:	2104      	movs	r1, #4
 800cb5e:	6860      	ldr	r0, [r4, #4]
 800cb60:	f7ff ff82 	bl	800ca68 <std>
 800cb64:	68a0      	ldr	r0, [r4, #8]
 800cb66:	2201      	movs	r2, #1
 800cb68:	2109      	movs	r1, #9
 800cb6a:	f7ff ff7d 	bl	800ca68 <std>
 800cb6e:	68e0      	ldr	r0, [r4, #12]
 800cb70:	2202      	movs	r2, #2
 800cb72:	2112      	movs	r1, #18
 800cb74:	f7ff ff78 	bl	800ca68 <std>
 800cb78:	2301      	movs	r3, #1
 800cb7a:	61a3      	str	r3, [r4, #24]
 800cb7c:	e7d2      	b.n	800cb24 <__sinit+0xc>
 800cb7e:	bf00      	nop
 800cb80:	0800ef08 	.word	0x0800ef08
 800cb84:	0800cab1 	.word	0x0800cab1

0800cb88 <__sfp>:
 800cb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb8a:	4607      	mov	r7, r0
 800cb8c:	f7ff ffac 	bl	800cae8 <__sfp_lock_acquire>
 800cb90:	4b1e      	ldr	r3, [pc, #120]	; (800cc0c <__sfp+0x84>)
 800cb92:	681e      	ldr	r6, [r3, #0]
 800cb94:	69b3      	ldr	r3, [r6, #24]
 800cb96:	b913      	cbnz	r3, 800cb9e <__sfp+0x16>
 800cb98:	4630      	mov	r0, r6
 800cb9a:	f7ff ffbd 	bl	800cb18 <__sinit>
 800cb9e:	3648      	adds	r6, #72	; 0x48
 800cba0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cba4:	3b01      	subs	r3, #1
 800cba6:	d503      	bpl.n	800cbb0 <__sfp+0x28>
 800cba8:	6833      	ldr	r3, [r6, #0]
 800cbaa:	b30b      	cbz	r3, 800cbf0 <__sfp+0x68>
 800cbac:	6836      	ldr	r6, [r6, #0]
 800cbae:	e7f7      	b.n	800cba0 <__sfp+0x18>
 800cbb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cbb4:	b9d5      	cbnz	r5, 800cbec <__sfp+0x64>
 800cbb6:	4b16      	ldr	r3, [pc, #88]	; (800cc10 <__sfp+0x88>)
 800cbb8:	60e3      	str	r3, [r4, #12]
 800cbba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cbbe:	6665      	str	r5, [r4, #100]	; 0x64
 800cbc0:	f000 f847 	bl	800cc52 <__retarget_lock_init_recursive>
 800cbc4:	f7ff ff96 	bl	800caf4 <__sfp_lock_release>
 800cbc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cbcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cbd0:	6025      	str	r5, [r4, #0]
 800cbd2:	61a5      	str	r5, [r4, #24]
 800cbd4:	2208      	movs	r2, #8
 800cbd6:	4629      	mov	r1, r5
 800cbd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cbdc:	f7ff fcb2 	bl	800c544 <memset>
 800cbe0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cbe4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cbe8:	4620      	mov	r0, r4
 800cbea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbec:	3468      	adds	r4, #104	; 0x68
 800cbee:	e7d9      	b.n	800cba4 <__sfp+0x1c>
 800cbf0:	2104      	movs	r1, #4
 800cbf2:	4638      	mov	r0, r7
 800cbf4:	f7ff ff62 	bl	800cabc <__sfmoreglue>
 800cbf8:	4604      	mov	r4, r0
 800cbfa:	6030      	str	r0, [r6, #0]
 800cbfc:	2800      	cmp	r0, #0
 800cbfe:	d1d5      	bne.n	800cbac <__sfp+0x24>
 800cc00:	f7ff ff78 	bl	800caf4 <__sfp_lock_release>
 800cc04:	230c      	movs	r3, #12
 800cc06:	603b      	str	r3, [r7, #0]
 800cc08:	e7ee      	b.n	800cbe8 <__sfp+0x60>
 800cc0a:	bf00      	nop
 800cc0c:	0800ef08 	.word	0x0800ef08
 800cc10:	ffff0001 	.word	0xffff0001

0800cc14 <_fwalk_reent>:
 800cc14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc18:	4606      	mov	r6, r0
 800cc1a:	4688      	mov	r8, r1
 800cc1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc20:	2700      	movs	r7, #0
 800cc22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc26:	f1b9 0901 	subs.w	r9, r9, #1
 800cc2a:	d505      	bpl.n	800cc38 <_fwalk_reent+0x24>
 800cc2c:	6824      	ldr	r4, [r4, #0]
 800cc2e:	2c00      	cmp	r4, #0
 800cc30:	d1f7      	bne.n	800cc22 <_fwalk_reent+0xe>
 800cc32:	4638      	mov	r0, r7
 800cc34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc38:	89ab      	ldrh	r3, [r5, #12]
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d907      	bls.n	800cc4e <_fwalk_reent+0x3a>
 800cc3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc42:	3301      	adds	r3, #1
 800cc44:	d003      	beq.n	800cc4e <_fwalk_reent+0x3a>
 800cc46:	4629      	mov	r1, r5
 800cc48:	4630      	mov	r0, r6
 800cc4a:	47c0      	blx	r8
 800cc4c:	4307      	orrs	r7, r0
 800cc4e:	3568      	adds	r5, #104	; 0x68
 800cc50:	e7e9      	b.n	800cc26 <_fwalk_reent+0x12>

0800cc52 <__retarget_lock_init_recursive>:
 800cc52:	4770      	bx	lr

0800cc54 <__retarget_lock_acquire_recursive>:
 800cc54:	4770      	bx	lr

0800cc56 <__retarget_lock_release_recursive>:
 800cc56:	4770      	bx	lr

0800cc58 <__swhatbuf_r>:
 800cc58:	b570      	push	{r4, r5, r6, lr}
 800cc5a:	460e      	mov	r6, r1
 800cc5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc60:	2900      	cmp	r1, #0
 800cc62:	b096      	sub	sp, #88	; 0x58
 800cc64:	4614      	mov	r4, r2
 800cc66:	461d      	mov	r5, r3
 800cc68:	da07      	bge.n	800cc7a <__swhatbuf_r+0x22>
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	602b      	str	r3, [r5, #0]
 800cc6e:	89b3      	ldrh	r3, [r6, #12]
 800cc70:	061a      	lsls	r2, r3, #24
 800cc72:	d410      	bmi.n	800cc96 <__swhatbuf_r+0x3e>
 800cc74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc78:	e00e      	b.n	800cc98 <__swhatbuf_r+0x40>
 800cc7a:	466a      	mov	r2, sp
 800cc7c:	f000 fd54 	bl	800d728 <_fstat_r>
 800cc80:	2800      	cmp	r0, #0
 800cc82:	dbf2      	blt.n	800cc6a <__swhatbuf_r+0x12>
 800cc84:	9a01      	ldr	r2, [sp, #4]
 800cc86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cc8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cc8e:	425a      	negs	r2, r3
 800cc90:	415a      	adcs	r2, r3
 800cc92:	602a      	str	r2, [r5, #0]
 800cc94:	e7ee      	b.n	800cc74 <__swhatbuf_r+0x1c>
 800cc96:	2340      	movs	r3, #64	; 0x40
 800cc98:	2000      	movs	r0, #0
 800cc9a:	6023      	str	r3, [r4, #0]
 800cc9c:	b016      	add	sp, #88	; 0x58
 800cc9e:	bd70      	pop	{r4, r5, r6, pc}

0800cca0 <__smakebuf_r>:
 800cca0:	898b      	ldrh	r3, [r1, #12]
 800cca2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cca4:	079d      	lsls	r5, r3, #30
 800cca6:	4606      	mov	r6, r0
 800cca8:	460c      	mov	r4, r1
 800ccaa:	d507      	bpl.n	800ccbc <__smakebuf_r+0x1c>
 800ccac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ccb0:	6023      	str	r3, [r4, #0]
 800ccb2:	6123      	str	r3, [r4, #16]
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	6163      	str	r3, [r4, #20]
 800ccb8:	b002      	add	sp, #8
 800ccba:	bd70      	pop	{r4, r5, r6, pc}
 800ccbc:	ab01      	add	r3, sp, #4
 800ccbe:	466a      	mov	r2, sp
 800ccc0:	f7ff ffca 	bl	800cc58 <__swhatbuf_r>
 800ccc4:	9900      	ldr	r1, [sp, #0]
 800ccc6:	4605      	mov	r5, r0
 800ccc8:	4630      	mov	r0, r6
 800ccca:	f7ff fc93 	bl	800c5f4 <_malloc_r>
 800ccce:	b948      	cbnz	r0, 800cce4 <__smakebuf_r+0x44>
 800ccd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccd4:	059a      	lsls	r2, r3, #22
 800ccd6:	d4ef      	bmi.n	800ccb8 <__smakebuf_r+0x18>
 800ccd8:	f023 0303 	bic.w	r3, r3, #3
 800ccdc:	f043 0302 	orr.w	r3, r3, #2
 800cce0:	81a3      	strh	r3, [r4, #12]
 800cce2:	e7e3      	b.n	800ccac <__smakebuf_r+0xc>
 800cce4:	4b0d      	ldr	r3, [pc, #52]	; (800cd1c <__smakebuf_r+0x7c>)
 800cce6:	62b3      	str	r3, [r6, #40]	; 0x28
 800cce8:	89a3      	ldrh	r3, [r4, #12]
 800ccea:	6020      	str	r0, [r4, #0]
 800ccec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccf0:	81a3      	strh	r3, [r4, #12]
 800ccf2:	9b00      	ldr	r3, [sp, #0]
 800ccf4:	6163      	str	r3, [r4, #20]
 800ccf6:	9b01      	ldr	r3, [sp, #4]
 800ccf8:	6120      	str	r0, [r4, #16]
 800ccfa:	b15b      	cbz	r3, 800cd14 <__smakebuf_r+0x74>
 800ccfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd00:	4630      	mov	r0, r6
 800cd02:	f000 fd23 	bl	800d74c <_isatty_r>
 800cd06:	b128      	cbz	r0, 800cd14 <__smakebuf_r+0x74>
 800cd08:	89a3      	ldrh	r3, [r4, #12]
 800cd0a:	f023 0303 	bic.w	r3, r3, #3
 800cd0e:	f043 0301 	orr.w	r3, r3, #1
 800cd12:	81a3      	strh	r3, [r4, #12]
 800cd14:	89a0      	ldrh	r0, [r4, #12]
 800cd16:	4305      	orrs	r5, r0
 800cd18:	81a5      	strh	r5, [r4, #12]
 800cd1a:	e7cd      	b.n	800ccb8 <__smakebuf_r+0x18>
 800cd1c:	0800cab1 	.word	0x0800cab1

0800cd20 <__malloc_lock>:
 800cd20:	4801      	ldr	r0, [pc, #4]	; (800cd28 <__malloc_lock+0x8>)
 800cd22:	f7ff bf97 	b.w	800cc54 <__retarget_lock_acquire_recursive>
 800cd26:	bf00      	nop
 800cd28:	200025c4 	.word	0x200025c4

0800cd2c <__malloc_unlock>:
 800cd2c:	4801      	ldr	r0, [pc, #4]	; (800cd34 <__malloc_unlock+0x8>)
 800cd2e:	f7ff bf92 	b.w	800cc56 <__retarget_lock_release_recursive>
 800cd32:	bf00      	nop
 800cd34:	200025c4 	.word	0x200025c4

0800cd38 <__ssputs_r>:
 800cd38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd3c:	688e      	ldr	r6, [r1, #8]
 800cd3e:	429e      	cmp	r6, r3
 800cd40:	4682      	mov	sl, r0
 800cd42:	460c      	mov	r4, r1
 800cd44:	4690      	mov	r8, r2
 800cd46:	461f      	mov	r7, r3
 800cd48:	d838      	bhi.n	800cdbc <__ssputs_r+0x84>
 800cd4a:	898a      	ldrh	r2, [r1, #12]
 800cd4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd50:	d032      	beq.n	800cdb8 <__ssputs_r+0x80>
 800cd52:	6825      	ldr	r5, [r4, #0]
 800cd54:	6909      	ldr	r1, [r1, #16]
 800cd56:	eba5 0901 	sub.w	r9, r5, r1
 800cd5a:	6965      	ldr	r5, [r4, #20]
 800cd5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd64:	3301      	adds	r3, #1
 800cd66:	444b      	add	r3, r9
 800cd68:	106d      	asrs	r5, r5, #1
 800cd6a:	429d      	cmp	r5, r3
 800cd6c:	bf38      	it	cc
 800cd6e:	461d      	movcc	r5, r3
 800cd70:	0553      	lsls	r3, r2, #21
 800cd72:	d531      	bpl.n	800cdd8 <__ssputs_r+0xa0>
 800cd74:	4629      	mov	r1, r5
 800cd76:	f7ff fc3d 	bl	800c5f4 <_malloc_r>
 800cd7a:	4606      	mov	r6, r0
 800cd7c:	b950      	cbnz	r0, 800cd94 <__ssputs_r+0x5c>
 800cd7e:	230c      	movs	r3, #12
 800cd80:	f8ca 3000 	str.w	r3, [sl]
 800cd84:	89a3      	ldrh	r3, [r4, #12]
 800cd86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd8a:	81a3      	strh	r3, [r4, #12]
 800cd8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd94:	6921      	ldr	r1, [r4, #16]
 800cd96:	464a      	mov	r2, r9
 800cd98:	f000 fcfa 	bl	800d790 <memcpy>
 800cd9c:	89a3      	ldrh	r3, [r4, #12]
 800cd9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cda2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cda6:	81a3      	strh	r3, [r4, #12]
 800cda8:	6126      	str	r6, [r4, #16]
 800cdaa:	6165      	str	r5, [r4, #20]
 800cdac:	444e      	add	r6, r9
 800cdae:	eba5 0509 	sub.w	r5, r5, r9
 800cdb2:	6026      	str	r6, [r4, #0]
 800cdb4:	60a5      	str	r5, [r4, #8]
 800cdb6:	463e      	mov	r6, r7
 800cdb8:	42be      	cmp	r6, r7
 800cdba:	d900      	bls.n	800cdbe <__ssputs_r+0x86>
 800cdbc:	463e      	mov	r6, r7
 800cdbe:	4632      	mov	r2, r6
 800cdc0:	6820      	ldr	r0, [r4, #0]
 800cdc2:	4641      	mov	r1, r8
 800cdc4:	f000 fcf2 	bl	800d7ac <memmove>
 800cdc8:	68a3      	ldr	r3, [r4, #8]
 800cdca:	6822      	ldr	r2, [r4, #0]
 800cdcc:	1b9b      	subs	r3, r3, r6
 800cdce:	4432      	add	r2, r6
 800cdd0:	60a3      	str	r3, [r4, #8]
 800cdd2:	6022      	str	r2, [r4, #0]
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	e7db      	b.n	800cd90 <__ssputs_r+0x58>
 800cdd8:	462a      	mov	r2, r5
 800cdda:	f000 fd01 	bl	800d7e0 <_realloc_r>
 800cdde:	4606      	mov	r6, r0
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d1e1      	bne.n	800cda8 <__ssputs_r+0x70>
 800cde4:	6921      	ldr	r1, [r4, #16]
 800cde6:	4650      	mov	r0, sl
 800cde8:	f7ff fbb4 	bl	800c554 <_free_r>
 800cdec:	e7c7      	b.n	800cd7e <__ssputs_r+0x46>
	...

0800cdf0 <_svfiprintf_r>:
 800cdf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf4:	4698      	mov	r8, r3
 800cdf6:	898b      	ldrh	r3, [r1, #12]
 800cdf8:	061b      	lsls	r3, r3, #24
 800cdfa:	b09d      	sub	sp, #116	; 0x74
 800cdfc:	4607      	mov	r7, r0
 800cdfe:	460d      	mov	r5, r1
 800ce00:	4614      	mov	r4, r2
 800ce02:	d50e      	bpl.n	800ce22 <_svfiprintf_r+0x32>
 800ce04:	690b      	ldr	r3, [r1, #16]
 800ce06:	b963      	cbnz	r3, 800ce22 <_svfiprintf_r+0x32>
 800ce08:	2140      	movs	r1, #64	; 0x40
 800ce0a:	f7ff fbf3 	bl	800c5f4 <_malloc_r>
 800ce0e:	6028      	str	r0, [r5, #0]
 800ce10:	6128      	str	r0, [r5, #16]
 800ce12:	b920      	cbnz	r0, 800ce1e <_svfiprintf_r+0x2e>
 800ce14:	230c      	movs	r3, #12
 800ce16:	603b      	str	r3, [r7, #0]
 800ce18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce1c:	e0d1      	b.n	800cfc2 <_svfiprintf_r+0x1d2>
 800ce1e:	2340      	movs	r3, #64	; 0x40
 800ce20:	616b      	str	r3, [r5, #20]
 800ce22:	2300      	movs	r3, #0
 800ce24:	9309      	str	r3, [sp, #36]	; 0x24
 800ce26:	2320      	movs	r3, #32
 800ce28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce30:	2330      	movs	r3, #48	; 0x30
 800ce32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cfdc <_svfiprintf_r+0x1ec>
 800ce36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce3a:	f04f 0901 	mov.w	r9, #1
 800ce3e:	4623      	mov	r3, r4
 800ce40:	469a      	mov	sl, r3
 800ce42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce46:	b10a      	cbz	r2, 800ce4c <_svfiprintf_r+0x5c>
 800ce48:	2a25      	cmp	r2, #37	; 0x25
 800ce4a:	d1f9      	bne.n	800ce40 <_svfiprintf_r+0x50>
 800ce4c:	ebba 0b04 	subs.w	fp, sl, r4
 800ce50:	d00b      	beq.n	800ce6a <_svfiprintf_r+0x7a>
 800ce52:	465b      	mov	r3, fp
 800ce54:	4622      	mov	r2, r4
 800ce56:	4629      	mov	r1, r5
 800ce58:	4638      	mov	r0, r7
 800ce5a:	f7ff ff6d 	bl	800cd38 <__ssputs_r>
 800ce5e:	3001      	adds	r0, #1
 800ce60:	f000 80aa 	beq.w	800cfb8 <_svfiprintf_r+0x1c8>
 800ce64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce66:	445a      	add	r2, fp
 800ce68:	9209      	str	r2, [sp, #36]	; 0x24
 800ce6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	f000 80a2 	beq.w	800cfb8 <_svfiprintf_r+0x1c8>
 800ce74:	2300      	movs	r3, #0
 800ce76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce7e:	f10a 0a01 	add.w	sl, sl, #1
 800ce82:	9304      	str	r3, [sp, #16]
 800ce84:	9307      	str	r3, [sp, #28]
 800ce86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce8a:	931a      	str	r3, [sp, #104]	; 0x68
 800ce8c:	4654      	mov	r4, sl
 800ce8e:	2205      	movs	r2, #5
 800ce90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce94:	4851      	ldr	r0, [pc, #324]	; (800cfdc <_svfiprintf_r+0x1ec>)
 800ce96:	f7f3 f9bb 	bl	8000210 <memchr>
 800ce9a:	9a04      	ldr	r2, [sp, #16]
 800ce9c:	b9d8      	cbnz	r0, 800ced6 <_svfiprintf_r+0xe6>
 800ce9e:	06d0      	lsls	r0, r2, #27
 800cea0:	bf44      	itt	mi
 800cea2:	2320      	movmi	r3, #32
 800cea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cea8:	0711      	lsls	r1, r2, #28
 800ceaa:	bf44      	itt	mi
 800ceac:	232b      	movmi	r3, #43	; 0x2b
 800ceae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ceb2:	f89a 3000 	ldrb.w	r3, [sl]
 800ceb6:	2b2a      	cmp	r3, #42	; 0x2a
 800ceb8:	d015      	beq.n	800cee6 <_svfiprintf_r+0xf6>
 800ceba:	9a07      	ldr	r2, [sp, #28]
 800cebc:	4654      	mov	r4, sl
 800cebe:	2000      	movs	r0, #0
 800cec0:	f04f 0c0a 	mov.w	ip, #10
 800cec4:	4621      	mov	r1, r4
 800cec6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ceca:	3b30      	subs	r3, #48	; 0x30
 800cecc:	2b09      	cmp	r3, #9
 800cece:	d94e      	bls.n	800cf6e <_svfiprintf_r+0x17e>
 800ced0:	b1b0      	cbz	r0, 800cf00 <_svfiprintf_r+0x110>
 800ced2:	9207      	str	r2, [sp, #28]
 800ced4:	e014      	b.n	800cf00 <_svfiprintf_r+0x110>
 800ced6:	eba0 0308 	sub.w	r3, r0, r8
 800ceda:	fa09 f303 	lsl.w	r3, r9, r3
 800cede:	4313      	orrs	r3, r2
 800cee0:	9304      	str	r3, [sp, #16]
 800cee2:	46a2      	mov	sl, r4
 800cee4:	e7d2      	b.n	800ce8c <_svfiprintf_r+0x9c>
 800cee6:	9b03      	ldr	r3, [sp, #12]
 800cee8:	1d19      	adds	r1, r3, #4
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	9103      	str	r1, [sp, #12]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	bfbb      	ittet	lt
 800cef2:	425b      	neglt	r3, r3
 800cef4:	f042 0202 	orrlt.w	r2, r2, #2
 800cef8:	9307      	strge	r3, [sp, #28]
 800cefa:	9307      	strlt	r3, [sp, #28]
 800cefc:	bfb8      	it	lt
 800cefe:	9204      	strlt	r2, [sp, #16]
 800cf00:	7823      	ldrb	r3, [r4, #0]
 800cf02:	2b2e      	cmp	r3, #46	; 0x2e
 800cf04:	d10c      	bne.n	800cf20 <_svfiprintf_r+0x130>
 800cf06:	7863      	ldrb	r3, [r4, #1]
 800cf08:	2b2a      	cmp	r3, #42	; 0x2a
 800cf0a:	d135      	bne.n	800cf78 <_svfiprintf_r+0x188>
 800cf0c:	9b03      	ldr	r3, [sp, #12]
 800cf0e:	1d1a      	adds	r2, r3, #4
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	9203      	str	r2, [sp, #12]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	bfb8      	it	lt
 800cf18:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cf1c:	3402      	adds	r4, #2
 800cf1e:	9305      	str	r3, [sp, #20]
 800cf20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cfec <_svfiprintf_r+0x1fc>
 800cf24:	7821      	ldrb	r1, [r4, #0]
 800cf26:	2203      	movs	r2, #3
 800cf28:	4650      	mov	r0, sl
 800cf2a:	f7f3 f971 	bl	8000210 <memchr>
 800cf2e:	b140      	cbz	r0, 800cf42 <_svfiprintf_r+0x152>
 800cf30:	2340      	movs	r3, #64	; 0x40
 800cf32:	eba0 000a 	sub.w	r0, r0, sl
 800cf36:	fa03 f000 	lsl.w	r0, r3, r0
 800cf3a:	9b04      	ldr	r3, [sp, #16]
 800cf3c:	4303      	orrs	r3, r0
 800cf3e:	3401      	adds	r4, #1
 800cf40:	9304      	str	r3, [sp, #16]
 800cf42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf46:	4826      	ldr	r0, [pc, #152]	; (800cfe0 <_svfiprintf_r+0x1f0>)
 800cf48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf4c:	2206      	movs	r2, #6
 800cf4e:	f7f3 f95f 	bl	8000210 <memchr>
 800cf52:	2800      	cmp	r0, #0
 800cf54:	d038      	beq.n	800cfc8 <_svfiprintf_r+0x1d8>
 800cf56:	4b23      	ldr	r3, [pc, #140]	; (800cfe4 <_svfiprintf_r+0x1f4>)
 800cf58:	bb1b      	cbnz	r3, 800cfa2 <_svfiprintf_r+0x1b2>
 800cf5a:	9b03      	ldr	r3, [sp, #12]
 800cf5c:	3307      	adds	r3, #7
 800cf5e:	f023 0307 	bic.w	r3, r3, #7
 800cf62:	3308      	adds	r3, #8
 800cf64:	9303      	str	r3, [sp, #12]
 800cf66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf68:	4433      	add	r3, r6
 800cf6a:	9309      	str	r3, [sp, #36]	; 0x24
 800cf6c:	e767      	b.n	800ce3e <_svfiprintf_r+0x4e>
 800cf6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf72:	460c      	mov	r4, r1
 800cf74:	2001      	movs	r0, #1
 800cf76:	e7a5      	b.n	800cec4 <_svfiprintf_r+0xd4>
 800cf78:	2300      	movs	r3, #0
 800cf7a:	3401      	adds	r4, #1
 800cf7c:	9305      	str	r3, [sp, #20]
 800cf7e:	4619      	mov	r1, r3
 800cf80:	f04f 0c0a 	mov.w	ip, #10
 800cf84:	4620      	mov	r0, r4
 800cf86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf8a:	3a30      	subs	r2, #48	; 0x30
 800cf8c:	2a09      	cmp	r2, #9
 800cf8e:	d903      	bls.n	800cf98 <_svfiprintf_r+0x1a8>
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d0c5      	beq.n	800cf20 <_svfiprintf_r+0x130>
 800cf94:	9105      	str	r1, [sp, #20]
 800cf96:	e7c3      	b.n	800cf20 <_svfiprintf_r+0x130>
 800cf98:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf9c:	4604      	mov	r4, r0
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	e7f0      	b.n	800cf84 <_svfiprintf_r+0x194>
 800cfa2:	ab03      	add	r3, sp, #12
 800cfa4:	9300      	str	r3, [sp, #0]
 800cfa6:	462a      	mov	r2, r5
 800cfa8:	4b0f      	ldr	r3, [pc, #60]	; (800cfe8 <_svfiprintf_r+0x1f8>)
 800cfaa:	a904      	add	r1, sp, #16
 800cfac:	4638      	mov	r0, r7
 800cfae:	f3af 8000 	nop.w
 800cfb2:	1c42      	adds	r2, r0, #1
 800cfb4:	4606      	mov	r6, r0
 800cfb6:	d1d6      	bne.n	800cf66 <_svfiprintf_r+0x176>
 800cfb8:	89ab      	ldrh	r3, [r5, #12]
 800cfba:	065b      	lsls	r3, r3, #25
 800cfbc:	f53f af2c 	bmi.w	800ce18 <_svfiprintf_r+0x28>
 800cfc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfc2:	b01d      	add	sp, #116	; 0x74
 800cfc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfc8:	ab03      	add	r3, sp, #12
 800cfca:	9300      	str	r3, [sp, #0]
 800cfcc:	462a      	mov	r2, r5
 800cfce:	4b06      	ldr	r3, [pc, #24]	; (800cfe8 <_svfiprintf_r+0x1f8>)
 800cfd0:	a904      	add	r1, sp, #16
 800cfd2:	4638      	mov	r0, r7
 800cfd4:	f000 f9d4 	bl	800d380 <_printf_i>
 800cfd8:	e7eb      	b.n	800cfb2 <_svfiprintf_r+0x1c2>
 800cfda:	bf00      	nop
 800cfdc:	0800ef6c 	.word	0x0800ef6c
 800cfe0:	0800ef76 	.word	0x0800ef76
 800cfe4:	00000000 	.word	0x00000000
 800cfe8:	0800cd39 	.word	0x0800cd39
 800cfec:	0800ef72 	.word	0x0800ef72

0800cff0 <__sfputc_r>:
 800cff0:	6893      	ldr	r3, [r2, #8]
 800cff2:	3b01      	subs	r3, #1
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	b410      	push	{r4}
 800cff8:	6093      	str	r3, [r2, #8]
 800cffa:	da08      	bge.n	800d00e <__sfputc_r+0x1e>
 800cffc:	6994      	ldr	r4, [r2, #24]
 800cffe:	42a3      	cmp	r3, r4
 800d000:	db01      	blt.n	800d006 <__sfputc_r+0x16>
 800d002:	290a      	cmp	r1, #10
 800d004:	d103      	bne.n	800d00e <__sfputc_r+0x1e>
 800d006:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d00a:	f7ff bbab 	b.w	800c764 <__swbuf_r>
 800d00e:	6813      	ldr	r3, [r2, #0]
 800d010:	1c58      	adds	r0, r3, #1
 800d012:	6010      	str	r0, [r2, #0]
 800d014:	7019      	strb	r1, [r3, #0]
 800d016:	4608      	mov	r0, r1
 800d018:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d01c:	4770      	bx	lr

0800d01e <__sfputs_r>:
 800d01e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d020:	4606      	mov	r6, r0
 800d022:	460f      	mov	r7, r1
 800d024:	4614      	mov	r4, r2
 800d026:	18d5      	adds	r5, r2, r3
 800d028:	42ac      	cmp	r4, r5
 800d02a:	d101      	bne.n	800d030 <__sfputs_r+0x12>
 800d02c:	2000      	movs	r0, #0
 800d02e:	e007      	b.n	800d040 <__sfputs_r+0x22>
 800d030:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d034:	463a      	mov	r2, r7
 800d036:	4630      	mov	r0, r6
 800d038:	f7ff ffda 	bl	800cff0 <__sfputc_r>
 800d03c:	1c43      	adds	r3, r0, #1
 800d03e:	d1f3      	bne.n	800d028 <__sfputs_r+0xa>
 800d040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d044 <_vfiprintf_r>:
 800d044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d048:	460d      	mov	r5, r1
 800d04a:	b09d      	sub	sp, #116	; 0x74
 800d04c:	4614      	mov	r4, r2
 800d04e:	4698      	mov	r8, r3
 800d050:	4606      	mov	r6, r0
 800d052:	b118      	cbz	r0, 800d05c <_vfiprintf_r+0x18>
 800d054:	6983      	ldr	r3, [r0, #24]
 800d056:	b90b      	cbnz	r3, 800d05c <_vfiprintf_r+0x18>
 800d058:	f7ff fd5e 	bl	800cb18 <__sinit>
 800d05c:	4b89      	ldr	r3, [pc, #548]	; (800d284 <_vfiprintf_r+0x240>)
 800d05e:	429d      	cmp	r5, r3
 800d060:	d11b      	bne.n	800d09a <_vfiprintf_r+0x56>
 800d062:	6875      	ldr	r5, [r6, #4]
 800d064:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d066:	07d9      	lsls	r1, r3, #31
 800d068:	d405      	bmi.n	800d076 <_vfiprintf_r+0x32>
 800d06a:	89ab      	ldrh	r3, [r5, #12]
 800d06c:	059a      	lsls	r2, r3, #22
 800d06e:	d402      	bmi.n	800d076 <_vfiprintf_r+0x32>
 800d070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d072:	f7ff fdef 	bl	800cc54 <__retarget_lock_acquire_recursive>
 800d076:	89ab      	ldrh	r3, [r5, #12]
 800d078:	071b      	lsls	r3, r3, #28
 800d07a:	d501      	bpl.n	800d080 <_vfiprintf_r+0x3c>
 800d07c:	692b      	ldr	r3, [r5, #16]
 800d07e:	b9eb      	cbnz	r3, 800d0bc <_vfiprintf_r+0x78>
 800d080:	4629      	mov	r1, r5
 800d082:	4630      	mov	r0, r6
 800d084:	f7ff fbc0 	bl	800c808 <__swsetup_r>
 800d088:	b1c0      	cbz	r0, 800d0bc <_vfiprintf_r+0x78>
 800d08a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d08c:	07dc      	lsls	r4, r3, #31
 800d08e:	d50e      	bpl.n	800d0ae <_vfiprintf_r+0x6a>
 800d090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d094:	b01d      	add	sp, #116	; 0x74
 800d096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d09a:	4b7b      	ldr	r3, [pc, #492]	; (800d288 <_vfiprintf_r+0x244>)
 800d09c:	429d      	cmp	r5, r3
 800d09e:	d101      	bne.n	800d0a4 <_vfiprintf_r+0x60>
 800d0a0:	68b5      	ldr	r5, [r6, #8]
 800d0a2:	e7df      	b.n	800d064 <_vfiprintf_r+0x20>
 800d0a4:	4b79      	ldr	r3, [pc, #484]	; (800d28c <_vfiprintf_r+0x248>)
 800d0a6:	429d      	cmp	r5, r3
 800d0a8:	bf08      	it	eq
 800d0aa:	68f5      	ldreq	r5, [r6, #12]
 800d0ac:	e7da      	b.n	800d064 <_vfiprintf_r+0x20>
 800d0ae:	89ab      	ldrh	r3, [r5, #12]
 800d0b0:	0598      	lsls	r0, r3, #22
 800d0b2:	d4ed      	bmi.n	800d090 <_vfiprintf_r+0x4c>
 800d0b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0b6:	f7ff fdce 	bl	800cc56 <__retarget_lock_release_recursive>
 800d0ba:	e7e9      	b.n	800d090 <_vfiprintf_r+0x4c>
 800d0bc:	2300      	movs	r3, #0
 800d0be:	9309      	str	r3, [sp, #36]	; 0x24
 800d0c0:	2320      	movs	r3, #32
 800d0c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0ca:	2330      	movs	r3, #48	; 0x30
 800d0cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d290 <_vfiprintf_r+0x24c>
 800d0d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0d4:	f04f 0901 	mov.w	r9, #1
 800d0d8:	4623      	mov	r3, r4
 800d0da:	469a      	mov	sl, r3
 800d0dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0e0:	b10a      	cbz	r2, 800d0e6 <_vfiprintf_r+0xa2>
 800d0e2:	2a25      	cmp	r2, #37	; 0x25
 800d0e4:	d1f9      	bne.n	800d0da <_vfiprintf_r+0x96>
 800d0e6:	ebba 0b04 	subs.w	fp, sl, r4
 800d0ea:	d00b      	beq.n	800d104 <_vfiprintf_r+0xc0>
 800d0ec:	465b      	mov	r3, fp
 800d0ee:	4622      	mov	r2, r4
 800d0f0:	4629      	mov	r1, r5
 800d0f2:	4630      	mov	r0, r6
 800d0f4:	f7ff ff93 	bl	800d01e <__sfputs_r>
 800d0f8:	3001      	adds	r0, #1
 800d0fa:	f000 80aa 	beq.w	800d252 <_vfiprintf_r+0x20e>
 800d0fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d100:	445a      	add	r2, fp
 800d102:	9209      	str	r2, [sp, #36]	; 0x24
 800d104:	f89a 3000 	ldrb.w	r3, [sl]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	f000 80a2 	beq.w	800d252 <_vfiprintf_r+0x20e>
 800d10e:	2300      	movs	r3, #0
 800d110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d118:	f10a 0a01 	add.w	sl, sl, #1
 800d11c:	9304      	str	r3, [sp, #16]
 800d11e:	9307      	str	r3, [sp, #28]
 800d120:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d124:	931a      	str	r3, [sp, #104]	; 0x68
 800d126:	4654      	mov	r4, sl
 800d128:	2205      	movs	r2, #5
 800d12a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d12e:	4858      	ldr	r0, [pc, #352]	; (800d290 <_vfiprintf_r+0x24c>)
 800d130:	f7f3 f86e 	bl	8000210 <memchr>
 800d134:	9a04      	ldr	r2, [sp, #16]
 800d136:	b9d8      	cbnz	r0, 800d170 <_vfiprintf_r+0x12c>
 800d138:	06d1      	lsls	r1, r2, #27
 800d13a:	bf44      	itt	mi
 800d13c:	2320      	movmi	r3, #32
 800d13e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d142:	0713      	lsls	r3, r2, #28
 800d144:	bf44      	itt	mi
 800d146:	232b      	movmi	r3, #43	; 0x2b
 800d148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d14c:	f89a 3000 	ldrb.w	r3, [sl]
 800d150:	2b2a      	cmp	r3, #42	; 0x2a
 800d152:	d015      	beq.n	800d180 <_vfiprintf_r+0x13c>
 800d154:	9a07      	ldr	r2, [sp, #28]
 800d156:	4654      	mov	r4, sl
 800d158:	2000      	movs	r0, #0
 800d15a:	f04f 0c0a 	mov.w	ip, #10
 800d15e:	4621      	mov	r1, r4
 800d160:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d164:	3b30      	subs	r3, #48	; 0x30
 800d166:	2b09      	cmp	r3, #9
 800d168:	d94e      	bls.n	800d208 <_vfiprintf_r+0x1c4>
 800d16a:	b1b0      	cbz	r0, 800d19a <_vfiprintf_r+0x156>
 800d16c:	9207      	str	r2, [sp, #28]
 800d16e:	e014      	b.n	800d19a <_vfiprintf_r+0x156>
 800d170:	eba0 0308 	sub.w	r3, r0, r8
 800d174:	fa09 f303 	lsl.w	r3, r9, r3
 800d178:	4313      	orrs	r3, r2
 800d17a:	9304      	str	r3, [sp, #16]
 800d17c:	46a2      	mov	sl, r4
 800d17e:	e7d2      	b.n	800d126 <_vfiprintf_r+0xe2>
 800d180:	9b03      	ldr	r3, [sp, #12]
 800d182:	1d19      	adds	r1, r3, #4
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	9103      	str	r1, [sp, #12]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	bfbb      	ittet	lt
 800d18c:	425b      	neglt	r3, r3
 800d18e:	f042 0202 	orrlt.w	r2, r2, #2
 800d192:	9307      	strge	r3, [sp, #28]
 800d194:	9307      	strlt	r3, [sp, #28]
 800d196:	bfb8      	it	lt
 800d198:	9204      	strlt	r2, [sp, #16]
 800d19a:	7823      	ldrb	r3, [r4, #0]
 800d19c:	2b2e      	cmp	r3, #46	; 0x2e
 800d19e:	d10c      	bne.n	800d1ba <_vfiprintf_r+0x176>
 800d1a0:	7863      	ldrb	r3, [r4, #1]
 800d1a2:	2b2a      	cmp	r3, #42	; 0x2a
 800d1a4:	d135      	bne.n	800d212 <_vfiprintf_r+0x1ce>
 800d1a6:	9b03      	ldr	r3, [sp, #12]
 800d1a8:	1d1a      	adds	r2, r3, #4
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	9203      	str	r2, [sp, #12]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	bfb8      	it	lt
 800d1b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d1b6:	3402      	adds	r4, #2
 800d1b8:	9305      	str	r3, [sp, #20]
 800d1ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d2a0 <_vfiprintf_r+0x25c>
 800d1be:	7821      	ldrb	r1, [r4, #0]
 800d1c0:	2203      	movs	r2, #3
 800d1c2:	4650      	mov	r0, sl
 800d1c4:	f7f3 f824 	bl	8000210 <memchr>
 800d1c8:	b140      	cbz	r0, 800d1dc <_vfiprintf_r+0x198>
 800d1ca:	2340      	movs	r3, #64	; 0x40
 800d1cc:	eba0 000a 	sub.w	r0, r0, sl
 800d1d0:	fa03 f000 	lsl.w	r0, r3, r0
 800d1d4:	9b04      	ldr	r3, [sp, #16]
 800d1d6:	4303      	orrs	r3, r0
 800d1d8:	3401      	adds	r4, #1
 800d1da:	9304      	str	r3, [sp, #16]
 800d1dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1e0:	482c      	ldr	r0, [pc, #176]	; (800d294 <_vfiprintf_r+0x250>)
 800d1e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1e6:	2206      	movs	r2, #6
 800d1e8:	f7f3 f812 	bl	8000210 <memchr>
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	d03f      	beq.n	800d270 <_vfiprintf_r+0x22c>
 800d1f0:	4b29      	ldr	r3, [pc, #164]	; (800d298 <_vfiprintf_r+0x254>)
 800d1f2:	bb1b      	cbnz	r3, 800d23c <_vfiprintf_r+0x1f8>
 800d1f4:	9b03      	ldr	r3, [sp, #12]
 800d1f6:	3307      	adds	r3, #7
 800d1f8:	f023 0307 	bic.w	r3, r3, #7
 800d1fc:	3308      	adds	r3, #8
 800d1fe:	9303      	str	r3, [sp, #12]
 800d200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d202:	443b      	add	r3, r7
 800d204:	9309      	str	r3, [sp, #36]	; 0x24
 800d206:	e767      	b.n	800d0d8 <_vfiprintf_r+0x94>
 800d208:	fb0c 3202 	mla	r2, ip, r2, r3
 800d20c:	460c      	mov	r4, r1
 800d20e:	2001      	movs	r0, #1
 800d210:	e7a5      	b.n	800d15e <_vfiprintf_r+0x11a>
 800d212:	2300      	movs	r3, #0
 800d214:	3401      	adds	r4, #1
 800d216:	9305      	str	r3, [sp, #20]
 800d218:	4619      	mov	r1, r3
 800d21a:	f04f 0c0a 	mov.w	ip, #10
 800d21e:	4620      	mov	r0, r4
 800d220:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d224:	3a30      	subs	r2, #48	; 0x30
 800d226:	2a09      	cmp	r2, #9
 800d228:	d903      	bls.n	800d232 <_vfiprintf_r+0x1ee>
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d0c5      	beq.n	800d1ba <_vfiprintf_r+0x176>
 800d22e:	9105      	str	r1, [sp, #20]
 800d230:	e7c3      	b.n	800d1ba <_vfiprintf_r+0x176>
 800d232:	fb0c 2101 	mla	r1, ip, r1, r2
 800d236:	4604      	mov	r4, r0
 800d238:	2301      	movs	r3, #1
 800d23a:	e7f0      	b.n	800d21e <_vfiprintf_r+0x1da>
 800d23c:	ab03      	add	r3, sp, #12
 800d23e:	9300      	str	r3, [sp, #0]
 800d240:	462a      	mov	r2, r5
 800d242:	4b16      	ldr	r3, [pc, #88]	; (800d29c <_vfiprintf_r+0x258>)
 800d244:	a904      	add	r1, sp, #16
 800d246:	4630      	mov	r0, r6
 800d248:	f3af 8000 	nop.w
 800d24c:	4607      	mov	r7, r0
 800d24e:	1c78      	adds	r0, r7, #1
 800d250:	d1d6      	bne.n	800d200 <_vfiprintf_r+0x1bc>
 800d252:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d254:	07d9      	lsls	r1, r3, #31
 800d256:	d405      	bmi.n	800d264 <_vfiprintf_r+0x220>
 800d258:	89ab      	ldrh	r3, [r5, #12]
 800d25a:	059a      	lsls	r2, r3, #22
 800d25c:	d402      	bmi.n	800d264 <_vfiprintf_r+0x220>
 800d25e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d260:	f7ff fcf9 	bl	800cc56 <__retarget_lock_release_recursive>
 800d264:	89ab      	ldrh	r3, [r5, #12]
 800d266:	065b      	lsls	r3, r3, #25
 800d268:	f53f af12 	bmi.w	800d090 <_vfiprintf_r+0x4c>
 800d26c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d26e:	e711      	b.n	800d094 <_vfiprintf_r+0x50>
 800d270:	ab03      	add	r3, sp, #12
 800d272:	9300      	str	r3, [sp, #0]
 800d274:	462a      	mov	r2, r5
 800d276:	4b09      	ldr	r3, [pc, #36]	; (800d29c <_vfiprintf_r+0x258>)
 800d278:	a904      	add	r1, sp, #16
 800d27a:	4630      	mov	r0, r6
 800d27c:	f000 f880 	bl	800d380 <_printf_i>
 800d280:	e7e4      	b.n	800d24c <_vfiprintf_r+0x208>
 800d282:	bf00      	nop
 800d284:	0800ef2c 	.word	0x0800ef2c
 800d288:	0800ef4c 	.word	0x0800ef4c
 800d28c:	0800ef0c 	.word	0x0800ef0c
 800d290:	0800ef6c 	.word	0x0800ef6c
 800d294:	0800ef76 	.word	0x0800ef76
 800d298:	00000000 	.word	0x00000000
 800d29c:	0800d01f 	.word	0x0800d01f
 800d2a0:	0800ef72 	.word	0x0800ef72

0800d2a4 <_printf_common>:
 800d2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2a8:	4616      	mov	r6, r2
 800d2aa:	4699      	mov	r9, r3
 800d2ac:	688a      	ldr	r2, [r1, #8]
 800d2ae:	690b      	ldr	r3, [r1, #16]
 800d2b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	bfb8      	it	lt
 800d2b8:	4613      	movlt	r3, r2
 800d2ba:	6033      	str	r3, [r6, #0]
 800d2bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d2c0:	4607      	mov	r7, r0
 800d2c2:	460c      	mov	r4, r1
 800d2c4:	b10a      	cbz	r2, 800d2ca <_printf_common+0x26>
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	6033      	str	r3, [r6, #0]
 800d2ca:	6823      	ldr	r3, [r4, #0]
 800d2cc:	0699      	lsls	r1, r3, #26
 800d2ce:	bf42      	ittt	mi
 800d2d0:	6833      	ldrmi	r3, [r6, #0]
 800d2d2:	3302      	addmi	r3, #2
 800d2d4:	6033      	strmi	r3, [r6, #0]
 800d2d6:	6825      	ldr	r5, [r4, #0]
 800d2d8:	f015 0506 	ands.w	r5, r5, #6
 800d2dc:	d106      	bne.n	800d2ec <_printf_common+0x48>
 800d2de:	f104 0a19 	add.w	sl, r4, #25
 800d2e2:	68e3      	ldr	r3, [r4, #12]
 800d2e4:	6832      	ldr	r2, [r6, #0]
 800d2e6:	1a9b      	subs	r3, r3, r2
 800d2e8:	42ab      	cmp	r3, r5
 800d2ea:	dc26      	bgt.n	800d33a <_printf_common+0x96>
 800d2ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d2f0:	1e13      	subs	r3, r2, #0
 800d2f2:	6822      	ldr	r2, [r4, #0]
 800d2f4:	bf18      	it	ne
 800d2f6:	2301      	movne	r3, #1
 800d2f8:	0692      	lsls	r2, r2, #26
 800d2fa:	d42b      	bmi.n	800d354 <_printf_common+0xb0>
 800d2fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d300:	4649      	mov	r1, r9
 800d302:	4638      	mov	r0, r7
 800d304:	47c0      	blx	r8
 800d306:	3001      	adds	r0, #1
 800d308:	d01e      	beq.n	800d348 <_printf_common+0xa4>
 800d30a:	6823      	ldr	r3, [r4, #0]
 800d30c:	68e5      	ldr	r5, [r4, #12]
 800d30e:	6832      	ldr	r2, [r6, #0]
 800d310:	f003 0306 	and.w	r3, r3, #6
 800d314:	2b04      	cmp	r3, #4
 800d316:	bf08      	it	eq
 800d318:	1aad      	subeq	r5, r5, r2
 800d31a:	68a3      	ldr	r3, [r4, #8]
 800d31c:	6922      	ldr	r2, [r4, #16]
 800d31e:	bf0c      	ite	eq
 800d320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d324:	2500      	movne	r5, #0
 800d326:	4293      	cmp	r3, r2
 800d328:	bfc4      	itt	gt
 800d32a:	1a9b      	subgt	r3, r3, r2
 800d32c:	18ed      	addgt	r5, r5, r3
 800d32e:	2600      	movs	r6, #0
 800d330:	341a      	adds	r4, #26
 800d332:	42b5      	cmp	r5, r6
 800d334:	d11a      	bne.n	800d36c <_printf_common+0xc8>
 800d336:	2000      	movs	r0, #0
 800d338:	e008      	b.n	800d34c <_printf_common+0xa8>
 800d33a:	2301      	movs	r3, #1
 800d33c:	4652      	mov	r2, sl
 800d33e:	4649      	mov	r1, r9
 800d340:	4638      	mov	r0, r7
 800d342:	47c0      	blx	r8
 800d344:	3001      	adds	r0, #1
 800d346:	d103      	bne.n	800d350 <_printf_common+0xac>
 800d348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d34c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d350:	3501      	adds	r5, #1
 800d352:	e7c6      	b.n	800d2e2 <_printf_common+0x3e>
 800d354:	18e1      	adds	r1, r4, r3
 800d356:	1c5a      	adds	r2, r3, #1
 800d358:	2030      	movs	r0, #48	; 0x30
 800d35a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d35e:	4422      	add	r2, r4
 800d360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d368:	3302      	adds	r3, #2
 800d36a:	e7c7      	b.n	800d2fc <_printf_common+0x58>
 800d36c:	2301      	movs	r3, #1
 800d36e:	4622      	mov	r2, r4
 800d370:	4649      	mov	r1, r9
 800d372:	4638      	mov	r0, r7
 800d374:	47c0      	blx	r8
 800d376:	3001      	adds	r0, #1
 800d378:	d0e6      	beq.n	800d348 <_printf_common+0xa4>
 800d37a:	3601      	adds	r6, #1
 800d37c:	e7d9      	b.n	800d332 <_printf_common+0x8e>
	...

0800d380 <_printf_i>:
 800d380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d384:	460c      	mov	r4, r1
 800d386:	4691      	mov	r9, r2
 800d388:	7e27      	ldrb	r7, [r4, #24]
 800d38a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d38c:	2f78      	cmp	r7, #120	; 0x78
 800d38e:	4680      	mov	r8, r0
 800d390:	469a      	mov	sl, r3
 800d392:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d396:	d807      	bhi.n	800d3a8 <_printf_i+0x28>
 800d398:	2f62      	cmp	r7, #98	; 0x62
 800d39a:	d80a      	bhi.n	800d3b2 <_printf_i+0x32>
 800d39c:	2f00      	cmp	r7, #0
 800d39e:	f000 80d8 	beq.w	800d552 <_printf_i+0x1d2>
 800d3a2:	2f58      	cmp	r7, #88	; 0x58
 800d3a4:	f000 80a3 	beq.w	800d4ee <_printf_i+0x16e>
 800d3a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d3ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d3b0:	e03a      	b.n	800d428 <_printf_i+0xa8>
 800d3b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d3b6:	2b15      	cmp	r3, #21
 800d3b8:	d8f6      	bhi.n	800d3a8 <_printf_i+0x28>
 800d3ba:	a001      	add	r0, pc, #4	; (adr r0, 800d3c0 <_printf_i+0x40>)
 800d3bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d3c0:	0800d419 	.word	0x0800d419
 800d3c4:	0800d42d 	.word	0x0800d42d
 800d3c8:	0800d3a9 	.word	0x0800d3a9
 800d3cc:	0800d3a9 	.word	0x0800d3a9
 800d3d0:	0800d3a9 	.word	0x0800d3a9
 800d3d4:	0800d3a9 	.word	0x0800d3a9
 800d3d8:	0800d42d 	.word	0x0800d42d
 800d3dc:	0800d3a9 	.word	0x0800d3a9
 800d3e0:	0800d3a9 	.word	0x0800d3a9
 800d3e4:	0800d3a9 	.word	0x0800d3a9
 800d3e8:	0800d3a9 	.word	0x0800d3a9
 800d3ec:	0800d539 	.word	0x0800d539
 800d3f0:	0800d45d 	.word	0x0800d45d
 800d3f4:	0800d51b 	.word	0x0800d51b
 800d3f8:	0800d3a9 	.word	0x0800d3a9
 800d3fc:	0800d3a9 	.word	0x0800d3a9
 800d400:	0800d55b 	.word	0x0800d55b
 800d404:	0800d3a9 	.word	0x0800d3a9
 800d408:	0800d45d 	.word	0x0800d45d
 800d40c:	0800d3a9 	.word	0x0800d3a9
 800d410:	0800d3a9 	.word	0x0800d3a9
 800d414:	0800d523 	.word	0x0800d523
 800d418:	680b      	ldr	r3, [r1, #0]
 800d41a:	1d1a      	adds	r2, r3, #4
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	600a      	str	r2, [r1, #0]
 800d420:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d428:	2301      	movs	r3, #1
 800d42a:	e0a3      	b.n	800d574 <_printf_i+0x1f4>
 800d42c:	6825      	ldr	r5, [r4, #0]
 800d42e:	6808      	ldr	r0, [r1, #0]
 800d430:	062e      	lsls	r6, r5, #24
 800d432:	f100 0304 	add.w	r3, r0, #4
 800d436:	d50a      	bpl.n	800d44e <_printf_i+0xce>
 800d438:	6805      	ldr	r5, [r0, #0]
 800d43a:	600b      	str	r3, [r1, #0]
 800d43c:	2d00      	cmp	r5, #0
 800d43e:	da03      	bge.n	800d448 <_printf_i+0xc8>
 800d440:	232d      	movs	r3, #45	; 0x2d
 800d442:	426d      	negs	r5, r5
 800d444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d448:	485e      	ldr	r0, [pc, #376]	; (800d5c4 <_printf_i+0x244>)
 800d44a:	230a      	movs	r3, #10
 800d44c:	e019      	b.n	800d482 <_printf_i+0x102>
 800d44e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d452:	6805      	ldr	r5, [r0, #0]
 800d454:	600b      	str	r3, [r1, #0]
 800d456:	bf18      	it	ne
 800d458:	b22d      	sxthne	r5, r5
 800d45a:	e7ef      	b.n	800d43c <_printf_i+0xbc>
 800d45c:	680b      	ldr	r3, [r1, #0]
 800d45e:	6825      	ldr	r5, [r4, #0]
 800d460:	1d18      	adds	r0, r3, #4
 800d462:	6008      	str	r0, [r1, #0]
 800d464:	0628      	lsls	r0, r5, #24
 800d466:	d501      	bpl.n	800d46c <_printf_i+0xec>
 800d468:	681d      	ldr	r5, [r3, #0]
 800d46a:	e002      	b.n	800d472 <_printf_i+0xf2>
 800d46c:	0669      	lsls	r1, r5, #25
 800d46e:	d5fb      	bpl.n	800d468 <_printf_i+0xe8>
 800d470:	881d      	ldrh	r5, [r3, #0]
 800d472:	4854      	ldr	r0, [pc, #336]	; (800d5c4 <_printf_i+0x244>)
 800d474:	2f6f      	cmp	r7, #111	; 0x6f
 800d476:	bf0c      	ite	eq
 800d478:	2308      	moveq	r3, #8
 800d47a:	230a      	movne	r3, #10
 800d47c:	2100      	movs	r1, #0
 800d47e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d482:	6866      	ldr	r6, [r4, #4]
 800d484:	60a6      	str	r6, [r4, #8]
 800d486:	2e00      	cmp	r6, #0
 800d488:	bfa2      	ittt	ge
 800d48a:	6821      	ldrge	r1, [r4, #0]
 800d48c:	f021 0104 	bicge.w	r1, r1, #4
 800d490:	6021      	strge	r1, [r4, #0]
 800d492:	b90d      	cbnz	r5, 800d498 <_printf_i+0x118>
 800d494:	2e00      	cmp	r6, #0
 800d496:	d04d      	beq.n	800d534 <_printf_i+0x1b4>
 800d498:	4616      	mov	r6, r2
 800d49a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d49e:	fb03 5711 	mls	r7, r3, r1, r5
 800d4a2:	5dc7      	ldrb	r7, [r0, r7]
 800d4a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d4a8:	462f      	mov	r7, r5
 800d4aa:	42bb      	cmp	r3, r7
 800d4ac:	460d      	mov	r5, r1
 800d4ae:	d9f4      	bls.n	800d49a <_printf_i+0x11a>
 800d4b0:	2b08      	cmp	r3, #8
 800d4b2:	d10b      	bne.n	800d4cc <_printf_i+0x14c>
 800d4b4:	6823      	ldr	r3, [r4, #0]
 800d4b6:	07df      	lsls	r7, r3, #31
 800d4b8:	d508      	bpl.n	800d4cc <_printf_i+0x14c>
 800d4ba:	6923      	ldr	r3, [r4, #16]
 800d4bc:	6861      	ldr	r1, [r4, #4]
 800d4be:	4299      	cmp	r1, r3
 800d4c0:	bfde      	ittt	le
 800d4c2:	2330      	movle	r3, #48	; 0x30
 800d4c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d4c8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800d4cc:	1b92      	subs	r2, r2, r6
 800d4ce:	6122      	str	r2, [r4, #16]
 800d4d0:	f8cd a000 	str.w	sl, [sp]
 800d4d4:	464b      	mov	r3, r9
 800d4d6:	aa03      	add	r2, sp, #12
 800d4d8:	4621      	mov	r1, r4
 800d4da:	4640      	mov	r0, r8
 800d4dc:	f7ff fee2 	bl	800d2a4 <_printf_common>
 800d4e0:	3001      	adds	r0, #1
 800d4e2:	d14c      	bne.n	800d57e <_printf_i+0x1fe>
 800d4e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4e8:	b004      	add	sp, #16
 800d4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4ee:	4835      	ldr	r0, [pc, #212]	; (800d5c4 <_printf_i+0x244>)
 800d4f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d4f4:	6823      	ldr	r3, [r4, #0]
 800d4f6:	680e      	ldr	r6, [r1, #0]
 800d4f8:	061f      	lsls	r7, r3, #24
 800d4fa:	f856 5b04 	ldr.w	r5, [r6], #4
 800d4fe:	600e      	str	r6, [r1, #0]
 800d500:	d514      	bpl.n	800d52c <_printf_i+0x1ac>
 800d502:	07d9      	lsls	r1, r3, #31
 800d504:	bf44      	itt	mi
 800d506:	f043 0320 	orrmi.w	r3, r3, #32
 800d50a:	6023      	strmi	r3, [r4, #0]
 800d50c:	b91d      	cbnz	r5, 800d516 <_printf_i+0x196>
 800d50e:	6823      	ldr	r3, [r4, #0]
 800d510:	f023 0320 	bic.w	r3, r3, #32
 800d514:	6023      	str	r3, [r4, #0]
 800d516:	2310      	movs	r3, #16
 800d518:	e7b0      	b.n	800d47c <_printf_i+0xfc>
 800d51a:	6823      	ldr	r3, [r4, #0]
 800d51c:	f043 0320 	orr.w	r3, r3, #32
 800d520:	6023      	str	r3, [r4, #0]
 800d522:	2378      	movs	r3, #120	; 0x78
 800d524:	4828      	ldr	r0, [pc, #160]	; (800d5c8 <_printf_i+0x248>)
 800d526:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d52a:	e7e3      	b.n	800d4f4 <_printf_i+0x174>
 800d52c:	065e      	lsls	r6, r3, #25
 800d52e:	bf48      	it	mi
 800d530:	b2ad      	uxthmi	r5, r5
 800d532:	e7e6      	b.n	800d502 <_printf_i+0x182>
 800d534:	4616      	mov	r6, r2
 800d536:	e7bb      	b.n	800d4b0 <_printf_i+0x130>
 800d538:	680b      	ldr	r3, [r1, #0]
 800d53a:	6826      	ldr	r6, [r4, #0]
 800d53c:	6960      	ldr	r0, [r4, #20]
 800d53e:	1d1d      	adds	r5, r3, #4
 800d540:	600d      	str	r5, [r1, #0]
 800d542:	0635      	lsls	r5, r6, #24
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	d501      	bpl.n	800d54c <_printf_i+0x1cc>
 800d548:	6018      	str	r0, [r3, #0]
 800d54a:	e002      	b.n	800d552 <_printf_i+0x1d2>
 800d54c:	0671      	lsls	r1, r6, #25
 800d54e:	d5fb      	bpl.n	800d548 <_printf_i+0x1c8>
 800d550:	8018      	strh	r0, [r3, #0]
 800d552:	2300      	movs	r3, #0
 800d554:	6123      	str	r3, [r4, #16]
 800d556:	4616      	mov	r6, r2
 800d558:	e7ba      	b.n	800d4d0 <_printf_i+0x150>
 800d55a:	680b      	ldr	r3, [r1, #0]
 800d55c:	1d1a      	adds	r2, r3, #4
 800d55e:	600a      	str	r2, [r1, #0]
 800d560:	681e      	ldr	r6, [r3, #0]
 800d562:	6862      	ldr	r2, [r4, #4]
 800d564:	2100      	movs	r1, #0
 800d566:	4630      	mov	r0, r6
 800d568:	f7f2 fe52 	bl	8000210 <memchr>
 800d56c:	b108      	cbz	r0, 800d572 <_printf_i+0x1f2>
 800d56e:	1b80      	subs	r0, r0, r6
 800d570:	6060      	str	r0, [r4, #4]
 800d572:	6863      	ldr	r3, [r4, #4]
 800d574:	6123      	str	r3, [r4, #16]
 800d576:	2300      	movs	r3, #0
 800d578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d57c:	e7a8      	b.n	800d4d0 <_printf_i+0x150>
 800d57e:	6923      	ldr	r3, [r4, #16]
 800d580:	4632      	mov	r2, r6
 800d582:	4649      	mov	r1, r9
 800d584:	4640      	mov	r0, r8
 800d586:	47d0      	blx	sl
 800d588:	3001      	adds	r0, #1
 800d58a:	d0ab      	beq.n	800d4e4 <_printf_i+0x164>
 800d58c:	6823      	ldr	r3, [r4, #0]
 800d58e:	079b      	lsls	r3, r3, #30
 800d590:	d413      	bmi.n	800d5ba <_printf_i+0x23a>
 800d592:	68e0      	ldr	r0, [r4, #12]
 800d594:	9b03      	ldr	r3, [sp, #12]
 800d596:	4298      	cmp	r0, r3
 800d598:	bfb8      	it	lt
 800d59a:	4618      	movlt	r0, r3
 800d59c:	e7a4      	b.n	800d4e8 <_printf_i+0x168>
 800d59e:	2301      	movs	r3, #1
 800d5a0:	4632      	mov	r2, r6
 800d5a2:	4649      	mov	r1, r9
 800d5a4:	4640      	mov	r0, r8
 800d5a6:	47d0      	blx	sl
 800d5a8:	3001      	adds	r0, #1
 800d5aa:	d09b      	beq.n	800d4e4 <_printf_i+0x164>
 800d5ac:	3501      	adds	r5, #1
 800d5ae:	68e3      	ldr	r3, [r4, #12]
 800d5b0:	9903      	ldr	r1, [sp, #12]
 800d5b2:	1a5b      	subs	r3, r3, r1
 800d5b4:	42ab      	cmp	r3, r5
 800d5b6:	dcf2      	bgt.n	800d59e <_printf_i+0x21e>
 800d5b8:	e7eb      	b.n	800d592 <_printf_i+0x212>
 800d5ba:	2500      	movs	r5, #0
 800d5bc:	f104 0619 	add.w	r6, r4, #25
 800d5c0:	e7f5      	b.n	800d5ae <_printf_i+0x22e>
 800d5c2:	bf00      	nop
 800d5c4:	0800ef7d 	.word	0x0800ef7d
 800d5c8:	0800ef8e 	.word	0x0800ef8e

0800d5cc <_putc_r>:
 800d5cc:	b570      	push	{r4, r5, r6, lr}
 800d5ce:	460d      	mov	r5, r1
 800d5d0:	4614      	mov	r4, r2
 800d5d2:	4606      	mov	r6, r0
 800d5d4:	b118      	cbz	r0, 800d5de <_putc_r+0x12>
 800d5d6:	6983      	ldr	r3, [r0, #24]
 800d5d8:	b90b      	cbnz	r3, 800d5de <_putc_r+0x12>
 800d5da:	f7ff fa9d 	bl	800cb18 <__sinit>
 800d5de:	4b1c      	ldr	r3, [pc, #112]	; (800d650 <_putc_r+0x84>)
 800d5e0:	429c      	cmp	r4, r3
 800d5e2:	d124      	bne.n	800d62e <_putc_r+0x62>
 800d5e4:	6874      	ldr	r4, [r6, #4]
 800d5e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5e8:	07d8      	lsls	r0, r3, #31
 800d5ea:	d405      	bmi.n	800d5f8 <_putc_r+0x2c>
 800d5ec:	89a3      	ldrh	r3, [r4, #12]
 800d5ee:	0599      	lsls	r1, r3, #22
 800d5f0:	d402      	bmi.n	800d5f8 <_putc_r+0x2c>
 800d5f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5f4:	f7ff fb2e 	bl	800cc54 <__retarget_lock_acquire_recursive>
 800d5f8:	68a3      	ldr	r3, [r4, #8]
 800d5fa:	3b01      	subs	r3, #1
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	60a3      	str	r3, [r4, #8]
 800d600:	da05      	bge.n	800d60e <_putc_r+0x42>
 800d602:	69a2      	ldr	r2, [r4, #24]
 800d604:	4293      	cmp	r3, r2
 800d606:	db1c      	blt.n	800d642 <_putc_r+0x76>
 800d608:	b2eb      	uxtb	r3, r5
 800d60a:	2b0a      	cmp	r3, #10
 800d60c:	d019      	beq.n	800d642 <_putc_r+0x76>
 800d60e:	6823      	ldr	r3, [r4, #0]
 800d610:	1c5a      	adds	r2, r3, #1
 800d612:	6022      	str	r2, [r4, #0]
 800d614:	701d      	strb	r5, [r3, #0]
 800d616:	b2ed      	uxtb	r5, r5
 800d618:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d61a:	07da      	lsls	r2, r3, #31
 800d61c:	d405      	bmi.n	800d62a <_putc_r+0x5e>
 800d61e:	89a3      	ldrh	r3, [r4, #12]
 800d620:	059b      	lsls	r3, r3, #22
 800d622:	d402      	bmi.n	800d62a <_putc_r+0x5e>
 800d624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d626:	f7ff fb16 	bl	800cc56 <__retarget_lock_release_recursive>
 800d62a:	4628      	mov	r0, r5
 800d62c:	bd70      	pop	{r4, r5, r6, pc}
 800d62e:	4b09      	ldr	r3, [pc, #36]	; (800d654 <_putc_r+0x88>)
 800d630:	429c      	cmp	r4, r3
 800d632:	d101      	bne.n	800d638 <_putc_r+0x6c>
 800d634:	68b4      	ldr	r4, [r6, #8]
 800d636:	e7d6      	b.n	800d5e6 <_putc_r+0x1a>
 800d638:	4b07      	ldr	r3, [pc, #28]	; (800d658 <_putc_r+0x8c>)
 800d63a:	429c      	cmp	r4, r3
 800d63c:	bf08      	it	eq
 800d63e:	68f4      	ldreq	r4, [r6, #12]
 800d640:	e7d1      	b.n	800d5e6 <_putc_r+0x1a>
 800d642:	4629      	mov	r1, r5
 800d644:	4622      	mov	r2, r4
 800d646:	4630      	mov	r0, r6
 800d648:	f7ff f88c 	bl	800c764 <__swbuf_r>
 800d64c:	4605      	mov	r5, r0
 800d64e:	e7e3      	b.n	800d618 <_putc_r+0x4c>
 800d650:	0800ef2c 	.word	0x0800ef2c
 800d654:	0800ef4c 	.word	0x0800ef4c
 800d658:	0800ef0c 	.word	0x0800ef0c

0800d65c <__sread>:
 800d65c:	b510      	push	{r4, lr}
 800d65e:	460c      	mov	r4, r1
 800d660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d664:	f000 f8e2 	bl	800d82c <_read_r>
 800d668:	2800      	cmp	r0, #0
 800d66a:	bfab      	itete	ge
 800d66c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d66e:	89a3      	ldrhlt	r3, [r4, #12]
 800d670:	181b      	addge	r3, r3, r0
 800d672:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d676:	bfac      	ite	ge
 800d678:	6563      	strge	r3, [r4, #84]	; 0x54
 800d67a:	81a3      	strhlt	r3, [r4, #12]
 800d67c:	bd10      	pop	{r4, pc}

0800d67e <__swrite>:
 800d67e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d682:	461f      	mov	r7, r3
 800d684:	898b      	ldrh	r3, [r1, #12]
 800d686:	05db      	lsls	r3, r3, #23
 800d688:	4605      	mov	r5, r0
 800d68a:	460c      	mov	r4, r1
 800d68c:	4616      	mov	r6, r2
 800d68e:	d505      	bpl.n	800d69c <__swrite+0x1e>
 800d690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d694:	2302      	movs	r3, #2
 800d696:	2200      	movs	r2, #0
 800d698:	f000 f868 	bl	800d76c <_lseek_r>
 800d69c:	89a3      	ldrh	r3, [r4, #12]
 800d69e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d6a6:	81a3      	strh	r3, [r4, #12]
 800d6a8:	4632      	mov	r2, r6
 800d6aa:	463b      	mov	r3, r7
 800d6ac:	4628      	mov	r0, r5
 800d6ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6b2:	f000 b817 	b.w	800d6e4 <_write_r>

0800d6b6 <__sseek>:
 800d6b6:	b510      	push	{r4, lr}
 800d6b8:	460c      	mov	r4, r1
 800d6ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6be:	f000 f855 	bl	800d76c <_lseek_r>
 800d6c2:	1c43      	adds	r3, r0, #1
 800d6c4:	89a3      	ldrh	r3, [r4, #12]
 800d6c6:	bf15      	itete	ne
 800d6c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800d6ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d6ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d6d2:	81a3      	strheq	r3, [r4, #12]
 800d6d4:	bf18      	it	ne
 800d6d6:	81a3      	strhne	r3, [r4, #12]
 800d6d8:	bd10      	pop	{r4, pc}

0800d6da <__sclose>:
 800d6da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6de:	f000 b813 	b.w	800d708 <_close_r>
	...

0800d6e4 <_write_r>:
 800d6e4:	b538      	push	{r3, r4, r5, lr}
 800d6e6:	4d07      	ldr	r5, [pc, #28]	; (800d704 <_write_r+0x20>)
 800d6e8:	4604      	mov	r4, r0
 800d6ea:	4608      	mov	r0, r1
 800d6ec:	4611      	mov	r1, r2
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	602a      	str	r2, [r5, #0]
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	f7fe f851 	bl	800b79a <_write>
 800d6f8:	1c43      	adds	r3, r0, #1
 800d6fa:	d102      	bne.n	800d702 <_write_r+0x1e>
 800d6fc:	682b      	ldr	r3, [r5, #0]
 800d6fe:	b103      	cbz	r3, 800d702 <_write_r+0x1e>
 800d700:	6023      	str	r3, [r4, #0]
 800d702:	bd38      	pop	{r3, r4, r5, pc}
 800d704:	200025cc 	.word	0x200025cc

0800d708 <_close_r>:
 800d708:	b538      	push	{r3, r4, r5, lr}
 800d70a:	4d06      	ldr	r5, [pc, #24]	; (800d724 <_close_r+0x1c>)
 800d70c:	2300      	movs	r3, #0
 800d70e:	4604      	mov	r4, r0
 800d710:	4608      	mov	r0, r1
 800d712:	602b      	str	r3, [r5, #0]
 800d714:	f7fe f85d 	bl	800b7d2 <_close>
 800d718:	1c43      	adds	r3, r0, #1
 800d71a:	d102      	bne.n	800d722 <_close_r+0x1a>
 800d71c:	682b      	ldr	r3, [r5, #0]
 800d71e:	b103      	cbz	r3, 800d722 <_close_r+0x1a>
 800d720:	6023      	str	r3, [r4, #0]
 800d722:	bd38      	pop	{r3, r4, r5, pc}
 800d724:	200025cc 	.word	0x200025cc

0800d728 <_fstat_r>:
 800d728:	b538      	push	{r3, r4, r5, lr}
 800d72a:	4d07      	ldr	r5, [pc, #28]	; (800d748 <_fstat_r+0x20>)
 800d72c:	2300      	movs	r3, #0
 800d72e:	4604      	mov	r4, r0
 800d730:	4608      	mov	r0, r1
 800d732:	4611      	mov	r1, r2
 800d734:	602b      	str	r3, [r5, #0]
 800d736:	f7fe f858 	bl	800b7ea <_fstat>
 800d73a:	1c43      	adds	r3, r0, #1
 800d73c:	d102      	bne.n	800d744 <_fstat_r+0x1c>
 800d73e:	682b      	ldr	r3, [r5, #0]
 800d740:	b103      	cbz	r3, 800d744 <_fstat_r+0x1c>
 800d742:	6023      	str	r3, [r4, #0]
 800d744:	bd38      	pop	{r3, r4, r5, pc}
 800d746:	bf00      	nop
 800d748:	200025cc 	.word	0x200025cc

0800d74c <_isatty_r>:
 800d74c:	b538      	push	{r3, r4, r5, lr}
 800d74e:	4d06      	ldr	r5, [pc, #24]	; (800d768 <_isatty_r+0x1c>)
 800d750:	2300      	movs	r3, #0
 800d752:	4604      	mov	r4, r0
 800d754:	4608      	mov	r0, r1
 800d756:	602b      	str	r3, [r5, #0]
 800d758:	f7fe f857 	bl	800b80a <_isatty>
 800d75c:	1c43      	adds	r3, r0, #1
 800d75e:	d102      	bne.n	800d766 <_isatty_r+0x1a>
 800d760:	682b      	ldr	r3, [r5, #0]
 800d762:	b103      	cbz	r3, 800d766 <_isatty_r+0x1a>
 800d764:	6023      	str	r3, [r4, #0]
 800d766:	bd38      	pop	{r3, r4, r5, pc}
 800d768:	200025cc 	.word	0x200025cc

0800d76c <_lseek_r>:
 800d76c:	b538      	push	{r3, r4, r5, lr}
 800d76e:	4d07      	ldr	r5, [pc, #28]	; (800d78c <_lseek_r+0x20>)
 800d770:	4604      	mov	r4, r0
 800d772:	4608      	mov	r0, r1
 800d774:	4611      	mov	r1, r2
 800d776:	2200      	movs	r2, #0
 800d778:	602a      	str	r2, [r5, #0]
 800d77a:	461a      	mov	r2, r3
 800d77c:	f7fe f850 	bl	800b820 <_lseek>
 800d780:	1c43      	adds	r3, r0, #1
 800d782:	d102      	bne.n	800d78a <_lseek_r+0x1e>
 800d784:	682b      	ldr	r3, [r5, #0]
 800d786:	b103      	cbz	r3, 800d78a <_lseek_r+0x1e>
 800d788:	6023      	str	r3, [r4, #0]
 800d78a:	bd38      	pop	{r3, r4, r5, pc}
 800d78c:	200025cc 	.word	0x200025cc

0800d790 <memcpy>:
 800d790:	440a      	add	r2, r1
 800d792:	4291      	cmp	r1, r2
 800d794:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d798:	d100      	bne.n	800d79c <memcpy+0xc>
 800d79a:	4770      	bx	lr
 800d79c:	b510      	push	{r4, lr}
 800d79e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7a6:	4291      	cmp	r1, r2
 800d7a8:	d1f9      	bne.n	800d79e <memcpy+0xe>
 800d7aa:	bd10      	pop	{r4, pc}

0800d7ac <memmove>:
 800d7ac:	4288      	cmp	r0, r1
 800d7ae:	b510      	push	{r4, lr}
 800d7b0:	eb01 0402 	add.w	r4, r1, r2
 800d7b4:	d902      	bls.n	800d7bc <memmove+0x10>
 800d7b6:	4284      	cmp	r4, r0
 800d7b8:	4623      	mov	r3, r4
 800d7ba:	d807      	bhi.n	800d7cc <memmove+0x20>
 800d7bc:	1e43      	subs	r3, r0, #1
 800d7be:	42a1      	cmp	r1, r4
 800d7c0:	d008      	beq.n	800d7d4 <memmove+0x28>
 800d7c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d7ca:	e7f8      	b.n	800d7be <memmove+0x12>
 800d7cc:	4402      	add	r2, r0
 800d7ce:	4601      	mov	r1, r0
 800d7d0:	428a      	cmp	r2, r1
 800d7d2:	d100      	bne.n	800d7d6 <memmove+0x2a>
 800d7d4:	bd10      	pop	{r4, pc}
 800d7d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d7de:	e7f7      	b.n	800d7d0 <memmove+0x24>

0800d7e0 <_realloc_r>:
 800d7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7e2:	4607      	mov	r7, r0
 800d7e4:	4614      	mov	r4, r2
 800d7e6:	460e      	mov	r6, r1
 800d7e8:	b921      	cbnz	r1, 800d7f4 <_realloc_r+0x14>
 800d7ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d7ee:	4611      	mov	r1, r2
 800d7f0:	f7fe bf00 	b.w	800c5f4 <_malloc_r>
 800d7f4:	b922      	cbnz	r2, 800d800 <_realloc_r+0x20>
 800d7f6:	f7fe fead 	bl	800c554 <_free_r>
 800d7fa:	4625      	mov	r5, r4
 800d7fc:	4628      	mov	r0, r5
 800d7fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d800:	f000 f826 	bl	800d850 <_malloc_usable_size_r>
 800d804:	42a0      	cmp	r0, r4
 800d806:	d20f      	bcs.n	800d828 <_realloc_r+0x48>
 800d808:	4621      	mov	r1, r4
 800d80a:	4638      	mov	r0, r7
 800d80c:	f7fe fef2 	bl	800c5f4 <_malloc_r>
 800d810:	4605      	mov	r5, r0
 800d812:	2800      	cmp	r0, #0
 800d814:	d0f2      	beq.n	800d7fc <_realloc_r+0x1c>
 800d816:	4631      	mov	r1, r6
 800d818:	4622      	mov	r2, r4
 800d81a:	f7ff ffb9 	bl	800d790 <memcpy>
 800d81e:	4631      	mov	r1, r6
 800d820:	4638      	mov	r0, r7
 800d822:	f7fe fe97 	bl	800c554 <_free_r>
 800d826:	e7e9      	b.n	800d7fc <_realloc_r+0x1c>
 800d828:	4635      	mov	r5, r6
 800d82a:	e7e7      	b.n	800d7fc <_realloc_r+0x1c>

0800d82c <_read_r>:
 800d82c:	b538      	push	{r3, r4, r5, lr}
 800d82e:	4d07      	ldr	r5, [pc, #28]	; (800d84c <_read_r+0x20>)
 800d830:	4604      	mov	r4, r0
 800d832:	4608      	mov	r0, r1
 800d834:	4611      	mov	r1, r2
 800d836:	2200      	movs	r2, #0
 800d838:	602a      	str	r2, [r5, #0]
 800d83a:	461a      	mov	r2, r3
 800d83c:	f7fd ff90 	bl	800b760 <_read>
 800d840:	1c43      	adds	r3, r0, #1
 800d842:	d102      	bne.n	800d84a <_read_r+0x1e>
 800d844:	682b      	ldr	r3, [r5, #0]
 800d846:	b103      	cbz	r3, 800d84a <_read_r+0x1e>
 800d848:	6023      	str	r3, [r4, #0]
 800d84a:	bd38      	pop	{r3, r4, r5, pc}
 800d84c:	200025cc 	.word	0x200025cc

0800d850 <_malloc_usable_size_r>:
 800d850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d854:	1f18      	subs	r0, r3, #4
 800d856:	2b00      	cmp	r3, #0
 800d858:	bfbc      	itt	lt
 800d85a:	580b      	ldrlt	r3, [r1, r0]
 800d85c:	18c0      	addlt	r0, r0, r3
 800d85e:	4770      	bx	lr

0800d860 <_init>:
 800d860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d862:	bf00      	nop
 800d864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d866:	bc08      	pop	{r3}
 800d868:	469e      	mov	lr, r3
 800d86a:	4770      	bx	lr

0800d86c <_fini>:
 800d86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d86e:	bf00      	nop
 800d870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d872:	bc08      	pop	{r3}
 800d874:	469e      	mov	lr, r3
 800d876:	4770      	bx	lr
